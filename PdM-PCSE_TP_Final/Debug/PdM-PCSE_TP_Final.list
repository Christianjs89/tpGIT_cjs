
PdM-PCSE_TP_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004994  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004bc  08004aa0  08004aa0  00014aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f5c  08004f5c  00020134  2**0
                  CONTENTS
  4 .ARM          00000000  08004f5c  08004f5c  00020134  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f5c  08004f5c  00020134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f5c  08004f5c  00014f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f60  08004f60  00014f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000134  20000000  08004f64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  20000134  08005098  00020134  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c8  08005098  000203c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002015d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010291  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002971  00000000  00000000  00030431  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001068  00000000  00000000  00032da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ce2  00000000  00000000  00033e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000190a7  00000000  00000000  00034af2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014c45  00000000  00000000  0004db99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d7b4  00000000  00000000  000627de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004994  00000000  00000000  000eff94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000f4928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000134 	.word	0x20000134
 8000128:	00000000 	.word	0x00000000
 800012c:	08004a88 	.word	0x08004a88

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000138 	.word	0x20000138
 8000148:	08004a88 	.word	0x08004a88

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f001 faf7 	bl	8001744 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f81b 	bl	8000190 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f855 	bl	8000208 <MX_GPIO_Init>
  //MX_USART2_UART_Init();
  //MX_I2C1_Init();
  //MX_TIM2_Init();
  /* USER CODE BEGIN 2 */
  uartInit();
 800015e:	f001 fa99 	bl	8001694 <uartInit>
  i2c_init();
 8000162:	f001 fa55 	bl	8001610 <i2c_init>
  motor_init();
 8000166:	f000 fb67 	bl	8000838 <motor_init>
  timer_init();
 800016a:	f000 fbf3 	bl	8000954 <timer_init>

  debounceFSM_init();
 800016e:	f000 fa5d 	bl	800062c <debounceFSM_init>
  menuMEF_init();
 8000172:	f000 fdc1 	bl	8000cf8 <menuMEF_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  action_t menuAction = NONE; // inicializa la accion del menu en "ninguna accion"
 8000176:	2300      	movs	r3, #0
 8000178:	71fb      	strb	r3, [r7, #7]

  while(1){

	  debounceFSM_update(); // checkear el estado del pulsador y actualizar su valor
 800017a:	f000 fa67 	bl	800064c <debounceFSM_update>
	  menuAction = menuMEF_update(); // obtener la accion del pulsador (NONE, EXECUTE, NEXT)
 800017e:	f000 fe07 	bl	8000d90 <menuMEF_update>
 8000182:	4603      	mov	r3, r0
 8000184:	71fb      	strb	r3, [r7, #7]
	  menuMEF_set_state(menuAction); // ejecutar la accion correspondiente al estado y a la accion del pulsador
 8000186:	79fb      	ldrb	r3, [r7, #7]
 8000188:	4618      	mov	r0, r3
 800018a:	f000 fe57 	bl	8000e3c <menuMEF_set_state>
	  debounceFSM_update(); // checkear el estado del pulsador y actualizar su valor
 800018e:	e7f4      	b.n	800017a <main+0x2e>

08000190 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b090      	sub	sp, #64	; 0x40
 8000194:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000196:	f107 0318 	add.w	r3, r7, #24
 800019a:	2228      	movs	r2, #40	; 0x28
 800019c:	2100      	movs	r1, #0
 800019e:	4618      	mov	r0, r3
 80001a0:	f003 ffe0 	bl	8004164 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	2200      	movs	r2, #0
 80001a8:	601a      	str	r2, [r3, #0]
 80001aa:	605a      	str	r2, [r3, #4]
 80001ac:	609a      	str	r2, [r3, #8]
 80001ae:	60da      	str	r2, [r3, #12]
 80001b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001b2:	2301      	movs	r3, #1
 80001b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80001b6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80001ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001bc:	2300      	movs	r3, #0
 80001be:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001c0:	f107 0318 	add.w	r3, r7, #24
 80001c4:	4618      	mov	r0, r3
 80001c6:	f002 fadb 	bl	8002780 <HAL_RCC_OscConfig>
 80001ca:	4603      	mov	r3, r0
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d001      	beq.n	80001d4 <SystemClock_Config+0x44>
  {
    Error_Handler();
 80001d0:	f000 f888 	bl	80002e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001d4:	230f      	movs	r3, #15
 80001d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80001d8:	2301      	movs	r3, #1
 80001da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001dc:	2300      	movs	r3, #0
 80001de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001e6:	2300      	movs	r3, #0
 80001e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001ea:	1d3b      	adds	r3, r7, #4
 80001ec:	2100      	movs	r1, #0
 80001ee:	4618      	mov	r0, r3
 80001f0:	f002 fd48 	bl	8002c84 <HAL_RCC_ClockConfig>
 80001f4:	4603      	mov	r3, r0
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d001      	beq.n	80001fe <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80001fa:	f000 f873 	bl	80002e4 <Error_Handler>
  }
}
 80001fe:	bf00      	nop
 8000200:	3740      	adds	r7, #64	; 0x40
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
	...

08000208 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b088      	sub	sp, #32
 800020c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800020e:	f107 0310 	add.w	r3, r7, #16
 8000212:	2200      	movs	r2, #0
 8000214:	601a      	str	r2, [r3, #0]
 8000216:	605a      	str	r2, [r3, #4]
 8000218:	609a      	str	r2, [r3, #8]
 800021a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800021c:	4b2d      	ldr	r3, [pc, #180]	; (80002d4 <MX_GPIO_Init+0xcc>)
 800021e:	699b      	ldr	r3, [r3, #24]
 8000220:	4a2c      	ldr	r2, [pc, #176]	; (80002d4 <MX_GPIO_Init+0xcc>)
 8000222:	f043 0310 	orr.w	r3, r3, #16
 8000226:	6193      	str	r3, [r2, #24]
 8000228:	4b2a      	ldr	r3, [pc, #168]	; (80002d4 <MX_GPIO_Init+0xcc>)
 800022a:	699b      	ldr	r3, [r3, #24]
 800022c:	f003 0310 	and.w	r3, r3, #16
 8000230:	60fb      	str	r3, [r7, #12]
 8000232:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000234:	4b27      	ldr	r3, [pc, #156]	; (80002d4 <MX_GPIO_Init+0xcc>)
 8000236:	699b      	ldr	r3, [r3, #24]
 8000238:	4a26      	ldr	r2, [pc, #152]	; (80002d4 <MX_GPIO_Init+0xcc>)
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	6193      	str	r3, [r2, #24]
 8000240:	4b24      	ldr	r3, [pc, #144]	; (80002d4 <MX_GPIO_Init+0xcc>)
 8000242:	699b      	ldr	r3, [r3, #24]
 8000244:	f003 0320 	and.w	r3, r3, #32
 8000248:	60bb      	str	r3, [r7, #8]
 800024a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800024c:	4b21      	ldr	r3, [pc, #132]	; (80002d4 <MX_GPIO_Init+0xcc>)
 800024e:	699b      	ldr	r3, [r3, #24]
 8000250:	4a20      	ldr	r2, [pc, #128]	; (80002d4 <MX_GPIO_Init+0xcc>)
 8000252:	f043 0304 	orr.w	r3, r3, #4
 8000256:	6193      	str	r3, [r2, #24]
 8000258:	4b1e      	ldr	r3, [pc, #120]	; (80002d4 <MX_GPIO_Init+0xcc>)
 800025a:	699b      	ldr	r3, [r3, #24]
 800025c:	f003 0304 	and.w	r3, r3, #4
 8000260:	607b      	str	r3, [r7, #4]
 8000262:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000264:	4b1b      	ldr	r3, [pc, #108]	; (80002d4 <MX_GPIO_Init+0xcc>)
 8000266:	699b      	ldr	r3, [r3, #24]
 8000268:	4a1a      	ldr	r2, [pc, #104]	; (80002d4 <MX_GPIO_Init+0xcc>)
 800026a:	f043 0308 	orr.w	r3, r3, #8
 800026e:	6193      	str	r3, [r2, #24]
 8000270:	4b18      	ldr	r3, [pc, #96]	; (80002d4 <MX_GPIO_Init+0xcc>)
 8000272:	699b      	ldr	r3, [r3, #24]
 8000274:	f003 0308 	and.w	r3, r3, #8
 8000278:	603b      	str	r3, [r7, #0]
 800027a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIRECTION_Pin|ENABLE_Pin|LD2_Pin, GPIO_PIN_RESET);
 800027c:	2200      	movs	r2, #0
 800027e:	2132      	movs	r1, #50	; 0x32
 8000280:	4815      	ldr	r0, [pc, #84]	; (80002d8 <MX_GPIO_Init+0xd0>)
 8000282:	f001 fd8e 	bl	8001da2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000286:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800028a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800028c:	4b13      	ldr	r3, [pc, #76]	; (80002dc <MX_GPIO_Init+0xd4>)
 800028e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000290:	2300      	movs	r3, #0
 8000292:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000294:	f107 0310 	add.w	r3, r7, #16
 8000298:	4619      	mov	r1, r3
 800029a:	4811      	ldr	r0, [pc, #68]	; (80002e0 <MX_GPIO_Init+0xd8>)
 800029c:	f001 fbe6 	bl	8001a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : DIRECTION_Pin ENABLE_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DIRECTION_Pin|ENABLE_Pin|LD2_Pin;
 80002a0:	2332      	movs	r3, #50	; 0x32
 80002a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002a4:	2301      	movs	r3, #1
 80002a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002a8:	2300      	movs	r3, #0
 80002aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002ac:	2302      	movs	r3, #2
 80002ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002b0:	f107 0310 	add.w	r3, r7, #16
 80002b4:	4619      	mov	r1, r3
 80002b6:	4808      	ldr	r0, [pc, #32]	; (80002d8 <MX_GPIO_Init+0xd0>)
 80002b8:	f001 fbd8 	bl	8001a6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80002bc:	2200      	movs	r2, #0
 80002be:	2100      	movs	r1, #0
 80002c0:	2028      	movs	r0, #40	; 0x28
 80002c2:	f001 fb9c 	bl	80019fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80002c6:	2028      	movs	r0, #40	; 0x28
 80002c8:	f001 fbb5 	bl	8001a36 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80002cc:	bf00      	nop
 80002ce:	3720      	adds	r7, #32
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	40021000 	.word	0x40021000
 80002d8:	40010800 	.word	0x40010800
 80002dc:	10110000 	.word	0x10110000
 80002e0:	40011000 	.word	0x40011000

080002e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002e8:	b672      	cpsid	i
}
 80002ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002ec:	e7fe      	b.n	80002ec <Error_Handler+0x8>
	...

080002f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b085      	sub	sp, #20
 80002f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002f6:	4b15      	ldr	r3, [pc, #84]	; (800034c <HAL_MspInit+0x5c>)
 80002f8:	699b      	ldr	r3, [r3, #24]
 80002fa:	4a14      	ldr	r2, [pc, #80]	; (800034c <HAL_MspInit+0x5c>)
 80002fc:	f043 0301 	orr.w	r3, r3, #1
 8000300:	6193      	str	r3, [r2, #24]
 8000302:	4b12      	ldr	r3, [pc, #72]	; (800034c <HAL_MspInit+0x5c>)
 8000304:	699b      	ldr	r3, [r3, #24]
 8000306:	f003 0301 	and.w	r3, r3, #1
 800030a:	60bb      	str	r3, [r7, #8]
 800030c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800030e:	4b0f      	ldr	r3, [pc, #60]	; (800034c <HAL_MspInit+0x5c>)
 8000310:	69db      	ldr	r3, [r3, #28]
 8000312:	4a0e      	ldr	r2, [pc, #56]	; (800034c <HAL_MspInit+0x5c>)
 8000314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000318:	61d3      	str	r3, [r2, #28]
 800031a:	4b0c      	ldr	r3, [pc, #48]	; (800034c <HAL_MspInit+0x5c>)
 800031c:	69db      	ldr	r3, [r3, #28]
 800031e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000322:	607b      	str	r3, [r7, #4]
 8000324:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000326:	4b0a      	ldr	r3, [pc, #40]	; (8000350 <HAL_MspInit+0x60>)
 8000328:	685b      	ldr	r3, [r3, #4]
 800032a:	60fb      	str	r3, [r7, #12]
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000332:	60fb      	str	r3, [r7, #12]
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800033a:	60fb      	str	r3, [r7, #12]
 800033c:	4a04      	ldr	r2, [pc, #16]	; (8000350 <HAL_MspInit+0x60>)
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000342:	bf00      	nop
 8000344:	3714      	adds	r7, #20
 8000346:	46bd      	mov	sp, r7
 8000348:	bc80      	pop	{r7}
 800034a:	4770      	bx	lr
 800034c:	40021000 	.word	0x40021000
 8000350:	40010000 	.word	0x40010000

08000354 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b08a      	sub	sp, #40	; 0x28
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800035c:	f107 0314 	add.w	r3, r7, #20
 8000360:	2200      	movs	r2, #0
 8000362:	601a      	str	r2, [r3, #0]
 8000364:	605a      	str	r2, [r3, #4]
 8000366:	609a      	str	r2, [r3, #8]
 8000368:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	4a1d      	ldr	r2, [pc, #116]	; (80003e4 <HAL_I2C_MspInit+0x90>)
 8000370:	4293      	cmp	r3, r2
 8000372:	d132      	bne.n	80003da <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000374:	4b1c      	ldr	r3, [pc, #112]	; (80003e8 <HAL_I2C_MspInit+0x94>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	4a1b      	ldr	r2, [pc, #108]	; (80003e8 <HAL_I2C_MspInit+0x94>)
 800037a:	f043 0308 	orr.w	r3, r3, #8
 800037e:	6193      	str	r3, [r2, #24]
 8000380:	4b19      	ldr	r3, [pc, #100]	; (80003e8 <HAL_I2C_MspInit+0x94>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	f003 0308 	and.w	r3, r3, #8
 8000388:	613b      	str	r3, [r7, #16]
 800038a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800038c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000390:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000392:	2312      	movs	r3, #18
 8000394:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000396:	2303      	movs	r3, #3
 8000398:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800039a:	f107 0314 	add.w	r3, r7, #20
 800039e:	4619      	mov	r1, r3
 80003a0:	4812      	ldr	r0, [pc, #72]	; (80003ec <HAL_I2C_MspInit+0x98>)
 80003a2:	f001 fb63 	bl	8001a6c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80003a6:	4b12      	ldr	r3, [pc, #72]	; (80003f0 <HAL_I2C_MspInit+0x9c>)
 80003a8:	685b      	ldr	r3, [r3, #4]
 80003aa:	627b      	str	r3, [r7, #36]	; 0x24
 80003ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003ae:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80003b2:	627b      	str	r3, [r7, #36]	; 0x24
 80003b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003b6:	f043 0302 	orr.w	r3, r3, #2
 80003ba:	627b      	str	r3, [r7, #36]	; 0x24
 80003bc:	4a0c      	ldr	r2, [pc, #48]	; (80003f0 <HAL_I2C_MspInit+0x9c>)
 80003be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003c0:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80003c2:	4b09      	ldr	r3, [pc, #36]	; (80003e8 <HAL_I2C_MspInit+0x94>)
 80003c4:	69db      	ldr	r3, [r3, #28]
 80003c6:	4a08      	ldr	r2, [pc, #32]	; (80003e8 <HAL_I2C_MspInit+0x94>)
 80003c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80003cc:	61d3      	str	r3, [r2, #28]
 80003ce:	4b06      	ldr	r3, [pc, #24]	; (80003e8 <HAL_I2C_MspInit+0x94>)
 80003d0:	69db      	ldr	r3, [r3, #28]
 80003d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80003d6:	60fb      	str	r3, [r7, #12]
 80003d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80003da:	bf00      	nop
 80003dc:	3728      	adds	r7, #40	; 0x28
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	40005400 	.word	0x40005400
 80003e8:	40021000 	.word	0x40021000
 80003ec:	40010c00 	.word	0x40010c00
 80003f0:	40010000 	.word	0x40010000

080003f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b085      	sub	sp, #20
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000404:	d10b      	bne.n	800041e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000406:	4b08      	ldr	r3, [pc, #32]	; (8000428 <HAL_TIM_Base_MspInit+0x34>)
 8000408:	69db      	ldr	r3, [r3, #28]
 800040a:	4a07      	ldr	r2, [pc, #28]	; (8000428 <HAL_TIM_Base_MspInit+0x34>)
 800040c:	f043 0301 	orr.w	r3, r3, #1
 8000410:	61d3      	str	r3, [r2, #28]
 8000412:	4b05      	ldr	r3, [pc, #20]	; (8000428 <HAL_TIM_Base_MspInit+0x34>)
 8000414:	69db      	ldr	r3, [r3, #28]
 8000416:	f003 0301 	and.w	r3, r3, #1
 800041a:	60fb      	str	r3, [r7, #12]
 800041c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800041e:	bf00      	nop
 8000420:	3714      	adds	r7, #20
 8000422:	46bd      	mov	sp, r7
 8000424:	bc80      	pop	{r7}
 8000426:	4770      	bx	lr
 8000428:	40021000 	.word	0x40021000

0800042c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b088      	sub	sp, #32
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000434:	f107 0310 	add.w	r3, r7, #16
 8000438:	2200      	movs	r2, #0
 800043a:	601a      	str	r2, [r3, #0]
 800043c:	605a      	str	r2, [r3, #4]
 800043e:	609a      	str	r2, [r3, #8]
 8000440:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800044a:	d117      	bne.n	800047c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800044c:	4b0d      	ldr	r3, [pc, #52]	; (8000484 <HAL_TIM_MspPostInit+0x58>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	4a0c      	ldr	r2, [pc, #48]	; (8000484 <HAL_TIM_MspPostInit+0x58>)
 8000452:	f043 0304 	orr.w	r3, r3, #4
 8000456:	6193      	str	r3, [r2, #24]
 8000458:	4b0a      	ldr	r3, [pc, #40]	; (8000484 <HAL_TIM_MspPostInit+0x58>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	f003 0304 	and.w	r3, r3, #4
 8000460:	60fb      	str	r3, [r7, #12]
 8000462:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = STEP_Pin;
 8000464:	2301      	movs	r3, #1
 8000466:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000468:	2302      	movs	r3, #2
 800046a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800046c:	2302      	movs	r3, #2
 800046e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(STEP_GPIO_Port, &GPIO_InitStruct);
 8000470:	f107 0310 	add.w	r3, r7, #16
 8000474:	4619      	mov	r1, r3
 8000476:	4804      	ldr	r0, [pc, #16]	; (8000488 <HAL_TIM_MspPostInit+0x5c>)
 8000478:	f001 faf8 	bl	8001a6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800047c:	bf00      	nop
 800047e:	3720      	adds	r7, #32
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	40021000 	.word	0x40021000
 8000488:	40010800 	.word	0x40010800

0800048c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b088      	sub	sp, #32
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000494:	f107 0310 	add.w	r3, r7, #16
 8000498:	2200      	movs	r2, #0
 800049a:	601a      	str	r2, [r3, #0]
 800049c:	605a      	str	r2, [r3, #4]
 800049e:	609a      	str	r2, [r3, #8]
 80004a0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	4a15      	ldr	r2, [pc, #84]	; (80004fc <HAL_UART_MspInit+0x70>)
 80004a8:	4293      	cmp	r3, r2
 80004aa:	d123      	bne.n	80004f4 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80004ac:	4b14      	ldr	r3, [pc, #80]	; (8000500 <HAL_UART_MspInit+0x74>)
 80004ae:	69db      	ldr	r3, [r3, #28]
 80004b0:	4a13      	ldr	r2, [pc, #76]	; (8000500 <HAL_UART_MspInit+0x74>)
 80004b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004b6:	61d3      	str	r3, [r2, #28]
 80004b8:	4b11      	ldr	r3, [pc, #68]	; (8000500 <HAL_UART_MspInit+0x74>)
 80004ba:	69db      	ldr	r3, [r3, #28]
 80004bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004c0:	60fb      	str	r3, [r7, #12]
 80004c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c4:	4b0e      	ldr	r3, [pc, #56]	; (8000500 <HAL_UART_MspInit+0x74>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	4a0d      	ldr	r2, [pc, #52]	; (8000500 <HAL_UART_MspInit+0x74>)
 80004ca:	f043 0304 	orr.w	r3, r3, #4
 80004ce:	6193      	str	r3, [r2, #24]
 80004d0:	4b0b      	ldr	r3, [pc, #44]	; (8000500 <HAL_UART_MspInit+0x74>)
 80004d2:	699b      	ldr	r3, [r3, #24]
 80004d4:	f003 0304 	and.w	r3, r3, #4
 80004d8:	60bb      	str	r3, [r7, #8]
 80004da:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80004dc:	230c      	movs	r3, #12
 80004de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004e0:	2302      	movs	r3, #2
 80004e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e4:	2302      	movs	r3, #2
 80004e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e8:	f107 0310 	add.w	r3, r7, #16
 80004ec:	4619      	mov	r1, r3
 80004ee:	4805      	ldr	r0, [pc, #20]	; (8000504 <HAL_UART_MspInit+0x78>)
 80004f0:	f001 fabc 	bl	8001a6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80004f4:	bf00      	nop
 80004f6:	3720      	adds	r7, #32
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	40004400 	.word	0x40004400
 8000500:	40021000 	.word	0x40021000
 8000504:	40010800 	.word	0x40010800

08000508 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800050c:	e7fe      	b.n	800050c <NMI_Handler+0x4>

0800050e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800050e:	b480      	push	{r7}
 8000510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000512:	e7fe      	b.n	8000512 <HardFault_Handler+0x4>

08000514 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000518:	e7fe      	b.n	8000518 <MemManage_Handler+0x4>

0800051a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800051a:	b480      	push	{r7}
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800051e:	e7fe      	b.n	800051e <BusFault_Handler+0x4>

08000520 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000524:	e7fe      	b.n	8000524 <UsageFault_Handler+0x4>

08000526 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000526:	b480      	push	{r7}
 8000528:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800052a:	bf00      	nop
 800052c:	46bd      	mov	sp, r7
 800052e:	bc80      	pop	{r7}
 8000530:	4770      	bx	lr

08000532 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000532:	b480      	push	{r7}
 8000534:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000536:	bf00      	nop
 8000538:	46bd      	mov	sp, r7
 800053a:	bc80      	pop	{r7}
 800053c:	4770      	bx	lr

0800053e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800053e:	b480      	push	{r7}
 8000540:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000542:	bf00      	nop
 8000544:	46bd      	mov	sp, r7
 8000546:	bc80      	pop	{r7}
 8000548:	4770      	bx	lr

0800054a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800054a:	b580      	push	{r7, lr}
 800054c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800054e:	f001 f93f 	bl	80017d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}

08000556 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000556:	b580      	push	{r7, lr}
 8000558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800055a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800055e:	f001 fc51 	bl	8001e04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000562:	bf00      	nop
 8000564:	bd80      	pop	{r7, pc}
	...

08000568 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000570:	4a14      	ldr	r2, [pc, #80]	; (80005c4 <_sbrk+0x5c>)
 8000572:	4b15      	ldr	r3, [pc, #84]	; (80005c8 <_sbrk+0x60>)
 8000574:	1ad3      	subs	r3, r2, r3
 8000576:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000578:	697b      	ldr	r3, [r7, #20]
 800057a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800057c:	4b13      	ldr	r3, [pc, #76]	; (80005cc <_sbrk+0x64>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d102      	bne.n	800058a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000584:	4b11      	ldr	r3, [pc, #68]	; (80005cc <_sbrk+0x64>)
 8000586:	4a12      	ldr	r2, [pc, #72]	; (80005d0 <_sbrk+0x68>)
 8000588:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800058a:	4b10      	ldr	r3, [pc, #64]	; (80005cc <_sbrk+0x64>)
 800058c:	681a      	ldr	r2, [r3, #0]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	4413      	add	r3, r2
 8000592:	693a      	ldr	r2, [r7, #16]
 8000594:	429a      	cmp	r2, r3
 8000596:	d207      	bcs.n	80005a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000598:	f003 fdec 	bl	8004174 <__errno>
 800059c:	4603      	mov	r3, r0
 800059e:	220c      	movs	r2, #12
 80005a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005a2:	f04f 33ff 	mov.w	r3, #4294967295
 80005a6:	e009      	b.n	80005bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005a8:	4b08      	ldr	r3, [pc, #32]	; (80005cc <_sbrk+0x64>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005ae:	4b07      	ldr	r3, [pc, #28]	; (80005cc <_sbrk+0x64>)
 80005b0:	681a      	ldr	r2, [r3, #0]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4413      	add	r3, r2
 80005b6:	4a05      	ldr	r2, [pc, #20]	; (80005cc <_sbrk+0x64>)
 80005b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005ba:	68fb      	ldr	r3, [r7, #12]
}
 80005bc:	4618      	mov	r0, r3
 80005be:	3718      	adds	r7, #24
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20005000 	.word	0x20005000
 80005c8:	00000400 	.word	0x00000400
 80005cc:	20000150 	.word	0x20000150
 80005d0:	200003c8 	.word	0x200003c8

080005d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	bc80      	pop	{r7}
 80005de:	4770      	bx	lr

080005e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005e0:	f7ff fff8 	bl	80005d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005e4:	480b      	ldr	r0, [pc, #44]	; (8000614 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005e6:	490c      	ldr	r1, [pc, #48]	; (8000618 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005e8:	4a0c      	ldr	r2, [pc, #48]	; (800061c <LoopFillZerobss+0x16>)
  movs r3, #0
 80005ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005ec:	e002      	b.n	80005f4 <LoopCopyDataInit>

080005ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005f2:	3304      	adds	r3, #4

080005f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005f8:	d3f9      	bcc.n	80005ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005fa:	4a09      	ldr	r2, [pc, #36]	; (8000620 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80005fc:	4c09      	ldr	r4, [pc, #36]	; (8000624 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000600:	e001      	b.n	8000606 <LoopFillZerobss>

08000602 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000602:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000604:	3204      	adds	r2, #4

08000606 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000606:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000608:	d3fb      	bcc.n	8000602 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800060a:	f003 fdb9 	bl	8004180 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800060e:	f7ff fd9d 	bl	800014c <main>
  bx lr
 8000612:	4770      	bx	lr
  ldr r0, =_sdata
 8000614:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000618:	20000134 	.word	0x20000134
  ldr r2, =_sidata
 800061c:	08004f64 	.word	0x08004f64
  ldr r2, =_sbss
 8000620:	20000134 	.word	0x20000134
  ldr r4, =_ebss
 8000624:	200003c8 	.word	0x200003c8

08000628 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000628:	e7fe      	b.n	8000628 <ADC1_2_IRQHandler>
	...

0800062c <debounceFSM_init>:


/* DEFINICION DE FUNCIONES */

// Definicion de inicializacion del anti rebote
void debounceFSM_init(){
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	estado = BUTTON_UP;
 8000630:	4b04      	ldr	r3, [pc, #16]	; (8000644 <debounceFSM_init+0x18>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, RESET); // iniciar con led apagado (salida)
	delayInit(&delayHandle, DEBOUNCE_DELAY);
 8000636:	2128      	movs	r1, #40	; 0x28
 8000638:	4803      	ldr	r0, [pc, #12]	; (8000648 <debounceFSM_init+0x1c>)
 800063a:	f000 f8b5 	bl	80007a8 <delayInit>
}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20000154 	.word	0x20000154
 8000648:	20000158 	.word	0x20000158

0800064c <debounceFSM_update>:

// Definicion de actualizacion del valor del pulsador con anti rebote por software
void debounceFSM_update(){
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
	switch(estado){
 8000650:	4b34      	ldr	r3, [pc, #208]	; (8000724 <debounceFSM_update+0xd8>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b03      	cmp	r3, #3
 8000656:	d859      	bhi.n	800070c <debounceFSM_update+0xc0>
 8000658:	a201      	add	r2, pc, #4	; (adr r2, 8000660 <debounceFSM_update+0x14>)
 800065a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800065e:	bf00      	nop
 8000660:	08000671 	.word	0x08000671
 8000664:	08000689 	.word	0x08000689
 8000668:	080006bf 	.word	0x080006bf
 800066c:	080006d7 	.word	0x080006d7
	case BUTTON_UP:
		// si el pin esta low pasar al estado BUTTON_FALLING
		if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 0){
 8000670:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000674:	482c      	ldr	r0, [pc, #176]	; (8000728 <debounceFSM_update+0xdc>)
 8000676:	f001 fb7d 	bl	8001d74 <HAL_GPIO_ReadPin>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d148      	bne.n	8000712 <debounceFSM_update+0xc6>
			estado = BUTTON_FALLING;
 8000680:	4b28      	ldr	r3, [pc, #160]	; (8000724 <debounceFSM_update+0xd8>)
 8000682:	2201      	movs	r2, #1
 8000684:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000686:	e044      	b.n	8000712 <debounceFSM_update+0xc6>
	case BUTTON_FALLING:
		// si el pin esta high luego de 40 ms, volver a BUTTON_UP
		// si el pin esta low luego de 40 ms, cambiar a BUTTON_DOWN
		if(delayRead(&delayHandle) == true){ // si transcurrio el debounceDelay, muestrear pulsador nuevamente. Iniciar delay si es llamado por 1ra vez
 8000688:	4828      	ldr	r0, [pc, #160]	; (800072c <debounceFSM_update+0xe0>)
 800068a:	f000 f8aa 	bl	80007e2 <delayRead>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d040      	beq.n	8000716 <debounceFSM_update+0xca>
			if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 1){ // pulsador no presionado >> 1
 8000694:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000698:	4823      	ldr	r0, [pc, #140]	; (8000728 <debounceFSM_update+0xdc>)
 800069a:	f001 fb6b 	bl	8001d74 <HAL_GPIO_ReadPin>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b01      	cmp	r3, #1
 80006a2:	d103      	bne.n	80006ac <debounceFSM_update+0x60>
				estado = BUTTON_UP; // si sigue high, el estado vuelve a BUTTON_UP
 80006a4:	4b1f      	ldr	r3, [pc, #124]	; (8000724 <debounceFSM_update+0xd8>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	701a      	strb	r2, [r3, #0]
				buttonPressed();
				// Reemplazo del encendido del led por la deteccion unica del flanco descendente
				fallingState = true;
			}
		}
		break;
 80006aa:	e034      	b.n	8000716 <debounceFSM_update+0xca>
				estado = BUTTON_DOWN;
 80006ac:	4b1d      	ldr	r3, [pc, #116]	; (8000724 <debounceFSM_update+0xd8>)
 80006ae:	2202      	movs	r2, #2
 80006b0:	701a      	strb	r2, [r3, #0]
				buttonPressed();
 80006b2:	f000 f86d 	bl	8000790 <buttonPressed>
				fallingState = true;
 80006b6:	4b1e      	ldr	r3, [pc, #120]	; (8000730 <debounceFSM_update+0xe4>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	701a      	strb	r2, [r3, #0]
		break;
 80006bc:	e02b      	b.n	8000716 <debounceFSM_update+0xca>
	case BUTTON_DOWN:
		// si el pin esta high, pasar al estado BUTTON_RAISING
		if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 1){
 80006be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006c2:	4819      	ldr	r0, [pc, #100]	; (8000728 <debounceFSM_update+0xdc>)
 80006c4:	f001 fb56 	bl	8001d74 <HAL_GPIO_ReadPin>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d125      	bne.n	800071a <debounceFSM_update+0xce>
			estado = BUTTON_RAISING;
 80006ce:	4b15      	ldr	r3, [pc, #84]	; (8000724 <debounceFSM_update+0xd8>)
 80006d0:	2203      	movs	r2, #3
 80006d2:	701a      	strb	r2, [r3, #0]
		}
		break;
 80006d4:	e021      	b.n	800071a <debounceFSM_update+0xce>
	case BUTTON_RAISING:
		// si el pin esta low luego de 40 ms, volver a BUTTON_DOWN
		// si el pin esta high luego de 40 ms, cambiar a BUTTON_UP
		if(delayRead(&delayHandle) == true){ // si transcurrio el debounceDelay, muestrear pulsador nuevamente
 80006d6:	4815      	ldr	r0, [pc, #84]	; (800072c <debounceFSM_update+0xe0>)
 80006d8:	f000 f883 	bl	80007e2 <delayRead>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d01d      	beq.n	800071e <debounceFSM_update+0xd2>
			if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 0){ // pulsador presionado >> 0
 80006e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006e6:	4810      	ldr	r0, [pc, #64]	; (8000728 <debounceFSM_update+0xdc>)
 80006e8:	f001 fb44 	bl	8001d74 <HAL_GPIO_ReadPin>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d103      	bne.n	80006fa <debounceFSM_update+0xae>
				estado = BUTTON_DOWN; // si sigue low, el estado vuelve a BUTTON_DOWN
 80006f2:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <debounceFSM_update+0xd8>)
 80006f4:	2202      	movs	r2, #2
 80006f6:	701a      	strb	r2, [r3, #0]
				buttonReleased();
				risingState = true;
			}
		}

		break;
 80006f8:	e011      	b.n	800071e <debounceFSM_update+0xd2>
				estado = BUTTON_UP;
 80006fa:	4b0a      	ldr	r3, [pc, #40]	; (8000724 <debounceFSM_update+0xd8>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	701a      	strb	r2, [r3, #0]
				buttonReleased();
 8000700:	f000 f84c 	bl	800079c <buttonReleased>
				risingState = true;
 8000704:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <debounceFSM_update+0xe8>)
 8000706:	2201      	movs	r2, #1
 8000708:	701a      	strb	r2, [r3, #0]
		break;
 800070a:	e008      	b.n	800071e <debounceFSM_update+0xd2>
	default:
		// checkear errores
		// reiniciar estado
		debounceFSM_init();
 800070c:	f7ff ff8e 	bl	800062c <debounceFSM_init>
		break;
 8000710:	e006      	b.n	8000720 <debounceFSM_update+0xd4>
		break;
 8000712:	bf00      	nop
 8000714:	e004      	b.n	8000720 <debounceFSM_update+0xd4>
		break;
 8000716:	bf00      	nop
 8000718:	e002      	b.n	8000720 <debounceFSM_update+0xd4>
		break;
 800071a:	bf00      	nop
 800071c:	e000      	b.n	8000720 <debounceFSM_update+0xd4>
		break;
 800071e:	bf00      	nop
	}
}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000154 	.word	0x20000154
 8000728:	40011000 	.word	0x40011000
 800072c:	20000158 	.word	0x20000158
 8000730:	20000155 	.word	0x20000155
 8000734:	20000156 	.word	0x20000156

08000738 <readKey_down>:

// La funcion retorna true al detectar el flanco descendente y se autoresetea
bool_t readKey_down(){
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
	bool_t result = false;
 800073e:	2300      	movs	r3, #0
 8000740:	71fb      	strb	r3, [r7, #7]
	// retornar true solo si se detecta flanco descendente
	if(fallingState == true){
 8000742:	4b07      	ldr	r3, [pc, #28]	; (8000760 <readKey_down+0x28>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d004      	beq.n	8000754 <readKey_down+0x1c>
		fallingState = false; // resetear variable privada
 800074a:	4b05      	ldr	r3, [pc, #20]	; (8000760 <readKey_down+0x28>)
 800074c:	2200      	movs	r2, #0
 800074e:	701a      	strb	r2, [r3, #0]
		result = true;
 8000750:	2301      	movs	r3, #1
 8000752:	71fb      	strb	r3, [r7, #7]
	}
	return result;
 8000754:	79fb      	ldrb	r3, [r7, #7]
}
 8000756:	4618      	mov	r0, r3
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr
 8000760:	20000155 	.word	0x20000155

08000764 <readKey_up>:

// La funcion retorna true al detectar el flanco ascendente y se autoresetea
bool_t readKey_up(){
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
	bool_t result = false;
 800076a:	2300      	movs	r3, #0
 800076c:	71fb      	strb	r3, [r7, #7]
	// retornar true solo si se detecta flanco ascendente
	if(risingState == true){
 800076e:	4b07      	ldr	r3, [pc, #28]	; (800078c <readKey_up+0x28>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d004      	beq.n	8000780 <readKey_up+0x1c>
		risingState = false; // resetear variable privada
 8000776:	4b05      	ldr	r3, [pc, #20]	; (800078c <readKey_up+0x28>)
 8000778:	2200      	movs	r2, #0
 800077a:	701a      	strb	r2, [r3, #0]
		result = true;
 800077c:	2301      	movs	r3, #1
 800077e:	71fb      	strb	r3, [r7, #7]
	}
	return result;
 8000780:	79fb      	ldrb	r3, [r7, #7]
}
 8000782:	4618      	mov	r0, r3
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	bc80      	pop	{r7}
 800078a:	4770      	bx	lr
 800078c:	20000156 	.word	0x20000156

08000790 <buttonPressed>:


// Definicion de funcion para boton presionado
void buttonPressed(){
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, SET);
	// ejecutar la accion deseada al detectar pulsado
	//uartSendString("\r\nFlanco descendente!\r\n");
}
 8000794:	bf00      	nop
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr

0800079c <buttonReleased>:

// Definicion de funcion para boton liberado
void buttonReleased(){
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, RESET);
	// ejecutar la accion deseada al detectar liberacion
	//uartSendString("\r\nFlanco ascendente!\r\n");
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr

080007a8 <delayInit>:
/**
	* @brief Inicializacion del temporizador
	* @param delay struct {startTime, duration, running}
	* @retval Ninguno
	*/
void delayInit( delay_t * delay, tick_t duration ){
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	6039      	str	r1, [r7, #0]
	if(duration > 10000) duration = 10000; // limitar el tiempo a 10 segundos
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	f242 7210 	movw	r2, #10000	; 0x2710
 80007b8:	4293      	cmp	r3, r2
 80007ba:	d902      	bls.n	80007c2 <delayInit+0x1a>
 80007bc:	f242 7310 	movw	r3, #10000	; 0x2710
 80007c0:	603b      	str	r3, [r7, #0]
	if(duration < 5) duration = 5; // limitar el tiempo minimo a 5 ms
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	2b04      	cmp	r3, #4
 80007c6:	d801      	bhi.n	80007cc <delayInit+0x24>
 80007c8:	2305      	movs	r3, #5
 80007ca:	603b      	str	r3, [r7, #0]

	delay->duration = duration;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	683a      	ldr	r2, [r7, #0]
 80007d0:	605a      	str	r2, [r3, #4]
	delay->running = false;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2200      	movs	r2, #0
 80007d6:	721a      	strb	r2, [r3, #8]
}
 80007d8:	bf00      	nop
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	bc80      	pop	{r7}
 80007e0:	4770      	bx	lr

080007e2 <delayRead>:
/**
	* @brief Comparacion de delay vs contador milisegundos. Inicia timer si no esta en func
	* @param delay struct {startTime, duration, running}
	* @retval bool true si se cumplio el tiempo / false si no
	*/
bool_t delayRead( delay_t * delay ){
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b082      	sub	sp, #8
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	6078      	str	r0, [r7, #4]

	if(delay->running == false){ // activar timer
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	7a1b      	ldrb	r3, [r3, #8]
 80007ee:	f083 0301 	eor.w	r3, r3, #1
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d00a      	beq.n	800080e <delayRead+0x2c>
		delay->running = true;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2201      	movs	r2, #1
 80007fc:	721a      	strb	r2, [r3, #8]
		delay->startTime = HAL_GetTick(); // tomar valor de contador en [ms] actual
 80007fe:	f000 fff9 	bl	80017f4 <HAL_GetTick>
 8000802:	4603      	mov	r3, r0
 8000804:	461a      	mov	r2, r3
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	601a      	str	r2, [r3, #0]
		return false; // salir de la funcion
 800080a:	2300      	movs	r3, #0
 800080c:	e010      	b.n	8000830 <delayRead+0x4e>
	} else {
		// si running == true ya estaba activo el timer, comparar valor actual con duration
		if(HAL_GetTick() - delay->startTime > delay->duration){ // si es timeout
 800080e:	f000 fff1 	bl	80017f4 <HAL_GetTick>
 8000812:	4603      	mov	r3, r0
 8000814:	461a      	mov	r2, r3
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	1ad2      	subs	r2, r2, r3
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	429a      	cmp	r2, r3
 8000822:	d904      	bls.n	800082e <delayRead+0x4c>
			delay->running = false; // reset el flag
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2200      	movs	r2, #0
 8000828:	721a      	strb	r2, [r3, #8]
			return true;
 800082a:	2301      	movs	r3, #1
 800082c:	e000      	b.n	8000830 <delayRead+0x4e>
		} else {
			// si no es timeout
			return false;
 800082e:	2300      	movs	r3, #0
		}
	}
}
 8000830:	4618      	mov	r0, r3
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <motor_init>:


// Inicializacion de parametros del controlador DRV8825
// Parametros: ninguno
// Retorno: ninguno
void motor_init(){
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
	//motorControlHandle.direction = CW;
	motorControlHandle.enable = MOTOR_DISABLE;
 800083c:	4b03      	ldr	r3, [pc, #12]	; (800084c <motor_init+0x14>)
 800083e:	2201      	movs	r2, #1
 8000840:	705a      	strb	r2, [r3, #1]
	//motorControlHandle.frequency = MOTOR_FREQ;
	//motorControlHandle.state = MOTOR_STOP;
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	200001b0 	.word	0x200001b0

08000850 <motor_send_command>:


// Accionamiento del motor
// Parametros: <command> motorState_t es instruccion del motor > parada, giro horario o anti-horario
// Retorno: ninguno
void motor_send_command(motorState_t command){ //STOP, RUN_CW, RUN_CCW
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	71fb      	strb	r3, [r7, #7]

	switch(command){
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	2b02      	cmp	r3, #2
 800085e:	d031      	beq.n	80008c4 <motor_send_command+0x74>
 8000860:	2b02      	cmp	r3, #2
 8000862:	dc48      	bgt.n	80008f6 <motor_send_command+0xa6>
 8000864:	2b00      	cmp	r3, #0
 8000866:	d002      	beq.n	800086e <motor_send_command+0x1e>
 8000868:	2b01      	cmp	r3, #1
 800086a:	d012      	beq.n	8000892 <motor_send_command+0x42>
 800086c:	e043      	b.n	80008f6 <motor_send_command+0xa6>
	case MOTOR_STOP:
		HAL_GPIO_WritePin(LED_PORT, LED_PIN, RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	2120      	movs	r1, #32
 8000872:	482d      	ldr	r0, [pc, #180]	; (8000928 <motor_send_command+0xd8>)
 8000874:	f001 fa95 	bl	8001da2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, SET); // disable driver
 8000878:	2201      	movs	r2, #1
 800087a:	2110      	movs	r1, #16
 800087c:	482a      	ldr	r0, [pc, #168]	; (8000928 <motor_send_command+0xd8>)
 800087e:	f001 fa90 	bl	8001da2 <HAL_GPIO_WritePin>
		HAL_TIM_OC_Stop(&motorTimerHandle, TIM_CHANNEL_1); // stop timer
 8000882:	2100      	movs	r1, #0
 8000884:	4829      	ldr	r0, [pc, #164]	; (800092c <motor_send_command+0xdc>)
 8000886:	f002 fcd5 	bl	8003234 <HAL_TIM_OC_Stop>
		motorRunning = false;
 800088a:	4b29      	ldr	r3, [pc, #164]	; (8000930 <motor_send_command+0xe0>)
 800088c:	2200      	movs	r2, #0
 800088e:	701a      	strb	r2, [r3, #0]
		break;
 8000890:	e046      	b.n	8000920 <motor_send_command+0xd0>
	case MOTOR_RUN_CW:
		if(motorRunning == false){
 8000892:	4b27      	ldr	r3, [pc, #156]	; (8000930 <motor_send_command+0xe0>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	f083 0301 	eor.w	r3, r3, #1
 800089a:	b2db      	uxtb	r3, r3
 800089c:	2b00      	cmp	r3, #0
 800089e:	d03c      	beq.n	800091a <motor_send_command+0xca>
			//HAL_GPIO_WritePin(LED_PORT, LED_PIN, SET);
			HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, RESET); // enable driver
 80008a0:	2200      	movs	r2, #0
 80008a2:	2110      	movs	r1, #16
 80008a4:	4820      	ldr	r0, [pc, #128]	; (8000928 <motor_send_command+0xd8>)
 80008a6:	f001 fa7c 	bl	8001da2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIRECTION_GPIO_Port, DIRECTION_Pin, SET); // direction
 80008aa:	2201      	movs	r2, #1
 80008ac:	2102      	movs	r1, #2
 80008ae:	481e      	ldr	r0, [pc, #120]	; (8000928 <motor_send_command+0xd8>)
 80008b0:	f001 fa77 	bl	8001da2 <HAL_GPIO_WritePin>
			HAL_TIM_OC_Start(&motorTimerHandle, TIM_CHANNEL_1); // Start STEP signal
 80008b4:	2100      	movs	r1, #0
 80008b6:	481d      	ldr	r0, [pc, #116]	; (800092c <motor_send_command+0xdc>)
 80008b8:	f002 fc1a 	bl	80030f0 <HAL_TIM_OC_Start>
			motorRunning = true;
 80008bc:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <motor_send_command+0xe0>)
 80008be:	2201      	movs	r2, #1
 80008c0:	701a      	strb	r2, [r3, #0]
		}
		break;
 80008c2:	e02a      	b.n	800091a <motor_send_command+0xca>
	case MOTOR_RUN_CCW:
		if(motorRunning == false){
 80008c4:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <motor_send_command+0xe0>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	f083 0301 	eor.w	r3, r3, #1
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d025      	beq.n	800091e <motor_send_command+0xce>
			//HAL_GPIO_WritePin(LED_PORT, LED_PIN, SET);
			HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, RESET); // enable driver
 80008d2:	2200      	movs	r2, #0
 80008d4:	2110      	movs	r1, #16
 80008d6:	4814      	ldr	r0, [pc, #80]	; (8000928 <motor_send_command+0xd8>)
 80008d8:	f001 fa63 	bl	8001da2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIRECTION_GPIO_Port, DIRECTION_Pin, RESET); // direction
 80008dc:	2200      	movs	r2, #0
 80008de:	2102      	movs	r1, #2
 80008e0:	4811      	ldr	r0, [pc, #68]	; (8000928 <motor_send_command+0xd8>)
 80008e2:	f001 fa5e 	bl	8001da2 <HAL_GPIO_WritePin>
			HAL_TIM_OC_Start(&motorTimerHandle, TIM_CHANNEL_1); // Start STEP signal
 80008e6:	2100      	movs	r1, #0
 80008e8:	4810      	ldr	r0, [pc, #64]	; (800092c <motor_send_command+0xdc>)
 80008ea:	f002 fc01 	bl	80030f0 <HAL_TIM_OC_Start>
			motorRunning = true;
 80008ee:	4b10      	ldr	r3, [pc, #64]	; (8000930 <motor_send_command+0xe0>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	701a      	strb	r2, [r3, #0]
		}
		break;
 80008f4:	e013      	b.n	800091e <motor_send_command+0xce>
	default:
		//error >> stop motor
		HAL_GPIO_WritePin(LED_PORT, LED_PIN, RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2120      	movs	r1, #32
 80008fa:	480b      	ldr	r0, [pc, #44]	; (8000928 <motor_send_command+0xd8>)
 80008fc:	f001 fa51 	bl	8001da2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, SET); // disable driver
 8000900:	2201      	movs	r2, #1
 8000902:	2110      	movs	r1, #16
 8000904:	4808      	ldr	r0, [pc, #32]	; (8000928 <motor_send_command+0xd8>)
 8000906:	f001 fa4c 	bl	8001da2 <HAL_GPIO_WritePin>
		HAL_TIM_OC_Stop(&motorTimerHandle, TIM_CHANNEL_1); // stop timer
 800090a:	2100      	movs	r1, #0
 800090c:	4807      	ldr	r0, [pc, #28]	; (800092c <motor_send_command+0xdc>)
 800090e:	f002 fc91 	bl	8003234 <HAL_TIM_OC_Stop>
		motorRunning = false;
 8000912:	4b07      	ldr	r3, [pc, #28]	; (8000930 <motor_send_command+0xe0>)
 8000914:	2200      	movs	r2, #0
 8000916:	701a      	strb	r2, [r3, #0]
		break;
 8000918:	e002      	b.n	8000920 <motor_send_command+0xd0>
		break;
 800091a:	bf00      	nop
 800091c:	e000      	b.n	8000920 <motor_send_command+0xd0>
		break;
 800091e:	bf00      	nop
	}

}
 8000920:	bf00      	nop
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	40010800 	.word	0x40010800
 800092c:	20000164 	.word	0x20000164
 8000930:	200001ac 	.word	0x200001ac

08000934 <motor_config>:
// Cambio de configuracion de la "frecuencia" of velocidad de giro del motor
// Asigna el nuevo valor del 'Pulse" al TIMER2
// Parametros:
// <freq> "frecuencia" de giro del motor > CUIDADO: no es frecuencia sino periodo, es decir, a mayor <freq> mas lento gira el motor
// Corresponde al 'Pulse' del contador de TIM2 (output compare) utilizado como senal de 'STEP' al controlador DRV8825.
void motor_config( uint8_t frequency){
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	71fb      	strb	r3, [r7, #7]
	motorControlHandle.frequency = frequency;
 800093e:	4a04      	ldr	r2, [pc, #16]	; (8000950 <motor_config+0x1c>)
 8000940:	79fb      	ldrb	r3, [r7, #7]
 8000942:	7013      	strb	r3, [r2, #0]
	timer_init();
 8000944:	f000 f806 	bl	8000954 <timer_init>
}
 8000948:	bf00      	nop
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	200001b0 	.word	0x200001b0

08000954 <timer_init>:

// Inicializacion y configuracion del TIMER 2
// Debe utilizarse esta funcion al variar la frecuencia deseada del STEP del DRV8825
// Parametros: ninguno
// Retorno: ninguno
void timer_init(void){
 8000954:	b580      	push	{r7, lr}
 8000956:	b08e      	sub	sp, #56	; 0x38
 8000958:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800095a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]
 8000966:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000968:	f107 0320 	add.w	r3, r7, #32
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
 8000980:	615a      	str	r2, [r3, #20]
 8000982:	619a      	str	r2, [r3, #24]

  motorTimerHandle.Instance = TIM2;
 8000984:	4b2e      	ldr	r3, [pc, #184]	; (8000a40 <timer_init+0xec>)
 8000986:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800098a:	601a      	str	r2, [r3, #0]
  motorTimerHandle.Init.Prescaler = 1000-1; // timer contador top > resetea a 0 en 999
 800098c:	4b2c      	ldr	r3, [pc, #176]	; (8000a40 <timer_init+0xec>)
 800098e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000992:	605a      	str	r2, [r3, #4]
  motorTimerHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000994:	4b2a      	ldr	r3, [pc, #168]	; (8000a40 <timer_init+0xec>)
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
  motorTimerHandle.Init.Period = motorControlHandle.frequency - 1; // toggle pin al alcanzar el contador este valor
 800099a:	4b2a      	ldr	r3, [pc, #168]	; (8000a44 <timer_init+0xf0>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	3b01      	subs	r3, #1
 80009a0:	461a      	mov	r2, r3
 80009a2:	4b27      	ldr	r3, [pc, #156]	; (8000a40 <timer_init+0xec>)
 80009a4:	60da      	str	r2, [r3, #12]
  motorTimerHandle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a6:	4b26      	ldr	r3, [pc, #152]	; (8000a40 <timer_init+0xec>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
  motorTimerHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009ac:	4b24      	ldr	r3, [pc, #144]	; (8000a40 <timer_init+0xec>)
 80009ae:	2280      	movs	r2, #128	; 0x80
 80009b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&motorTimerHandle) != HAL_OK)
 80009b2:	4823      	ldr	r0, [pc, #140]	; (8000a40 <timer_init+0xec>)
 80009b4:	f002 faf4 	bl	8002fa0 <HAL_TIM_Base_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <timer_init+0x6e>
  {
    Error_Handler();
 80009be:	f7ff fc91 	bl	80002e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009c6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&motorTimerHandle, &sClockSourceConfig) != HAL_OK)
 80009c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009cc:	4619      	mov	r1, r3
 80009ce:	481c      	ldr	r0, [pc, #112]	; (8000a40 <timer_init+0xec>)
 80009d0:	f002 fcf0 	bl	80033b4 <HAL_TIM_ConfigClockSource>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <timer_init+0x8a>
  {
    Error_Handler();
 80009da:	f7ff fc83 	bl	80002e4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&motorTimerHandle) != HAL_OK)
 80009de:	4818      	ldr	r0, [pc, #96]	; (8000a40 <timer_init+0xec>)
 80009e0:	f002 fb2d 	bl	800303e <HAL_TIM_OC_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <timer_init+0x9a>
  {
    Error_Handler();
 80009ea:	f7ff fc7b 	bl	80002e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ee:	2300      	movs	r3, #0
 80009f0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f2:	2300      	movs	r3, #0
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&motorTimerHandle, &sMasterConfig) != HAL_OK)
 80009f6:	f107 0320 	add.w	r3, r7, #32
 80009fa:	4619      	mov	r1, r3
 80009fc:	4810      	ldr	r0, [pc, #64]	; (8000a40 <timer_init+0xec>)
 80009fe:	f003 f845 	bl	8003a8c <HAL_TIMEx_MasterConfigSynchronization>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <timer_init+0xb8>
  {
    Error_Handler();
 8000a08:	f7ff fc6c 	bl	80002e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000a0c:	2330      	movs	r3, #48	; 0x30
 8000a0e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a14:	2300      	movs	r3, #0
 8000a16:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&motorTimerHandle, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	2200      	movs	r2, #0
 8000a20:	4619      	mov	r1, r3
 8000a22:	4807      	ldr	r0, [pc, #28]	; (8000a40 <timer_init+0xec>)
 8000a24:	f002 fc6a 	bl	80032fc <HAL_TIM_OC_ConfigChannel>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <timer_init+0xde>
  {
    Error_Handler();
 8000a2e:	f7ff fc59 	bl	80002e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&motorTimerHandle);
 8000a32:	4803      	ldr	r0, [pc, #12]	; (8000a40 <timer_init+0xec>)
 8000a34:	f7ff fcfa 	bl	800042c <HAL_TIM_MspPostInit>

}
 8000a38:	bf00      	nop
 8000a3a:	3738      	adds	r7, #56	; 0x38
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20000164 	.word	0x20000164
 8000a44:	200001b0 	.word	0x200001b0

08000a48 <lcd_send_byte>:
// Envia un byte de dato/comando al LCD
// Parametros:
// <rs> tipo de byte de comando o instruccion
// <RW> tipo de comunicacion con el LCD (lectura/escritura
// Retorno: ninguno
void lcd_send_byte(uint8_t byte, bool rs, bool rw){
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	71fb      	strb	r3, [r7, #7]
 8000a52:	460b      	mov	r3, r1
 8000a54:	71bb      	strb	r3, [r7, #6]
 8000a56:	4613      	mov	r3, r2
 8000a58:	717b      	strb	r3, [r7, #5]
	// byte contains 8 bits of information  / byteType can be INSTRUCTION or DATA
	uint8_t upperByte = (byte & HIGH_NIBBLE); // mask with 1111 0000
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	f023 030f 	bic.w	r3, r3, #15
 8000a60:	73fb      	strb	r3, [r7, #15]
	uint8_t lowerByte = (byte << 4); // shift 4 to the left so lower nibble becomes high
 8000a62:	79fb      	ldrb	r3, [r7, #7]
 8000a64:	011b      	lsls	r3, r3, #4
 8000a66:	73bb      	strb	r3, [r7, #14]

	// add rs and rw bits
	upperByte |= ((rs<<RS_POS) | (rw<<RW_POS) | (BT_ON<<BT_POS));
 8000a68:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8000a6c:	797b      	ldrb	r3, [r7, #5]
 8000a6e:	005b      	lsls	r3, r3, #1
 8000a70:	b25b      	sxtb	r3, r3
 8000a72:	4313      	orrs	r3, r2
 8000a74:	b25b      	sxtb	r3, r3
 8000a76:	b2da      	uxtb	r2, r3
 8000a78:	7bfb      	ldrb	r3, [r7, #15]
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	f043 0308 	orr.w	r3, r3, #8
 8000a82:	73fb      	strb	r3, [r7, #15]
	lowerByte |= ((rs<<RS_POS) | (rw<<RW_POS) | (BT_ON<<BT_POS));
 8000a84:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8000a88:	797b      	ldrb	r3, [r7, #5]
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	b25b      	sxtb	r3, r3
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	b25b      	sxtb	r3, r3
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	7bbb      	ldrb	r3, [r7, #14]
 8000a96:	4313      	orrs	r3, r2
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	f043 0308 	orr.w	r3, r3, #8
 8000a9e:	73bb      	strb	r3, [r7, #14]
	// E bit 1 0 1 0 to create pulses in LCD controller

	uint8_t byteSequence[4] = {
 8000aa0:	7bfb      	ldrb	r3, [r7, #15]
 8000aa2:	f043 0304 	orr.w	r3, r3, #4
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	723b      	strb	r3, [r7, #8]
 8000aaa:	7bfb      	ldrb	r3, [r7, #15]
 8000aac:	727b      	strb	r3, [r7, #9]
 8000aae:	7bbb      	ldrb	r3, [r7, #14]
 8000ab0:	f043 0304 	orr.w	r3, r3, #4
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	72bb      	strb	r3, [r7, #10]
 8000ab8:	7bbb      	ldrb	r3, [r7, #14]
 8000aba:	72fb      	strb	r3, [r7, #11]
			(upperByte | (E_LOW<<E_POS)),
			(lowerByte | (E_HIGH<<E_POS)),
			(lowerByte | (E_LOW<<E_POS))
	};

	send_bytes_i2c(LCD_ADDRESS, byteSequence, 4, I2C_WRITE);
 8000abc:	f107 0108 	add.w	r1, r7, #8
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	2204      	movs	r2, #4
 8000ac4:	2027      	movs	r0, #39	; 0x27
 8000ac6:	f000 f807 	bl	8000ad8 <send_bytes_i2c>
	HAL_Delay(5);
 8000aca:	2005      	movs	r0, #5
 8000acc:	f000 fe9c 	bl	8001808 <HAL_Delay>

}
 8000ad0:	bf00      	nop
 8000ad2:	3710      	adds	r7, #16
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <send_bytes_i2c>:
// Parametros: <slaveAddress> direccion del modulo I2C (7 bits)
// <byteSequence> vector con los bytes a transmitir
// <sequenceSize> tamano del vector con bytes a transmitir
// <i2c_rw> modo de comunicacion read/write al al modulo I2C
// Retorno: ninguno
void send_bytes_i2c(uint8_t slaveAddress, uint8_t byteSequence[], uint8_t sequenceSize, bool i2c_rw){
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6039      	str	r1, [r7, #0]
 8000ae0:	4611      	mov	r1, r2
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	71fb      	strb	r3, [r7, #7]
 8000ae8:	460b      	mov	r3, r1
 8000aea:	71bb      	strb	r3, [r7, #6]
 8000aec:	4613      	mov	r3, r2
 8000aee:	717b      	strb	r3, [r7, #5]
	slaveAddress = ((slaveAddress<<1) | i2c_rw); // i2c WRITE or READ
 8000af0:	79fb      	ldrb	r3, [r7, #7]
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	b25a      	sxtb	r2, r3
 8000af6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000afa:	4313      	orrs	r3, r2
 8000afc:	b25b      	sxtb	r3, r3
 8000afe:	71fb      	strb	r3, [r7, #7]

	i2c_transmit(slaveAddress, byteSequence, sequenceSize, 100); // port
 8000b00:	79f8      	ldrb	r0, [r7, #7]
 8000b02:	79ba      	ldrb	r2, [r7, #6]
 8000b04:	2364      	movs	r3, #100	; 0x64
 8000b06:	6839      	ldr	r1, [r7, #0]
 8000b08:	f000 fdac 	bl	8001664 <i2c_transmit>
	// port HAL_I2C_Master_Transmit(&i2cHandle, slaveAddress, byteSequence, sequenceSize, 100);
}
 8000b0c:	bf00      	nop
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <lcd_clear>:

// Despeja la pantalla LCD por completo
// Parametros: ninguno
// Retorno: ninguno
void lcd_clear(){
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
	lcd_send_byte(0x01, RS_INSTRUCTION, RW_WRITE);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	2001      	movs	r0, #1
 8000b1e:	f7ff ff93 	bl	8000a48 <lcd_send_byte>
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <return_home>:

// Posicionar el cursor en la posicion 0,0 del LCD
// Parametros: ninguno
// Retorno: ninguno
void return_home(){
 8000b26:	b580      	push	{r7, lr}
 8000b28:	af00      	add	r7, sp, #0
	lcd_send_byte(0x02, RS_INSTRUCTION, RW_WRITE);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	2002      	movs	r0, #2
 8000b30:	f7ff ff8a 	bl	8000a48 <lcd_send_byte>
}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <lcd_set_position>:


// Posiciona el cursor del LCD en la fila y columna seleccionada
// Parametros: <row> fila [1,2] , <column> columna [1,16]
// Retorno: ninguno
void lcd_set_position(uint8_t row, uint8_t column){
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	460a      	mov	r2, r1
 8000b42:	71fb      	strb	r3, [r7, #7]
 8000b44:	4613      	mov	r3, r2
 8000b46:	71bb      	strb	r3, [r7, #6]
	// for LCD 16x2 check ranges
	if(row>2) row = 2;
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	2b02      	cmp	r3, #2
 8000b4c:	d901      	bls.n	8000b52 <lcd_set_position+0x1a>
 8000b4e:	2302      	movs	r3, #2
 8000b50:	71fb      	strb	r3, [r7, #7]
	if(row<1) row = 1;
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d101      	bne.n	8000b5c <lcd_set_position+0x24>
 8000b58:	2301      	movs	r3, #1
 8000b5a:	71fb      	strb	r3, [r7, #7]
	if(column>16) column = 16;
 8000b5c:	79bb      	ldrb	r3, [r7, #6]
 8000b5e:	2b10      	cmp	r3, #16
 8000b60:	d901      	bls.n	8000b66 <lcd_set_position+0x2e>
 8000b62:	2310      	movs	r3, #16
 8000b64:	71bb      	strb	r3, [r7, #6]
	if(column<1) column = 1;
 8000b66:	79bb      	ldrb	r3, [r7, #6]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d101      	bne.n	8000b70 <lcd_set_position+0x38>
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	71bb      	strb	r3, [r7, #6]

	uint8_t ddram = ddram_address_16x2[row-1][column-1];
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	1e5a      	subs	r2, r3, #1
 8000b74:	79bb      	ldrb	r3, [r7, #6]
 8000b76:	3b01      	subs	r3, #1
 8000b78:	4909      	ldr	r1, [pc, #36]	; (8000ba0 <lcd_set_position+0x68>)
 8000b7a:	0112      	lsls	r2, r2, #4
 8000b7c:	440a      	add	r2, r1
 8000b7e:	4413      	add	r3, r2
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	73fb      	strb	r3, [r7, #15]
	uint8_t ddram_cmd = ddram | (1<<7); // add a 1 in DB7 for DDRAM command
 8000b84:	7bfb      	ldrb	r3, [r7, #15]
 8000b86:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b8a:	73bb      	strb	r3, [r7, #14]
	lcd_send_byte(ddram_cmd, RS_INSTRUCTION, RW_WRITE); // send address as instruction, not data
 8000b8c:	7bbb      	ldrb	r3, [r7, #14]
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2100      	movs	r1, #0
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff ff58 	bl	8000a48 <lcd_send_byte>
}
 8000b98:	bf00      	nop
 8000b9a:	3710      	adds	r7, #16
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	08004df4 	.word	0x08004df4

08000ba4 <lcd_print_text>:

// Imprime un vector de caracteres al LCD a partir de la ultima posicion en uso
// Utilizar en conjunto con lcd_set_position
// Parametros: <text> vector de caracteres a imprimir , <size> tamano del vector de caracteres
// Retorno: ninguno
void lcd_print_text(uint8_t text[], uint8_t size){
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	460b      	mov	r3, r1
 8000bae:	70fb      	strb	r3, [r7, #3]

	for(uint8_t i = 0; i < size-1; i++){ // -1 to exclude the '/0' char
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	73fb      	strb	r3, [r7, #15]
 8000bb4:	e00e      	b.n	8000bd4 <lcd_print_text+0x30>
		HAL_Delay(1); // without this some chars go missing
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	f000 fe26 	bl	8001808 <HAL_Delay>
		lcd_send_byte(text[i], RS_DATA, RW_WRITE);
 8000bbc:	7bfb      	ldrb	r3, [r7, #15]
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2101      	movs	r1, #1
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff ff3d 	bl	8000a48 <lcd_send_byte>
	for(uint8_t i = 0; i < size-1; i++){ // -1 to exclude the '/0' char
 8000bce:	7bfb      	ldrb	r3, [r7, #15]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	73fb      	strb	r3, [r7, #15]
 8000bd4:	7bfa      	ldrb	r2, [r7, #15]
 8000bd6:	78fb      	ldrb	r3, [r7, #3]
 8000bd8:	3b01      	subs	r3, #1
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	dbeb      	blt.n	8000bb6 <lcd_print_text+0x12>
	}
}
 8000bde:	bf00      	nop
 8000be0:	bf00      	nop
 8000be2:	3710      	adds	r7, #16
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <create_character>:

// Creacion de un caracter nuevo en la memoria CGRAM del LCD
// Parametros: <index> posicion en memoria donde almacenar el vector de 8 bytes del caracter [0,7]
// <mychar> vector de 8 bytes correspondientes al caracter deseado a almacenar en la CGRAM
// Retorno: ninguno
void create_character(uint8_t index, uint8_t mychar[]){
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	6039      	str	r1, [r7, #0]
 8000bf2:	71fb      	strb	r3, [r7, #7]
	// https://maxpromer.github.io/LCD-Character-Creator/
	if(index<0) index = 0;
	if(index>7) index = 7;
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	2b07      	cmp	r3, #7
 8000bf8:	d901      	bls.n	8000bfe <create_character+0x16>
 8000bfa:	2307      	movs	r3, #7
 8000bfc:	71fb      	strb	r3, [r7, #7]

	lcd_send_byte(0x40 + 8*index, RS_INSTRUCTION, RW_WRITE); // set cgram memory from 0x40, 0x48, 0x50, etc +8
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	3308      	adds	r3, #8
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	00db      	lsls	r3, r3, #3
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff ff1b 	bl	8000a48 <lcd_send_byte>
	HAL_Delay(50);
 8000c12:	2032      	movs	r0, #50	; 0x32
 8000c14:	f000 fdf8 	bl	8001808 <HAL_Delay>

	for(uint8_t i = 0; i < 8; i++){
 8000c18:	2300      	movs	r3, #0
 8000c1a:	73fb      	strb	r3, [r7, #15]
 8000c1c:	e00e      	b.n	8000c3c <create_character+0x54>
		lcd_send_byte(mychar[i], RS_DATA, RW_WRITE);
 8000c1e:	7bfb      	ldrb	r3, [r7, #15]
 8000c20:	683a      	ldr	r2, [r7, #0]
 8000c22:	4413      	add	r3, r2
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	2200      	movs	r2, #0
 8000c28:	2101      	movs	r1, #1
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff ff0c 	bl	8000a48 <lcd_send_byte>
		HAL_Delay(10);
 8000c30:	200a      	movs	r0, #10
 8000c32:	f000 fde9 	bl	8001808 <HAL_Delay>
	for(uint8_t i = 0; i < 8; i++){
 8000c36:	7bfb      	ldrb	r3, [r7, #15]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	73fb      	strb	r3, [r7, #15]
 8000c3c:	7bfb      	ldrb	r3, [r7, #15]
 8000c3e:	2b07      	cmp	r3, #7
 8000c40:	d9ed      	bls.n	8000c1e <create_character+0x36>
	}
	HAL_Delay(100);
 8000c42:	2064      	movs	r0, #100	; 0x64
 8000c44:	f000 fde0 	bl	8001808 <HAL_Delay>

}
 8000c48:	bf00      	nop
 8000c4a:	3710      	adds	r7, #16
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <lcd_init>:


// Inicializacion del LCD de acuerdo con el proceso descripto en la hoja de datos
// Parametros: ninguno
// Retorno: ninguno
void lcd_init(){
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
	// initialization sequence p46 HD44780 datasheet
	HAL_Delay(60); // wait >40 ms
 8000c54:	203c      	movs	r0, #60	; 0x3c
 8000c56:	f000 fdd7 	bl	8001808 <HAL_Delay>
	lcd_send_byte(0x30, RS_INSTRUCTION, RW_WRITE); // 0 0 1 1 x x x x -> 0x30
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	2030      	movs	r0, #48	; 0x30
 8000c60:	f7ff fef2 	bl	8000a48 <lcd_send_byte>
	HAL_Delay(10); // wait > 4 ms
 8000c64:	200a      	movs	r0, #10
 8000c66:	f000 fdcf 	bl	8001808 <HAL_Delay>
	lcd_send_byte(0x30, RS_INSTRUCTION, RW_WRITE);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	2030      	movs	r0, #48	; 0x30
 8000c70:	f7ff feea 	bl	8000a48 <lcd_send_byte>
	HAL_Delay(10); // wait > 0.1 ms
 8000c74:	200a      	movs	r0, #10
 8000c76:	f000 fdc7 	bl	8001808 <HAL_Delay>
	lcd_send_byte(0x30, RS_INSTRUCTION, RW_WRITE);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	2030      	movs	r0, #48	; 0x30
 8000c80:	f7ff fee2 	bl	8000a48 <lcd_send_byte>
	HAL_Delay(10);
 8000c84:	200a      	movs	r0, #10
 8000c86:	f000 fdbf 	bl	8001808 <HAL_Delay>
	lcd_send_byte(0x20, RS_INSTRUCTION, RW_WRITE); // 0 0 1 DL=0 x x x x -> 0x20 / Function set: DL=4-bit mode
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	2020      	movs	r0, #32
 8000c90:	f7ff feda 	bl	8000a48 <lcd_send_byte>
	// start in 4 bit mode
	lcd_send_byte(0x28, RS_INSTRUCTION, RW_WRITE); // 0 0 1 0 N=1 F=0 x x -> 0x28 / Function set: N=2-lines, F=5x8
 8000c94:	2200      	movs	r2, #0
 8000c96:	2100      	movs	r1, #0
 8000c98:	2028      	movs	r0, #40	; 0x28
 8000c9a:	f7ff fed5 	bl	8000a48 <lcd_send_byte>
	HAL_Delay(10);
 8000c9e:	200a      	movs	r0, #10
 8000ca0:	f000 fdb2 	bl	8001808 <HAL_Delay>
	lcd_send_byte(0x08, RS_INSTRUCTION, RW_WRITE); // 0 0 0 0 1 D=0 C=0 B=0 -> 0x08 / Display control: D=display off, C=cursor off, B=blink off
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	2008      	movs	r0, #8
 8000caa:	f7ff fecd 	bl	8000a48 <lcd_send_byte>
	HAL_Delay(10);
 8000cae:	200a      	movs	r0, #10
 8000cb0:	f000 fdaa 	bl	8001808 <HAL_Delay>
	lcd_clear();
 8000cb4:	f7ff ff2e 	bl	8000b14 <lcd_clear>
	HAL_Delay(10);
 8000cb8:	200a      	movs	r0, #10
 8000cba:	f000 fda5 	bl	8001808 <HAL_Delay>
	lcd_send_byte(0x06, RS_INSTRUCTION, RW_WRITE); // 0 0 0 0 0 1 ID=1 S=0 -> 0x06/ Entry mode: ID=increment, S=no display shift
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	2006      	movs	r0, #6
 8000cc4:	f7ff fec0 	bl	8000a48 <lcd_send_byte>
	HAL_Delay(10);
 8000cc8:	200a      	movs	r0, #10
 8000cca:	f000 fd9d 	bl	8001808 <HAL_Delay>
	lcd_send_byte(0x0C, RS_INSTRUCTION, RW_WRITE); // 0 0 0 0 1 D=1 C=0 B=0 -> 0x0C / Display control:D-display on, C=cursor off, B=blink off
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	200c      	movs	r0, #12
 8000cd4:	f7ff feb8 	bl	8000a48 <lcd_send_byte>
	HAL_Delay(10);
 8000cd8:	200a      	movs	r0, #10
 8000cda:	f000 fd95 	bl	8001808 <HAL_Delay>
	lcd_clear();
 8000cde:	f7ff ff19 	bl	8000b14 <lcd_clear>
	HAL_Delay(10);
 8000ce2:	200a      	movs	r0, #10
 8000ce4:	f000 fd90 	bl	8001808 <HAL_Delay>
	return_home();
 8000ce8:	f7ff ff1d 	bl	8000b26 <return_home>
	HAL_Delay(10);
 8000cec:	200a      	movs	r0, #10
 8000cee:	f000 fd8b 	bl	8001808 <HAL_Delay>
}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
	...

08000cf8 <menuMEF_init>:
// Inicializacion del menu MEF > comienzo en Opcion 1
// Solicita el ingreso de parametros del usuario por la UART
// Inicializar el LCD indicando estado inicial
// Parametros: ninguno
// retorno: ninguno
void menuMEF_init(){
 8000cf8:	b590      	push	{r4, r7, lr}
 8000cfa:	b08d      	sub	sp, #52	; 0x34
 8000cfc:	af00      	add	r7, sp, #0
	pulseHandle.nextTime = NEXT_TIME;
 8000cfe:	4b1e      	ldr	r3, [pc, #120]	; (8000d78 <menuMEF_init+0x80>)
 8000d00:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000d04:	819a      	strh	r2, [r3, #12]
	pulseHandle.executeTime = EXECUTE_TIME;
 8000d06:	4b1c      	ldr	r3, [pc, #112]	; (8000d78 <menuMEF_init+0x80>)
 8000d08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d0c:	81da      	strh	r2, [r3, #14]
	currentState = OPTION_1;
 8000d0e:	4b1b      	ldr	r3, [pc, #108]	; (8000d7c <menuMEF_init+0x84>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	701a      	strb	r2, [r3, #0]

	// ingreso de parametros por la terminal
	menuMEF_user_input();
 8000d14:	f000 fb0a 	bl	800132c <menuMEF_user_input>

	// Comienzo del LCD
	lcd_init();
 8000d18:	f7ff ff9a 	bl	8000c50 <lcd_init>
	uint8_t welcomeText[] = "* MENU MEF *";
 8000d1c:	4b18      	ldr	r3, [pc, #96]	; (8000d80 <menuMEF_init+0x88>)
 8000d1e:	f107 0420 	add.w	r4, r7, #32
 8000d22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d24:	c407      	stmia	r4!, {r0, r1, r2}
 8000d26:	7023      	strb	r3, [r4, #0]
	lcd_print_text(welcomeText, sizeof(welcomeText)/sizeof(welcomeText[0]));
 8000d28:	f107 0320 	add.w	r3, r7, #32
 8000d2c:	210d      	movs	r1, #13
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff ff38 	bl	8000ba4 <lcd_print_text>

	// Mostrar comienzo en la terminal serie
	uartSendString("\r\n*************** Comienzo MENU MEF ****************\r\n");
 8000d34:	4813      	ldr	r0, [pc, #76]	; (8000d84 <menuMEF_init+0x8c>)
 8000d36:	f000 fc11 	bl	800155c <uartSendString>
	uint8_t buffer[32];
	sprintf(buffer, "%s\r\n", optionText[currentState]);
 8000d3a:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <menuMEF_init+0x84>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	011b      	lsls	r3, r3, #4
 8000d40:	4a11      	ldr	r2, [pc, #68]	; (8000d88 <menuMEF_init+0x90>)
 8000d42:	441a      	add	r2, r3
 8000d44:	463b      	mov	r3, r7
 8000d46:	4911      	ldr	r1, [pc, #68]	; (8000d8c <menuMEF_init+0x94>)
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f003 f9eb 	bl	8004124 <siprintf>
	uartSendString(buffer);
 8000d4e:	463b      	mov	r3, r7
 8000d50:	4618      	mov	r0, r3
 8000d52:	f000 fc03 	bl	800155c <uartSendString>

	// mostrar el estado actual en el LCD
	lcd_set_position(2, 1);
 8000d56:	2101      	movs	r1, #1
 8000d58:	2002      	movs	r0, #2
 8000d5a:	f7ff feed 	bl	8000b38 <lcd_set_position>
	lcd_print_text(optionText[currentState], sizeof(optionText)/sizeof(optionText[0]));
 8000d5e:	4b07      	ldr	r3, [pc, #28]	; (8000d7c <menuMEF_init+0x84>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	011b      	lsls	r3, r3, #4
 8000d64:	4a08      	ldr	r2, [pc, #32]	; (8000d88 <menuMEF_init+0x90>)
 8000d66:	4413      	add	r3, r2
 8000d68:	210d      	movs	r1, #13
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff ff1a 	bl	8000ba4 <lcd_print_text>
}
 8000d70:	bf00      	nop
 8000d72:	3734      	adds	r7, #52	; 0x34
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd90      	pop	{r4, r7, pc}
 8000d78:	200001b4 	.word	0x200001b4
 8000d7c:	200001b2 	.word	0x200001b2
 8000d80:	08004ae0 	.word	0x08004ae0
 8000d84:	08004aa0 	.word	0x08004aa0
 8000d88:	2000000c 	.word	0x2000000c
 8000d8c:	08004ad8 	.word	0x08004ad8

08000d90 <menuMEF_update>:

// Actualiza el estado de la MEF en funcion del largo del pulso definido en pulseHandle
// Permite la detencio de cualquier rutina al presionar el pulsador
// Parametros: ninguno
// Retorno: NEXT, EXECUTE o NONE para establecer el estado actual de la MEF en menuMEF_set_state()
action_t menuMEF_update(void){
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
	action_t command = NONE;
 8000d96:	2300      	movs	r3, #0
 8000d98:	71fb      	strb	r3, [r7, #7]
	if(readKey_down() == true){
 8000d9a:	f7ff fccd 	bl	8000738 <readKey_down>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d004      	beq.n	8000dae <menuMEF_update+0x1e>
		// comenzar conteo
		pulseHandle.startTime = HAL_GetTick(); // tiempo desde boton presionado
 8000da4:	f000 fd26 	bl	80017f4 <HAL_GetTick>
 8000da8:	4603      	mov	r3, r0
 8000daa:	4a1f      	ldr	r2, [pc, #124]	; (8000e28 <menuMEF_update+0x98>)
 8000dac:	6013      	str	r3, [r2, #0]
	}
	if(readKey_up() == true){
 8000dae:	f7ff fcd9 	bl	8000764 <readKey_up>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d032      	beq.n	8000e1e <menuMEF_update+0x8e>
		// terminar conteo y pasar de opcion o ejecutarla
		pulseHandle.stopTime = HAL_GetTick(); // tiempo desde boton presionado
 8000db8:	f000 fd1c 	bl	80017f4 <HAL_GetTick>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	4a1a      	ldr	r2, [pc, #104]	; (8000e28 <menuMEF_update+0x98>)
 8000dc0:	6053      	str	r3, [r2, #4]
		pulseHandle.deltaTime = pulseHandle.stopTime - pulseHandle.startTime; // if stop>start
 8000dc2:	4b19      	ldr	r3, [pc, #100]	; (8000e28 <menuMEF_update+0x98>)
 8000dc4:	685a      	ldr	r2, [r3, #4]
 8000dc6:	4b18      	ldr	r3, [pc, #96]	; (8000e28 <menuMEF_update+0x98>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	1ad3      	subs	r3, r2, r3
 8000dcc:	4a16      	ldr	r2, [pc, #88]	; (8000e28 <menuMEF_update+0x98>)
 8000dce:	6093      	str	r3, [r2, #8]

		if( executingRoutine == false){
 8000dd0:	4b16      	ldr	r3, [pc, #88]	; (8000e2c <menuMEF_update+0x9c>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	f083 0301 	eor.w	r3, r3, #1
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d01a      	beq.n	8000e14 <menuMEF_update+0x84>
			if(pulseHandle.deltaTime < pulseHandle.nextTime){
 8000dde:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <menuMEF_update+0x98>)
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	4a11      	ldr	r2, [pc, #68]	; (8000e28 <menuMEF_update+0x98>)
 8000de4:	8992      	ldrh	r2, [r2, #12]
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d205      	bcs.n	8000df6 <menuMEF_update+0x66>
				command = NEXT;
 8000dea:	2301      	movs	r3, #1
 8000dec:	71fb      	strb	r3, [r7, #7]
				uartSendString("NEXT\r\n");
 8000dee:	4810      	ldr	r0, [pc, #64]	; (8000e30 <menuMEF_update+0xa0>)
 8000df0:	f000 fbb4 	bl	800155c <uartSendString>
 8000df4:	e013      	b.n	8000e1e <menuMEF_update+0x8e>
			} else if (pulseHandle.deltaTime > pulseHandle.executeTime){
 8000df6:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <menuMEF_update+0x98>)
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	4a0b      	ldr	r2, [pc, #44]	; (8000e28 <menuMEF_update+0x98>)
 8000dfc:	89d2      	ldrh	r2, [r2, #14]
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d905      	bls.n	8000e0e <menuMEF_update+0x7e>
				command = EXECUTE;
 8000e02:	2303      	movs	r3, #3
 8000e04:	71fb      	strb	r3, [r7, #7]
				uartSendString("EXECUTE\r\n");
 8000e06:	480b      	ldr	r0, [pc, #44]	; (8000e34 <menuMEF_update+0xa4>)
 8000e08:	f000 fba8 	bl	800155c <uartSendString>
 8000e0c:	e007      	b.n	8000e1e <menuMEF_update+0x8e>
			} else{
				command = NONE;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	71fb      	strb	r3, [r7, #7]
 8000e12:	e004      	b.n	8000e1e <menuMEF_update+0x8e>
			}
		} else{
			command = STOP;
 8000e14:	2304      	movs	r3, #4
 8000e16:	71fb      	strb	r3, [r7, #7]
			uartSendString("STOP\r\n");
 8000e18:	4807      	ldr	r0, [pc, #28]	; (8000e38 <menuMEF_update+0xa8>)
 8000e1a:	f000 fb9f 	bl	800155c <uartSendString>
		}
	}
	return command;
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	200001b4 	.word	0x200001b4
 8000e2c:	200001c4 	.word	0x200001c4
 8000e30:	08004af0 	.word	0x08004af0
 8000e34:	08004af8 	.word	0x08004af8
 8000e38:	08004b04 	.word	0x08004b04

08000e3c <menuMEF_set_state>:


// Actualiza el estado actual del menu (MEF) y ejecuta la accion que corresponda
// Parametros: <command> tipo de dato action_t NEXT,NONE o EXECUTE en funcion del largo del pulso
// Retorno: ninguno
void menuMEF_set_state(action_t command){
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]

	if(command == STOP){
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	2b04      	cmp	r3, #4
 8000e4a:	d105      	bne.n	8000e58 <menuMEF_set_state+0x1c>
		blink_stop(LED_PORT,LED_PIN);
 8000e4c:	2120      	movs	r1, #32
 8000e4e:	4819      	ldr	r0, [pc, #100]	; (8000eb4 <menuMEF_set_state+0x78>)
 8000e50:	f000 f992 	bl	8001178 <blink_stop>
		motor_stop();
 8000e54:	f000 fa5c 	bl	8001310 <motor_stop>
	}
	if(command == NEXT){
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d10d      	bne.n	8000e7a <menuMEF_set_state+0x3e>
		if(currentState == OPTION_6){ // volver al inicio
 8000e5e:	4b16      	ldr	r3, [pc, #88]	; (8000eb8 <menuMEF_set_state+0x7c>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	2b05      	cmp	r3, #5
 8000e64:	d103      	bne.n	8000e6e <menuMEF_set_state+0x32>
			currentState = OPTION_1;
 8000e66:	4b14      	ldr	r3, [pc, #80]	; (8000eb8 <menuMEF_set_state+0x7c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	701a      	strb	r2, [r3, #0]
 8000e6c:	e005      	b.n	8000e7a <menuMEF_set_state+0x3e>
		} else {
			currentState++; // avanzar a la siguiente opcion
 8000e6e:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <menuMEF_set_state+0x7c>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	3301      	adds	r3, #1
 8000e74:	b2da      	uxtb	r2, r3
 8000e76:	4b10      	ldr	r3, [pc, #64]	; (8000eb8 <menuMEF_set_state+0x7c>)
 8000e78:	701a      	strb	r2, [r3, #0]
		}
	}
	if(command == EXECUTE){
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	2b03      	cmp	r3, #3
 8000e7e:	d105      	bne.n	8000e8c <menuMEF_set_state+0x50>
		currentState = currentState + OPTION_OFFSET; // pasar a estado EXECUTE_x
 8000e80:	4b0d      	ldr	r3, [pc, #52]	; (8000eb8 <menuMEF_set_state+0x7c>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	3306      	adds	r3, #6
 8000e86:	b2da      	uxtb	r2, r3
 8000e88:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <menuMEF_set_state+0x7c>)
 8000e8a:	701a      	strb	r2, [r3, #0]
	}
	// si hubo un pulso indicando NEXT o EXECUTE, actualizar LCD y ejecutar la rutina correspondiente
	// actualizar solo cuando hay un cambio
	if((command == EXECUTE) || (command == NEXT)){
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	2b03      	cmp	r3, #3
 8000e90:	d002      	beq.n	8000e98 <menuMEF_set_state+0x5c>
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d103      	bne.n	8000ea0 <menuMEF_set_state+0x64>
		menuMEF_update_display(command); // actualizar display LCD
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 f80e 	bl	8000ebc <menuMEF_update_display>
	}
	menuMEF_execute(currentState); // iniciar/continuar rutina si corresponde
 8000ea0:	4b05      	ldr	r3, [pc, #20]	; (8000eb8 <menuMEF_set_state+0x7c>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f000 f85b 	bl	8000f60 <menuMEF_execute>
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40010800 	.word	0x40010800
 8000eb8:	200001b2 	.word	0x200001b2

08000ebc <menuMEF_update_display>:


// Actualiza el LCD con el estado actual de la MEF
// Parametros: <command> tipo de dato action_t NEXT,NONE o EXECUTE en funcion del largo del pulso
// Retorno: ninguno
void menuMEF_update_display( action_t command){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08a      	sub	sp, #40	; 0x28
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	71fb      	strb	r3, [r7, #7]
	char buffer[32];
	// Escribir al LCD
	if((command == NEXT) || (command == BACK)){
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d002      	beq.n	8000ed2 <menuMEF_update_display+0x16>
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	2b02      	cmp	r3, #2
 8000ed0:	d11c      	bne.n	8000f0c <menuMEF_update_display+0x50>
		// enviar estado actual 'Opcion x' al LCD y a la terminal
		sprintf(buffer, "%s\r\n", optionText[currentState]);
 8000ed2:	4b20      	ldr	r3, [pc, #128]	; (8000f54 <menuMEF_update_display+0x98>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	011b      	lsls	r3, r3, #4
 8000ed8:	4a1f      	ldr	r2, [pc, #124]	; (8000f58 <menuMEF_update_display+0x9c>)
 8000eda:	441a      	add	r2, r3
 8000edc:	f107 0308 	add.w	r3, r7, #8
 8000ee0:	491e      	ldr	r1, [pc, #120]	; (8000f5c <menuMEF_update_display+0xa0>)
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f003 f91e 	bl	8004124 <siprintf>
		uartSendString(buffer);
 8000ee8:	f107 0308 	add.w	r3, r7, #8
 8000eec:	4618      	mov	r0, r3
 8000eee:	f000 fb35 	bl	800155c <uartSendString>
		lcd_set_position(2, 1);
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	2002      	movs	r0, #2
 8000ef6:	f7ff fe1f 	bl	8000b38 <lcd_set_position>
		lcd_print_text(optionText[currentState], sizeof(optionText)/sizeof(optionText[0]));
 8000efa:	4b16      	ldr	r3, [pc, #88]	; (8000f54 <menuMEF_update_display+0x98>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	011b      	lsls	r3, r3, #4
 8000f00:	4a15      	ldr	r2, [pc, #84]	; (8000f58 <menuMEF_update_display+0x9c>)
 8000f02:	4413      	add	r3, r2
 8000f04:	210d      	movs	r1, #13
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff fe4c 	bl	8000ba4 <lcd_print_text>
	}
	if(command == EXECUTE){
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	2b03      	cmp	r3, #3
 8000f10:	d11c      	bne.n	8000f4c <menuMEF_update_display+0x90>
		// enviar estado actual 'Ejecutando x' al LCD y a la terminal
		sprintf(buffer, "%s\r\n", optionText[currentState]);
 8000f12:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <menuMEF_update_display+0x98>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	4a0f      	ldr	r2, [pc, #60]	; (8000f58 <menuMEF_update_display+0x9c>)
 8000f1a:	441a      	add	r2, r3
 8000f1c:	f107 0308 	add.w	r3, r7, #8
 8000f20:	490e      	ldr	r1, [pc, #56]	; (8000f5c <menuMEF_update_display+0xa0>)
 8000f22:	4618      	mov	r0, r3
 8000f24:	f003 f8fe 	bl	8004124 <siprintf>
		uartSendString(buffer);
 8000f28:	f107 0308 	add.w	r3, r7, #8
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f000 fb15 	bl	800155c <uartSendString>
		lcd_set_position(2, 1);
 8000f32:	2101      	movs	r1, #1
 8000f34:	2002      	movs	r0, #2
 8000f36:	f7ff fdff 	bl	8000b38 <lcd_set_position>
		//lcd_print_text(optionText[currentState+OPTION_OFFSET], sizeof(optionText)/sizeof(optionText[0]));
		lcd_print_text(optionText[currentState], sizeof(optionText)/sizeof(optionText[0]));
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <menuMEF_update_display+0x98>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	011b      	lsls	r3, r3, #4
 8000f40:	4a05      	ldr	r2, [pc, #20]	; (8000f58 <menuMEF_update_display+0x9c>)
 8000f42:	4413      	add	r3, r2
 8000f44:	210d      	movs	r1, #13
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff fe2c 	bl	8000ba4 <lcd_print_text>
	}
}
 8000f4c:	bf00      	nop
 8000f4e:	3728      	adds	r7, #40	; 0x28
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	200001b2 	.word	0x200001b2
 8000f58:	2000000c 	.word	0x2000000c
 8000f5c:	08004ad8 	.word	0x08004ad8

08000f60 <menuMEF_execute>:

// Es llamado de menuMEF_set_state() y ejecuta el estado actual de la MEF
// Si no se encuentra en un estado de ejecucion, simplemente ejcuta default (ninguna accion)
// Parametros: ninguno
// Retorno: ninguno
void menuMEF_execute(){
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
	// ejecutar la opcion seleccionada
	switch (currentState){
 8000f64:	4b1f      	ldr	r3, [pc, #124]	; (8000fe4 <menuMEF_execute+0x84>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	3b06      	subs	r3, #6
 8000f6a:	2b05      	cmp	r3, #5
 8000f6c:	d837      	bhi.n	8000fde <menuMEF_execute+0x7e>
 8000f6e:	a201      	add	r2, pc, #4	; (adr r2, 8000f74 <menuMEF_execute+0x14>)
 8000f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f74:	08000f8d 	.word	0x08000f8d
 8000f78:	08000f97 	.word	0x08000f97
 8000f7c:	08000fa1 	.word	0x08000fa1
 8000f80:	08000fb5 	.word	0x08000fb5
 8000f84:	08000fc7 	.word	0x08000fc7
 8000f88:	08000fd9 	.word	0x08000fd9
	case EXECUTE_1:
		// ejecutar 1
		led_on(LED_PORT, LED_PIN);
 8000f8c:	2120      	movs	r1, #32
 8000f8e:	4816      	ldr	r0, [pc, #88]	; (8000fe8 <menuMEF_execute+0x88>)
 8000f90:	f000 f862 	bl	8001058 <led_on>
		break;
 8000f94:	e024      	b.n	8000fe0 <menuMEF_execute+0x80>
	case EXECUTE_2:
		// ejecutar 2
		led_off(LED_PORT, LED_PIN);
 8000f96:	2120      	movs	r1, #32
 8000f98:	4813      	ldr	r0, [pc, #76]	; (8000fe8 <menuMEF_execute+0x88>)
 8000f9a:	f000 f877 	bl	800108c <led_off>
		break;
 8000f9e:	e01f      	b.n	8000fe0 <menuMEF_execute+0x80>
	case EXECUTE_3:
		// ejecutar 3
		blink_led(LED_PORT, LED_PIN, blinkPeriod, blinkRepeat);
 8000fa0:	4b12      	ldr	r3, [pc, #72]	; (8000fec <menuMEF_execute+0x8c>)
 8000fa2:	881a      	ldrh	r2, [r3, #0]
 8000fa4:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <menuMEF_execute+0x90>)
 8000fa6:	881b      	ldrh	r3, [r3, #0]
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	2120      	movs	r1, #32
 8000fac:	480e      	ldr	r0, [pc, #56]	; (8000fe8 <menuMEF_execute+0x88>)
 8000fae:	f000 f887 	bl	80010c0 <blink_led>
		break;
 8000fb2:	e015      	b.n	8000fe0 <menuMEF_execute+0x80>
	case EXECUTE_4:
		// ejecutar 4 motor CW
		motor_run(MOTOR_RUN_CW, motorFrequency, motorTimer);
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <menuMEF_execute+0x94>)
 8000fb6:	881b      	ldrh	r3, [r3, #0]
 8000fb8:	4a0f      	ldr	r2, [pc, #60]	; (8000ff8 <menuMEF_execute+0x98>)
 8000fba:	8812      	ldrh	r2, [r2, #0]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	2001      	movs	r0, #1
 8000fc0:	f000 f974 	bl	80012ac <motor_run>
		break;
 8000fc4:	e00c      	b.n	8000fe0 <menuMEF_execute+0x80>
	case EXECUTE_5:
		// ejecutar 5 motor CCW
		motor_run(MOTOR_RUN_CCW, motorFrequency, motorTimer);
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <menuMEF_execute+0x94>)
 8000fc8:	881b      	ldrh	r3, [r3, #0]
 8000fca:	4a0b      	ldr	r2, [pc, #44]	; (8000ff8 <menuMEF_execute+0x98>)
 8000fcc:	8812      	ldrh	r2, [r2, #0]
 8000fce:	4619      	mov	r1, r3
 8000fd0:	2002      	movs	r0, #2
 8000fd2:	f000 f96b 	bl	80012ac <motor_run>
		break;
 8000fd6:	e003      	b.n	8000fe0 <menuMEF_execute+0x80>
	case EXECUTE_6:
		// ejecutar 6
		free_routine();
 8000fd8:	f000 f8ea 	bl	80011b0 <free_routine>
		break;
 8000fdc:	e000      	b.n	8000fe0 <menuMEF_execute+0x80>
	default:
		// no ejecutar nada
		break;
 8000fde:	bf00      	nop
	}
}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	200001b2 	.word	0x200001b2
 8000fe8:	40010800 	.word	0x40010800
 8000fec:	20000004 	.word	0x20000004
 8000ff0:	20000006 	.word	0x20000006
 8000ff4:	2000000a 	.word	0x2000000a
 8000ff8:	20000008 	.word	0x20000008

08000ffc <menuMEF_reset_state>:

// Resetea el estado de la MEF al terminar la ejecucion de una rutina
// Actualiza el LCD y la terminal serie
// Parametros: ninguno
// Retorno: ninguno
void menuMEF_reset_state(){
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
	if((currentState >= EXECUTE_1) & (currentState <= EXECUTE_6) & (executingRoutine == false)){
 8001000:	4b13      	ldr	r3, [pc, #76]	; (8001050 <menuMEF_reset_state+0x54>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b05      	cmp	r3, #5
 8001006:	bf8c      	ite	hi
 8001008:	2301      	movhi	r3, #1
 800100a:	2300      	movls	r3, #0
 800100c:	b2da      	uxtb	r2, r3
 800100e:	4b10      	ldr	r3, [pc, #64]	; (8001050 <menuMEF_reset_state+0x54>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	2b0b      	cmp	r3, #11
 8001014:	bf94      	ite	ls
 8001016:	2301      	movls	r3, #1
 8001018:	2300      	movhi	r3, #0
 800101a:	b2db      	uxtb	r3, r3
 800101c:	4013      	ands	r3, r2
 800101e:	b2db      	uxtb	r3, r3
 8001020:	461a      	mov	r2, r3
 8001022:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <menuMEF_reset_state+0x58>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	f083 0301 	eor.w	r3, r3, #1
 800102a:	b2db      	uxtb	r3, r3
 800102c:	4013      	ands	r3, r2
 800102e:	2b00      	cmp	r3, #0
 8001030:	d005      	beq.n	800103e <menuMEF_reset_state+0x42>
		currentState = currentState - OPTION_OFFSET;
 8001032:	4b07      	ldr	r3, [pc, #28]	; (8001050 <menuMEF_reset_state+0x54>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	3b06      	subs	r3, #6
 8001038:	b2da      	uxtb	r2, r3
 800103a:	4b05      	ldr	r3, [pc, #20]	; (8001050 <menuMEF_reset_state+0x54>)
 800103c:	701a      	strb	r2, [r3, #0]
	}
	executingRoutine = false;
 800103e:	4b05      	ldr	r3, [pc, #20]	; (8001054 <menuMEF_reset_state+0x58>)
 8001040:	2200      	movs	r2, #0
 8001042:	701a      	strb	r2, [r3, #0]
	menuMEF_update_display(BACK);
 8001044:	2002      	movs	r0, #2
 8001046:	f7ff ff39 	bl	8000ebc <menuMEF_update_display>
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	200001b2 	.word	0x200001b2
 8001054:	200001c4 	.word	0x200001c4

08001058 <led_on>:


// Enciende el LED indicado en port/pin
// Parametros: <port> puerto GPIO, <pin> pin del puerto GPIO
// Retorno: ninguno
void led_on(GPIO_TypeDef * port, uint16_t pin ){
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	460b      	mov	r3, r1
 8001062:	807b      	strh	r3, [r7, #2]
	executingRoutine = true;
 8001064:	4b08      	ldr	r3, [pc, #32]	; (8001088 <led_on+0x30>)
 8001066:	2201      	movs	r2, #1
 8001068:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(port, pin, SET);
 800106a:	887b      	ldrh	r3, [r7, #2]
 800106c:	2201      	movs	r2, #1
 800106e:	4619      	mov	r1, r3
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f000 fe96 	bl	8001da2 <HAL_GPIO_WritePin>
	executingRoutine = false;
 8001076:	4b04      	ldr	r3, [pc, #16]	; (8001088 <led_on+0x30>)
 8001078:	2200      	movs	r2, #0
 800107a:	701a      	strb	r2, [r3, #0]
	menuMEF_reset_state();
 800107c:	f7ff ffbe 	bl	8000ffc <menuMEF_reset_state>
}
 8001080:	bf00      	nop
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	200001c4 	.word	0x200001c4

0800108c <led_off>:


// Apaga el LED indicado en port/pin
// Parametros: <port> puerto GPIO, <pin> pin del puerto GPIO
// Retorno: ninguno
void led_off(GPIO_TypeDef * port, uint16_t pin ){
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	460b      	mov	r3, r1
 8001096:	807b      	strh	r3, [r7, #2]
	executingRoutine = true;
 8001098:	4b08      	ldr	r3, [pc, #32]	; (80010bc <led_off+0x30>)
 800109a:	2201      	movs	r2, #1
 800109c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(port, pin, RESET);
 800109e:	887b      	ldrh	r3, [r7, #2]
 80010a0:	2200      	movs	r2, #0
 80010a2:	4619      	mov	r1, r3
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f000 fe7c 	bl	8001da2 <HAL_GPIO_WritePin>
	executingRoutine = false;
 80010aa:	4b04      	ldr	r3, [pc, #16]	; (80010bc <led_off+0x30>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	701a      	strb	r2, [r3, #0]
	menuMEF_reset_state();
 80010b0:	f7ff ffa4 	bl	8000ffc <menuMEF_reset_state>
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	200001c4 	.word	0x200001c4

080010c0 <blink_led>:

// Rutina de parpadeo del led definido en port/pin con el periodo <period> y una cantidad de veces <repeat>
// Parametros: <port> puerto GPIO, <pin> pin del puerto GPIO
// <period> tiempo en ms del medio ciclo del parpadeo, <repeat> cantidad de repeticiones de parpadeo
// Retorno: ninguno
void blink_led(GPIO_TypeDef * port, uint16_t pin, uint16_t period, uint8_t repeat){
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	4608      	mov	r0, r1
 80010ca:	4611      	mov	r1, r2
 80010cc:	461a      	mov	r2, r3
 80010ce:	4603      	mov	r3, r0
 80010d0:	817b      	strh	r3, [r7, #10]
 80010d2:	460b      	mov	r3, r1
 80010d4:	813b      	strh	r3, [r7, #8]
 80010d6:	4613      	mov	r3, r2
 80010d8:	71fb      	strb	r3, [r7, #7]

	if((count == 0) & (executingRoutine == false)){
 80010da:	4b24      	ldr	r3, [pc, #144]	; (800116c <blink_led+0xac>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	bf0c      	ite	eq
 80010e2:	2301      	moveq	r3, #1
 80010e4:	2300      	movne	r3, #0
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	461a      	mov	r2, r3
 80010ea:	4b21      	ldr	r3, [pc, #132]	; (8001170 <blink_led+0xb0>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	f083 0301 	eor.w	r3, r3, #1
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	4013      	ands	r3, r2
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d00d      	beq.n	8001116 <blink_led+0x56>
		executingRoutine = true;
 80010fa:	4b1d      	ldr	r3, [pc, #116]	; (8001170 <blink_led+0xb0>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(port, pin, SET);
 8001100:	897b      	ldrh	r3, [r7, #10]
 8001102:	2201      	movs	r2, #1
 8001104:	4619      	mov	r1, r3
 8001106:	68f8      	ldr	r0, [r7, #12]
 8001108:	f000 fe4b 	bl	8001da2 <HAL_GPIO_WritePin>
		delayInit(&delayBlinkHandle, period );
 800110c:	893b      	ldrh	r3, [r7, #8]
 800110e:	4619      	mov	r1, r3
 8001110:	4818      	ldr	r0, [pc, #96]	; (8001174 <blink_led+0xb4>)
 8001112:	f7ff fb49 	bl	80007a8 <delayInit>
	}
	// repetir
	if(delayRead(&delayBlinkHandle) == true){
 8001116:	4817      	ldr	r0, [pc, #92]	; (8001174 <blink_led+0xb4>)
 8001118:	f7ff fb63 	bl	80007e2 <delayRead>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d00a      	beq.n	8001138 <blink_led+0x78>
		HAL_GPIO_TogglePin(port, pin);
 8001122:	897b      	ldrh	r3, [r7, #10]
 8001124:	4619      	mov	r1, r3
 8001126:	68f8      	ldr	r0, [r7, #12]
 8001128:	f000 fe53 	bl	8001dd2 <HAL_GPIO_TogglePin>
		count++;
 800112c:	4b0f      	ldr	r3, [pc, #60]	; (800116c <blink_led+0xac>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	3301      	adds	r3, #1
 8001132:	b2da      	uxtb	r2, r3
 8001134:	4b0d      	ldr	r3, [pc, #52]	; (800116c <blink_led+0xac>)
 8001136:	701a      	strb	r2, [r3, #0]
	}
	// blink stop
	if(count >= repeat*2){
 8001138:	4b0c      	ldr	r3, [pc, #48]	; (800116c <blink_led+0xac>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	461a      	mov	r2, r3
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	429a      	cmp	r2, r3
 8001144:	db0d      	blt.n	8001162 <blink_led+0xa2>
		HAL_GPIO_WritePin(port, pin, RESET);
 8001146:	897b      	ldrh	r3, [r7, #10]
 8001148:	2200      	movs	r2, #0
 800114a:	4619      	mov	r1, r3
 800114c:	68f8      	ldr	r0, [r7, #12]
 800114e:	f000 fe28 	bl	8001da2 <HAL_GPIO_WritePin>
		count = 0;
 8001152:	4b06      	ldr	r3, [pc, #24]	; (800116c <blink_led+0xac>)
 8001154:	2200      	movs	r2, #0
 8001156:	701a      	strb	r2, [r3, #0]
		executingRoutine = false;
 8001158:	4b05      	ldr	r3, [pc, #20]	; (8001170 <blink_led+0xb0>)
 800115a:	2200      	movs	r2, #0
 800115c:	701a      	strb	r2, [r3, #0]
		menuMEF_reset_state();
 800115e:	f7ff ff4d 	bl	8000ffc <menuMEF_reset_state>
	}
}
 8001162:	bf00      	nop
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	200001c5 	.word	0x200001c5
 8001170:	200001c4 	.word	0x200001c4
 8001174:	200001c8 	.word	0x200001c8

08001178 <blink_stop>:


// Detencion del parpadeo (apagado LED) y reseteo de variable de contador de repeticiones
// Parametros: <port> puerto GPIO, <pin> pin del puerto GPIO
void blink_stop(GPIO_TypeDef * port, uint16_t pin){
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	460b      	mov	r3, r1
 8001182:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(port, pin, RESET);
 8001184:	887b      	ldrh	r3, [r7, #2]
 8001186:	2200      	movs	r2, #0
 8001188:	4619      	mov	r1, r3
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f000 fe09 	bl	8001da2 <HAL_GPIO_WritePin>
	count = 0;
 8001190:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <blink_stop+0x30>)
 8001192:	2200      	movs	r2, #0
 8001194:	701a      	strb	r2, [r3, #0]
	executingRoutine = false;
 8001196:	4b05      	ldr	r3, [pc, #20]	; (80011ac <blink_stop+0x34>)
 8001198:	2200      	movs	r2, #0
 800119a:	701a      	strb	r2, [r3, #0]
	menuMEF_reset_state();
 800119c:	f7ff ff2e 	bl	8000ffc <menuMEF_reset_state>
}
 80011a0:	bf00      	nop
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	200001c5 	.word	0x200001c5
 80011ac:	200001c4 	.word	0x200001c4

080011b0 <free_routine>:



void free_routine(){
 80011b0:	b5b0      	push	{r4, r5, r7, lr}
 80011b2:	b08c      	sub	sp, #48	; 0x30
 80011b4:	af00      	add	r7, sp, #0
	// secuencia para la anumacion de una persona saltando en el LCD
	uint8_t jumpingGuy[4][8] = {
 80011b6:	4b3a      	ldr	r3, [pc, #232]	; (80012a0 <free_routine+0xf0>)
 80011b8:	f107 040c 	add.w	r4, r7, #12
 80011bc:	461d      	mov	r5, r3
 80011be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011c2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80011c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{ 0x0E, 0x0A, 0x0E, 0x04, 0x0E, 0x15, 0x0A, 0x0A},
			{ 0x0E, 0x0A, 0x0E, 0x04, 0x1F, 0x04, 0x0A, 0x11},
			{ 0x0E, 0x0A, 0x0E, 0x15, 0x0E, 0x04, 0x1B, 0x00},
			{ 0x0E, 0x0A, 0x1F, 0x15, 0x0E, 0x15, 0x0A, 0x00} };
	// Campo en blanco
	uint8_t blank[] = { 0,0,0,0,0,0,0,0};
 80011ca:	4a36      	ldr	r2, [pc, #216]	; (80012a4 <free_routine+0xf4>)
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011d2:	e883 0003 	stmia.w	r3, {r0, r1}
	executingRoutine = true;
 80011d6:	4b34      	ldr	r3, [pc, #208]	; (80012a8 <free_routine+0xf8>)
 80011d8:	2201      	movs	r2, #1
 80011da:	701a      	strb	r2, [r3, #0]

	uint8_t index = 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t count = 0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	bool direction = 1; // 1-up 0-down
 80011e8:	2301      	movs	r3, #1
 80011ea:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	// recorrer los cuadros de la animacion
	while(1){
		create_character(index, jumpingGuy[index]);
 80011ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011f2:	f107 020c 	add.w	r2, r7, #12
 80011f6:	00db      	lsls	r3, r3, #3
 80011f8:	441a      	add	r2, r3
 80011fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011fe:	4611      	mov	r1, r2
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff fcf1 	bl	8000be8 <create_character>
		lcd_set_position(2, 15);
 8001206:	210f      	movs	r1, #15
 8001208:	2002      	movs	r0, #2
 800120a:	f7ff fc95 	bl	8000b38 <lcd_set_position>
		lcd_send_byte(index, RS_DATA, RW_WRITE);
 800120e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001212:	2200      	movs	r2, #0
 8001214:	2101      	movs	r1, #1
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff fc16 	bl	8000a48 <lcd_send_byte>
		HAL_Delay(200);
 800121c:	20c8      	movs	r0, #200	; 0xc8
 800121e:	f000 faf3 	bl	8001808 <HAL_Delay>
		if(direction == 1){
 8001222:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001226:	2b00      	cmp	r3, #0
 8001228:	d005      	beq.n	8001236 <free_routine+0x86>
			index++;
 800122a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800122e:	3301      	adds	r3, #1
 8001230:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001234:	e004      	b.n	8001240 <free_routine+0x90>
		} else{
			index--;
 8001236:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800123a:	3b01      	subs	r3, #1
 800123c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		count++;
 8001240:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001244:	3301      	adds	r3, #1
 8001246:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		if(index == 3) direction = 0; // contar para abajo
 800124a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800124e:	2b03      	cmp	r3, #3
 8001250:	d102      	bne.n	8001258 <free_routine+0xa8>
 8001252:	2300      	movs	r3, #0
 8001254:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		if(index == 0) direction = 1; // contar para arriba
 8001258:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800125c:	2b00      	cmp	r3, #0
 800125e:	d102      	bne.n	8001266 <free_routine+0xb6>
 8001260:	2301      	movs	r3, #1
 8001262:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		if(count > 14) break;
 8001266:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800126a:	2b0e      	cmp	r3, #14
 800126c:	d800      	bhi.n	8001270 <free_routine+0xc0>
		create_character(index, jumpingGuy[index]);
 800126e:	e7be      	b.n	80011ee <free_routine+0x3e>
		if(count > 14) break;
 8001270:	bf00      	nop
	}
	// blanquear campo
	create_character(0, blank);
 8001272:	1d3b      	adds	r3, r7, #4
 8001274:	4619      	mov	r1, r3
 8001276:	2000      	movs	r0, #0
 8001278:	f7ff fcb6 	bl	8000be8 <create_character>
	lcd_set_position(2, 15);
 800127c:	210f      	movs	r1, #15
 800127e:	2002      	movs	r0, #2
 8001280:	f7ff fc5a 	bl	8000b38 <lcd_set_position>
	lcd_send_byte(0, RS_DATA, RW_WRITE);
 8001284:	2200      	movs	r2, #0
 8001286:	2101      	movs	r1, #1
 8001288:	2000      	movs	r0, #0
 800128a:	f7ff fbdd 	bl	8000a48 <lcd_send_byte>
	executingRoutine = false;
 800128e:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <free_routine+0xf8>)
 8001290:	2200      	movs	r2, #0
 8001292:	701a      	strb	r2, [r3, #0]
	menuMEF_reset_state();
 8001294:	f7ff feb2 	bl	8000ffc <menuMEF_reset_state>
}
 8001298:	bf00      	nop
 800129a:	3730      	adds	r7, #48	; 0x30
 800129c:	46bd      	mov	sp, r7
 800129e:	bdb0      	pop	{r4, r5, r7, pc}
 80012a0:	08004b0c 	.word	0x08004b0c
 80012a4:	08004b2c 	.word	0x08004b2c
 80012a8:	200001c4 	.word	0x200001c4

080012ac <motor_run>:
// Accionamiento del stepper motor (Haydon 36362-12 12V 4.6W) controlador por el DRV8825
// Parametros: <command> instruccion de comando del motor tipo motorState_t (parada, giro horario y anti horario)
// <freq> "frecuencia" de giro del motor > CUIDADO: no es frecuencia sino periodo, es decir, a mayor <freq> mas lento gira el motor
// Corresponde al 'Pulse' del contador de TIM2 (output compare) utilizado como senal de 'STEP' al controlador DRV8825.
// <time> duracion del accionamiento en ms
void motor_run(motorState_t command, uint16_t freq, uint16_t time ){
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	71fb      	strb	r3, [r7, #7]
 80012b6:	460b      	mov	r3, r1
 80012b8:	80bb      	strh	r3, [r7, #4]
 80012ba:	4613      	mov	r3, r2
 80012bc:	807b      	strh	r3, [r7, #2]
	if(executingRoutine == false){
 80012be:	4b12      	ldr	r3, [pc, #72]	; (8001308 <motor_run+0x5c>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	f083 0301 	eor.w	r3, r3, #1
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d010      	beq.n	80012ee <motor_run+0x42>
		executingRoutine = true;
 80012cc:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <motor_run+0x5c>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	701a      	strb	r2, [r3, #0]
		motor_config(freq);
 80012d2:	88bb      	ldrh	r3, [r7, #4]
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff fb2c 	bl	8000934 <motor_config>
		motor_send_command(command);
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff fab6 	bl	8000850 <motor_send_command>
		delayInit(&delayMotorHandle, time );
 80012e4:	887b      	ldrh	r3, [r7, #2]
 80012e6:	4619      	mov	r1, r3
 80012e8:	4808      	ldr	r0, [pc, #32]	; (800130c <motor_run+0x60>)
 80012ea:	f7ff fa5d 	bl	80007a8 <delayInit>
	}

	if(delayRead(&delayMotorHandle) == true){
 80012ee:	4807      	ldr	r0, [pc, #28]	; (800130c <motor_run+0x60>)
 80012f0:	f7ff fa77 	bl	80007e2 <delayRead>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <motor_run+0x52>
		motor_stop();
 80012fa:	f000 f809 	bl	8001310 <motor_stop>
	}
}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	200001c4 	.word	0x200001c4
 800130c:	200001d4 	.word	0x200001d4

08001310 <motor_stop>:


// Parada del motor y reseteo de la MEF
// Parametros: ninguno
// Retorno: ninguno
void motor_stop(){
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
	motor_send_command(MOTOR_STOP);
 8001314:	2000      	movs	r0, #0
 8001316:	f7ff fa9b 	bl	8000850 <motor_send_command>
	executingRoutine = false;
 800131a:	4b03      	ldr	r3, [pc, #12]	; (8001328 <motor_stop+0x18>)
 800131c:	2200      	movs	r2, #0
 800131e:	701a      	strb	r2, [r3, #0]
	menuMEF_reset_state();
 8001320:	f7ff fe6c 	bl	8000ffc <menuMEF_reset_state>
}
 8001324:	bf00      	nop
 8001326:	bd80      	pop	{r7, pc}
 8001328:	200001c4 	.word	0x200001c4

0800132c <menuMEF_user_input>:

// Ingreso de parametros de parpadeo y accionamiento de motor por parte del usuario
// Los parametros a ingresar son blinkPeriod, blinkRepeat, motorTimer, y motorFrequency
// Parametros: ninguno
// Reteorno: ninguno
void menuMEF_user_input(){
 800132c:	b580      	push	{r7, lr}
 800132e:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 8001332:	af02      	add	r7, sp, #8
	// Ingreso valores LED
	uint8_t introLED[] = "######################### COMIENZO DEL PROGRAMA #########################\r\n"
 8001334:	4a5b      	ldr	r2, [pc, #364]	; (80014a4 <menuMEF_user_input+0x178>)
 8001336:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800133a:	4611      	mov	r1, r2
 800133c:	22c5      	movs	r2, #197	; 0xc5
 800133e:	4618      	mov	r0, r3
 8001340:	f002 ff44 	bl	80041cc <memcpy>
			      "# Ingrese a continuacion los parametros del parpadeo del led en ms\r\n"
				  "# Presione ENTER para utilizar [valor] por defecto:\r\n";
	uint8_t periodPrompt[64];
	uint8_t repeatPrompt[64];
	sprintf(periodPrompt,"# [%d-%d] Periodo [%d]: ", BLINK_PERIOD_MIN, BLINK_PERIOD_MAX, blinkPeriod);
 8001344:	4b58      	ldr	r3, [pc, #352]	; (80014a8 <menuMEF_user_input+0x17c>)
 8001346:	881b      	ldrh	r3, [r3, #0]
 8001348:	f507 70e0 	add.w	r0, r7, #448	; 0x1c0
 800134c:	9300      	str	r3, [sp, #0]
 800134e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001352:	2264      	movs	r2, #100	; 0x64
 8001354:	4955      	ldr	r1, [pc, #340]	; (80014ac <menuMEF_user_input+0x180>)
 8001356:	f002 fee5 	bl	8004124 <siprintf>
	sprintf(repeatPrompt,"# [%d-%d] Repeticiones [%d]: ", BLINK_REPEAT_MIN, BLINK_REPEAT_MAX, blinkRepeat);
 800135a:	4b55      	ldr	r3, [pc, #340]	; (80014b0 <menuMEF_user_input+0x184>)
 800135c:	881b      	ldrh	r3, [r3, #0]
 800135e:	f507 70c0 	add.w	r0, r7, #384	; 0x180
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	2314      	movs	r3, #20
 8001366:	2201      	movs	r2, #1
 8001368:	4952      	ldr	r1, [pc, #328]	; (80014b4 <menuMEF_user_input+0x188>)
 800136a:	f002 fedb 	bl	8004124 <siprintf>

	uartSendString(introLED);
 800136e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001372:	4618      	mov	r0, r3
 8001374:	f000 f8f2 	bl	800155c <uartSendString>

	uartSendString(periodPrompt);
 8001378:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 800137c:	4618      	mov	r0, r3
 800137e:	f000 f8ed 	bl	800155c <uartSendString>
	blinkPeriod = get_value(BLINK_PERIOD_MIN, BLINK_PERIOD_MAX, BLINK_PERIOD_DEFAULT);
 8001382:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001386:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800138a:	2064      	movs	r0, #100	; 0x64
 800138c:	f000 f8a4 	bl	80014d8 <get_value>
 8001390:	4603      	mov	r3, r0
 8001392:	461a      	mov	r2, r3
 8001394:	4b44      	ldr	r3, [pc, #272]	; (80014a8 <menuMEF_user_input+0x17c>)
 8001396:	801a      	strh	r2, [r3, #0]

	uartSendString(repeatPrompt);
 8001398:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800139c:	4618      	mov	r0, r3
 800139e:	f000 f8dd 	bl	800155c <uartSendString>
	blinkRepeat = get_value(BLINK_REPEAT_MIN, BLINK_REPEAT_MAX, BLINK_REPEAT_DEFAULT);
 80013a2:	220a      	movs	r2, #10
 80013a4:	2114      	movs	r1, #20
 80013a6:	2001      	movs	r0, #1
 80013a8:	f000 f896 	bl	80014d8 <get_value>
 80013ac:	4603      	mov	r3, r0
 80013ae:	461a      	mov	r2, r3
 80013b0:	4b3f      	ldr	r3, [pc, #252]	; (80014b0 <menuMEF_user_input+0x184>)
 80013b2:	801a      	strh	r2, [r3, #0]

	// Ingreso valores MOTOR
	uint8_t introMotor[] = "#\r\n# Ingrese a continuacion los parametros del motor ms\r\n"
 80013b4:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 80013b8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80013bc:	4a3e      	ldr	r2, [pc, #248]	; (80014b8 <menuMEF_user_input+0x18c>)
 80013be:	4618      	mov	r0, r3
 80013c0:	4611      	mov	r1, r2
 80013c2:	236f      	movs	r3, #111	; 0x6f
 80013c4:	461a      	mov	r2, r3
 80013c6:	f002 ff01 	bl	80041cc <memcpy>
						 "# Presione ENTER para utilizar [valor] por defecto:\r\n";
	uint8_t timerPrompt[64];
	uint8_t frequencyPrompt[64];
	sprintf(timerPrompt,"# [%d-%d] Temporizado [%d]: ", MOTOR_TIMER_MIN, MOTOR_TIMER_MAX, motorTimer);
 80013ca:	4b3c      	ldr	r3, [pc, #240]	; (80014bc <menuMEF_user_input+0x190>)
 80013cc:	881b      	ldrh	r3, [r3, #0]
 80013ce:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	f644 6320 	movw	r3, #20000	; 0x4e20
 80013d8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80013dc:	4938      	ldr	r1, [pc, #224]	; (80014c0 <menuMEF_user_input+0x194>)
 80013de:	f002 fea1 	bl	8004124 <siprintf>
	sprintf(frequencyPrompt,"# [%d-%d] Frecuencia [%d]: ", MOTOR_FREQ_MIN, MOTOR_FREQ_MAX, motorFrequency);
 80013e2:	4b38      	ldr	r3, [pc, #224]	; (80014c4 <menuMEF_user_input+0x198>)
 80013e4:	881b      	ldrh	r3, [r3, #0]
 80013e6:	f107 0090 	add.w	r0, r7, #144	; 0x90
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	2396      	movs	r3, #150	; 0x96
 80013ee:	2201      	movs	r2, #1
 80013f0:	4935      	ldr	r1, [pc, #212]	; (80014c8 <menuMEF_user_input+0x19c>)
 80013f2:	f002 fe97 	bl	8004124 <siprintf>

	uartSendString(introMotor);
 80013f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80013fa:	4618      	mov	r0, r3
 80013fc:	f000 f8ae 	bl	800155c <uartSendString>

	uartSendString(timerPrompt);
 8001400:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001404:	4618      	mov	r0, r3
 8001406:	f000 f8a9 	bl	800155c <uartSendString>
	motorTimer = get_value(MOTOR_TIMER_MIN, MOTOR_TIMER_MAX, MOTOR_TIMER_DEFAULT);
 800140a:	f242 7210 	movw	r2, #10000	; 0x2710
 800140e:	f644 6120 	movw	r1, #20000	; 0x4e20
 8001412:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001416:	f000 f85f 	bl	80014d8 <get_value>
 800141a:	4603      	mov	r3, r0
 800141c:	461a      	mov	r2, r3
 800141e:	4b27      	ldr	r3, [pc, #156]	; (80014bc <menuMEF_user_input+0x190>)
 8001420:	801a      	strh	r2, [r3, #0]

	uartSendString(frequencyPrompt);
 8001422:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001426:	4618      	mov	r0, r3
 8001428:	f000 f898 	bl	800155c <uartSendString>
	motorFrequency = get_value(MOTOR_FREQ_MIN, MOTOR_FREQ_MAX, MOTOR_FREQ_DEFAULT);
 800142c:	2214      	movs	r2, #20
 800142e:	2196      	movs	r1, #150	; 0x96
 8001430:	2001      	movs	r0, #1
 8001432:	f000 f851 	bl	80014d8 <get_value>
 8001436:	4603      	mov	r3, r0
 8001438:	461a      	mov	r2, r3
 800143a:	4b22      	ldr	r3, [pc, #136]	; (80014c4 <menuMEF_user_input+0x198>)
 800143c:	801a      	strh	r2, [r3, #0]

	uint8_t parameters[64];
	sprintf(parameters,"# Parametros blinky: PERRIODO [%d], REPETIICIONES [%d]\r\n", blinkPeriod, blinkRepeat );
 800143e:	4b1a      	ldr	r3, [pc, #104]	; (80014a8 <menuMEF_user_input+0x17c>)
 8001440:	881b      	ldrh	r3, [r3, #0]
 8001442:	461a      	mov	r2, r3
 8001444:	4b1a      	ldr	r3, [pc, #104]	; (80014b0 <menuMEF_user_input+0x184>)
 8001446:	881b      	ldrh	r3, [r3, #0]
 8001448:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800144c:	491f      	ldr	r1, [pc, #124]	; (80014cc <menuMEF_user_input+0x1a0>)
 800144e:	f002 fe69 	bl	8004124 <siprintf>
	uartSendString(parameters);
 8001452:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001456:	4618      	mov	r0, r3
 8001458:	f000 f880 	bl	800155c <uartSendString>
	sprintf(parameters,"# Parametros motor: TEMPORIZADO [%d], FRECUENCIA [%d]\r\n", motorTimer, motorFrequency );
 800145c:	4b17      	ldr	r3, [pc, #92]	; (80014bc <menuMEF_user_input+0x190>)
 800145e:	881b      	ldrh	r3, [r3, #0]
 8001460:	461a      	mov	r2, r3
 8001462:	4b18      	ldr	r3, [pc, #96]	; (80014c4 <menuMEF_user_input+0x198>)
 8001464:	881b      	ldrh	r3, [r3, #0]
 8001466:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800146a:	4919      	ldr	r1, [pc, #100]	; (80014d0 <menuMEF_user_input+0x1a4>)
 800146c:	f002 fe5a 	bl	8004124 <siprintf>
	uartSendString(parameters);
 8001470:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001474:	4618      	mov	r0, r3
 8001476:	f000 f871 	bl	800155c <uartSendString>

	uint8_t end[] = "#########################################################################\r\n";
 800147a:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 800147e:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8001482:	4a14      	ldr	r2, [pc, #80]	; (80014d4 <menuMEF_user_input+0x1a8>)
 8001484:	4618      	mov	r0, r3
 8001486:	4611      	mov	r1, r2
 8001488:	234c      	movs	r3, #76	; 0x4c
 800148a:	461a      	mov	r2, r3
 800148c:	f002 fe9e 	bl	80041cc <memcpy>
	uartSendString(end);
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	4618      	mov	r0, r3
 8001494:	f000 f862 	bl	800155c <uartSendString>
}
 8001498:	bf00      	nop
 800149a:	f507 7732 	add.w	r7, r7, #712	; 0x2c8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	08004c20 	.word	0x08004c20
 80014a8:	20000004 	.word	0x20000004
 80014ac:	08004b34 	.word	0x08004b34
 80014b0:	20000006 	.word	0x20000006
 80014b4:	08004b50 	.word	0x08004b50
 80014b8:	08004ce8 	.word	0x08004ce8
 80014bc:	20000008 	.word	0x20000008
 80014c0:	08004b70 	.word	0x08004b70
 80014c4:	2000000a 	.word	0x2000000a
 80014c8:	08004b90 	.word	0x08004b90
 80014cc:	08004bac 	.word	0x08004bac
 80014d0:	08004be8 	.word	0x08004be8
 80014d4:	08004d58 	.word	0x08004d58

080014d8 <get_value>:

// Rutina de ingreso de datos por la UART con limites min/max y reingreso en caso de valores fuera de rango
// Parametros: <min> valor minimo permitido a ingresar
// <max> valor maximo permitido a ingresar, <defaultValue> valor por defecto a utilizar si se presiona ENTER
// Retorno: retorna el numero entero uint16_6 ingresado
uint16_t get_value(uint16_t min, uint16_t max, uint16_t defaultValue){
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	80fb      	strh	r3, [r7, #6]
 80014e2:	460b      	mov	r3, r1
 80014e4:	80bb      	strh	r3, [r7, #4]
 80014e6:	4613      	mov	r3, r2
 80014e8:	807b      	strh	r3, [r7, #2]
	uint8_t inputBuffer[10];
	uint16_t value;

	while(1){
		uartReceiveString(inputBuffer, sizeof(inputBuffer)/sizeof(inputBuffer[0]));
 80014ea:	f107 030c 	add.w	r3, r7, #12
 80014ee:	210a      	movs	r1, #10
 80014f0:	4618      	mov	r0, r3
 80014f2:	f000 f852 	bl	800159a <uartReceiveString>
		if(inputBuffer[0] == '\0'){
 80014f6:	7b3b      	ldrb	r3, [r7, #12]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d105      	bne.n	8001508 <get_value+0x30>
			value = defaultValue;
 80014fc:	887b      	ldrh	r3, [r7, #2]
 80014fe:	82fb      	strh	r3, [r7, #22]
			uartSendString("\r\n");
 8001500:	4814      	ldr	r0, [pc, #80]	; (8001554 <get_value+0x7c>)
 8001502:	f000 f82b 	bl	800155c <uartSendString>
			break;
 8001506:	e020      	b.n	800154a <get_value+0x72>
		}
		//uartSendString(periodBuffer);
		uartSendString("\r\n");
 8001508:	4812      	ldr	r0, [pc, #72]	; (8001554 <get_value+0x7c>)
 800150a:	f000 f827 	bl	800155c <uartSendString>
		value = (uint16_t) atoi(inputBuffer);
 800150e:	f107 030c 	add.w	r3, r7, #12
 8001512:	4618      	mov	r0, r3
 8001514:	f002 fd7a 	bl	800400c <atoi>
 8001518:	4603      	mov	r3, r0
 800151a:	82fb      	strh	r3, [r7, #22]
		if( (value <= max) & (value >= min) ){
 800151c:	8afa      	ldrh	r2, [r7, #22]
 800151e:	88bb      	ldrh	r3, [r7, #4]
 8001520:	429a      	cmp	r2, r3
 8001522:	bf94      	ite	ls
 8001524:	2301      	movls	r3, #1
 8001526:	2300      	movhi	r3, #0
 8001528:	b2da      	uxtb	r2, r3
 800152a:	8af9      	ldrh	r1, [r7, #22]
 800152c:	88fb      	ldrh	r3, [r7, #6]
 800152e:	4299      	cmp	r1, r3
 8001530:	bf2c      	ite	cs
 8001532:	2301      	movcs	r3, #1
 8001534:	2300      	movcc	r3, #0
 8001536:	b2db      	uxtb	r3, r3
 8001538:	4013      	ands	r3, r2
 800153a:	b2db      	uxtb	r3, r3
 800153c:	2b00      	cmp	r3, #0
 800153e:	d103      	bne.n	8001548 <get_value+0x70>
			break;
		} else{
			uartSendString("\r\n# Valor fuera de rango!\r\nIngresar nuevamente: ");
 8001540:	4805      	ldr	r0, [pc, #20]	; (8001558 <get_value+0x80>)
 8001542:	f000 f80b 	bl	800155c <uartSendString>
		uartReceiveString(inputBuffer, sizeof(inputBuffer)/sizeof(inputBuffer[0]));
 8001546:	e7d0      	b.n	80014ea <get_value+0x12>
			break;
 8001548:	bf00      	nop
		}
	}
	return value;
 800154a:	8afb      	ldrh	r3, [r7, #22]
}
 800154c:	4618      	mov	r0, r3
 800154e:	3718      	adds	r7, #24
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	08004da4 	.word	0x08004da4
 8001558:	08004da8 	.word	0x08004da8

0800155c <uartSendString>:
/* > Descripcion: envia un string (buffer <pstring>) por la uart, finalizando en el caracter NULL
 * > Parametro: <pstring> puntero del tipo uint8_t
 * 				El buffer de envio tendra una cantidad maxima de caracteres definida en <SEND_BUFFER_MAX_SIZE>
 * > Retorno: ninguno
 */
void uartSendString(uint8_t * pstring){
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
	// pstring se envia sin tamano debe recorrerse incrementando la direccion por aritmetica de pointers
	uint16_t index = 0; // indice para recorrer array pstring, admite hasta 2^16 caracteres
 8001564:	2300      	movs	r3, #0
 8001566:	81fb      	strh	r3, [r7, #14]
	while(1){
		if( (*(pstring+index) == '\0') || (index > SEND_BUFFER_MAX_SIZE) ) break; // al encontrarse el NULL salir de funcion
 8001568:	89fb      	ldrh	r3, [r7, #14]
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	4413      	add	r3, r2
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d00e      	beq.n	8001592 <uartSendString+0x36>
 8001574:	89fb      	ldrh	r3, [r7, #14]
 8001576:	2bff      	cmp	r3, #255	; 0xff
 8001578:	d80b      	bhi.n	8001592 <uartSendString+0x36>
		uart_transmit((pstring+index), 1, 100); //port
 800157a:	89fb      	ldrh	r3, [r7, #14]
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	4413      	add	r3, r2
 8001580:	2264      	movs	r2, #100	; 0x64
 8001582:	2101      	movs	r1, #1
 8001584:	4618      	mov	r0, r3
 8001586:	f000 f8b5 	bl	80016f4 <uart_transmit>
		//port HAL_UART_Transmit(&uartHandle, (pstring+index), 1, 100); // enviar caracter x caracter
		index++;
 800158a:	89fb      	ldrh	r3, [r7, #14]
 800158c:	3301      	adds	r3, #1
 800158e:	81fb      	strh	r3, [r7, #14]
	while(1){
 8001590:	e7ea      	b.n	8001568 <uartSendString+0xc>
	}
}
 8001592:	bf00      	nop
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <uartReceiveString>:
 * 				  y detiene la coleccion de caracteres al encontrarse un '\r' (se ha presionado ENTER)
 * > Parametro: <pstring> puntero del tipo uint8_t / <size> tamano del buffer de recepcion
 * > 			El buffer de recepcion tendra una cantidad maxima de caracteres definida en <RECEIVE_BUFFER_MAX_SIZE>
 * > Retorno: ninguno
 */
void uartReceiveString(uint8_t * pstring, uint16_t size){
 800159a:	b580      	push	{r7, lr}
 800159c:	b084      	sub	sp, #16
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
 80015a2:	460b      	mov	r3, r1
 80015a4:	807b      	strh	r3, [r7, #2]
	if(size > RECEIVE_BUFFER_MAX_SIZE) size = RECEIVE_BUFFER_MAX_SIZE;
 80015a6:	887b      	ldrh	r3, [r7, #2]
 80015a8:	2bff      	cmp	r3, #255	; 0xff
 80015aa:	d901      	bls.n	80015b0 <uartReceiveString+0x16>
 80015ac:	23ff      	movs	r3, #255	; 0xff
 80015ae:	807b      	strh	r3, [r7, #2]
	if(size < 1 ) size = 1;
 80015b0:	887b      	ldrh	r3, [r7, #2]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d101      	bne.n	80015ba <uartReceiveString+0x20>
 80015b6:	2301      	movs	r3, #1
 80015b8:	807b      	strh	r3, [r7, #2]

	uint16_t index = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	81fb      	strh	r3, [r7, #14]
	while(1){
		uart_receive((pstring+index), 1, HAL_MAX_DELAY); // port
 80015be:	89fb      	ldrh	r3, [r7, #14]
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	4413      	add	r3, r2
 80015c4:	f04f 32ff 	mov.w	r2, #4294967295
 80015c8:	2101      	movs	r1, #1
 80015ca:	4618      	mov	r0, r3
 80015cc:	f000 f8a6 	bl	800171c <uart_receive>
		//port HAL_UART_Receive(&uartHandle, (pstring+index), 1, HAL_MAX_DELAY); // recibir y esperar cada caracter hasta <size>
		if( (index == size) ||  ( (*(pstring+index)) == '\r') ) break; // finalizar while al alzancar la cant de caracteres indicada
 80015d0:	89fa      	ldrh	r2, [r7, #14]
 80015d2:	887b      	ldrh	r3, [r7, #2]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d011      	beq.n	80015fc <uartReceiveString+0x62>
 80015d8:	89fb      	ldrh	r3, [r7, #14]
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	4413      	add	r3, r2
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b0d      	cmp	r3, #13
 80015e2:	d00b      	beq.n	80015fc <uartReceiveString+0x62>
		uart_transmit((pstring+index), 1, 10); //port
 80015e4:	89fb      	ldrh	r3, [r7, #14]
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	4413      	add	r3, r2
 80015ea:	220a      	movs	r2, #10
 80015ec:	2101      	movs	r1, #1
 80015ee:	4618      	mov	r0, r3
 80015f0:	f000 f880 	bl	80016f4 <uart_transmit>
		//port HAL_UART_Transmit(&uartHandle, (pstring+index), 1, 10);
		index++;
 80015f4:	89fb      	ldrh	r3, [r7, #14]
 80015f6:	3301      	adds	r3, #1
 80015f8:	81fb      	strh	r3, [r7, #14]
	while(1){
 80015fa:	e7e0      	b.n	80015be <uartReceiveString+0x24>
	}

	*(pstring+index) = '\0'; // agregar el NULL al final para conformar el string
 80015fc:	89fb      	ldrh	r3, [r7, #14]
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	4413      	add	r3, r2
 8001602:	2200      	movs	r2, #0
 8001604:	701a      	strb	r2, [r3, #0]
}
 8001606:	bf00      	nop
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <i2c_init>:
static I2C_HandleTypeDef i2cHandle; // bring all the i2c config from main.c here

// Inicializacion del periferico I2C1 configurado con CubeMX
// Parametros: ninguno
// Retorno: ninguno
void i2c_init(void){
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0

	i2cHandle.Instance = I2C1;
 8001614:	4b10      	ldr	r3, [pc, #64]	; (8001658 <i2c_init+0x48>)
 8001616:	4a11      	ldr	r2, [pc, #68]	; (800165c <i2c_init+0x4c>)
 8001618:	601a      	str	r2, [r3, #0]
	i2cHandle.Init.ClockSpeed = 100000;
 800161a:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <i2c_init+0x48>)
 800161c:	4a10      	ldr	r2, [pc, #64]	; (8001660 <i2c_init+0x50>)
 800161e:	605a      	str	r2, [r3, #4]
	i2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001620:	4b0d      	ldr	r3, [pc, #52]	; (8001658 <i2c_init+0x48>)
 8001622:	2200      	movs	r2, #0
 8001624:	609a      	str	r2, [r3, #8]
	i2cHandle.Init.OwnAddress1 = 0;
 8001626:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <i2c_init+0x48>)
 8001628:	2200      	movs	r2, #0
 800162a:	60da      	str	r2, [r3, #12]
	i2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800162c:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <i2c_init+0x48>)
 800162e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001632:	611a      	str	r2, [r3, #16]
	i2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001634:	4b08      	ldr	r3, [pc, #32]	; (8001658 <i2c_init+0x48>)
 8001636:	2200      	movs	r2, #0
 8001638:	615a      	str	r2, [r3, #20]
	i2cHandle.Init.OwnAddress2 = 0;
 800163a:	4b07      	ldr	r3, [pc, #28]	; (8001658 <i2c_init+0x48>)
 800163c:	2200      	movs	r2, #0
 800163e:	619a      	str	r2, [r3, #24]
	i2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001640:	4b05      	ldr	r3, [pc, #20]	; (8001658 <i2c_init+0x48>)
 8001642:	2200      	movs	r2, #0
 8001644:	61da      	str	r2, [r3, #28]
	i2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001646:	4b04      	ldr	r3, [pc, #16]	; (8001658 <i2c_init+0x48>)
 8001648:	2200      	movs	r2, #0
 800164a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&i2cHandle) != HAL_OK)
 800164c:	4802      	ldr	r0, [pc, #8]	; (8001658 <i2c_init+0x48>)
 800164e:	f000 fbfb 	bl	8001e48 <HAL_I2C_Init>
  {
    //Error_Handler();
  }
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	200001e0 	.word	0x200001e0
 800165c:	40005400 	.word	0x40005400
 8001660:	000186a0 	.word	0x000186a0

08001664 <i2c_transmit>:

// Wrapper de la funcion especifica HAL de transmision I2C
void i2c_transmit(uint16_t DevAddress, uint8_t * pData, uint16_t Size, uint32_t Timeout){
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af02      	add	r7, sp, #8
 800166a:	60b9      	str	r1, [r7, #8]
 800166c:	607b      	str	r3, [r7, #4]
 800166e:	4603      	mov	r3, r0
 8001670:	81fb      	strh	r3, [r7, #14]
 8001672:	4613      	mov	r3, r2
 8001674:	81bb      	strh	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2cHandle, DevAddress, pData, Size, Timeout);
 8001676:	89ba      	ldrh	r2, [r7, #12]
 8001678:	89f9      	ldrh	r1, [r7, #14]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	9300      	str	r3, [sp, #0]
 800167e:	4613      	mov	r3, r2
 8001680:	68ba      	ldr	r2, [r7, #8]
 8001682:	4803      	ldr	r0, [pc, #12]	; (8001690 <i2c_transmit+0x2c>)
 8001684:	f000 fd24 	bl	80020d0 <HAL_I2C_Master_Transmit>
}
 8001688:	bf00      	nop
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	200001e0 	.word	0x200001e0

08001694 <uartInit>:

/* > Descripcion: Inicializa la uart con la configuracion preestablecida y envia dicha config a la terminal
 * > Parametro: ninguno
 * > Retorno: retorna un boolt_t true en caso exito o false caso contrario
 */
bool_t uartInit(){
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
	// uartHandle >> estructura de dato UART_HandleTypeDef declarada en API_uart.h
	bool_t returnFlag = false;
 800169a:	2300      	movs	r3, #0
 800169c:	71fb      	strb	r3, [r7, #7]

	uartHandle.Instance = USART2; // instancia de la uart >> usb conectado a usart2
 800169e:	4b13      	ldr	r3, [pc, #76]	; (80016ec <uartInit+0x58>)
 80016a0:	4a13      	ldr	r2, [pc, #76]	; (80016f0 <uartInit+0x5c>)
 80016a2:	601a      	str	r2, [r3, #0]
	uartHandle.Init.BaudRate = 9600; // baudrate tipico
 80016a4:	4b11      	ldr	r3, [pc, #68]	; (80016ec <uartInit+0x58>)
 80016a6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80016aa:	605a      	str	r2, [r3, #4]
	uartHandle.Init.WordLength = UART_WORDLENGTH_8B; // tamano de los datos >> 8 bits
 80016ac:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <uartInit+0x58>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	609a      	str	r2, [r3, #8]
	uartHandle.Init.StopBits = UART_STOPBITS_1; // cantidad de stop bits >> 1 solo
 80016b2:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <uartInit+0x58>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	60da      	str	r2, [r3, #12]
	uartHandle.Init.Parity = UART_PARITY_NONE; // tipo de paridad >> ninguno
 80016b8:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <uartInit+0x58>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	611a      	str	r2, [r3, #16]
	uartHandle.Init.Mode = UART_MODE_TX_RX; // modo recepcion/recepcion habilitado
 80016be:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <uartInit+0x58>)
 80016c0:	220c      	movs	r2, #12
 80016c2:	615a      	str	r2, [r3, #20]
	uartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE; // sin control de flujo por hardware
 80016c4:	4b09      	ldr	r3, [pc, #36]	; (80016ec <uartInit+0x58>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	619a      	str	r2, [r3, #24]
	uartHandle.Init.OverSampling = UART_OVERSAMPLING_16; // cantidad de muestras por tiempo de bit
 80016ca:	4b08      	ldr	r3, [pc, #32]	; (80016ec <uartInit+0x58>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	61da      	str	r2, [r3, #28]

	if (HAL_UART_Init(&uartHandle) == HAL_OK){ // retornar true si es exitosa la configuracion
 80016d0:	4806      	ldr	r0, [pc, #24]	; (80016ec <uartInit+0x58>)
 80016d2:	f002 fa39 	bl	8003b48 <HAL_UART_Init>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d101      	bne.n	80016e0 <uartInit+0x4c>
		//print_uart_config(uartHandle); // imprimir configuracion si la config fue exitosa
		returnFlag = true;
 80016dc:	2301      	movs	r3, #1
 80016de:	71fb      	strb	r3, [r7, #7]
	}

	return returnFlag;
 80016e0:	79fb      	ldrb	r3, [r7, #7]
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000234 	.word	0x20000234
 80016f0:	40004400 	.word	0x40004400

080016f4 <uart_transmit>:

void uart_transmit( uint8_t * pData, uint16_t Size, uint32_t Timeout){
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	460b      	mov	r3, r1
 80016fe:	607a      	str	r2, [r7, #4]
 8001700:	817b      	strh	r3, [r7, #10]
	HAL_UART_Transmit(&uartHandle, pData, Size, Timeout); // enviar caracter x caracter
 8001702:	897a      	ldrh	r2, [r7, #10]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	68f9      	ldr	r1, [r7, #12]
 8001708:	4803      	ldr	r0, [pc, #12]	; (8001718 <uart_transmit+0x24>)
 800170a:	f002 fa6d 	bl	8003be8 <HAL_UART_Transmit>
}
 800170e:	bf00      	nop
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000234 	.word	0x20000234

0800171c <uart_receive>:

void uart_receive( uint8_t * pData, uint16_t Size, uint32_t Timeout){
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	460b      	mov	r3, r1
 8001726:	607a      	str	r2, [r7, #4]
 8001728:	817b      	strh	r3, [r7, #10]
	HAL_UART_Receive(&uartHandle, pData, Size, Timeout);
 800172a:	897a      	ldrh	r2, [r7, #10]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	68f9      	ldr	r1, [r7, #12]
 8001730:	4803      	ldr	r0, [pc, #12]	; (8001740 <uart_receive+0x24>)
 8001732:	f002 fadc 	bl	8003cee <HAL_UART_Receive>
}
 8001736:	bf00      	nop
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20000234 	.word	0x20000234

08001744 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001748:	4b08      	ldr	r3, [pc, #32]	; (800176c <HAL_Init+0x28>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a07      	ldr	r2, [pc, #28]	; (800176c <HAL_Init+0x28>)
 800174e:	f043 0310 	orr.w	r3, r3, #16
 8001752:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001754:	2003      	movs	r0, #3
 8001756:	f000 f947 	bl	80019e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800175a:	2000      	movs	r0, #0
 800175c:	f000 f808 	bl	8001770 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001760:	f7fe fdc6 	bl	80002f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40022000 	.word	0x40022000

08001770 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001778:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <HAL_InitTick+0x54>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <HAL_InitTick+0x58>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	4619      	mov	r1, r3
 8001782:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001786:	fbb3 f3f1 	udiv	r3, r3, r1
 800178a:	fbb2 f3f3 	udiv	r3, r2, r3
 800178e:	4618      	mov	r0, r3
 8001790:	f000 f95f 	bl	8001a52 <HAL_SYSTICK_Config>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e00e      	b.n	80017bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2b0f      	cmp	r3, #15
 80017a2:	d80a      	bhi.n	80017ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017a4:	2200      	movs	r2, #0
 80017a6:	6879      	ldr	r1, [r7, #4]
 80017a8:	f04f 30ff 	mov.w	r0, #4294967295
 80017ac:	f000 f927 	bl	80019fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017b0:	4a06      	ldr	r2, [pc, #24]	; (80017cc <HAL_InitTick+0x5c>)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017b6:	2300      	movs	r3, #0
 80017b8:	e000      	b.n	80017bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20000000 	.word	0x20000000
 80017c8:	200000e0 	.word	0x200000e0
 80017cc:	200000dc 	.word	0x200000dc

080017d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017d4:	4b05      	ldr	r3, [pc, #20]	; (80017ec <HAL_IncTick+0x1c>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	461a      	mov	r2, r3
 80017da:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <HAL_IncTick+0x20>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4413      	add	r3, r2
 80017e0:	4a03      	ldr	r2, [pc, #12]	; (80017f0 <HAL_IncTick+0x20>)
 80017e2:	6013      	str	r3, [r2, #0]
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bc80      	pop	{r7}
 80017ea:	4770      	bx	lr
 80017ec:	200000e0 	.word	0x200000e0
 80017f0:	2000027c 	.word	0x2000027c

080017f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  return uwTick;
 80017f8:	4b02      	ldr	r3, [pc, #8]	; (8001804 <HAL_GetTick+0x10>)
 80017fa:	681b      	ldr	r3, [r3, #0]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr
 8001804:	2000027c 	.word	0x2000027c

08001808 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001810:	f7ff fff0 	bl	80017f4 <HAL_GetTick>
 8001814:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001820:	d005      	beq.n	800182e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001822:	4b0a      	ldr	r3, [pc, #40]	; (800184c <HAL_Delay+0x44>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	461a      	mov	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	4413      	add	r3, r2
 800182c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800182e:	bf00      	nop
 8001830:	f7ff ffe0 	bl	80017f4 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	429a      	cmp	r2, r3
 800183e:	d8f7      	bhi.n	8001830 <HAL_Delay+0x28>
  {
  }
}
 8001840:	bf00      	nop
 8001842:	bf00      	nop
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	200000e0 	.word	0x200000e0

08001850 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001860:	4b0c      	ldr	r3, [pc, #48]	; (8001894 <__NVIC_SetPriorityGrouping+0x44>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001866:	68ba      	ldr	r2, [r7, #8]
 8001868:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800186c:	4013      	ands	r3, r2
 800186e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001878:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800187c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001880:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001882:	4a04      	ldr	r2, [pc, #16]	; (8001894 <__NVIC_SetPriorityGrouping+0x44>)
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	60d3      	str	r3, [r2, #12]
}
 8001888:	bf00      	nop
 800188a:	3714      	adds	r7, #20
 800188c:	46bd      	mov	sp, r7
 800188e:	bc80      	pop	{r7}
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800189c:	4b04      	ldr	r3, [pc, #16]	; (80018b0 <__NVIC_GetPriorityGrouping+0x18>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	0a1b      	lsrs	r3, r3, #8
 80018a2:	f003 0307 	and.w	r3, r3, #7
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc80      	pop	{r7}
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	db0b      	blt.n	80018de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	f003 021f 	and.w	r2, r3, #31
 80018cc:	4906      	ldr	r1, [pc, #24]	; (80018e8 <__NVIC_EnableIRQ+0x34>)
 80018ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d2:	095b      	lsrs	r3, r3, #5
 80018d4:	2001      	movs	r0, #1
 80018d6:	fa00 f202 	lsl.w	r2, r0, r2
 80018da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc80      	pop	{r7}
 80018e6:	4770      	bx	lr
 80018e8:	e000e100 	.word	0xe000e100

080018ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	6039      	str	r1, [r7, #0]
 80018f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	db0a      	blt.n	8001916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	b2da      	uxtb	r2, r3
 8001904:	490c      	ldr	r1, [pc, #48]	; (8001938 <__NVIC_SetPriority+0x4c>)
 8001906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190a:	0112      	lsls	r2, r2, #4
 800190c:	b2d2      	uxtb	r2, r2
 800190e:	440b      	add	r3, r1
 8001910:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001914:	e00a      	b.n	800192c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	b2da      	uxtb	r2, r3
 800191a:	4908      	ldr	r1, [pc, #32]	; (800193c <__NVIC_SetPriority+0x50>)
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	f003 030f 	and.w	r3, r3, #15
 8001922:	3b04      	subs	r3, #4
 8001924:	0112      	lsls	r2, r2, #4
 8001926:	b2d2      	uxtb	r2, r2
 8001928:	440b      	add	r3, r1
 800192a:	761a      	strb	r2, [r3, #24]
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	bc80      	pop	{r7}
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	e000e100 	.word	0xe000e100
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001940:	b480      	push	{r7}
 8001942:	b089      	sub	sp, #36	; 0x24
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	f1c3 0307 	rsb	r3, r3, #7
 800195a:	2b04      	cmp	r3, #4
 800195c:	bf28      	it	cs
 800195e:	2304      	movcs	r3, #4
 8001960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	3304      	adds	r3, #4
 8001966:	2b06      	cmp	r3, #6
 8001968:	d902      	bls.n	8001970 <NVIC_EncodePriority+0x30>
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	3b03      	subs	r3, #3
 800196e:	e000      	b.n	8001972 <NVIC_EncodePriority+0x32>
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001974:	f04f 32ff 	mov.w	r2, #4294967295
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	fa02 f303 	lsl.w	r3, r2, r3
 800197e:	43da      	mvns	r2, r3
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	401a      	ands	r2, r3
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001988:	f04f 31ff 	mov.w	r1, #4294967295
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	fa01 f303 	lsl.w	r3, r1, r3
 8001992:	43d9      	mvns	r1, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001998:	4313      	orrs	r3, r2
         );
}
 800199a:	4618      	mov	r0, r3
 800199c:	3724      	adds	r7, #36	; 0x24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr

080019a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3b01      	subs	r3, #1
 80019b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019b4:	d301      	bcc.n	80019ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019b6:	2301      	movs	r3, #1
 80019b8:	e00f      	b.n	80019da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ba:	4a0a      	ldr	r2, [pc, #40]	; (80019e4 <SysTick_Config+0x40>)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3b01      	subs	r3, #1
 80019c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019c2:	210f      	movs	r1, #15
 80019c4:	f04f 30ff 	mov.w	r0, #4294967295
 80019c8:	f7ff ff90 	bl	80018ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019cc:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <SysTick_Config+0x40>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019d2:	4b04      	ldr	r3, [pc, #16]	; (80019e4 <SysTick_Config+0x40>)
 80019d4:	2207      	movs	r2, #7
 80019d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	e000e010 	.word	0xe000e010

080019e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f7ff ff2d 	bl	8001850 <__NVIC_SetPriorityGrouping>
}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b086      	sub	sp, #24
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	4603      	mov	r3, r0
 8001a06:	60b9      	str	r1, [r7, #8]
 8001a08:	607a      	str	r2, [r7, #4]
 8001a0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a10:	f7ff ff42 	bl	8001898 <__NVIC_GetPriorityGrouping>
 8001a14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	68b9      	ldr	r1, [r7, #8]
 8001a1a:	6978      	ldr	r0, [r7, #20]
 8001a1c:	f7ff ff90 	bl	8001940 <NVIC_EncodePriority>
 8001a20:	4602      	mov	r2, r0
 8001a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a26:	4611      	mov	r1, r2
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff ff5f 	bl	80018ec <__NVIC_SetPriority>
}
 8001a2e:	bf00      	nop
 8001a30:	3718      	adds	r7, #24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b082      	sub	sp, #8
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff ff35 	bl	80018b4 <__NVIC_EnableIRQ>
}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b082      	sub	sp, #8
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7ff ffa2 	bl	80019a4 <SysTick_Config>
 8001a60:	4603      	mov	r3, r0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
	...

08001a6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b08b      	sub	sp, #44	; 0x2c
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a76:	2300      	movs	r3, #0
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a7e:	e169      	b.n	8001d54 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a80:	2201      	movs	r2, #1
 8001a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	69fa      	ldr	r2, [r7, #28]
 8001a90:	4013      	ands	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	f040 8158 	bne.w	8001d4e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	4a9a      	ldr	r2, [pc, #616]	; (8001d0c <HAL_GPIO_Init+0x2a0>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d05e      	beq.n	8001b66 <HAL_GPIO_Init+0xfa>
 8001aa8:	4a98      	ldr	r2, [pc, #608]	; (8001d0c <HAL_GPIO_Init+0x2a0>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d875      	bhi.n	8001b9a <HAL_GPIO_Init+0x12e>
 8001aae:	4a98      	ldr	r2, [pc, #608]	; (8001d10 <HAL_GPIO_Init+0x2a4>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d058      	beq.n	8001b66 <HAL_GPIO_Init+0xfa>
 8001ab4:	4a96      	ldr	r2, [pc, #600]	; (8001d10 <HAL_GPIO_Init+0x2a4>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d86f      	bhi.n	8001b9a <HAL_GPIO_Init+0x12e>
 8001aba:	4a96      	ldr	r2, [pc, #600]	; (8001d14 <HAL_GPIO_Init+0x2a8>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d052      	beq.n	8001b66 <HAL_GPIO_Init+0xfa>
 8001ac0:	4a94      	ldr	r2, [pc, #592]	; (8001d14 <HAL_GPIO_Init+0x2a8>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d869      	bhi.n	8001b9a <HAL_GPIO_Init+0x12e>
 8001ac6:	4a94      	ldr	r2, [pc, #592]	; (8001d18 <HAL_GPIO_Init+0x2ac>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d04c      	beq.n	8001b66 <HAL_GPIO_Init+0xfa>
 8001acc:	4a92      	ldr	r2, [pc, #584]	; (8001d18 <HAL_GPIO_Init+0x2ac>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d863      	bhi.n	8001b9a <HAL_GPIO_Init+0x12e>
 8001ad2:	4a92      	ldr	r2, [pc, #584]	; (8001d1c <HAL_GPIO_Init+0x2b0>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d046      	beq.n	8001b66 <HAL_GPIO_Init+0xfa>
 8001ad8:	4a90      	ldr	r2, [pc, #576]	; (8001d1c <HAL_GPIO_Init+0x2b0>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d85d      	bhi.n	8001b9a <HAL_GPIO_Init+0x12e>
 8001ade:	2b12      	cmp	r3, #18
 8001ae0:	d82a      	bhi.n	8001b38 <HAL_GPIO_Init+0xcc>
 8001ae2:	2b12      	cmp	r3, #18
 8001ae4:	d859      	bhi.n	8001b9a <HAL_GPIO_Init+0x12e>
 8001ae6:	a201      	add	r2, pc, #4	; (adr r2, 8001aec <HAL_GPIO_Init+0x80>)
 8001ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aec:	08001b67 	.word	0x08001b67
 8001af0:	08001b41 	.word	0x08001b41
 8001af4:	08001b53 	.word	0x08001b53
 8001af8:	08001b95 	.word	0x08001b95
 8001afc:	08001b9b 	.word	0x08001b9b
 8001b00:	08001b9b 	.word	0x08001b9b
 8001b04:	08001b9b 	.word	0x08001b9b
 8001b08:	08001b9b 	.word	0x08001b9b
 8001b0c:	08001b9b 	.word	0x08001b9b
 8001b10:	08001b9b 	.word	0x08001b9b
 8001b14:	08001b9b 	.word	0x08001b9b
 8001b18:	08001b9b 	.word	0x08001b9b
 8001b1c:	08001b9b 	.word	0x08001b9b
 8001b20:	08001b9b 	.word	0x08001b9b
 8001b24:	08001b9b 	.word	0x08001b9b
 8001b28:	08001b9b 	.word	0x08001b9b
 8001b2c:	08001b9b 	.word	0x08001b9b
 8001b30:	08001b49 	.word	0x08001b49
 8001b34:	08001b5d 	.word	0x08001b5d
 8001b38:	4a79      	ldr	r2, [pc, #484]	; (8001d20 <HAL_GPIO_Init+0x2b4>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d013      	beq.n	8001b66 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b3e:	e02c      	b.n	8001b9a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	623b      	str	r3, [r7, #32]
          break;
 8001b46:	e029      	b.n	8001b9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	3304      	adds	r3, #4
 8001b4e:	623b      	str	r3, [r7, #32]
          break;
 8001b50:	e024      	b.n	8001b9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	3308      	adds	r3, #8
 8001b58:	623b      	str	r3, [r7, #32]
          break;
 8001b5a:	e01f      	b.n	8001b9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	330c      	adds	r3, #12
 8001b62:	623b      	str	r3, [r7, #32]
          break;
 8001b64:	e01a      	b.n	8001b9c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d102      	bne.n	8001b74 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b6e:	2304      	movs	r3, #4
 8001b70:	623b      	str	r3, [r7, #32]
          break;
 8001b72:	e013      	b.n	8001b9c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d105      	bne.n	8001b88 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b7c:	2308      	movs	r3, #8
 8001b7e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	69fa      	ldr	r2, [r7, #28]
 8001b84:	611a      	str	r2, [r3, #16]
          break;
 8001b86:	e009      	b.n	8001b9c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b88:	2308      	movs	r3, #8
 8001b8a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	69fa      	ldr	r2, [r7, #28]
 8001b90:	615a      	str	r2, [r3, #20]
          break;
 8001b92:	e003      	b.n	8001b9c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b94:	2300      	movs	r3, #0
 8001b96:	623b      	str	r3, [r7, #32]
          break;
 8001b98:	e000      	b.n	8001b9c <HAL_GPIO_Init+0x130>
          break;
 8001b9a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	2bff      	cmp	r3, #255	; 0xff
 8001ba0:	d801      	bhi.n	8001ba6 <HAL_GPIO_Init+0x13a>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	e001      	b.n	8001baa <HAL_GPIO_Init+0x13e>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	3304      	adds	r3, #4
 8001baa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	2bff      	cmp	r3, #255	; 0xff
 8001bb0:	d802      	bhi.n	8001bb8 <HAL_GPIO_Init+0x14c>
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	e002      	b.n	8001bbe <HAL_GPIO_Init+0x152>
 8001bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bba:	3b08      	subs	r3, #8
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	210f      	movs	r1, #15
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	401a      	ands	r2, r3
 8001bd0:	6a39      	ldr	r1, [r7, #32]
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd8:	431a      	orrs	r2, r3
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f000 80b1 	beq.w	8001d4e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bec:	4b4d      	ldr	r3, [pc, #308]	; (8001d24 <HAL_GPIO_Init+0x2b8>)
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	4a4c      	ldr	r2, [pc, #304]	; (8001d24 <HAL_GPIO_Init+0x2b8>)
 8001bf2:	f043 0301 	orr.w	r3, r3, #1
 8001bf6:	6193      	str	r3, [r2, #24]
 8001bf8:	4b4a      	ldr	r3, [pc, #296]	; (8001d24 <HAL_GPIO_Init+0x2b8>)
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	60bb      	str	r3, [r7, #8]
 8001c02:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c04:	4a48      	ldr	r2, [pc, #288]	; (8001d28 <HAL_GPIO_Init+0x2bc>)
 8001c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c08:	089b      	lsrs	r3, r3, #2
 8001c0a:	3302      	adds	r3, #2
 8001c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c10:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c14:	f003 0303 	and.w	r3, r3, #3
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	220f      	movs	r2, #15
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	43db      	mvns	r3, r3
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	4013      	ands	r3, r2
 8001c26:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4a40      	ldr	r2, [pc, #256]	; (8001d2c <HAL_GPIO_Init+0x2c0>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d013      	beq.n	8001c58 <HAL_GPIO_Init+0x1ec>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4a3f      	ldr	r2, [pc, #252]	; (8001d30 <HAL_GPIO_Init+0x2c4>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d00d      	beq.n	8001c54 <HAL_GPIO_Init+0x1e8>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a3e      	ldr	r2, [pc, #248]	; (8001d34 <HAL_GPIO_Init+0x2c8>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d007      	beq.n	8001c50 <HAL_GPIO_Init+0x1e4>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4a3d      	ldr	r2, [pc, #244]	; (8001d38 <HAL_GPIO_Init+0x2cc>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d101      	bne.n	8001c4c <HAL_GPIO_Init+0x1e0>
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e006      	b.n	8001c5a <HAL_GPIO_Init+0x1ee>
 8001c4c:	2304      	movs	r3, #4
 8001c4e:	e004      	b.n	8001c5a <HAL_GPIO_Init+0x1ee>
 8001c50:	2302      	movs	r3, #2
 8001c52:	e002      	b.n	8001c5a <HAL_GPIO_Init+0x1ee>
 8001c54:	2301      	movs	r3, #1
 8001c56:	e000      	b.n	8001c5a <HAL_GPIO_Init+0x1ee>
 8001c58:	2300      	movs	r3, #0
 8001c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c5c:	f002 0203 	and.w	r2, r2, #3
 8001c60:	0092      	lsls	r2, r2, #2
 8001c62:	4093      	lsls	r3, r2
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c6a:	492f      	ldr	r1, [pc, #188]	; (8001d28 <HAL_GPIO_Init+0x2bc>)
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6e:	089b      	lsrs	r3, r3, #2
 8001c70:	3302      	adds	r3, #2
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d006      	beq.n	8001c92 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c84:	4b2d      	ldr	r3, [pc, #180]	; (8001d3c <HAL_GPIO_Init+0x2d0>)
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	492c      	ldr	r1, [pc, #176]	; (8001d3c <HAL_GPIO_Init+0x2d0>)
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	608b      	str	r3, [r1, #8]
 8001c90:	e006      	b.n	8001ca0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c92:	4b2a      	ldr	r3, [pc, #168]	; (8001d3c <HAL_GPIO_Init+0x2d0>)
 8001c94:	689a      	ldr	r2, [r3, #8]
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	4928      	ldr	r1, [pc, #160]	; (8001d3c <HAL_GPIO_Init+0x2d0>)
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d006      	beq.n	8001cba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001cac:	4b23      	ldr	r3, [pc, #140]	; (8001d3c <HAL_GPIO_Init+0x2d0>)
 8001cae:	68da      	ldr	r2, [r3, #12]
 8001cb0:	4922      	ldr	r1, [pc, #136]	; (8001d3c <HAL_GPIO_Init+0x2d0>)
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	60cb      	str	r3, [r1, #12]
 8001cb8:	e006      	b.n	8001cc8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001cba:	4b20      	ldr	r3, [pc, #128]	; (8001d3c <HAL_GPIO_Init+0x2d0>)
 8001cbc:	68da      	ldr	r2, [r3, #12]
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	491e      	ldr	r1, [pc, #120]	; (8001d3c <HAL_GPIO_Init+0x2d0>)
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d006      	beq.n	8001ce2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001cd4:	4b19      	ldr	r3, [pc, #100]	; (8001d3c <HAL_GPIO_Init+0x2d0>)
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	4918      	ldr	r1, [pc, #96]	; (8001d3c <HAL_GPIO_Init+0x2d0>)
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	604b      	str	r3, [r1, #4]
 8001ce0:	e006      	b.n	8001cf0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ce2:	4b16      	ldr	r3, [pc, #88]	; (8001d3c <HAL_GPIO_Init+0x2d0>)
 8001ce4:	685a      	ldr	r2, [r3, #4]
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	4914      	ldr	r1, [pc, #80]	; (8001d3c <HAL_GPIO_Init+0x2d0>)
 8001cec:	4013      	ands	r3, r2
 8001cee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d021      	beq.n	8001d40 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cfc:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <HAL_GPIO_Init+0x2d0>)
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	490e      	ldr	r1, [pc, #56]	; (8001d3c <HAL_GPIO_Init+0x2d0>)
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	600b      	str	r3, [r1, #0]
 8001d08:	e021      	b.n	8001d4e <HAL_GPIO_Init+0x2e2>
 8001d0a:	bf00      	nop
 8001d0c:	10320000 	.word	0x10320000
 8001d10:	10310000 	.word	0x10310000
 8001d14:	10220000 	.word	0x10220000
 8001d18:	10210000 	.word	0x10210000
 8001d1c:	10120000 	.word	0x10120000
 8001d20:	10110000 	.word	0x10110000
 8001d24:	40021000 	.word	0x40021000
 8001d28:	40010000 	.word	0x40010000
 8001d2c:	40010800 	.word	0x40010800
 8001d30:	40010c00 	.word	0x40010c00
 8001d34:	40011000 	.word	0x40011000
 8001d38:	40011400 	.word	0x40011400
 8001d3c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d40:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <HAL_GPIO_Init+0x304>)
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	43db      	mvns	r3, r3
 8001d48:	4909      	ldr	r1, [pc, #36]	; (8001d70 <HAL_GPIO_Init+0x304>)
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d50:	3301      	adds	r3, #1
 8001d52:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f47f ae8e 	bne.w	8001a80 <HAL_GPIO_Init+0x14>
  }
}
 8001d64:	bf00      	nop
 8001d66:	bf00      	nop
 8001d68:	372c      	adds	r7, #44	; 0x2c
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr
 8001d70:	40010400 	.word	0x40010400

08001d74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	887b      	ldrh	r3, [r7, #2]
 8001d86:	4013      	ands	r3, r2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d002      	beq.n	8001d92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	73fb      	strb	r3, [r7, #15]
 8001d90:	e001      	b.n	8001d96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d92:	2300      	movs	r3, #0
 8001d94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3714      	adds	r7, #20
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bc80      	pop	{r7}
 8001da0:	4770      	bx	lr

08001da2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001da2:	b480      	push	{r7}
 8001da4:	b083      	sub	sp, #12
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
 8001daa:	460b      	mov	r3, r1
 8001dac:	807b      	strh	r3, [r7, #2]
 8001dae:	4613      	mov	r3, r2
 8001db0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001db2:	787b      	ldrb	r3, [r7, #1]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d003      	beq.n	8001dc0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001db8:	887a      	ldrh	r2, [r7, #2]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001dbe:	e003      	b.n	8001dc8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001dc0:	887b      	ldrh	r3, [r7, #2]
 8001dc2:	041a      	lsls	r2, r3, #16
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	611a      	str	r2, [r3, #16]
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bc80      	pop	{r7}
 8001dd0:	4770      	bx	lr

08001dd2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b085      	sub	sp, #20
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
 8001dda:	460b      	mov	r3, r1
 8001ddc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001de4:	887a      	ldrh	r2, [r7, #2]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	4013      	ands	r3, r2
 8001dea:	041a      	lsls	r2, r3, #16
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	43d9      	mvns	r1, r3
 8001df0:	887b      	ldrh	r3, [r7, #2]
 8001df2:	400b      	ands	r3, r1
 8001df4:	431a      	orrs	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	611a      	str	r2, [r3, #16]
}
 8001dfa:	bf00      	nop
 8001dfc:	3714      	adds	r7, #20
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bc80      	pop	{r7}
 8001e02:	4770      	bx	lr

08001e04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e0e:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e10:	695a      	ldr	r2, [r3, #20]
 8001e12:	88fb      	ldrh	r3, [r7, #6]
 8001e14:	4013      	ands	r3, r2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d006      	beq.n	8001e28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e1a:	4a05      	ldr	r2, [pc, #20]	; (8001e30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e1c:	88fb      	ldrh	r3, [r7, #6]
 8001e1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e20:	88fb      	ldrh	r3, [r7, #6]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f000 f806 	bl	8001e34 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e28:	bf00      	nop
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40010400 	.word	0x40010400

08001e34 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr

08001e48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e12b      	b.n	80020b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d106      	bne.n	8001e74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7fe fa70 	bl	8000354 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2224      	movs	r2, #36	; 0x24
 8001e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f022 0201 	bic.w	r2, r2, #1
 8001e8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001eaa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001eac:	f001 f832 	bl	8002f14 <HAL_RCC_GetPCLK1Freq>
 8001eb0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	4a81      	ldr	r2, [pc, #516]	; (80020bc <HAL_I2C_Init+0x274>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d807      	bhi.n	8001ecc <HAL_I2C_Init+0x84>
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	4a80      	ldr	r2, [pc, #512]	; (80020c0 <HAL_I2C_Init+0x278>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	bf94      	ite	ls
 8001ec4:	2301      	movls	r3, #1
 8001ec6:	2300      	movhi	r3, #0
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	e006      	b.n	8001eda <HAL_I2C_Init+0x92>
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	4a7d      	ldr	r2, [pc, #500]	; (80020c4 <HAL_I2C_Init+0x27c>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	bf94      	ite	ls
 8001ed4:	2301      	movls	r3, #1
 8001ed6:	2300      	movhi	r3, #0
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e0e7      	b.n	80020b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	4a78      	ldr	r2, [pc, #480]	; (80020c8 <HAL_I2C_Init+0x280>)
 8001ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eea:	0c9b      	lsrs	r3, r3, #18
 8001eec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68ba      	ldr	r2, [r7, #8]
 8001efe:	430a      	orrs	r2, r1
 8001f00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	6a1b      	ldr	r3, [r3, #32]
 8001f08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	4a6a      	ldr	r2, [pc, #424]	; (80020bc <HAL_I2C_Init+0x274>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d802      	bhi.n	8001f1c <HAL_I2C_Init+0xd4>
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	e009      	b.n	8001f30 <HAL_I2C_Init+0xe8>
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f22:	fb02 f303 	mul.w	r3, r2, r3
 8001f26:	4a69      	ldr	r2, [pc, #420]	; (80020cc <HAL_I2C_Init+0x284>)
 8001f28:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2c:	099b      	lsrs	r3, r3, #6
 8001f2e:	3301      	adds	r3, #1
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	6812      	ldr	r2, [r2, #0]
 8001f34:	430b      	orrs	r3, r1
 8001f36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	495c      	ldr	r1, [pc, #368]	; (80020bc <HAL_I2C_Init+0x274>)
 8001f4c:	428b      	cmp	r3, r1
 8001f4e:	d819      	bhi.n	8001f84 <HAL_I2C_Init+0x13c>
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	1e59      	subs	r1, r3, #1
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f5e:	1c59      	adds	r1, r3, #1
 8001f60:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001f64:	400b      	ands	r3, r1
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00a      	beq.n	8001f80 <HAL_I2C_Init+0x138>
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	1e59      	subs	r1, r3, #1
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f78:	3301      	adds	r3, #1
 8001f7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f7e:	e051      	b.n	8002024 <HAL_I2C_Init+0x1dc>
 8001f80:	2304      	movs	r3, #4
 8001f82:	e04f      	b.n	8002024 <HAL_I2C_Init+0x1dc>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d111      	bne.n	8001fb0 <HAL_I2C_Init+0x168>
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	1e58      	subs	r0, r3, #1
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6859      	ldr	r1, [r3, #4]
 8001f94:	460b      	mov	r3, r1
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	440b      	add	r3, r1
 8001f9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	bf0c      	ite	eq
 8001fa8:	2301      	moveq	r3, #1
 8001faa:	2300      	movne	r3, #0
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	e012      	b.n	8001fd6 <HAL_I2C_Init+0x18e>
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	1e58      	subs	r0, r3, #1
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6859      	ldr	r1, [r3, #4]
 8001fb8:	460b      	mov	r3, r1
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	440b      	add	r3, r1
 8001fbe:	0099      	lsls	r1, r3, #2
 8001fc0:	440b      	add	r3, r1
 8001fc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	bf0c      	ite	eq
 8001fd0:	2301      	moveq	r3, #1
 8001fd2:	2300      	movne	r3, #0
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <HAL_I2C_Init+0x196>
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e022      	b.n	8002024 <HAL_I2C_Init+0x1dc>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d10e      	bne.n	8002004 <HAL_I2C_Init+0x1bc>
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	1e58      	subs	r0, r3, #1
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6859      	ldr	r1, [r3, #4]
 8001fee:	460b      	mov	r3, r1
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	440b      	add	r3, r1
 8001ff4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002002:	e00f      	b.n	8002024 <HAL_I2C_Init+0x1dc>
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	1e58      	subs	r0, r3, #1
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6859      	ldr	r1, [r3, #4]
 800200c:	460b      	mov	r3, r1
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	440b      	add	r3, r1
 8002012:	0099      	lsls	r1, r3, #2
 8002014:	440b      	add	r3, r1
 8002016:	fbb0 f3f3 	udiv	r3, r0, r3
 800201a:	3301      	adds	r3, #1
 800201c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002020:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002024:	6879      	ldr	r1, [r7, #4]
 8002026:	6809      	ldr	r1, [r1, #0]
 8002028:	4313      	orrs	r3, r2
 800202a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	69da      	ldr	r2, [r3, #28]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a1b      	ldr	r3, [r3, #32]
 800203e:	431a      	orrs	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	430a      	orrs	r2, r1
 8002046:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002052:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	6911      	ldr	r1, [r2, #16]
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	68d2      	ldr	r2, [r2, #12]
 800205e:	4311      	orrs	r1, r2
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	6812      	ldr	r2, [r2, #0]
 8002064:	430b      	orrs	r3, r1
 8002066:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	695a      	ldr	r2, [r3, #20]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	431a      	orrs	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	430a      	orrs	r2, r1
 8002082:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f042 0201 	orr.w	r2, r2, #1
 8002092:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2220      	movs	r2, #32
 800209e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	000186a0 	.word	0x000186a0
 80020c0:	001e847f 	.word	0x001e847f
 80020c4:	003d08ff 	.word	0x003d08ff
 80020c8:	431bde83 	.word	0x431bde83
 80020cc:	10624dd3 	.word	0x10624dd3

080020d0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b088      	sub	sp, #32
 80020d4:	af02      	add	r7, sp, #8
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	607a      	str	r2, [r7, #4]
 80020da:	461a      	mov	r2, r3
 80020dc:	460b      	mov	r3, r1
 80020de:	817b      	strh	r3, [r7, #10]
 80020e0:	4613      	mov	r3, r2
 80020e2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020e4:	f7ff fb86 	bl	80017f4 <HAL_GetTick>
 80020e8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b20      	cmp	r3, #32
 80020f4:	f040 80e0 	bne.w	80022b8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	9300      	str	r3, [sp, #0]
 80020fc:	2319      	movs	r3, #25
 80020fe:	2201      	movs	r2, #1
 8002100:	4970      	ldr	r1, [pc, #448]	; (80022c4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002102:	68f8      	ldr	r0, [r7, #12]
 8002104:	f000 f964 	bl	80023d0 <I2C_WaitOnFlagUntilTimeout>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800210e:	2302      	movs	r3, #2
 8002110:	e0d3      	b.n	80022ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002118:	2b01      	cmp	r3, #1
 800211a:	d101      	bne.n	8002120 <HAL_I2C_Master_Transmit+0x50>
 800211c:	2302      	movs	r3, #2
 800211e:	e0cc      	b.n	80022ba <HAL_I2C_Master_Transmit+0x1ea>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b01      	cmp	r3, #1
 8002134:	d007      	beq.n	8002146 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f042 0201 	orr.w	r2, r2, #1
 8002144:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002154:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2221      	movs	r2, #33	; 0x21
 800215a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2210      	movs	r2, #16
 8002162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2200      	movs	r2, #0
 800216a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	893a      	ldrh	r2, [r7, #8]
 8002176:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800217c:	b29a      	uxth	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	4a50      	ldr	r2, [pc, #320]	; (80022c8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002186:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002188:	8979      	ldrh	r1, [r7, #10]
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	6a3a      	ldr	r2, [r7, #32]
 800218e:	68f8      	ldr	r0, [r7, #12]
 8002190:	f000 f89c 	bl	80022cc <I2C_MasterRequestWrite>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e08d      	b.n	80022ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800219e:	2300      	movs	r3, #0
 80021a0:	613b      	str	r3, [r7, #16]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	695b      	ldr	r3, [r3, #20]
 80021a8:	613b      	str	r3, [r7, #16]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	613b      	str	r3, [r7, #16]
 80021b2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80021b4:	e066      	b.n	8002284 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	6a39      	ldr	r1, [r7, #32]
 80021ba:	68f8      	ldr	r0, [r7, #12]
 80021bc:	f000 fa22 	bl	8002604 <I2C_WaitOnTXEFlagUntilTimeout>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00d      	beq.n	80021e2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	2b04      	cmp	r3, #4
 80021cc:	d107      	bne.n	80021de <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e06b      	b.n	80022ba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e6:	781a      	ldrb	r2, [r3, #0]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f2:	1c5a      	adds	r2, r3, #1
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	3b01      	subs	r3, #1
 8002200:	b29a      	uxth	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800220a:	3b01      	subs	r3, #1
 800220c:	b29a      	uxth	r2, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	695b      	ldr	r3, [r3, #20]
 8002218:	f003 0304 	and.w	r3, r3, #4
 800221c:	2b04      	cmp	r3, #4
 800221e:	d11b      	bne.n	8002258 <HAL_I2C_Master_Transmit+0x188>
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002224:	2b00      	cmp	r3, #0
 8002226:	d017      	beq.n	8002258 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222c:	781a      	ldrb	r2, [r3, #0]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002238:	1c5a      	adds	r2, r3, #1
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002242:	b29b      	uxth	r3, r3
 8002244:	3b01      	subs	r3, #1
 8002246:	b29a      	uxth	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002250:	3b01      	subs	r3, #1
 8002252:	b29a      	uxth	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002258:	697a      	ldr	r2, [r7, #20]
 800225a:	6a39      	ldr	r1, [r7, #32]
 800225c:	68f8      	ldr	r0, [r7, #12]
 800225e:	f000 fa19 	bl	8002694 <I2C_WaitOnBTFFlagUntilTimeout>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d00d      	beq.n	8002284 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226c:	2b04      	cmp	r3, #4
 800226e:	d107      	bne.n	8002280 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800227e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e01a      	b.n	80022ba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002288:	2b00      	cmp	r3, #0
 800228a:	d194      	bne.n	80021b6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800229a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2220      	movs	r2, #32
 80022a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80022b4:	2300      	movs	r3, #0
 80022b6:	e000      	b.n	80022ba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80022b8:	2302      	movs	r3, #2
  }
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3718      	adds	r7, #24
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	00100002 	.word	0x00100002
 80022c8:	ffff0000 	.word	0xffff0000

080022cc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b088      	sub	sp, #32
 80022d0:	af02      	add	r7, sp, #8
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	607a      	str	r2, [r7, #4]
 80022d6:	603b      	str	r3, [r7, #0]
 80022d8:	460b      	mov	r3, r1
 80022da:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	2b08      	cmp	r3, #8
 80022e6:	d006      	beq.n	80022f6 <I2C_MasterRequestWrite+0x2a>
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d003      	beq.n	80022f6 <I2C_MasterRequestWrite+0x2a>
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80022f4:	d108      	bne.n	8002308 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	e00b      	b.n	8002320 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230c:	2b12      	cmp	r3, #18
 800230e:	d107      	bne.n	8002320 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800231e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800232c:	68f8      	ldr	r0, [r7, #12]
 800232e:	f000 f84f 	bl	80023d0 <I2C_WaitOnFlagUntilTimeout>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d00d      	beq.n	8002354 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002342:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002346:	d103      	bne.n	8002350 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800234e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e035      	b.n	80023c0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800235c:	d108      	bne.n	8002370 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800235e:	897b      	ldrh	r3, [r7, #10]
 8002360:	b2db      	uxtb	r3, r3
 8002362:	461a      	mov	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800236c:	611a      	str	r2, [r3, #16]
 800236e:	e01b      	b.n	80023a8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002370:	897b      	ldrh	r3, [r7, #10]
 8002372:	11db      	asrs	r3, r3, #7
 8002374:	b2db      	uxtb	r3, r3
 8002376:	f003 0306 	and.w	r3, r3, #6
 800237a:	b2db      	uxtb	r3, r3
 800237c:	f063 030f 	orn	r3, r3, #15
 8002380:	b2da      	uxtb	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	490e      	ldr	r1, [pc, #56]	; (80023c8 <I2C_MasterRequestWrite+0xfc>)
 800238e:	68f8      	ldr	r0, [r7, #12]
 8002390:	f000 f898 	bl	80024c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e010      	b.n	80023c0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800239e:	897b      	ldrh	r3, [r7, #10]
 80023a0:	b2da      	uxtb	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	4907      	ldr	r1, [pc, #28]	; (80023cc <I2C_MasterRequestWrite+0x100>)
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	f000 f888 	bl	80024c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e000      	b.n	80023c0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	00010008 	.word	0x00010008
 80023cc:	00010002 	.word	0x00010002

080023d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	603b      	str	r3, [r7, #0]
 80023dc:	4613      	mov	r3, r2
 80023de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023e0:	e048      	b.n	8002474 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e8:	d044      	beq.n	8002474 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023ea:	f7ff fa03 	bl	80017f4 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d302      	bcc.n	8002400 <I2C_WaitOnFlagUntilTimeout+0x30>
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d139      	bne.n	8002474 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	0c1b      	lsrs	r3, r3, #16
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b01      	cmp	r3, #1
 8002408:	d10d      	bne.n	8002426 <I2C_WaitOnFlagUntilTimeout+0x56>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	695b      	ldr	r3, [r3, #20]
 8002410:	43da      	mvns	r2, r3
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	4013      	ands	r3, r2
 8002416:	b29b      	uxth	r3, r3
 8002418:	2b00      	cmp	r3, #0
 800241a:	bf0c      	ite	eq
 800241c:	2301      	moveq	r3, #1
 800241e:	2300      	movne	r3, #0
 8002420:	b2db      	uxtb	r3, r3
 8002422:	461a      	mov	r2, r3
 8002424:	e00c      	b.n	8002440 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	43da      	mvns	r2, r3
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	4013      	ands	r3, r2
 8002432:	b29b      	uxth	r3, r3
 8002434:	2b00      	cmp	r3, #0
 8002436:	bf0c      	ite	eq
 8002438:	2301      	moveq	r3, #1
 800243a:	2300      	movne	r3, #0
 800243c:	b2db      	uxtb	r3, r3
 800243e:	461a      	mov	r2, r3
 8002440:	79fb      	ldrb	r3, [r7, #7]
 8002442:	429a      	cmp	r2, r3
 8002444:	d116      	bne.n	8002474 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2200      	movs	r2, #0
 800244a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2220      	movs	r2, #32
 8002450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002460:	f043 0220 	orr.w	r2, r3, #32
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e023      	b.n	80024bc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	0c1b      	lsrs	r3, r3, #16
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b01      	cmp	r3, #1
 800247c:	d10d      	bne.n	800249a <I2C_WaitOnFlagUntilTimeout+0xca>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	695b      	ldr	r3, [r3, #20]
 8002484:	43da      	mvns	r2, r3
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	4013      	ands	r3, r2
 800248a:	b29b      	uxth	r3, r3
 800248c:	2b00      	cmp	r3, #0
 800248e:	bf0c      	ite	eq
 8002490:	2301      	moveq	r3, #1
 8002492:	2300      	movne	r3, #0
 8002494:	b2db      	uxtb	r3, r3
 8002496:	461a      	mov	r2, r3
 8002498:	e00c      	b.n	80024b4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	43da      	mvns	r2, r3
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	4013      	ands	r3, r2
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	bf0c      	ite	eq
 80024ac:	2301      	moveq	r3, #1
 80024ae:	2300      	movne	r3, #0
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	461a      	mov	r2, r3
 80024b4:	79fb      	ldrb	r3, [r7, #7]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d093      	beq.n	80023e2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3710      	adds	r7, #16
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
 80024d0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024d2:	e071      	b.n	80025b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024e2:	d123      	bne.n	800252c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024f2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80024fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2200      	movs	r2, #0
 8002502:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2220      	movs	r2, #32
 8002508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002518:	f043 0204 	orr.w	r2, r3, #4
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e067      	b.n	80025fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002532:	d041      	beq.n	80025b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002534:	f7ff f95e 	bl	80017f4 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	429a      	cmp	r2, r3
 8002542:	d302      	bcc.n	800254a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d136      	bne.n	80025b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	0c1b      	lsrs	r3, r3, #16
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2b01      	cmp	r3, #1
 8002552:	d10c      	bne.n	800256e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	43da      	mvns	r2, r3
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	4013      	ands	r3, r2
 8002560:	b29b      	uxth	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	bf14      	ite	ne
 8002566:	2301      	movne	r3, #1
 8002568:	2300      	moveq	r3, #0
 800256a:	b2db      	uxtb	r3, r3
 800256c:	e00b      	b.n	8002586 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	43da      	mvns	r2, r3
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	4013      	ands	r3, r2
 800257a:	b29b      	uxth	r3, r3
 800257c:	2b00      	cmp	r3, #0
 800257e:	bf14      	ite	ne
 8002580:	2301      	movne	r3, #1
 8002582:	2300      	moveq	r3, #0
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d016      	beq.n	80025b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2220      	movs	r2, #32
 8002594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a4:	f043 0220 	orr.w	r2, r3, #32
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e021      	b.n	80025fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	0c1b      	lsrs	r3, r3, #16
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d10c      	bne.n	80025dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	43da      	mvns	r2, r3
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	4013      	ands	r3, r2
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	bf14      	ite	ne
 80025d4:	2301      	movne	r3, #1
 80025d6:	2300      	moveq	r3, #0
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	e00b      	b.n	80025f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	43da      	mvns	r2, r3
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	4013      	ands	r3, r2
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	bf14      	ite	ne
 80025ee:	2301      	movne	r3, #1
 80025f0:	2300      	moveq	r3, #0
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f47f af6d 	bne.w	80024d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002610:	e034      	b.n	800267c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f000 f886 	bl	8002724 <I2C_IsAcknowledgeFailed>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e034      	b.n	800268c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002628:	d028      	beq.n	800267c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800262a:	f7ff f8e3 	bl	80017f4 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	68ba      	ldr	r2, [r7, #8]
 8002636:	429a      	cmp	r2, r3
 8002638:	d302      	bcc.n	8002640 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d11d      	bne.n	800267c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800264a:	2b80      	cmp	r3, #128	; 0x80
 800264c:	d016      	beq.n	800267c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2200      	movs	r2, #0
 8002652:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2220      	movs	r2, #32
 8002658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002668:	f043 0220 	orr.w	r2, r3, #32
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e007      	b.n	800268c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002686:	2b80      	cmp	r3, #128	; 0x80
 8002688:	d1c3      	bne.n	8002612 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026a0:	e034      	b.n	800270c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026a2:	68f8      	ldr	r0, [r7, #12]
 80026a4:	f000 f83e 	bl	8002724 <I2C_IsAcknowledgeFailed>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e034      	b.n	800271c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b8:	d028      	beq.n	800270c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ba:	f7ff f89b 	bl	80017f4 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	68ba      	ldr	r2, [r7, #8]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d302      	bcc.n	80026d0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d11d      	bne.n	800270c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	f003 0304 	and.w	r3, r3, #4
 80026da:	2b04      	cmp	r3, #4
 80026dc:	d016      	beq.n	800270c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2220      	movs	r2, #32
 80026e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f8:	f043 0220 	orr.w	r2, r3, #32
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e007      	b.n	800271c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	f003 0304 	and.w	r3, r3, #4
 8002716:	2b04      	cmp	r3, #4
 8002718:	d1c3      	bne.n	80026a2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002736:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800273a:	d11b      	bne.n	8002774 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002744:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2220      	movs	r2, #32
 8002750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002760:	f043 0204 	orr.w	r2, r3, #4
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e000      	b.n	8002776 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr

08002780 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e272      	b.n	8002c78 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b00      	cmp	r3, #0
 800279c:	f000 8087 	beq.w	80028ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027a0:	4b92      	ldr	r3, [pc, #584]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f003 030c 	and.w	r3, r3, #12
 80027a8:	2b04      	cmp	r3, #4
 80027aa:	d00c      	beq.n	80027c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027ac:	4b8f      	ldr	r3, [pc, #572]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f003 030c 	and.w	r3, r3, #12
 80027b4:	2b08      	cmp	r3, #8
 80027b6:	d112      	bne.n	80027de <HAL_RCC_OscConfig+0x5e>
 80027b8:	4b8c      	ldr	r3, [pc, #560]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027c4:	d10b      	bne.n	80027de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027c6:	4b89      	ldr	r3, [pc, #548]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d06c      	beq.n	80028ac <HAL_RCC_OscConfig+0x12c>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d168      	bne.n	80028ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e24c      	b.n	8002c78 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027e6:	d106      	bne.n	80027f6 <HAL_RCC_OscConfig+0x76>
 80027e8:	4b80      	ldr	r3, [pc, #512]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a7f      	ldr	r2, [pc, #508]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 80027ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027f2:	6013      	str	r3, [r2, #0]
 80027f4:	e02e      	b.n	8002854 <HAL_RCC_OscConfig+0xd4>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10c      	bne.n	8002818 <HAL_RCC_OscConfig+0x98>
 80027fe:	4b7b      	ldr	r3, [pc, #492]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a7a      	ldr	r2, [pc, #488]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 8002804:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002808:	6013      	str	r3, [r2, #0]
 800280a:	4b78      	ldr	r3, [pc, #480]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a77      	ldr	r2, [pc, #476]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 8002810:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002814:	6013      	str	r3, [r2, #0]
 8002816:	e01d      	b.n	8002854 <HAL_RCC_OscConfig+0xd4>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002820:	d10c      	bne.n	800283c <HAL_RCC_OscConfig+0xbc>
 8002822:	4b72      	ldr	r3, [pc, #456]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a71      	ldr	r2, [pc, #452]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 8002828:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800282c:	6013      	str	r3, [r2, #0]
 800282e:	4b6f      	ldr	r3, [pc, #444]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a6e      	ldr	r2, [pc, #440]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 8002834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002838:	6013      	str	r3, [r2, #0]
 800283a:	e00b      	b.n	8002854 <HAL_RCC_OscConfig+0xd4>
 800283c:	4b6b      	ldr	r3, [pc, #428]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a6a      	ldr	r2, [pc, #424]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 8002842:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002846:	6013      	str	r3, [r2, #0]
 8002848:	4b68      	ldr	r3, [pc, #416]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a67      	ldr	r2, [pc, #412]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 800284e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002852:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d013      	beq.n	8002884 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800285c:	f7fe ffca 	bl	80017f4 <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002862:	e008      	b.n	8002876 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002864:	f7fe ffc6 	bl	80017f4 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b64      	cmp	r3, #100	; 0x64
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e200      	b.n	8002c78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002876:	4b5d      	ldr	r3, [pc, #372]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d0f0      	beq.n	8002864 <HAL_RCC_OscConfig+0xe4>
 8002882:	e014      	b.n	80028ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002884:	f7fe ffb6 	bl	80017f4 <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800288c:	f7fe ffb2 	bl	80017f4 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b64      	cmp	r3, #100	; 0x64
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e1ec      	b.n	8002c78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800289e:	4b53      	ldr	r3, [pc, #332]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1f0      	bne.n	800288c <HAL_RCC_OscConfig+0x10c>
 80028aa:	e000      	b.n	80028ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d063      	beq.n	8002982 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028ba:	4b4c      	ldr	r3, [pc, #304]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f003 030c 	and.w	r3, r3, #12
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00b      	beq.n	80028de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80028c6:	4b49      	ldr	r3, [pc, #292]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f003 030c 	and.w	r3, r3, #12
 80028ce:	2b08      	cmp	r3, #8
 80028d0:	d11c      	bne.n	800290c <HAL_RCC_OscConfig+0x18c>
 80028d2:	4b46      	ldr	r3, [pc, #280]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d116      	bne.n	800290c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028de:	4b43      	ldr	r3, [pc, #268]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d005      	beq.n	80028f6 <HAL_RCC_OscConfig+0x176>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d001      	beq.n	80028f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e1c0      	b.n	8002c78 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f6:	4b3d      	ldr	r3, [pc, #244]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	4939      	ldr	r1, [pc, #228]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 8002906:	4313      	orrs	r3, r2
 8002908:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800290a:	e03a      	b.n	8002982 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d020      	beq.n	8002956 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002914:	4b36      	ldr	r3, [pc, #216]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 8002916:	2201      	movs	r2, #1
 8002918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291a:	f7fe ff6b 	bl	80017f4 <HAL_GetTick>
 800291e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002920:	e008      	b.n	8002934 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002922:	f7fe ff67 	bl	80017f4 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d901      	bls.n	8002934 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e1a1      	b.n	8002c78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002934:	4b2d      	ldr	r3, [pc, #180]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d0f0      	beq.n	8002922 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002940:	4b2a      	ldr	r3, [pc, #168]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	695b      	ldr	r3, [r3, #20]
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	4927      	ldr	r1, [pc, #156]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 8002950:	4313      	orrs	r3, r2
 8002952:	600b      	str	r3, [r1, #0]
 8002954:	e015      	b.n	8002982 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002956:	4b26      	ldr	r3, [pc, #152]	; (80029f0 <HAL_RCC_OscConfig+0x270>)
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295c:	f7fe ff4a 	bl	80017f4 <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002964:	f7fe ff46 	bl	80017f4 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e180      	b.n	8002c78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002976:	4b1d      	ldr	r3, [pc, #116]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1f0      	bne.n	8002964 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0308 	and.w	r3, r3, #8
 800298a:	2b00      	cmp	r3, #0
 800298c:	d03a      	beq.n	8002a04 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	699b      	ldr	r3, [r3, #24]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d019      	beq.n	80029ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002996:	4b17      	ldr	r3, [pc, #92]	; (80029f4 <HAL_RCC_OscConfig+0x274>)
 8002998:	2201      	movs	r2, #1
 800299a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800299c:	f7fe ff2a 	bl	80017f4 <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029a4:	f7fe ff26 	bl	80017f4 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e160      	b.n	8002c78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029b6:	4b0d      	ldr	r3, [pc, #52]	; (80029ec <HAL_RCC_OscConfig+0x26c>)
 80029b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d0f0      	beq.n	80029a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80029c2:	2001      	movs	r0, #1
 80029c4:	f000 face 	bl	8002f64 <RCC_Delay>
 80029c8:	e01c      	b.n	8002a04 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029ca:	4b0a      	ldr	r3, [pc, #40]	; (80029f4 <HAL_RCC_OscConfig+0x274>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029d0:	f7fe ff10 	bl	80017f4 <HAL_GetTick>
 80029d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029d6:	e00f      	b.n	80029f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029d8:	f7fe ff0c 	bl	80017f4 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d908      	bls.n	80029f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e146      	b.n	8002c78 <HAL_RCC_OscConfig+0x4f8>
 80029ea:	bf00      	nop
 80029ec:	40021000 	.word	0x40021000
 80029f0:	42420000 	.word	0x42420000
 80029f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029f8:	4b92      	ldr	r3, [pc, #584]	; (8002c44 <HAL_RCC_OscConfig+0x4c4>)
 80029fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1e9      	bne.n	80029d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0304 	and.w	r3, r3, #4
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f000 80a6 	beq.w	8002b5e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a12:	2300      	movs	r3, #0
 8002a14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a16:	4b8b      	ldr	r3, [pc, #556]	; (8002c44 <HAL_RCC_OscConfig+0x4c4>)
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d10d      	bne.n	8002a3e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a22:	4b88      	ldr	r3, [pc, #544]	; (8002c44 <HAL_RCC_OscConfig+0x4c4>)
 8002a24:	69db      	ldr	r3, [r3, #28]
 8002a26:	4a87      	ldr	r2, [pc, #540]	; (8002c44 <HAL_RCC_OscConfig+0x4c4>)
 8002a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a2c:	61d3      	str	r3, [r2, #28]
 8002a2e:	4b85      	ldr	r3, [pc, #532]	; (8002c44 <HAL_RCC_OscConfig+0x4c4>)
 8002a30:	69db      	ldr	r3, [r3, #28]
 8002a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a36:	60bb      	str	r3, [r7, #8]
 8002a38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a3e:	4b82      	ldr	r3, [pc, #520]	; (8002c48 <HAL_RCC_OscConfig+0x4c8>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d118      	bne.n	8002a7c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a4a:	4b7f      	ldr	r3, [pc, #508]	; (8002c48 <HAL_RCC_OscConfig+0x4c8>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a7e      	ldr	r2, [pc, #504]	; (8002c48 <HAL_RCC_OscConfig+0x4c8>)
 8002a50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a56:	f7fe fecd 	bl	80017f4 <HAL_GetTick>
 8002a5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a5c:	e008      	b.n	8002a70 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a5e:	f7fe fec9 	bl	80017f4 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b64      	cmp	r3, #100	; 0x64
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e103      	b.n	8002c78 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a70:	4b75      	ldr	r3, [pc, #468]	; (8002c48 <HAL_RCC_OscConfig+0x4c8>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d0f0      	beq.n	8002a5e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d106      	bne.n	8002a92 <HAL_RCC_OscConfig+0x312>
 8002a84:	4b6f      	ldr	r3, [pc, #444]	; (8002c44 <HAL_RCC_OscConfig+0x4c4>)
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	4a6e      	ldr	r2, [pc, #440]	; (8002c44 <HAL_RCC_OscConfig+0x4c4>)
 8002a8a:	f043 0301 	orr.w	r3, r3, #1
 8002a8e:	6213      	str	r3, [r2, #32]
 8002a90:	e02d      	b.n	8002aee <HAL_RCC_OscConfig+0x36e>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10c      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x334>
 8002a9a:	4b6a      	ldr	r3, [pc, #424]	; (8002c44 <HAL_RCC_OscConfig+0x4c4>)
 8002a9c:	6a1b      	ldr	r3, [r3, #32]
 8002a9e:	4a69      	ldr	r2, [pc, #420]	; (8002c44 <HAL_RCC_OscConfig+0x4c4>)
 8002aa0:	f023 0301 	bic.w	r3, r3, #1
 8002aa4:	6213      	str	r3, [r2, #32]
 8002aa6:	4b67      	ldr	r3, [pc, #412]	; (8002c44 <HAL_RCC_OscConfig+0x4c4>)
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
 8002aaa:	4a66      	ldr	r2, [pc, #408]	; (8002c44 <HAL_RCC_OscConfig+0x4c4>)
 8002aac:	f023 0304 	bic.w	r3, r3, #4
 8002ab0:	6213      	str	r3, [r2, #32]
 8002ab2:	e01c      	b.n	8002aee <HAL_RCC_OscConfig+0x36e>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	2b05      	cmp	r3, #5
 8002aba:	d10c      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x356>
 8002abc:	4b61      	ldr	r3, [pc, #388]	; (8002c44 <HAL_RCC_OscConfig+0x4c4>)
 8002abe:	6a1b      	ldr	r3, [r3, #32]
 8002ac0:	4a60      	ldr	r2, [pc, #384]	; (8002c44 <HAL_RCC_OscConfig+0x4c4>)
 8002ac2:	f043 0304 	orr.w	r3, r3, #4
 8002ac6:	6213      	str	r3, [r2, #32]
 8002ac8:	4b5e      	ldr	r3, [pc, #376]	; (8002c44 <HAL_RCC_OscConfig+0x4c4>)
 8002aca:	6a1b      	ldr	r3, [r3, #32]
 8002acc:	4a5d      	ldr	r2, [pc, #372]	; (8002c44 <HAL_RCC_OscConfig+0x4c4>)
 8002ace:	f043 0301 	orr.w	r3, r3, #1
 8002ad2:	6213      	str	r3, [r2, #32]
 8002ad4:	e00b      	b.n	8002aee <HAL_RCC_OscConfig+0x36e>
 8002ad6:	4b5b      	ldr	r3, [pc, #364]	; (8002c44 <HAL_RCC_OscConfig+0x4c4>)
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	4a5a      	ldr	r2, [pc, #360]	; (8002c44 <HAL_RCC_OscConfig+0x4c4>)
 8002adc:	f023 0301 	bic.w	r3, r3, #1
 8002ae0:	6213      	str	r3, [r2, #32]
 8002ae2:	4b58      	ldr	r3, [pc, #352]	; (8002c44 <HAL_RCC_OscConfig+0x4c4>)
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	4a57      	ldr	r2, [pc, #348]	; (8002c44 <HAL_RCC_OscConfig+0x4c4>)
 8002ae8:	f023 0304 	bic.w	r3, r3, #4
 8002aec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d015      	beq.n	8002b22 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002af6:	f7fe fe7d 	bl	80017f4 <HAL_GetTick>
 8002afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002afc:	e00a      	b.n	8002b14 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002afe:	f7fe fe79 	bl	80017f4 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e0b1      	b.n	8002c78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b14:	4b4b      	ldr	r3, [pc, #300]	; (8002c44 <HAL_RCC_OscConfig+0x4c4>)
 8002b16:	6a1b      	ldr	r3, [r3, #32]
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d0ee      	beq.n	8002afe <HAL_RCC_OscConfig+0x37e>
 8002b20:	e014      	b.n	8002b4c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b22:	f7fe fe67 	bl	80017f4 <HAL_GetTick>
 8002b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b28:	e00a      	b.n	8002b40 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b2a:	f7fe fe63 	bl	80017f4 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e09b      	b.n	8002c78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b40:	4b40      	ldr	r3, [pc, #256]	; (8002c44 <HAL_RCC_OscConfig+0x4c4>)
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1ee      	bne.n	8002b2a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b4c:	7dfb      	ldrb	r3, [r7, #23]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d105      	bne.n	8002b5e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b52:	4b3c      	ldr	r3, [pc, #240]	; (8002c44 <HAL_RCC_OscConfig+0x4c4>)
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	4a3b      	ldr	r2, [pc, #236]	; (8002c44 <HAL_RCC_OscConfig+0x4c4>)
 8002b58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b5c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	f000 8087 	beq.w	8002c76 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b68:	4b36      	ldr	r3, [pc, #216]	; (8002c44 <HAL_RCC_OscConfig+0x4c4>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f003 030c 	and.w	r3, r3, #12
 8002b70:	2b08      	cmp	r3, #8
 8002b72:	d061      	beq.n	8002c38 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	69db      	ldr	r3, [r3, #28]
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d146      	bne.n	8002c0a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b7c:	4b33      	ldr	r3, [pc, #204]	; (8002c4c <HAL_RCC_OscConfig+0x4cc>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b82:	f7fe fe37 	bl	80017f4 <HAL_GetTick>
 8002b86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b88:	e008      	b.n	8002b9c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b8a:	f7fe fe33 	bl	80017f4 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d901      	bls.n	8002b9c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e06d      	b.n	8002c78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b9c:	4b29      	ldr	r3, [pc, #164]	; (8002c44 <HAL_RCC_OscConfig+0x4c4>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1f0      	bne.n	8002b8a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bb0:	d108      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002bb2:	4b24      	ldr	r3, [pc, #144]	; (8002c44 <HAL_RCC_OscConfig+0x4c4>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	4921      	ldr	r1, [pc, #132]	; (8002c44 <HAL_RCC_OscConfig+0x4c4>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bc4:	4b1f      	ldr	r3, [pc, #124]	; (8002c44 <HAL_RCC_OscConfig+0x4c4>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a19      	ldr	r1, [r3, #32]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd4:	430b      	orrs	r3, r1
 8002bd6:	491b      	ldr	r1, [pc, #108]	; (8002c44 <HAL_RCC_OscConfig+0x4c4>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bdc:	4b1b      	ldr	r3, [pc, #108]	; (8002c4c <HAL_RCC_OscConfig+0x4cc>)
 8002bde:	2201      	movs	r2, #1
 8002be0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be2:	f7fe fe07 	bl	80017f4 <HAL_GetTick>
 8002be6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002be8:	e008      	b.n	8002bfc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bea:	f7fe fe03 	bl	80017f4 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e03d      	b.n	8002c78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bfc:	4b11      	ldr	r3, [pc, #68]	; (8002c44 <HAL_RCC_OscConfig+0x4c4>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d0f0      	beq.n	8002bea <HAL_RCC_OscConfig+0x46a>
 8002c08:	e035      	b.n	8002c76 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c0a:	4b10      	ldr	r3, [pc, #64]	; (8002c4c <HAL_RCC_OscConfig+0x4cc>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c10:	f7fe fdf0 	bl	80017f4 <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c16:	e008      	b.n	8002c2a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c18:	f7fe fdec 	bl	80017f4 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e026      	b.n	8002c78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c2a:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <HAL_RCC_OscConfig+0x4c4>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1f0      	bne.n	8002c18 <HAL_RCC_OscConfig+0x498>
 8002c36:	e01e      	b.n	8002c76 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	69db      	ldr	r3, [r3, #28]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d107      	bne.n	8002c50 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e019      	b.n	8002c78 <HAL_RCC_OscConfig+0x4f8>
 8002c44:	40021000 	.word	0x40021000
 8002c48:	40007000 	.word	0x40007000
 8002c4c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c50:	4b0b      	ldr	r3, [pc, #44]	; (8002c80 <HAL_RCC_OscConfig+0x500>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d106      	bne.n	8002c72 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d001      	beq.n	8002c76 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e000      	b.n	8002c78 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3718      	adds	r7, #24
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	40021000 	.word	0x40021000

08002c84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d101      	bne.n	8002c98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e0d0      	b.n	8002e3a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c98:	4b6a      	ldr	r3, [pc, #424]	; (8002e44 <HAL_RCC_ClockConfig+0x1c0>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0307 	and.w	r3, r3, #7
 8002ca0:	683a      	ldr	r2, [r7, #0]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d910      	bls.n	8002cc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ca6:	4b67      	ldr	r3, [pc, #412]	; (8002e44 <HAL_RCC_ClockConfig+0x1c0>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f023 0207 	bic.w	r2, r3, #7
 8002cae:	4965      	ldr	r1, [pc, #404]	; (8002e44 <HAL_RCC_ClockConfig+0x1c0>)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cb6:	4b63      	ldr	r3, [pc, #396]	; (8002e44 <HAL_RCC_ClockConfig+0x1c0>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0307 	and.w	r3, r3, #7
 8002cbe:	683a      	ldr	r2, [r7, #0]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d001      	beq.n	8002cc8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e0b8      	b.n	8002e3a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d020      	beq.n	8002d16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0304 	and.w	r3, r3, #4
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d005      	beq.n	8002cec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ce0:	4b59      	ldr	r3, [pc, #356]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	4a58      	ldr	r2, [pc, #352]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002cea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0308 	and.w	r3, r3, #8
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d005      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cf8:	4b53      	ldr	r3, [pc, #332]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	4a52      	ldr	r2, [pc, #328]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d04:	4b50      	ldr	r3, [pc, #320]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	494d      	ldr	r1, [pc, #308]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d040      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d107      	bne.n	8002d3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d2a:	4b47      	ldr	r3, [pc, #284]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d115      	bne.n	8002d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e07f      	b.n	8002e3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d107      	bne.n	8002d52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d42:	4b41      	ldr	r3, [pc, #260]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d109      	bne.n	8002d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e073      	b.n	8002e3a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d52:	4b3d      	ldr	r3, [pc, #244]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e06b      	b.n	8002e3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d62:	4b39      	ldr	r3, [pc, #228]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f023 0203 	bic.w	r2, r3, #3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	4936      	ldr	r1, [pc, #216]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d74:	f7fe fd3e 	bl	80017f4 <HAL_GetTick>
 8002d78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d7a:	e00a      	b.n	8002d92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d7c:	f7fe fd3a 	bl	80017f4 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e053      	b.n	8002e3a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d92:	4b2d      	ldr	r3, [pc, #180]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f003 020c 	and.w	r2, r3, #12
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d1eb      	bne.n	8002d7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002da4:	4b27      	ldr	r3, [pc, #156]	; (8002e44 <HAL_RCC_ClockConfig+0x1c0>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0307 	and.w	r3, r3, #7
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d210      	bcs.n	8002dd4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002db2:	4b24      	ldr	r3, [pc, #144]	; (8002e44 <HAL_RCC_ClockConfig+0x1c0>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f023 0207 	bic.w	r2, r3, #7
 8002dba:	4922      	ldr	r1, [pc, #136]	; (8002e44 <HAL_RCC_ClockConfig+0x1c0>)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dc2:	4b20      	ldr	r3, [pc, #128]	; (8002e44 <HAL_RCC_ClockConfig+0x1c0>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0307 	and.w	r3, r3, #7
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d001      	beq.n	8002dd4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e032      	b.n	8002e3a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0304 	and.w	r3, r3, #4
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d008      	beq.n	8002df2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002de0:	4b19      	ldr	r3, [pc, #100]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	4916      	ldr	r1, [pc, #88]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0308 	and.w	r3, r3, #8
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d009      	beq.n	8002e12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002dfe:	4b12      	ldr	r3, [pc, #72]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	490e      	ldr	r1, [pc, #56]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e12:	f000 f821 	bl	8002e58 <HAL_RCC_GetSysClockFreq>
 8002e16:	4602      	mov	r2, r0
 8002e18:	4b0b      	ldr	r3, [pc, #44]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	091b      	lsrs	r3, r3, #4
 8002e1e:	f003 030f 	and.w	r3, r3, #15
 8002e22:	490a      	ldr	r1, [pc, #40]	; (8002e4c <HAL_RCC_ClockConfig+0x1c8>)
 8002e24:	5ccb      	ldrb	r3, [r1, r3]
 8002e26:	fa22 f303 	lsr.w	r3, r2, r3
 8002e2a:	4a09      	ldr	r2, [pc, #36]	; (8002e50 <HAL_RCC_ClockConfig+0x1cc>)
 8002e2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e2e:	4b09      	ldr	r3, [pc, #36]	; (8002e54 <HAL_RCC_ClockConfig+0x1d0>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7fe fc9c 	bl	8001770 <HAL_InitTick>

  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	40022000 	.word	0x40022000
 8002e48:	40021000 	.word	0x40021000
 8002e4c:	08004ddc 	.word	0x08004ddc
 8002e50:	20000000 	.word	0x20000000
 8002e54:	200000dc 	.word	0x200000dc

08002e58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b087      	sub	sp, #28
 8002e5c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	60fb      	str	r3, [r7, #12]
 8002e62:	2300      	movs	r3, #0
 8002e64:	60bb      	str	r3, [r7, #8]
 8002e66:	2300      	movs	r3, #0
 8002e68:	617b      	str	r3, [r7, #20]
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e72:	4b1e      	ldr	r3, [pc, #120]	; (8002eec <HAL_RCC_GetSysClockFreq+0x94>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f003 030c 	and.w	r3, r3, #12
 8002e7e:	2b04      	cmp	r3, #4
 8002e80:	d002      	beq.n	8002e88 <HAL_RCC_GetSysClockFreq+0x30>
 8002e82:	2b08      	cmp	r3, #8
 8002e84:	d003      	beq.n	8002e8e <HAL_RCC_GetSysClockFreq+0x36>
 8002e86:	e027      	b.n	8002ed8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e88:	4b19      	ldr	r3, [pc, #100]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e8a:	613b      	str	r3, [r7, #16]
      break;
 8002e8c:	e027      	b.n	8002ede <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	0c9b      	lsrs	r3, r3, #18
 8002e92:	f003 030f 	and.w	r3, r3, #15
 8002e96:	4a17      	ldr	r2, [pc, #92]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e98:	5cd3      	ldrb	r3, [r2, r3]
 8002e9a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d010      	beq.n	8002ec8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ea6:	4b11      	ldr	r3, [pc, #68]	; (8002eec <HAL_RCC_GetSysClockFreq+0x94>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	0c5b      	lsrs	r3, r3, #17
 8002eac:	f003 0301 	and.w	r3, r3, #1
 8002eb0:	4a11      	ldr	r2, [pc, #68]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002eb2:	5cd3      	ldrb	r3, [r2, r3]
 8002eb4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a0d      	ldr	r2, [pc, #52]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002eba:	fb03 f202 	mul.w	r2, r3, r2
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec4:	617b      	str	r3, [r7, #20]
 8002ec6:	e004      	b.n	8002ed2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a0c      	ldr	r2, [pc, #48]	; (8002efc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ecc:	fb02 f303 	mul.w	r3, r2, r3
 8002ed0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	613b      	str	r3, [r7, #16]
      break;
 8002ed6:	e002      	b.n	8002ede <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ed8:	4b05      	ldr	r3, [pc, #20]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002eda:	613b      	str	r3, [r7, #16]
      break;
 8002edc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ede:	693b      	ldr	r3, [r7, #16]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	371c      	adds	r7, #28
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bc80      	pop	{r7}
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	007a1200 	.word	0x007a1200
 8002ef4:	08004e14 	.word	0x08004e14
 8002ef8:	08004e24 	.word	0x08004e24
 8002efc:	003d0900 	.word	0x003d0900

08002f00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f04:	4b02      	ldr	r3, [pc, #8]	; (8002f10 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f06:	681b      	ldr	r3, [r3, #0]
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bc80      	pop	{r7}
 8002f0e:	4770      	bx	lr
 8002f10:	20000000 	.word	0x20000000

08002f14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f18:	f7ff fff2 	bl	8002f00 <HAL_RCC_GetHCLKFreq>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	4b05      	ldr	r3, [pc, #20]	; (8002f34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	0a1b      	lsrs	r3, r3, #8
 8002f24:	f003 0307 	and.w	r3, r3, #7
 8002f28:	4903      	ldr	r1, [pc, #12]	; (8002f38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f2a:	5ccb      	ldrb	r3, [r1, r3]
 8002f2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	40021000 	.word	0x40021000
 8002f38:	08004dec 	.word	0x08004dec

08002f3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f40:	f7ff ffde 	bl	8002f00 <HAL_RCC_GetHCLKFreq>
 8002f44:	4602      	mov	r2, r0
 8002f46:	4b05      	ldr	r3, [pc, #20]	; (8002f5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	0adb      	lsrs	r3, r3, #11
 8002f4c:	f003 0307 	and.w	r3, r3, #7
 8002f50:	4903      	ldr	r1, [pc, #12]	; (8002f60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f52:	5ccb      	ldrb	r3, [r1, r3]
 8002f54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	08004dec 	.word	0x08004dec

08002f64 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f6c:	4b0a      	ldr	r3, [pc, #40]	; (8002f98 <RCC_Delay+0x34>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a0a      	ldr	r2, [pc, #40]	; (8002f9c <RCC_Delay+0x38>)
 8002f72:	fba2 2303 	umull	r2, r3, r2, r3
 8002f76:	0a5b      	lsrs	r3, r3, #9
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	fb02 f303 	mul.w	r3, r2, r3
 8002f7e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f80:	bf00      	nop
  }
  while (Delay --);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	1e5a      	subs	r2, r3, #1
 8002f86:	60fa      	str	r2, [r7, #12]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d1f9      	bne.n	8002f80 <RCC_Delay+0x1c>
}
 8002f8c:	bf00      	nop
 8002f8e:	bf00      	nop
 8002f90:	3714      	adds	r7, #20
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bc80      	pop	{r7}
 8002f96:	4770      	bx	lr
 8002f98:	20000000 	.word	0x20000000
 8002f9c:	10624dd3 	.word	0x10624dd3

08002fa0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e041      	b.n	8003036 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d106      	bne.n	8002fcc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f7fd fa14 	bl	80003f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2202      	movs	r2, #2
 8002fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	3304      	adds	r3, #4
 8002fdc:	4619      	mov	r1, r3
 8002fde:	4610      	mov	r0, r2
 8002fe0:	f000 fab0 	bl	8003544 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b082      	sub	sp, #8
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d101      	bne.n	8003050 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e041      	b.n	80030d4 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b00      	cmp	r3, #0
 800305a:	d106      	bne.n	800306a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 f839 	bl	80030dc <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2202      	movs	r2, #2
 800306e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	3304      	adds	r3, #4
 800307a:	4619      	mov	r1, r3
 800307c:	4610      	mov	r0, r2
 800307e:	f000 fa61 	bl	8003544 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2201      	movs	r2, #1
 8003086:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2201      	movs	r2, #1
 800308e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2201      	movs	r2, #1
 800309e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2201      	movs	r2, #1
 80030a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2201      	movs	r2, #1
 80030b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2201      	movs	r2, #1
 80030c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3708      	adds	r7, #8
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bc80      	pop	{r7}
 80030ec:	4770      	bx	lr
	...

080030f0 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d109      	bne.n	8003114 <HAL_TIM_OC_Start+0x24>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b01      	cmp	r3, #1
 800310a:	bf14      	ite	ne
 800310c:	2301      	movne	r3, #1
 800310e:	2300      	moveq	r3, #0
 8003110:	b2db      	uxtb	r3, r3
 8003112:	e022      	b.n	800315a <HAL_TIM_OC_Start+0x6a>
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	2b04      	cmp	r3, #4
 8003118:	d109      	bne.n	800312e <HAL_TIM_OC_Start+0x3e>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b01      	cmp	r3, #1
 8003124:	bf14      	ite	ne
 8003126:	2301      	movne	r3, #1
 8003128:	2300      	moveq	r3, #0
 800312a:	b2db      	uxtb	r3, r3
 800312c:	e015      	b.n	800315a <HAL_TIM_OC_Start+0x6a>
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	2b08      	cmp	r3, #8
 8003132:	d109      	bne.n	8003148 <HAL_TIM_OC_Start+0x58>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b01      	cmp	r3, #1
 800313e:	bf14      	ite	ne
 8003140:	2301      	movne	r3, #1
 8003142:	2300      	moveq	r3, #0
 8003144:	b2db      	uxtb	r3, r3
 8003146:	e008      	b.n	800315a <HAL_TIM_OC_Start+0x6a>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800314e:	b2db      	uxtb	r3, r3
 8003150:	2b01      	cmp	r3, #1
 8003152:	bf14      	ite	ne
 8003154:	2301      	movne	r3, #1
 8003156:	2300      	moveq	r3, #0
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e05e      	b.n	8003220 <HAL_TIM_OC_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d104      	bne.n	8003172 <HAL_TIM_OC_Start+0x82>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2202      	movs	r2, #2
 800316c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003170:	e013      	b.n	800319a <HAL_TIM_OC_Start+0xaa>
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	2b04      	cmp	r3, #4
 8003176:	d104      	bne.n	8003182 <HAL_TIM_OC_Start+0x92>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2202      	movs	r2, #2
 800317c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003180:	e00b      	b.n	800319a <HAL_TIM_OC_Start+0xaa>
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	2b08      	cmp	r3, #8
 8003186:	d104      	bne.n	8003192 <HAL_TIM_OC_Start+0xa2>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2202      	movs	r2, #2
 800318c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003190:	e003      	b.n	800319a <HAL_TIM_OC_Start+0xaa>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2202      	movs	r2, #2
 8003196:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2201      	movs	r2, #1
 80031a0:	6839      	ldr	r1, [r7, #0]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f000 fc4e 	bl	8003a44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a1e      	ldr	r2, [pc, #120]	; (8003228 <HAL_TIM_OC_Start+0x138>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d107      	bne.n	80031c2 <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a18      	ldr	r2, [pc, #96]	; (8003228 <HAL_TIM_OC_Start+0x138>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d00e      	beq.n	80031ea <HAL_TIM_OC_Start+0xfa>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031d4:	d009      	beq.n	80031ea <HAL_TIM_OC_Start+0xfa>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a14      	ldr	r2, [pc, #80]	; (800322c <HAL_TIM_OC_Start+0x13c>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d004      	beq.n	80031ea <HAL_TIM_OC_Start+0xfa>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a12      	ldr	r2, [pc, #72]	; (8003230 <HAL_TIM_OC_Start+0x140>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d111      	bne.n	800320e <HAL_TIM_OC_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f003 0307 	and.w	r3, r3, #7
 80031f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2b06      	cmp	r3, #6
 80031fa:	d010      	beq.n	800321e <HAL_TIM_OC_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f042 0201 	orr.w	r2, r2, #1
 800320a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800320c:	e007      	b.n	800321e <HAL_TIM_OC_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f042 0201 	orr.w	r2, r2, #1
 800321c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	3710      	adds	r7, #16
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	40012c00 	.word	0x40012c00
 800322c:	40000400 	.word	0x40000400
 8003230:	40000800 	.word	0x40000800

08003234 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2200      	movs	r2, #0
 8003244:	6839      	ldr	r1, [r7, #0]
 8003246:	4618      	mov	r0, r3
 8003248:	f000 fbfc 	bl	8003a44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a29      	ldr	r2, [pc, #164]	; (80032f8 <HAL_TIM_OC_Stop+0xc4>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d117      	bne.n	8003286 <HAL_TIM_OC_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6a1a      	ldr	r2, [r3, #32]
 800325c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003260:	4013      	ands	r3, r2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10f      	bne.n	8003286 <HAL_TIM_OC_Stop+0x52>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	6a1a      	ldr	r2, [r3, #32]
 800326c:	f240 4344 	movw	r3, #1092	; 0x444
 8003270:	4013      	ands	r3, r2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d107      	bne.n	8003286 <HAL_TIM_OC_Stop+0x52>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003284:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	6a1a      	ldr	r2, [r3, #32]
 800328c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003290:	4013      	ands	r3, r2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d10f      	bne.n	80032b6 <HAL_TIM_OC_Stop+0x82>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	6a1a      	ldr	r2, [r3, #32]
 800329c:	f240 4344 	movw	r3, #1092	; 0x444
 80032a0:	4013      	ands	r3, r2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d107      	bne.n	80032b6 <HAL_TIM_OC_Stop+0x82>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 0201 	bic.w	r2, r2, #1
 80032b4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d104      	bne.n	80032c6 <HAL_TIM_OC_Stop+0x92>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032c4:	e013      	b.n	80032ee <HAL_TIM_OC_Stop+0xba>
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	2b04      	cmp	r3, #4
 80032ca:	d104      	bne.n	80032d6 <HAL_TIM_OC_Stop+0xa2>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032d4:	e00b      	b.n	80032ee <HAL_TIM_OC_Stop+0xba>
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	2b08      	cmp	r3, #8
 80032da:	d104      	bne.n	80032e6 <HAL_TIM_OC_Stop+0xb2>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032e4:	e003      	b.n	80032ee <HAL_TIM_OC_Stop+0xba>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2201      	movs	r2, #1
 80032ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	40012c00 	.word	0x40012c00

080032fc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003308:	2300      	movs	r3, #0
 800330a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003312:	2b01      	cmp	r3, #1
 8003314:	d101      	bne.n	800331a <HAL_TIM_OC_ConfigChannel+0x1e>
 8003316:	2302      	movs	r3, #2
 8003318:	e048      	b.n	80033ac <HAL_TIM_OC_ConfigChannel+0xb0>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2b0c      	cmp	r3, #12
 8003326:	d839      	bhi.n	800339c <HAL_TIM_OC_ConfigChannel+0xa0>
 8003328:	a201      	add	r2, pc, #4	; (adr r2, 8003330 <HAL_TIM_OC_ConfigChannel+0x34>)
 800332a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800332e:	bf00      	nop
 8003330:	08003365 	.word	0x08003365
 8003334:	0800339d 	.word	0x0800339d
 8003338:	0800339d 	.word	0x0800339d
 800333c:	0800339d 	.word	0x0800339d
 8003340:	08003373 	.word	0x08003373
 8003344:	0800339d 	.word	0x0800339d
 8003348:	0800339d 	.word	0x0800339d
 800334c:	0800339d 	.word	0x0800339d
 8003350:	08003381 	.word	0x08003381
 8003354:	0800339d 	.word	0x0800339d
 8003358:	0800339d 	.word	0x0800339d
 800335c:	0800339d 	.word	0x0800339d
 8003360:	0800338f 	.word	0x0800338f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68b9      	ldr	r1, [r7, #8]
 800336a:	4618      	mov	r0, r3
 800336c:	f000 f94c 	bl	8003608 <TIM_OC1_SetConfig>
      break;
 8003370:	e017      	b.n	80033a2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68b9      	ldr	r1, [r7, #8]
 8003378:	4618      	mov	r0, r3
 800337a:	f000 f9ab 	bl	80036d4 <TIM_OC2_SetConfig>
      break;
 800337e:	e010      	b.n	80033a2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68b9      	ldr	r1, [r7, #8]
 8003386:	4618      	mov	r0, r3
 8003388:	f000 fa0e 	bl	80037a8 <TIM_OC3_SetConfig>
      break;
 800338c:	e009      	b.n	80033a2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68b9      	ldr	r1, [r7, #8]
 8003394:	4618      	mov	r0, r3
 8003396:	f000 fa71 	bl	800387c <TIM_OC4_SetConfig>
      break;
 800339a:	e002      	b.n	80033a2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	75fb      	strb	r3, [r7, #23]
      break;
 80033a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3718      	adds	r7, #24
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033be:	2300      	movs	r3, #0
 80033c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d101      	bne.n	80033d0 <HAL_TIM_ConfigClockSource+0x1c>
 80033cc:	2302      	movs	r3, #2
 80033ce:	e0b4      	b.n	800353a <HAL_TIM_ConfigClockSource+0x186>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2202      	movs	r2, #2
 80033dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68ba      	ldr	r2, [r7, #8]
 80033fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003408:	d03e      	beq.n	8003488 <HAL_TIM_ConfigClockSource+0xd4>
 800340a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800340e:	f200 8087 	bhi.w	8003520 <HAL_TIM_ConfigClockSource+0x16c>
 8003412:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003416:	f000 8086 	beq.w	8003526 <HAL_TIM_ConfigClockSource+0x172>
 800341a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800341e:	d87f      	bhi.n	8003520 <HAL_TIM_ConfigClockSource+0x16c>
 8003420:	2b70      	cmp	r3, #112	; 0x70
 8003422:	d01a      	beq.n	800345a <HAL_TIM_ConfigClockSource+0xa6>
 8003424:	2b70      	cmp	r3, #112	; 0x70
 8003426:	d87b      	bhi.n	8003520 <HAL_TIM_ConfigClockSource+0x16c>
 8003428:	2b60      	cmp	r3, #96	; 0x60
 800342a:	d050      	beq.n	80034ce <HAL_TIM_ConfigClockSource+0x11a>
 800342c:	2b60      	cmp	r3, #96	; 0x60
 800342e:	d877      	bhi.n	8003520 <HAL_TIM_ConfigClockSource+0x16c>
 8003430:	2b50      	cmp	r3, #80	; 0x50
 8003432:	d03c      	beq.n	80034ae <HAL_TIM_ConfigClockSource+0xfa>
 8003434:	2b50      	cmp	r3, #80	; 0x50
 8003436:	d873      	bhi.n	8003520 <HAL_TIM_ConfigClockSource+0x16c>
 8003438:	2b40      	cmp	r3, #64	; 0x40
 800343a:	d058      	beq.n	80034ee <HAL_TIM_ConfigClockSource+0x13a>
 800343c:	2b40      	cmp	r3, #64	; 0x40
 800343e:	d86f      	bhi.n	8003520 <HAL_TIM_ConfigClockSource+0x16c>
 8003440:	2b30      	cmp	r3, #48	; 0x30
 8003442:	d064      	beq.n	800350e <HAL_TIM_ConfigClockSource+0x15a>
 8003444:	2b30      	cmp	r3, #48	; 0x30
 8003446:	d86b      	bhi.n	8003520 <HAL_TIM_ConfigClockSource+0x16c>
 8003448:	2b20      	cmp	r3, #32
 800344a:	d060      	beq.n	800350e <HAL_TIM_ConfigClockSource+0x15a>
 800344c:	2b20      	cmp	r3, #32
 800344e:	d867      	bhi.n	8003520 <HAL_TIM_ConfigClockSource+0x16c>
 8003450:	2b00      	cmp	r3, #0
 8003452:	d05c      	beq.n	800350e <HAL_TIM_ConfigClockSource+0x15a>
 8003454:	2b10      	cmp	r3, #16
 8003456:	d05a      	beq.n	800350e <HAL_TIM_ConfigClockSource+0x15a>
 8003458:	e062      	b.n	8003520 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800346a:	f000 facc 	bl	8003a06 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800347c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68ba      	ldr	r2, [r7, #8]
 8003484:	609a      	str	r2, [r3, #8]
      break;
 8003486:	e04f      	b.n	8003528 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003498:	f000 fab5 	bl	8003a06 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689a      	ldr	r2, [r3, #8]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034aa:	609a      	str	r2, [r3, #8]
      break;
 80034ac:	e03c      	b.n	8003528 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ba:	461a      	mov	r2, r3
 80034bc:	f000 fa2c 	bl	8003918 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2150      	movs	r1, #80	; 0x50
 80034c6:	4618      	mov	r0, r3
 80034c8:	f000 fa83 	bl	80039d2 <TIM_ITRx_SetConfig>
      break;
 80034cc:	e02c      	b.n	8003528 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034da:	461a      	mov	r2, r3
 80034dc:	f000 fa4a 	bl	8003974 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2160      	movs	r1, #96	; 0x60
 80034e6:	4618      	mov	r0, r3
 80034e8:	f000 fa73 	bl	80039d2 <TIM_ITRx_SetConfig>
      break;
 80034ec:	e01c      	b.n	8003528 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034fa:	461a      	mov	r2, r3
 80034fc:	f000 fa0c 	bl	8003918 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2140      	movs	r1, #64	; 0x40
 8003506:	4618      	mov	r0, r3
 8003508:	f000 fa63 	bl	80039d2 <TIM_ITRx_SetConfig>
      break;
 800350c:	e00c      	b.n	8003528 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4619      	mov	r1, r3
 8003518:	4610      	mov	r0, r2
 800351a:	f000 fa5a 	bl	80039d2 <TIM_ITRx_SetConfig>
      break;
 800351e:	e003      	b.n	8003528 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	73fb      	strb	r3, [r7, #15]
      break;
 8003524:	e000      	b.n	8003528 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003526:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003538:	7bfb      	ldrb	r3, [r7, #15]
}
 800353a:	4618      	mov	r0, r3
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
	...

08003544 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a29      	ldr	r2, [pc, #164]	; (80035fc <TIM_Base_SetConfig+0xb8>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d00b      	beq.n	8003574 <TIM_Base_SetConfig+0x30>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003562:	d007      	beq.n	8003574 <TIM_Base_SetConfig+0x30>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a26      	ldr	r2, [pc, #152]	; (8003600 <TIM_Base_SetConfig+0xbc>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d003      	beq.n	8003574 <TIM_Base_SetConfig+0x30>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a25      	ldr	r2, [pc, #148]	; (8003604 <TIM_Base_SetConfig+0xc0>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d108      	bne.n	8003586 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800357a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	4313      	orrs	r3, r2
 8003584:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a1c      	ldr	r2, [pc, #112]	; (80035fc <TIM_Base_SetConfig+0xb8>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d00b      	beq.n	80035a6 <TIM_Base_SetConfig+0x62>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003594:	d007      	beq.n	80035a6 <TIM_Base_SetConfig+0x62>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a19      	ldr	r2, [pc, #100]	; (8003600 <TIM_Base_SetConfig+0xbc>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d003      	beq.n	80035a6 <TIM_Base_SetConfig+0x62>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a18      	ldr	r2, [pc, #96]	; (8003604 <TIM_Base_SetConfig+0xc0>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d108      	bne.n	80035b8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	695b      	ldr	r3, [r3, #20]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	689a      	ldr	r2, [r3, #8]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a07      	ldr	r2, [pc, #28]	; (80035fc <TIM_Base_SetConfig+0xb8>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d103      	bne.n	80035ec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	691a      	ldr	r2, [r3, #16]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	615a      	str	r2, [r3, #20]
}
 80035f2:	bf00      	nop
 80035f4:	3714      	adds	r7, #20
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bc80      	pop	{r7}
 80035fa:	4770      	bx	lr
 80035fc:	40012c00 	.word	0x40012c00
 8003600:	40000400 	.word	0x40000400
 8003604:	40000800 	.word	0x40000800

08003608 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003608:	b480      	push	{r7}
 800360a:	b087      	sub	sp, #28
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	f023 0201 	bic.w	r2, r3, #1
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f023 0303 	bic.w	r3, r3, #3
 800363e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	4313      	orrs	r3, r2
 8003648:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f023 0302 	bic.w	r3, r3, #2
 8003650:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	4313      	orrs	r3, r2
 800365a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a1c      	ldr	r2, [pc, #112]	; (80036d0 <TIM_OC1_SetConfig+0xc8>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d10c      	bne.n	800367e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	f023 0308 	bic.w	r3, r3, #8
 800366a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	697a      	ldr	r2, [r7, #20]
 8003672:	4313      	orrs	r3, r2
 8003674:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	f023 0304 	bic.w	r3, r3, #4
 800367c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a13      	ldr	r2, [pc, #76]	; (80036d0 <TIM_OC1_SetConfig+0xc8>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d111      	bne.n	80036aa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800368c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003694:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	4313      	orrs	r3, r2
 800369e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	693a      	ldr	r2, [r7, #16]
 80036ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685a      	ldr	r2, [r3, #4]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	697a      	ldr	r2, [r7, #20]
 80036c2:	621a      	str	r2, [r3, #32]
}
 80036c4:	bf00      	nop
 80036c6:	371c      	adds	r7, #28
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bc80      	pop	{r7}
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	40012c00 	.word	0x40012c00

080036d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b087      	sub	sp, #28
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	f023 0210 	bic.w	r2, r3, #16
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800370a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	021b      	lsls	r3, r3, #8
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	4313      	orrs	r3, r2
 8003716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	f023 0320 	bic.w	r3, r3, #32
 800371e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	011b      	lsls	r3, r3, #4
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	4313      	orrs	r3, r2
 800372a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a1d      	ldr	r2, [pc, #116]	; (80037a4 <TIM_OC2_SetConfig+0xd0>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d10d      	bne.n	8003750 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800373a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	011b      	lsls	r3, r3, #4
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	4313      	orrs	r3, r2
 8003746:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800374e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a14      	ldr	r2, [pc, #80]	; (80037a4 <TIM_OC2_SetConfig+0xd0>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d113      	bne.n	8003780 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800375e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003766:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	695b      	ldr	r3, [r3, #20]
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	4313      	orrs	r3, r2
 8003772:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	4313      	orrs	r3, r2
 800377e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685a      	ldr	r2, [r3, #4]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	697a      	ldr	r2, [r7, #20]
 8003798:	621a      	str	r2, [r3, #32]
}
 800379a:	bf00      	nop
 800379c:	371c      	adds	r7, #28
 800379e:	46bd      	mov	sp, r7
 80037a0:	bc80      	pop	{r7}
 80037a2:	4770      	bx	lr
 80037a4:	40012c00 	.word	0x40012c00

080037a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b087      	sub	sp, #28
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	69db      	ldr	r3, [r3, #28]
 80037ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f023 0303 	bic.w	r3, r3, #3
 80037de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	021b      	lsls	r3, r3, #8
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a1d      	ldr	r2, [pc, #116]	; (8003878 <TIM_OC3_SetConfig+0xd0>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d10d      	bne.n	8003822 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800380c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	021b      	lsls	r3, r3, #8
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	4313      	orrs	r3, r2
 8003818:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003820:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a14      	ldr	r2, [pc, #80]	; (8003878 <TIM_OC3_SetConfig+0xd0>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d113      	bne.n	8003852 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003830:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003838:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	011b      	lsls	r3, r3, #4
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	4313      	orrs	r3, r2
 8003844:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	011b      	lsls	r3, r3, #4
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	4313      	orrs	r3, r2
 8003850:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	685a      	ldr	r2, [r3, #4]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	697a      	ldr	r2, [r7, #20]
 800386a:	621a      	str	r2, [r3, #32]
}
 800386c:	bf00      	nop
 800386e:	371c      	adds	r7, #28
 8003870:	46bd      	mov	sp, r7
 8003872:	bc80      	pop	{r7}
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	40012c00 	.word	0x40012c00

0800387c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800387c:	b480      	push	{r7}
 800387e:	b087      	sub	sp, #28
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a1b      	ldr	r3, [r3, #32]
 8003890:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	69db      	ldr	r3, [r3, #28]
 80038a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	021b      	lsls	r3, r3, #8
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	4313      	orrs	r3, r2
 80038be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	031b      	lsls	r3, r3, #12
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a0f      	ldr	r2, [pc, #60]	; (8003914 <TIM_OC4_SetConfig+0x98>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d109      	bne.n	80038f0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	019b      	lsls	r3, r3, #6
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	621a      	str	r2, [r3, #32]
}
 800390a:	bf00      	nop
 800390c:	371c      	adds	r7, #28
 800390e:	46bd      	mov	sp, r7
 8003910:	bc80      	pop	{r7}
 8003912:	4770      	bx	lr
 8003914:	40012c00 	.word	0x40012c00

08003918 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003918:	b480      	push	{r7}
 800391a:	b087      	sub	sp, #28
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6a1b      	ldr	r3, [r3, #32]
 8003928:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	f023 0201 	bic.w	r2, r3, #1
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003942:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	011b      	lsls	r3, r3, #4
 8003948:	693a      	ldr	r2, [r7, #16]
 800394a:	4313      	orrs	r3, r2
 800394c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	f023 030a 	bic.w	r3, r3, #10
 8003954:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	4313      	orrs	r3, r2
 800395c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	697a      	ldr	r2, [r7, #20]
 8003968:	621a      	str	r2, [r3, #32]
}
 800396a:	bf00      	nop
 800396c:	371c      	adds	r7, #28
 800396e:	46bd      	mov	sp, r7
 8003970:	bc80      	pop	{r7}
 8003972:	4770      	bx	lr

08003974 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003974:	b480      	push	{r7}
 8003976:	b087      	sub	sp, #28
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6a1b      	ldr	r3, [r3, #32]
 8003984:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	f023 0210 	bic.w	r2, r3, #16
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800399e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	031b      	lsls	r3, r3, #12
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039b0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	011b      	lsls	r3, r3, #4
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	621a      	str	r2, [r3, #32]
}
 80039c8:	bf00      	nop
 80039ca:	371c      	adds	r7, #28
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bc80      	pop	{r7}
 80039d0:	4770      	bx	lr

080039d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b085      	sub	sp, #20
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
 80039da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	f043 0307 	orr.w	r3, r3, #7
 80039f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	609a      	str	r2, [r3, #8]
}
 80039fc:	bf00      	nop
 80039fe:	3714      	adds	r7, #20
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bc80      	pop	{r7}
 8003a04:	4770      	bx	lr

08003a06 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a06:	b480      	push	{r7}
 8003a08:	b087      	sub	sp, #28
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	60f8      	str	r0, [r7, #12]
 8003a0e:	60b9      	str	r1, [r7, #8]
 8003a10:	607a      	str	r2, [r7, #4]
 8003a12:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a20:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	021a      	lsls	r2, r3, #8
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	431a      	orrs	r2, r3
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	609a      	str	r2, [r3, #8]
}
 8003a3a:	bf00      	nop
 8003a3c:	371c      	adds	r7, #28
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bc80      	pop	{r7}
 8003a42:	4770      	bx	lr

08003a44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b087      	sub	sp, #28
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	f003 031f 	and.w	r3, r3, #31
 8003a56:	2201      	movs	r2, #1
 8003a58:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6a1a      	ldr	r2, [r3, #32]
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	43db      	mvns	r3, r3
 8003a66:	401a      	ands	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6a1a      	ldr	r2, [r3, #32]
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	f003 031f 	and.w	r3, r3, #31
 8003a76:	6879      	ldr	r1, [r7, #4]
 8003a78:	fa01 f303 	lsl.w	r3, r1, r3
 8003a7c:	431a      	orrs	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	621a      	str	r2, [r3, #32]
}
 8003a82:	bf00      	nop
 8003a84:	371c      	adds	r7, #28
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bc80      	pop	{r7}
 8003a8a:	4770      	bx	lr

08003a8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d101      	bne.n	8003aa4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	e046      	b.n	8003b32 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2202      	movs	r2, #2
 8003ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a16      	ldr	r2, [pc, #88]	; (8003b3c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d00e      	beq.n	8003b06 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003af0:	d009      	beq.n	8003b06 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a12      	ldr	r2, [pc, #72]	; (8003b40 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d004      	beq.n	8003b06 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a10      	ldr	r2, [pc, #64]	; (8003b44 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d10c      	bne.n	8003b20 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	68ba      	ldr	r2, [r7, #8]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68ba      	ldr	r2, [r7, #8]
 8003b1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3714      	adds	r7, #20
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bc80      	pop	{r7}
 8003b3a:	4770      	bx	lr
 8003b3c:	40012c00 	.word	0x40012c00
 8003b40:	40000400 	.word	0x40000400
 8003b44:	40000800 	.word	0x40000800

08003b48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e042      	b.n	8003be0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d106      	bne.n	8003b74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7fc fc8c 	bl	800048c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2224      	movs	r2, #36	; 0x24
 8003b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68da      	ldr	r2, [r3, #12]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 f9af 	bl	8003ef0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	691a      	ldr	r2, [r3, #16]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ba0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	695a      	ldr	r2, [r3, #20]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68da      	ldr	r2, [r3, #12]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2220      	movs	r2, #32
 8003bcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3708      	adds	r7, #8
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b08a      	sub	sp, #40	; 0x28
 8003bec:	af02      	add	r7, sp, #8
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	603b      	str	r3, [r7, #0]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	2b20      	cmp	r3, #32
 8003c06:	d16d      	bne.n	8003ce4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d002      	beq.n	8003c14 <HAL_UART_Transmit+0x2c>
 8003c0e:	88fb      	ldrh	r3, [r7, #6]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d101      	bne.n	8003c18 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e066      	b.n	8003ce6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2221      	movs	r2, #33	; 0x21
 8003c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c26:	f7fd fde5 	bl	80017f4 <HAL_GetTick>
 8003c2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	88fa      	ldrh	r2, [r7, #6]
 8003c30:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	88fa      	ldrh	r2, [r7, #6]
 8003c36:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c40:	d108      	bne.n	8003c54 <HAL_UART_Transmit+0x6c>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d104      	bne.n	8003c54 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	61bb      	str	r3, [r7, #24]
 8003c52:	e003      	b.n	8003c5c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c5c:	e02a      	b.n	8003cb4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	9300      	str	r3, [sp, #0]
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	2200      	movs	r2, #0
 8003c66:	2180      	movs	r1, #128	; 0x80
 8003c68:	68f8      	ldr	r0, [r7, #12]
 8003c6a:	f000 f8d2 	bl	8003e12 <UART_WaitOnFlagUntilTimeout>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d001      	beq.n	8003c78 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e036      	b.n	8003ce6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10b      	bne.n	8003c96 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	881b      	ldrh	r3, [r3, #0]
 8003c82:	461a      	mov	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c8c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	3302      	adds	r3, #2
 8003c92:	61bb      	str	r3, [r7, #24]
 8003c94:	e007      	b.n	8003ca6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	781a      	ldrb	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	3b01      	subs	r3, #1
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1cf      	bne.n	8003c5e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	2140      	movs	r1, #64	; 0x40
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f000 f8a2 	bl	8003e12 <UART_WaitOnFlagUntilTimeout>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d001      	beq.n	8003cd8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e006      	b.n	8003ce6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2220      	movs	r2, #32
 8003cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	e000      	b.n	8003ce6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003ce4:	2302      	movs	r3, #2
  }
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3720      	adds	r7, #32
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b08a      	sub	sp, #40	; 0x28
 8003cf2:	af02      	add	r7, sp, #8
 8003cf4:	60f8      	str	r0, [r7, #12]
 8003cf6:	60b9      	str	r1, [r7, #8]
 8003cf8:	603b      	str	r3, [r7, #0]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b20      	cmp	r3, #32
 8003d0c:	d17c      	bne.n	8003e08 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d002      	beq.n	8003d1a <HAL_UART_Receive+0x2c>
 8003d14:	88fb      	ldrh	r3, [r7, #6]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e075      	b.n	8003e0a <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2222      	movs	r2, #34	; 0x22
 8003d28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d32:	f7fd fd5f 	bl	80017f4 <HAL_GetTick>
 8003d36:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	88fa      	ldrh	r2, [r7, #6]
 8003d3c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	88fa      	ldrh	r2, [r7, #6]
 8003d42:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d4c:	d108      	bne.n	8003d60 <HAL_UART_Receive+0x72>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d104      	bne.n	8003d60 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8003d56:	2300      	movs	r3, #0
 8003d58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	61bb      	str	r3, [r7, #24]
 8003d5e:	e003      	b.n	8003d68 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d64:	2300      	movs	r3, #0
 8003d66:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003d68:	e043      	b.n	8003df2 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	9300      	str	r3, [sp, #0]
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	2200      	movs	r2, #0
 8003d72:	2120      	movs	r1, #32
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	f000 f84c 	bl	8003e12 <UART_WaitOnFlagUntilTimeout>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d001      	beq.n	8003d84 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e042      	b.n	8003e0a <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d10c      	bne.n	8003da4 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	3302      	adds	r3, #2
 8003da0:	61bb      	str	r3, [r7, #24]
 8003da2:	e01f      	b.n	8003de4 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dac:	d007      	beq.n	8003dbe <HAL_UART_Receive+0xd0>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10a      	bne.n	8003dcc <HAL_UART_Receive+0xde>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d106      	bne.n	8003dcc <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	b2da      	uxtb	r2, r3
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	701a      	strb	r2, [r3, #0]
 8003dca:	e008      	b.n	8003dde <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dd8:	b2da      	uxtb	r2, r3
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	3301      	adds	r3, #1
 8003de2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	3b01      	subs	r3, #1
 8003dec:	b29a      	uxth	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1b6      	bne.n	8003d6a <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2220      	movs	r2, #32
 8003e00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8003e04:	2300      	movs	r3, #0
 8003e06:	e000      	b.n	8003e0a <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003e08:	2302      	movs	r3, #2
  }
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3720      	adds	r7, #32
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b090      	sub	sp, #64	; 0x40
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	60f8      	str	r0, [r7, #12]
 8003e1a:	60b9      	str	r1, [r7, #8]
 8003e1c:	603b      	str	r3, [r7, #0]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e22:	e050      	b.n	8003ec6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e2a:	d04c      	beq.n	8003ec6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d007      	beq.n	8003e42 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e32:	f7fd fcdf 	bl	80017f4 <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d241      	bcs.n	8003ec6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	330c      	adds	r3, #12
 8003e48:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e4c:	e853 3f00 	ldrex	r3, [r3]
 8003e50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e54:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	330c      	adds	r3, #12
 8003e60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e62:	637a      	str	r2, [r7, #52]	; 0x34
 8003e64:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e6a:	e841 2300 	strex	r3, r2, [r1]
 8003e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1e5      	bne.n	8003e42 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	3314      	adds	r3, #20
 8003e7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	e853 3f00 	ldrex	r3, [r3]
 8003e84:	613b      	str	r3, [r7, #16]
   return(result);
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	f023 0301 	bic.w	r3, r3, #1
 8003e8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	3314      	adds	r3, #20
 8003e94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e96:	623a      	str	r2, [r7, #32]
 8003e98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9a:	69f9      	ldr	r1, [r7, #28]
 8003e9c:	6a3a      	ldr	r2, [r7, #32]
 8003e9e:	e841 2300 	strex	r3, r2, [r1]
 8003ea2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1e5      	bne.n	8003e76 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2220      	movs	r2, #32
 8003eae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2220      	movs	r2, #32
 8003eb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e00f      	b.n	8003ee6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	4013      	ands	r3, r2
 8003ed0:	68ba      	ldr	r2, [r7, #8]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	bf0c      	ite	eq
 8003ed6:	2301      	moveq	r3, #1
 8003ed8:	2300      	movne	r3, #0
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	461a      	mov	r2, r3
 8003ede:	79fb      	ldrb	r3, [r7, #7]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d09f      	beq.n	8003e24 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3740      	adds	r7, #64	; 0x40
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
	...

08003ef0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68da      	ldr	r2, [r3, #12]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	689a      	ldr	r2, [r3, #8]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	431a      	orrs	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	695b      	ldr	r3, [r3, #20]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003f2a:	f023 030c 	bic.w	r3, r3, #12
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	6812      	ldr	r2, [r2, #0]
 8003f32:	68b9      	ldr	r1, [r7, #8]
 8003f34:	430b      	orrs	r3, r1
 8003f36:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	699a      	ldr	r2, [r3, #24]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a2c      	ldr	r2, [pc, #176]	; (8004004 <UART_SetConfig+0x114>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d103      	bne.n	8003f60 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003f58:	f7fe fff0 	bl	8002f3c <HAL_RCC_GetPCLK2Freq>
 8003f5c:	60f8      	str	r0, [r7, #12]
 8003f5e:	e002      	b.n	8003f66 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003f60:	f7fe ffd8 	bl	8002f14 <HAL_RCC_GetPCLK1Freq>
 8003f64:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	4413      	add	r3, r2
 8003f6e:	009a      	lsls	r2, r3, #2
 8003f70:	441a      	add	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f7c:	4a22      	ldr	r2, [pc, #136]	; (8004008 <UART_SetConfig+0x118>)
 8003f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f82:	095b      	lsrs	r3, r3, #5
 8003f84:	0119      	lsls	r1, r3, #4
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	4413      	add	r3, r2
 8003f8e:	009a      	lsls	r2, r3, #2
 8003f90:	441a      	add	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f9c:	4b1a      	ldr	r3, [pc, #104]	; (8004008 <UART_SetConfig+0x118>)
 8003f9e:	fba3 0302 	umull	r0, r3, r3, r2
 8003fa2:	095b      	lsrs	r3, r3, #5
 8003fa4:	2064      	movs	r0, #100	; 0x64
 8003fa6:	fb00 f303 	mul.w	r3, r0, r3
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	011b      	lsls	r3, r3, #4
 8003fae:	3332      	adds	r3, #50	; 0x32
 8003fb0:	4a15      	ldr	r2, [pc, #84]	; (8004008 <UART_SetConfig+0x118>)
 8003fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb6:	095b      	lsrs	r3, r3, #5
 8003fb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fbc:	4419      	add	r1, r3
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	4413      	add	r3, r2
 8003fc6:	009a      	lsls	r2, r3, #2
 8003fc8:	441a      	add	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fd4:	4b0c      	ldr	r3, [pc, #48]	; (8004008 <UART_SetConfig+0x118>)
 8003fd6:	fba3 0302 	umull	r0, r3, r3, r2
 8003fda:	095b      	lsrs	r3, r3, #5
 8003fdc:	2064      	movs	r0, #100	; 0x64
 8003fde:	fb00 f303 	mul.w	r3, r0, r3
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	011b      	lsls	r3, r3, #4
 8003fe6:	3332      	adds	r3, #50	; 0x32
 8003fe8:	4a07      	ldr	r2, [pc, #28]	; (8004008 <UART_SetConfig+0x118>)
 8003fea:	fba2 2303 	umull	r2, r3, r2, r3
 8003fee:	095b      	lsrs	r3, r3, #5
 8003ff0:	f003 020f 	and.w	r2, r3, #15
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	440a      	add	r2, r1
 8003ffa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003ffc:	bf00      	nop
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	40013800 	.word	0x40013800
 8004008:	51eb851f 	.word	0x51eb851f

0800400c <atoi>:
 800400c:	220a      	movs	r2, #10
 800400e:	2100      	movs	r1, #0
 8004010:	f000 b87e 	b.w	8004110 <strtol>

08004014 <_strtol_l.constprop.0>:
 8004014:	2b01      	cmp	r3, #1
 8004016:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800401a:	4686      	mov	lr, r0
 800401c:	4690      	mov	r8, r2
 800401e:	d001      	beq.n	8004024 <_strtol_l.constprop.0+0x10>
 8004020:	2b24      	cmp	r3, #36	; 0x24
 8004022:	d906      	bls.n	8004032 <_strtol_l.constprop.0+0x1e>
 8004024:	f000 f8a6 	bl	8004174 <__errno>
 8004028:	2316      	movs	r3, #22
 800402a:	6003      	str	r3, [r0, #0]
 800402c:	2000      	movs	r0, #0
 800402e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004032:	460d      	mov	r5, r1
 8004034:	4835      	ldr	r0, [pc, #212]	; (800410c <_strtol_l.constprop.0+0xf8>)
 8004036:	462a      	mov	r2, r5
 8004038:	f815 4b01 	ldrb.w	r4, [r5], #1
 800403c:	5d06      	ldrb	r6, [r0, r4]
 800403e:	f016 0608 	ands.w	r6, r6, #8
 8004042:	d1f8      	bne.n	8004036 <_strtol_l.constprop.0+0x22>
 8004044:	2c2d      	cmp	r4, #45	; 0x2d
 8004046:	d12e      	bne.n	80040a6 <_strtol_l.constprop.0+0x92>
 8004048:	2601      	movs	r6, #1
 800404a:	782c      	ldrb	r4, [r5, #0]
 800404c:	1c95      	adds	r5, r2, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d057      	beq.n	8004102 <_strtol_l.constprop.0+0xee>
 8004052:	2b10      	cmp	r3, #16
 8004054:	d109      	bne.n	800406a <_strtol_l.constprop.0+0x56>
 8004056:	2c30      	cmp	r4, #48	; 0x30
 8004058:	d107      	bne.n	800406a <_strtol_l.constprop.0+0x56>
 800405a:	782a      	ldrb	r2, [r5, #0]
 800405c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8004060:	2a58      	cmp	r2, #88	; 0x58
 8004062:	d149      	bne.n	80040f8 <_strtol_l.constprop.0+0xe4>
 8004064:	2310      	movs	r3, #16
 8004066:	786c      	ldrb	r4, [r5, #1]
 8004068:	3502      	adds	r5, #2
 800406a:	2200      	movs	r2, #0
 800406c:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8004070:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004074:	fbbc f9f3 	udiv	r9, ip, r3
 8004078:	4610      	mov	r0, r2
 800407a:	fb03 ca19 	mls	sl, r3, r9, ip
 800407e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8004082:	2f09      	cmp	r7, #9
 8004084:	d814      	bhi.n	80040b0 <_strtol_l.constprop.0+0x9c>
 8004086:	463c      	mov	r4, r7
 8004088:	42a3      	cmp	r3, r4
 800408a:	dd20      	ble.n	80040ce <_strtol_l.constprop.0+0xba>
 800408c:	1c57      	adds	r7, r2, #1
 800408e:	d007      	beq.n	80040a0 <_strtol_l.constprop.0+0x8c>
 8004090:	4581      	cmp	r9, r0
 8004092:	d319      	bcc.n	80040c8 <_strtol_l.constprop.0+0xb4>
 8004094:	d101      	bne.n	800409a <_strtol_l.constprop.0+0x86>
 8004096:	45a2      	cmp	sl, r4
 8004098:	db16      	blt.n	80040c8 <_strtol_l.constprop.0+0xb4>
 800409a:	2201      	movs	r2, #1
 800409c:	fb00 4003 	mla	r0, r0, r3, r4
 80040a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80040a4:	e7eb      	b.n	800407e <_strtol_l.constprop.0+0x6a>
 80040a6:	2c2b      	cmp	r4, #43	; 0x2b
 80040a8:	bf04      	itt	eq
 80040aa:	782c      	ldrbeq	r4, [r5, #0]
 80040ac:	1c95      	addeq	r5, r2, #2
 80040ae:	e7ce      	b.n	800404e <_strtol_l.constprop.0+0x3a>
 80040b0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80040b4:	2f19      	cmp	r7, #25
 80040b6:	d801      	bhi.n	80040bc <_strtol_l.constprop.0+0xa8>
 80040b8:	3c37      	subs	r4, #55	; 0x37
 80040ba:	e7e5      	b.n	8004088 <_strtol_l.constprop.0+0x74>
 80040bc:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80040c0:	2f19      	cmp	r7, #25
 80040c2:	d804      	bhi.n	80040ce <_strtol_l.constprop.0+0xba>
 80040c4:	3c57      	subs	r4, #87	; 0x57
 80040c6:	e7df      	b.n	8004088 <_strtol_l.constprop.0+0x74>
 80040c8:	f04f 32ff 	mov.w	r2, #4294967295
 80040cc:	e7e8      	b.n	80040a0 <_strtol_l.constprop.0+0x8c>
 80040ce:	1c53      	adds	r3, r2, #1
 80040d0:	d108      	bne.n	80040e4 <_strtol_l.constprop.0+0xd0>
 80040d2:	2322      	movs	r3, #34	; 0x22
 80040d4:	4660      	mov	r0, ip
 80040d6:	f8ce 3000 	str.w	r3, [lr]
 80040da:	f1b8 0f00 	cmp.w	r8, #0
 80040de:	d0a6      	beq.n	800402e <_strtol_l.constprop.0+0x1a>
 80040e0:	1e69      	subs	r1, r5, #1
 80040e2:	e006      	b.n	80040f2 <_strtol_l.constprop.0+0xde>
 80040e4:	b106      	cbz	r6, 80040e8 <_strtol_l.constprop.0+0xd4>
 80040e6:	4240      	negs	r0, r0
 80040e8:	f1b8 0f00 	cmp.w	r8, #0
 80040ec:	d09f      	beq.n	800402e <_strtol_l.constprop.0+0x1a>
 80040ee:	2a00      	cmp	r2, #0
 80040f0:	d1f6      	bne.n	80040e0 <_strtol_l.constprop.0+0xcc>
 80040f2:	f8c8 1000 	str.w	r1, [r8]
 80040f6:	e79a      	b.n	800402e <_strtol_l.constprop.0+0x1a>
 80040f8:	2430      	movs	r4, #48	; 0x30
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1b5      	bne.n	800406a <_strtol_l.constprop.0+0x56>
 80040fe:	2308      	movs	r3, #8
 8004100:	e7b3      	b.n	800406a <_strtol_l.constprop.0+0x56>
 8004102:	2c30      	cmp	r4, #48	; 0x30
 8004104:	d0a9      	beq.n	800405a <_strtol_l.constprop.0+0x46>
 8004106:	230a      	movs	r3, #10
 8004108:	e7af      	b.n	800406a <_strtol_l.constprop.0+0x56>
 800410a:	bf00      	nop
 800410c:	08004e27 	.word	0x08004e27

08004110 <strtol>:
 8004110:	4613      	mov	r3, r2
 8004112:	460a      	mov	r2, r1
 8004114:	4601      	mov	r1, r0
 8004116:	4802      	ldr	r0, [pc, #8]	; (8004120 <strtol+0x10>)
 8004118:	6800      	ldr	r0, [r0, #0]
 800411a:	f7ff bf7b 	b.w	8004014 <_strtol_l.constprop.0>
 800411e:	bf00      	nop
 8004120:	20000130 	.word	0x20000130

08004124 <siprintf>:
 8004124:	b40e      	push	{r1, r2, r3}
 8004126:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800412a:	b500      	push	{lr}
 800412c:	b09c      	sub	sp, #112	; 0x70
 800412e:	ab1d      	add	r3, sp, #116	; 0x74
 8004130:	9002      	str	r0, [sp, #8]
 8004132:	9006      	str	r0, [sp, #24]
 8004134:	9107      	str	r1, [sp, #28]
 8004136:	9104      	str	r1, [sp, #16]
 8004138:	4808      	ldr	r0, [pc, #32]	; (800415c <siprintf+0x38>)
 800413a:	4909      	ldr	r1, [pc, #36]	; (8004160 <siprintf+0x3c>)
 800413c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004140:	9105      	str	r1, [sp, #20]
 8004142:	6800      	ldr	r0, [r0, #0]
 8004144:	a902      	add	r1, sp, #8
 8004146:	9301      	str	r3, [sp, #4]
 8004148:	f000 f99c 	bl	8004484 <_svfiprintf_r>
 800414c:	2200      	movs	r2, #0
 800414e:	9b02      	ldr	r3, [sp, #8]
 8004150:	701a      	strb	r2, [r3, #0]
 8004152:	b01c      	add	sp, #112	; 0x70
 8004154:	f85d eb04 	ldr.w	lr, [sp], #4
 8004158:	b003      	add	sp, #12
 800415a:	4770      	bx	lr
 800415c:	20000130 	.word	0x20000130
 8004160:	ffff0208 	.word	0xffff0208

08004164 <memset>:
 8004164:	4603      	mov	r3, r0
 8004166:	4402      	add	r2, r0
 8004168:	4293      	cmp	r3, r2
 800416a:	d100      	bne.n	800416e <memset+0xa>
 800416c:	4770      	bx	lr
 800416e:	f803 1b01 	strb.w	r1, [r3], #1
 8004172:	e7f9      	b.n	8004168 <memset+0x4>

08004174 <__errno>:
 8004174:	4b01      	ldr	r3, [pc, #4]	; (800417c <__errno+0x8>)
 8004176:	6818      	ldr	r0, [r3, #0]
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop
 800417c:	20000130 	.word	0x20000130

08004180 <__libc_init_array>:
 8004180:	b570      	push	{r4, r5, r6, lr}
 8004182:	2600      	movs	r6, #0
 8004184:	4d0c      	ldr	r5, [pc, #48]	; (80041b8 <__libc_init_array+0x38>)
 8004186:	4c0d      	ldr	r4, [pc, #52]	; (80041bc <__libc_init_array+0x3c>)
 8004188:	1b64      	subs	r4, r4, r5
 800418a:	10a4      	asrs	r4, r4, #2
 800418c:	42a6      	cmp	r6, r4
 800418e:	d109      	bne.n	80041a4 <__libc_init_array+0x24>
 8004190:	f000 fc7a 	bl	8004a88 <_init>
 8004194:	2600      	movs	r6, #0
 8004196:	4d0a      	ldr	r5, [pc, #40]	; (80041c0 <__libc_init_array+0x40>)
 8004198:	4c0a      	ldr	r4, [pc, #40]	; (80041c4 <__libc_init_array+0x44>)
 800419a:	1b64      	subs	r4, r4, r5
 800419c:	10a4      	asrs	r4, r4, #2
 800419e:	42a6      	cmp	r6, r4
 80041a0:	d105      	bne.n	80041ae <__libc_init_array+0x2e>
 80041a2:	bd70      	pop	{r4, r5, r6, pc}
 80041a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80041a8:	4798      	blx	r3
 80041aa:	3601      	adds	r6, #1
 80041ac:	e7ee      	b.n	800418c <__libc_init_array+0xc>
 80041ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80041b2:	4798      	blx	r3
 80041b4:	3601      	adds	r6, #1
 80041b6:	e7f2      	b.n	800419e <__libc_init_array+0x1e>
 80041b8:	08004f5c 	.word	0x08004f5c
 80041bc:	08004f5c 	.word	0x08004f5c
 80041c0:	08004f5c 	.word	0x08004f5c
 80041c4:	08004f60 	.word	0x08004f60

080041c8 <__retarget_lock_acquire_recursive>:
 80041c8:	4770      	bx	lr

080041ca <__retarget_lock_release_recursive>:
 80041ca:	4770      	bx	lr

080041cc <memcpy>:
 80041cc:	440a      	add	r2, r1
 80041ce:	4291      	cmp	r1, r2
 80041d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80041d4:	d100      	bne.n	80041d8 <memcpy+0xc>
 80041d6:	4770      	bx	lr
 80041d8:	b510      	push	{r4, lr}
 80041da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041de:	4291      	cmp	r1, r2
 80041e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041e4:	d1f9      	bne.n	80041da <memcpy+0xe>
 80041e6:	bd10      	pop	{r4, pc}

080041e8 <_free_r>:
 80041e8:	b538      	push	{r3, r4, r5, lr}
 80041ea:	4605      	mov	r5, r0
 80041ec:	2900      	cmp	r1, #0
 80041ee:	d040      	beq.n	8004272 <_free_r+0x8a>
 80041f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041f4:	1f0c      	subs	r4, r1, #4
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	bfb8      	it	lt
 80041fa:	18e4      	addlt	r4, r4, r3
 80041fc:	f000 f8dc 	bl	80043b8 <__malloc_lock>
 8004200:	4a1c      	ldr	r2, [pc, #112]	; (8004274 <_free_r+0x8c>)
 8004202:	6813      	ldr	r3, [r2, #0]
 8004204:	b933      	cbnz	r3, 8004214 <_free_r+0x2c>
 8004206:	6063      	str	r3, [r4, #4]
 8004208:	6014      	str	r4, [r2, #0]
 800420a:	4628      	mov	r0, r5
 800420c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004210:	f000 b8d8 	b.w	80043c4 <__malloc_unlock>
 8004214:	42a3      	cmp	r3, r4
 8004216:	d908      	bls.n	800422a <_free_r+0x42>
 8004218:	6820      	ldr	r0, [r4, #0]
 800421a:	1821      	adds	r1, r4, r0
 800421c:	428b      	cmp	r3, r1
 800421e:	bf01      	itttt	eq
 8004220:	6819      	ldreq	r1, [r3, #0]
 8004222:	685b      	ldreq	r3, [r3, #4]
 8004224:	1809      	addeq	r1, r1, r0
 8004226:	6021      	streq	r1, [r4, #0]
 8004228:	e7ed      	b.n	8004206 <_free_r+0x1e>
 800422a:	461a      	mov	r2, r3
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	b10b      	cbz	r3, 8004234 <_free_r+0x4c>
 8004230:	42a3      	cmp	r3, r4
 8004232:	d9fa      	bls.n	800422a <_free_r+0x42>
 8004234:	6811      	ldr	r1, [r2, #0]
 8004236:	1850      	adds	r0, r2, r1
 8004238:	42a0      	cmp	r0, r4
 800423a:	d10b      	bne.n	8004254 <_free_r+0x6c>
 800423c:	6820      	ldr	r0, [r4, #0]
 800423e:	4401      	add	r1, r0
 8004240:	1850      	adds	r0, r2, r1
 8004242:	4283      	cmp	r3, r0
 8004244:	6011      	str	r1, [r2, #0]
 8004246:	d1e0      	bne.n	800420a <_free_r+0x22>
 8004248:	6818      	ldr	r0, [r3, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	4408      	add	r0, r1
 800424e:	6010      	str	r0, [r2, #0]
 8004250:	6053      	str	r3, [r2, #4]
 8004252:	e7da      	b.n	800420a <_free_r+0x22>
 8004254:	d902      	bls.n	800425c <_free_r+0x74>
 8004256:	230c      	movs	r3, #12
 8004258:	602b      	str	r3, [r5, #0]
 800425a:	e7d6      	b.n	800420a <_free_r+0x22>
 800425c:	6820      	ldr	r0, [r4, #0]
 800425e:	1821      	adds	r1, r4, r0
 8004260:	428b      	cmp	r3, r1
 8004262:	bf01      	itttt	eq
 8004264:	6819      	ldreq	r1, [r3, #0]
 8004266:	685b      	ldreq	r3, [r3, #4]
 8004268:	1809      	addeq	r1, r1, r0
 800426a:	6021      	streq	r1, [r4, #0]
 800426c:	6063      	str	r3, [r4, #4]
 800426e:	6054      	str	r4, [r2, #4]
 8004270:	e7cb      	b.n	800420a <_free_r+0x22>
 8004272:	bd38      	pop	{r3, r4, r5, pc}
 8004274:	200003c0 	.word	0x200003c0

08004278 <sbrk_aligned>:
 8004278:	b570      	push	{r4, r5, r6, lr}
 800427a:	4e0e      	ldr	r6, [pc, #56]	; (80042b4 <sbrk_aligned+0x3c>)
 800427c:	460c      	mov	r4, r1
 800427e:	6831      	ldr	r1, [r6, #0]
 8004280:	4605      	mov	r5, r0
 8004282:	b911      	cbnz	r1, 800428a <sbrk_aligned+0x12>
 8004284:	f000 fbaa 	bl	80049dc <_sbrk_r>
 8004288:	6030      	str	r0, [r6, #0]
 800428a:	4621      	mov	r1, r4
 800428c:	4628      	mov	r0, r5
 800428e:	f000 fba5 	bl	80049dc <_sbrk_r>
 8004292:	1c43      	adds	r3, r0, #1
 8004294:	d00a      	beq.n	80042ac <sbrk_aligned+0x34>
 8004296:	1cc4      	adds	r4, r0, #3
 8004298:	f024 0403 	bic.w	r4, r4, #3
 800429c:	42a0      	cmp	r0, r4
 800429e:	d007      	beq.n	80042b0 <sbrk_aligned+0x38>
 80042a0:	1a21      	subs	r1, r4, r0
 80042a2:	4628      	mov	r0, r5
 80042a4:	f000 fb9a 	bl	80049dc <_sbrk_r>
 80042a8:	3001      	adds	r0, #1
 80042aa:	d101      	bne.n	80042b0 <sbrk_aligned+0x38>
 80042ac:	f04f 34ff 	mov.w	r4, #4294967295
 80042b0:	4620      	mov	r0, r4
 80042b2:	bd70      	pop	{r4, r5, r6, pc}
 80042b4:	200003c4 	.word	0x200003c4

080042b8 <_malloc_r>:
 80042b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042bc:	1ccd      	adds	r5, r1, #3
 80042be:	f025 0503 	bic.w	r5, r5, #3
 80042c2:	3508      	adds	r5, #8
 80042c4:	2d0c      	cmp	r5, #12
 80042c6:	bf38      	it	cc
 80042c8:	250c      	movcc	r5, #12
 80042ca:	2d00      	cmp	r5, #0
 80042cc:	4607      	mov	r7, r0
 80042ce:	db01      	blt.n	80042d4 <_malloc_r+0x1c>
 80042d0:	42a9      	cmp	r1, r5
 80042d2:	d905      	bls.n	80042e0 <_malloc_r+0x28>
 80042d4:	230c      	movs	r3, #12
 80042d6:	2600      	movs	r6, #0
 80042d8:	603b      	str	r3, [r7, #0]
 80042da:	4630      	mov	r0, r6
 80042dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042e0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80043b4 <_malloc_r+0xfc>
 80042e4:	f000 f868 	bl	80043b8 <__malloc_lock>
 80042e8:	f8d8 3000 	ldr.w	r3, [r8]
 80042ec:	461c      	mov	r4, r3
 80042ee:	bb5c      	cbnz	r4, 8004348 <_malloc_r+0x90>
 80042f0:	4629      	mov	r1, r5
 80042f2:	4638      	mov	r0, r7
 80042f4:	f7ff ffc0 	bl	8004278 <sbrk_aligned>
 80042f8:	1c43      	adds	r3, r0, #1
 80042fa:	4604      	mov	r4, r0
 80042fc:	d155      	bne.n	80043aa <_malloc_r+0xf2>
 80042fe:	f8d8 4000 	ldr.w	r4, [r8]
 8004302:	4626      	mov	r6, r4
 8004304:	2e00      	cmp	r6, #0
 8004306:	d145      	bne.n	8004394 <_malloc_r+0xdc>
 8004308:	2c00      	cmp	r4, #0
 800430a:	d048      	beq.n	800439e <_malloc_r+0xe6>
 800430c:	6823      	ldr	r3, [r4, #0]
 800430e:	4631      	mov	r1, r6
 8004310:	4638      	mov	r0, r7
 8004312:	eb04 0903 	add.w	r9, r4, r3
 8004316:	f000 fb61 	bl	80049dc <_sbrk_r>
 800431a:	4581      	cmp	r9, r0
 800431c:	d13f      	bne.n	800439e <_malloc_r+0xe6>
 800431e:	6821      	ldr	r1, [r4, #0]
 8004320:	4638      	mov	r0, r7
 8004322:	1a6d      	subs	r5, r5, r1
 8004324:	4629      	mov	r1, r5
 8004326:	f7ff ffa7 	bl	8004278 <sbrk_aligned>
 800432a:	3001      	adds	r0, #1
 800432c:	d037      	beq.n	800439e <_malloc_r+0xe6>
 800432e:	6823      	ldr	r3, [r4, #0]
 8004330:	442b      	add	r3, r5
 8004332:	6023      	str	r3, [r4, #0]
 8004334:	f8d8 3000 	ldr.w	r3, [r8]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d038      	beq.n	80043ae <_malloc_r+0xf6>
 800433c:	685a      	ldr	r2, [r3, #4]
 800433e:	42a2      	cmp	r2, r4
 8004340:	d12b      	bne.n	800439a <_malloc_r+0xe2>
 8004342:	2200      	movs	r2, #0
 8004344:	605a      	str	r2, [r3, #4]
 8004346:	e00f      	b.n	8004368 <_malloc_r+0xb0>
 8004348:	6822      	ldr	r2, [r4, #0]
 800434a:	1b52      	subs	r2, r2, r5
 800434c:	d41f      	bmi.n	800438e <_malloc_r+0xd6>
 800434e:	2a0b      	cmp	r2, #11
 8004350:	d917      	bls.n	8004382 <_malloc_r+0xca>
 8004352:	1961      	adds	r1, r4, r5
 8004354:	42a3      	cmp	r3, r4
 8004356:	6025      	str	r5, [r4, #0]
 8004358:	bf18      	it	ne
 800435a:	6059      	strne	r1, [r3, #4]
 800435c:	6863      	ldr	r3, [r4, #4]
 800435e:	bf08      	it	eq
 8004360:	f8c8 1000 	streq.w	r1, [r8]
 8004364:	5162      	str	r2, [r4, r5]
 8004366:	604b      	str	r3, [r1, #4]
 8004368:	4638      	mov	r0, r7
 800436a:	f104 060b 	add.w	r6, r4, #11
 800436e:	f000 f829 	bl	80043c4 <__malloc_unlock>
 8004372:	f026 0607 	bic.w	r6, r6, #7
 8004376:	1d23      	adds	r3, r4, #4
 8004378:	1af2      	subs	r2, r6, r3
 800437a:	d0ae      	beq.n	80042da <_malloc_r+0x22>
 800437c:	1b9b      	subs	r3, r3, r6
 800437e:	50a3      	str	r3, [r4, r2]
 8004380:	e7ab      	b.n	80042da <_malloc_r+0x22>
 8004382:	42a3      	cmp	r3, r4
 8004384:	6862      	ldr	r2, [r4, #4]
 8004386:	d1dd      	bne.n	8004344 <_malloc_r+0x8c>
 8004388:	f8c8 2000 	str.w	r2, [r8]
 800438c:	e7ec      	b.n	8004368 <_malloc_r+0xb0>
 800438e:	4623      	mov	r3, r4
 8004390:	6864      	ldr	r4, [r4, #4]
 8004392:	e7ac      	b.n	80042ee <_malloc_r+0x36>
 8004394:	4634      	mov	r4, r6
 8004396:	6876      	ldr	r6, [r6, #4]
 8004398:	e7b4      	b.n	8004304 <_malloc_r+0x4c>
 800439a:	4613      	mov	r3, r2
 800439c:	e7cc      	b.n	8004338 <_malloc_r+0x80>
 800439e:	230c      	movs	r3, #12
 80043a0:	4638      	mov	r0, r7
 80043a2:	603b      	str	r3, [r7, #0]
 80043a4:	f000 f80e 	bl	80043c4 <__malloc_unlock>
 80043a8:	e797      	b.n	80042da <_malloc_r+0x22>
 80043aa:	6025      	str	r5, [r4, #0]
 80043ac:	e7dc      	b.n	8004368 <_malloc_r+0xb0>
 80043ae:	605b      	str	r3, [r3, #4]
 80043b0:	deff      	udf	#255	; 0xff
 80043b2:	bf00      	nop
 80043b4:	200003c0 	.word	0x200003c0

080043b8 <__malloc_lock>:
 80043b8:	4801      	ldr	r0, [pc, #4]	; (80043c0 <__malloc_lock+0x8>)
 80043ba:	f7ff bf05 	b.w	80041c8 <__retarget_lock_acquire_recursive>
 80043be:	bf00      	nop
 80043c0:	200003bc 	.word	0x200003bc

080043c4 <__malloc_unlock>:
 80043c4:	4801      	ldr	r0, [pc, #4]	; (80043cc <__malloc_unlock+0x8>)
 80043c6:	f7ff bf00 	b.w	80041ca <__retarget_lock_release_recursive>
 80043ca:	bf00      	nop
 80043cc:	200003bc 	.word	0x200003bc

080043d0 <__ssputs_r>:
 80043d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043d4:	461f      	mov	r7, r3
 80043d6:	688e      	ldr	r6, [r1, #8]
 80043d8:	4682      	mov	sl, r0
 80043da:	42be      	cmp	r6, r7
 80043dc:	460c      	mov	r4, r1
 80043de:	4690      	mov	r8, r2
 80043e0:	680b      	ldr	r3, [r1, #0]
 80043e2:	d82c      	bhi.n	800443e <__ssputs_r+0x6e>
 80043e4:	898a      	ldrh	r2, [r1, #12]
 80043e6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80043ea:	d026      	beq.n	800443a <__ssputs_r+0x6a>
 80043ec:	6965      	ldr	r5, [r4, #20]
 80043ee:	6909      	ldr	r1, [r1, #16]
 80043f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80043f4:	eba3 0901 	sub.w	r9, r3, r1
 80043f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80043fc:	1c7b      	adds	r3, r7, #1
 80043fe:	444b      	add	r3, r9
 8004400:	106d      	asrs	r5, r5, #1
 8004402:	429d      	cmp	r5, r3
 8004404:	bf38      	it	cc
 8004406:	461d      	movcc	r5, r3
 8004408:	0553      	lsls	r3, r2, #21
 800440a:	d527      	bpl.n	800445c <__ssputs_r+0x8c>
 800440c:	4629      	mov	r1, r5
 800440e:	f7ff ff53 	bl	80042b8 <_malloc_r>
 8004412:	4606      	mov	r6, r0
 8004414:	b360      	cbz	r0, 8004470 <__ssputs_r+0xa0>
 8004416:	464a      	mov	r2, r9
 8004418:	6921      	ldr	r1, [r4, #16]
 800441a:	f7ff fed7 	bl	80041cc <memcpy>
 800441e:	89a3      	ldrh	r3, [r4, #12]
 8004420:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004428:	81a3      	strh	r3, [r4, #12]
 800442a:	6126      	str	r6, [r4, #16]
 800442c:	444e      	add	r6, r9
 800442e:	6026      	str	r6, [r4, #0]
 8004430:	463e      	mov	r6, r7
 8004432:	6165      	str	r5, [r4, #20]
 8004434:	eba5 0509 	sub.w	r5, r5, r9
 8004438:	60a5      	str	r5, [r4, #8]
 800443a:	42be      	cmp	r6, r7
 800443c:	d900      	bls.n	8004440 <__ssputs_r+0x70>
 800443e:	463e      	mov	r6, r7
 8004440:	4632      	mov	r2, r6
 8004442:	4641      	mov	r1, r8
 8004444:	6820      	ldr	r0, [r4, #0]
 8004446:	f000 faaf 	bl	80049a8 <memmove>
 800444a:	2000      	movs	r0, #0
 800444c:	68a3      	ldr	r3, [r4, #8]
 800444e:	1b9b      	subs	r3, r3, r6
 8004450:	60a3      	str	r3, [r4, #8]
 8004452:	6823      	ldr	r3, [r4, #0]
 8004454:	4433      	add	r3, r6
 8004456:	6023      	str	r3, [r4, #0]
 8004458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800445c:	462a      	mov	r2, r5
 800445e:	f000 fadb 	bl	8004a18 <_realloc_r>
 8004462:	4606      	mov	r6, r0
 8004464:	2800      	cmp	r0, #0
 8004466:	d1e0      	bne.n	800442a <__ssputs_r+0x5a>
 8004468:	4650      	mov	r0, sl
 800446a:	6921      	ldr	r1, [r4, #16]
 800446c:	f7ff febc 	bl	80041e8 <_free_r>
 8004470:	230c      	movs	r3, #12
 8004472:	f8ca 3000 	str.w	r3, [sl]
 8004476:	89a3      	ldrh	r3, [r4, #12]
 8004478:	f04f 30ff 	mov.w	r0, #4294967295
 800447c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004480:	81a3      	strh	r3, [r4, #12]
 8004482:	e7e9      	b.n	8004458 <__ssputs_r+0x88>

08004484 <_svfiprintf_r>:
 8004484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004488:	4698      	mov	r8, r3
 800448a:	898b      	ldrh	r3, [r1, #12]
 800448c:	4607      	mov	r7, r0
 800448e:	061b      	lsls	r3, r3, #24
 8004490:	460d      	mov	r5, r1
 8004492:	4614      	mov	r4, r2
 8004494:	b09d      	sub	sp, #116	; 0x74
 8004496:	d50e      	bpl.n	80044b6 <_svfiprintf_r+0x32>
 8004498:	690b      	ldr	r3, [r1, #16]
 800449a:	b963      	cbnz	r3, 80044b6 <_svfiprintf_r+0x32>
 800449c:	2140      	movs	r1, #64	; 0x40
 800449e:	f7ff ff0b 	bl	80042b8 <_malloc_r>
 80044a2:	6028      	str	r0, [r5, #0]
 80044a4:	6128      	str	r0, [r5, #16]
 80044a6:	b920      	cbnz	r0, 80044b2 <_svfiprintf_r+0x2e>
 80044a8:	230c      	movs	r3, #12
 80044aa:	603b      	str	r3, [r7, #0]
 80044ac:	f04f 30ff 	mov.w	r0, #4294967295
 80044b0:	e0d0      	b.n	8004654 <_svfiprintf_r+0x1d0>
 80044b2:	2340      	movs	r3, #64	; 0x40
 80044b4:	616b      	str	r3, [r5, #20]
 80044b6:	2300      	movs	r3, #0
 80044b8:	9309      	str	r3, [sp, #36]	; 0x24
 80044ba:	2320      	movs	r3, #32
 80044bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80044c0:	2330      	movs	r3, #48	; 0x30
 80044c2:	f04f 0901 	mov.w	r9, #1
 80044c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80044ca:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800466c <_svfiprintf_r+0x1e8>
 80044ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80044d2:	4623      	mov	r3, r4
 80044d4:	469a      	mov	sl, r3
 80044d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80044da:	b10a      	cbz	r2, 80044e0 <_svfiprintf_r+0x5c>
 80044dc:	2a25      	cmp	r2, #37	; 0x25
 80044de:	d1f9      	bne.n	80044d4 <_svfiprintf_r+0x50>
 80044e0:	ebba 0b04 	subs.w	fp, sl, r4
 80044e4:	d00b      	beq.n	80044fe <_svfiprintf_r+0x7a>
 80044e6:	465b      	mov	r3, fp
 80044e8:	4622      	mov	r2, r4
 80044ea:	4629      	mov	r1, r5
 80044ec:	4638      	mov	r0, r7
 80044ee:	f7ff ff6f 	bl	80043d0 <__ssputs_r>
 80044f2:	3001      	adds	r0, #1
 80044f4:	f000 80a9 	beq.w	800464a <_svfiprintf_r+0x1c6>
 80044f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80044fa:	445a      	add	r2, fp
 80044fc:	9209      	str	r2, [sp, #36]	; 0x24
 80044fe:	f89a 3000 	ldrb.w	r3, [sl]
 8004502:	2b00      	cmp	r3, #0
 8004504:	f000 80a1 	beq.w	800464a <_svfiprintf_r+0x1c6>
 8004508:	2300      	movs	r3, #0
 800450a:	f04f 32ff 	mov.w	r2, #4294967295
 800450e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004512:	f10a 0a01 	add.w	sl, sl, #1
 8004516:	9304      	str	r3, [sp, #16]
 8004518:	9307      	str	r3, [sp, #28]
 800451a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800451e:	931a      	str	r3, [sp, #104]	; 0x68
 8004520:	4654      	mov	r4, sl
 8004522:	2205      	movs	r2, #5
 8004524:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004528:	4850      	ldr	r0, [pc, #320]	; (800466c <_svfiprintf_r+0x1e8>)
 800452a:	f000 fa67 	bl	80049fc <memchr>
 800452e:	9a04      	ldr	r2, [sp, #16]
 8004530:	b9d8      	cbnz	r0, 800456a <_svfiprintf_r+0xe6>
 8004532:	06d0      	lsls	r0, r2, #27
 8004534:	bf44      	itt	mi
 8004536:	2320      	movmi	r3, #32
 8004538:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800453c:	0711      	lsls	r1, r2, #28
 800453e:	bf44      	itt	mi
 8004540:	232b      	movmi	r3, #43	; 0x2b
 8004542:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004546:	f89a 3000 	ldrb.w	r3, [sl]
 800454a:	2b2a      	cmp	r3, #42	; 0x2a
 800454c:	d015      	beq.n	800457a <_svfiprintf_r+0xf6>
 800454e:	4654      	mov	r4, sl
 8004550:	2000      	movs	r0, #0
 8004552:	f04f 0c0a 	mov.w	ip, #10
 8004556:	9a07      	ldr	r2, [sp, #28]
 8004558:	4621      	mov	r1, r4
 800455a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800455e:	3b30      	subs	r3, #48	; 0x30
 8004560:	2b09      	cmp	r3, #9
 8004562:	d94d      	bls.n	8004600 <_svfiprintf_r+0x17c>
 8004564:	b1b0      	cbz	r0, 8004594 <_svfiprintf_r+0x110>
 8004566:	9207      	str	r2, [sp, #28]
 8004568:	e014      	b.n	8004594 <_svfiprintf_r+0x110>
 800456a:	eba0 0308 	sub.w	r3, r0, r8
 800456e:	fa09 f303 	lsl.w	r3, r9, r3
 8004572:	4313      	orrs	r3, r2
 8004574:	46a2      	mov	sl, r4
 8004576:	9304      	str	r3, [sp, #16]
 8004578:	e7d2      	b.n	8004520 <_svfiprintf_r+0x9c>
 800457a:	9b03      	ldr	r3, [sp, #12]
 800457c:	1d19      	adds	r1, r3, #4
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	9103      	str	r1, [sp, #12]
 8004582:	2b00      	cmp	r3, #0
 8004584:	bfbb      	ittet	lt
 8004586:	425b      	neglt	r3, r3
 8004588:	f042 0202 	orrlt.w	r2, r2, #2
 800458c:	9307      	strge	r3, [sp, #28]
 800458e:	9307      	strlt	r3, [sp, #28]
 8004590:	bfb8      	it	lt
 8004592:	9204      	strlt	r2, [sp, #16]
 8004594:	7823      	ldrb	r3, [r4, #0]
 8004596:	2b2e      	cmp	r3, #46	; 0x2e
 8004598:	d10c      	bne.n	80045b4 <_svfiprintf_r+0x130>
 800459a:	7863      	ldrb	r3, [r4, #1]
 800459c:	2b2a      	cmp	r3, #42	; 0x2a
 800459e:	d134      	bne.n	800460a <_svfiprintf_r+0x186>
 80045a0:	9b03      	ldr	r3, [sp, #12]
 80045a2:	3402      	adds	r4, #2
 80045a4:	1d1a      	adds	r2, r3, #4
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	9203      	str	r2, [sp, #12]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	bfb8      	it	lt
 80045ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80045b2:	9305      	str	r3, [sp, #20]
 80045b4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8004670 <_svfiprintf_r+0x1ec>
 80045b8:	2203      	movs	r2, #3
 80045ba:	4650      	mov	r0, sl
 80045bc:	7821      	ldrb	r1, [r4, #0]
 80045be:	f000 fa1d 	bl	80049fc <memchr>
 80045c2:	b138      	cbz	r0, 80045d4 <_svfiprintf_r+0x150>
 80045c4:	2240      	movs	r2, #64	; 0x40
 80045c6:	9b04      	ldr	r3, [sp, #16]
 80045c8:	eba0 000a 	sub.w	r0, r0, sl
 80045cc:	4082      	lsls	r2, r0
 80045ce:	4313      	orrs	r3, r2
 80045d0:	3401      	adds	r4, #1
 80045d2:	9304      	str	r3, [sp, #16]
 80045d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045d8:	2206      	movs	r2, #6
 80045da:	4826      	ldr	r0, [pc, #152]	; (8004674 <_svfiprintf_r+0x1f0>)
 80045dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80045e0:	f000 fa0c 	bl	80049fc <memchr>
 80045e4:	2800      	cmp	r0, #0
 80045e6:	d038      	beq.n	800465a <_svfiprintf_r+0x1d6>
 80045e8:	4b23      	ldr	r3, [pc, #140]	; (8004678 <_svfiprintf_r+0x1f4>)
 80045ea:	bb1b      	cbnz	r3, 8004634 <_svfiprintf_r+0x1b0>
 80045ec:	9b03      	ldr	r3, [sp, #12]
 80045ee:	3307      	adds	r3, #7
 80045f0:	f023 0307 	bic.w	r3, r3, #7
 80045f4:	3308      	adds	r3, #8
 80045f6:	9303      	str	r3, [sp, #12]
 80045f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045fa:	4433      	add	r3, r6
 80045fc:	9309      	str	r3, [sp, #36]	; 0x24
 80045fe:	e768      	b.n	80044d2 <_svfiprintf_r+0x4e>
 8004600:	460c      	mov	r4, r1
 8004602:	2001      	movs	r0, #1
 8004604:	fb0c 3202 	mla	r2, ip, r2, r3
 8004608:	e7a6      	b.n	8004558 <_svfiprintf_r+0xd4>
 800460a:	2300      	movs	r3, #0
 800460c:	f04f 0c0a 	mov.w	ip, #10
 8004610:	4619      	mov	r1, r3
 8004612:	3401      	adds	r4, #1
 8004614:	9305      	str	r3, [sp, #20]
 8004616:	4620      	mov	r0, r4
 8004618:	f810 2b01 	ldrb.w	r2, [r0], #1
 800461c:	3a30      	subs	r2, #48	; 0x30
 800461e:	2a09      	cmp	r2, #9
 8004620:	d903      	bls.n	800462a <_svfiprintf_r+0x1a6>
 8004622:	2b00      	cmp	r3, #0
 8004624:	d0c6      	beq.n	80045b4 <_svfiprintf_r+0x130>
 8004626:	9105      	str	r1, [sp, #20]
 8004628:	e7c4      	b.n	80045b4 <_svfiprintf_r+0x130>
 800462a:	4604      	mov	r4, r0
 800462c:	2301      	movs	r3, #1
 800462e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004632:	e7f0      	b.n	8004616 <_svfiprintf_r+0x192>
 8004634:	ab03      	add	r3, sp, #12
 8004636:	9300      	str	r3, [sp, #0]
 8004638:	462a      	mov	r2, r5
 800463a:	4638      	mov	r0, r7
 800463c:	4b0f      	ldr	r3, [pc, #60]	; (800467c <_svfiprintf_r+0x1f8>)
 800463e:	a904      	add	r1, sp, #16
 8004640:	f3af 8000 	nop.w
 8004644:	1c42      	adds	r2, r0, #1
 8004646:	4606      	mov	r6, r0
 8004648:	d1d6      	bne.n	80045f8 <_svfiprintf_r+0x174>
 800464a:	89ab      	ldrh	r3, [r5, #12]
 800464c:	065b      	lsls	r3, r3, #25
 800464e:	f53f af2d 	bmi.w	80044ac <_svfiprintf_r+0x28>
 8004652:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004654:	b01d      	add	sp, #116	; 0x74
 8004656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800465a:	ab03      	add	r3, sp, #12
 800465c:	9300      	str	r3, [sp, #0]
 800465e:	462a      	mov	r2, r5
 8004660:	4638      	mov	r0, r7
 8004662:	4b06      	ldr	r3, [pc, #24]	; (800467c <_svfiprintf_r+0x1f8>)
 8004664:	a904      	add	r1, sp, #16
 8004666:	f000 f87d 	bl	8004764 <_printf_i>
 800466a:	e7eb      	b.n	8004644 <_svfiprintf_r+0x1c0>
 800466c:	08004f27 	.word	0x08004f27
 8004670:	08004f2d 	.word	0x08004f2d
 8004674:	08004f31 	.word	0x08004f31
 8004678:	00000000 	.word	0x00000000
 800467c:	080043d1 	.word	0x080043d1

08004680 <_printf_common>:
 8004680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004684:	4616      	mov	r6, r2
 8004686:	4699      	mov	r9, r3
 8004688:	688a      	ldr	r2, [r1, #8]
 800468a:	690b      	ldr	r3, [r1, #16]
 800468c:	4607      	mov	r7, r0
 800468e:	4293      	cmp	r3, r2
 8004690:	bfb8      	it	lt
 8004692:	4613      	movlt	r3, r2
 8004694:	6033      	str	r3, [r6, #0]
 8004696:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800469a:	460c      	mov	r4, r1
 800469c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80046a0:	b10a      	cbz	r2, 80046a6 <_printf_common+0x26>
 80046a2:	3301      	adds	r3, #1
 80046a4:	6033      	str	r3, [r6, #0]
 80046a6:	6823      	ldr	r3, [r4, #0]
 80046a8:	0699      	lsls	r1, r3, #26
 80046aa:	bf42      	ittt	mi
 80046ac:	6833      	ldrmi	r3, [r6, #0]
 80046ae:	3302      	addmi	r3, #2
 80046b0:	6033      	strmi	r3, [r6, #0]
 80046b2:	6825      	ldr	r5, [r4, #0]
 80046b4:	f015 0506 	ands.w	r5, r5, #6
 80046b8:	d106      	bne.n	80046c8 <_printf_common+0x48>
 80046ba:	f104 0a19 	add.w	sl, r4, #25
 80046be:	68e3      	ldr	r3, [r4, #12]
 80046c0:	6832      	ldr	r2, [r6, #0]
 80046c2:	1a9b      	subs	r3, r3, r2
 80046c4:	42ab      	cmp	r3, r5
 80046c6:	dc2b      	bgt.n	8004720 <_printf_common+0xa0>
 80046c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80046cc:	1e13      	subs	r3, r2, #0
 80046ce:	6822      	ldr	r2, [r4, #0]
 80046d0:	bf18      	it	ne
 80046d2:	2301      	movne	r3, #1
 80046d4:	0692      	lsls	r2, r2, #26
 80046d6:	d430      	bmi.n	800473a <_printf_common+0xba>
 80046d8:	4649      	mov	r1, r9
 80046da:	4638      	mov	r0, r7
 80046dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046e0:	47c0      	blx	r8
 80046e2:	3001      	adds	r0, #1
 80046e4:	d023      	beq.n	800472e <_printf_common+0xae>
 80046e6:	6823      	ldr	r3, [r4, #0]
 80046e8:	6922      	ldr	r2, [r4, #16]
 80046ea:	f003 0306 	and.w	r3, r3, #6
 80046ee:	2b04      	cmp	r3, #4
 80046f0:	bf14      	ite	ne
 80046f2:	2500      	movne	r5, #0
 80046f4:	6833      	ldreq	r3, [r6, #0]
 80046f6:	f04f 0600 	mov.w	r6, #0
 80046fa:	bf08      	it	eq
 80046fc:	68e5      	ldreq	r5, [r4, #12]
 80046fe:	f104 041a 	add.w	r4, r4, #26
 8004702:	bf08      	it	eq
 8004704:	1aed      	subeq	r5, r5, r3
 8004706:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800470a:	bf08      	it	eq
 800470c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004710:	4293      	cmp	r3, r2
 8004712:	bfc4      	itt	gt
 8004714:	1a9b      	subgt	r3, r3, r2
 8004716:	18ed      	addgt	r5, r5, r3
 8004718:	42b5      	cmp	r5, r6
 800471a:	d11a      	bne.n	8004752 <_printf_common+0xd2>
 800471c:	2000      	movs	r0, #0
 800471e:	e008      	b.n	8004732 <_printf_common+0xb2>
 8004720:	2301      	movs	r3, #1
 8004722:	4652      	mov	r2, sl
 8004724:	4649      	mov	r1, r9
 8004726:	4638      	mov	r0, r7
 8004728:	47c0      	blx	r8
 800472a:	3001      	adds	r0, #1
 800472c:	d103      	bne.n	8004736 <_printf_common+0xb6>
 800472e:	f04f 30ff 	mov.w	r0, #4294967295
 8004732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004736:	3501      	adds	r5, #1
 8004738:	e7c1      	b.n	80046be <_printf_common+0x3e>
 800473a:	2030      	movs	r0, #48	; 0x30
 800473c:	18e1      	adds	r1, r4, r3
 800473e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004742:	1c5a      	adds	r2, r3, #1
 8004744:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004748:	4422      	add	r2, r4
 800474a:	3302      	adds	r3, #2
 800474c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004750:	e7c2      	b.n	80046d8 <_printf_common+0x58>
 8004752:	2301      	movs	r3, #1
 8004754:	4622      	mov	r2, r4
 8004756:	4649      	mov	r1, r9
 8004758:	4638      	mov	r0, r7
 800475a:	47c0      	blx	r8
 800475c:	3001      	adds	r0, #1
 800475e:	d0e6      	beq.n	800472e <_printf_common+0xae>
 8004760:	3601      	adds	r6, #1
 8004762:	e7d9      	b.n	8004718 <_printf_common+0x98>

08004764 <_printf_i>:
 8004764:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004768:	7e0f      	ldrb	r7, [r1, #24]
 800476a:	4691      	mov	r9, r2
 800476c:	2f78      	cmp	r7, #120	; 0x78
 800476e:	4680      	mov	r8, r0
 8004770:	460c      	mov	r4, r1
 8004772:	469a      	mov	sl, r3
 8004774:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004776:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800477a:	d807      	bhi.n	800478c <_printf_i+0x28>
 800477c:	2f62      	cmp	r7, #98	; 0x62
 800477e:	d80a      	bhi.n	8004796 <_printf_i+0x32>
 8004780:	2f00      	cmp	r7, #0
 8004782:	f000 80d5 	beq.w	8004930 <_printf_i+0x1cc>
 8004786:	2f58      	cmp	r7, #88	; 0x58
 8004788:	f000 80c1 	beq.w	800490e <_printf_i+0x1aa>
 800478c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004790:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004794:	e03a      	b.n	800480c <_printf_i+0xa8>
 8004796:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800479a:	2b15      	cmp	r3, #21
 800479c:	d8f6      	bhi.n	800478c <_printf_i+0x28>
 800479e:	a101      	add	r1, pc, #4	; (adr r1, 80047a4 <_printf_i+0x40>)
 80047a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80047a4:	080047fd 	.word	0x080047fd
 80047a8:	08004811 	.word	0x08004811
 80047ac:	0800478d 	.word	0x0800478d
 80047b0:	0800478d 	.word	0x0800478d
 80047b4:	0800478d 	.word	0x0800478d
 80047b8:	0800478d 	.word	0x0800478d
 80047bc:	08004811 	.word	0x08004811
 80047c0:	0800478d 	.word	0x0800478d
 80047c4:	0800478d 	.word	0x0800478d
 80047c8:	0800478d 	.word	0x0800478d
 80047cc:	0800478d 	.word	0x0800478d
 80047d0:	08004917 	.word	0x08004917
 80047d4:	0800483d 	.word	0x0800483d
 80047d8:	080048d1 	.word	0x080048d1
 80047dc:	0800478d 	.word	0x0800478d
 80047e0:	0800478d 	.word	0x0800478d
 80047e4:	08004939 	.word	0x08004939
 80047e8:	0800478d 	.word	0x0800478d
 80047ec:	0800483d 	.word	0x0800483d
 80047f0:	0800478d 	.word	0x0800478d
 80047f4:	0800478d 	.word	0x0800478d
 80047f8:	080048d9 	.word	0x080048d9
 80047fc:	682b      	ldr	r3, [r5, #0]
 80047fe:	1d1a      	adds	r2, r3, #4
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	602a      	str	r2, [r5, #0]
 8004804:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004808:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800480c:	2301      	movs	r3, #1
 800480e:	e0a0      	b.n	8004952 <_printf_i+0x1ee>
 8004810:	6820      	ldr	r0, [r4, #0]
 8004812:	682b      	ldr	r3, [r5, #0]
 8004814:	0607      	lsls	r7, r0, #24
 8004816:	f103 0104 	add.w	r1, r3, #4
 800481a:	6029      	str	r1, [r5, #0]
 800481c:	d501      	bpl.n	8004822 <_printf_i+0xbe>
 800481e:	681e      	ldr	r6, [r3, #0]
 8004820:	e003      	b.n	800482a <_printf_i+0xc6>
 8004822:	0646      	lsls	r6, r0, #25
 8004824:	d5fb      	bpl.n	800481e <_printf_i+0xba>
 8004826:	f9b3 6000 	ldrsh.w	r6, [r3]
 800482a:	2e00      	cmp	r6, #0
 800482c:	da03      	bge.n	8004836 <_printf_i+0xd2>
 800482e:	232d      	movs	r3, #45	; 0x2d
 8004830:	4276      	negs	r6, r6
 8004832:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004836:	230a      	movs	r3, #10
 8004838:	4859      	ldr	r0, [pc, #356]	; (80049a0 <_printf_i+0x23c>)
 800483a:	e012      	b.n	8004862 <_printf_i+0xfe>
 800483c:	682b      	ldr	r3, [r5, #0]
 800483e:	6820      	ldr	r0, [r4, #0]
 8004840:	1d19      	adds	r1, r3, #4
 8004842:	6029      	str	r1, [r5, #0]
 8004844:	0605      	lsls	r5, r0, #24
 8004846:	d501      	bpl.n	800484c <_printf_i+0xe8>
 8004848:	681e      	ldr	r6, [r3, #0]
 800484a:	e002      	b.n	8004852 <_printf_i+0xee>
 800484c:	0641      	lsls	r1, r0, #25
 800484e:	d5fb      	bpl.n	8004848 <_printf_i+0xe4>
 8004850:	881e      	ldrh	r6, [r3, #0]
 8004852:	2f6f      	cmp	r7, #111	; 0x6f
 8004854:	bf0c      	ite	eq
 8004856:	2308      	moveq	r3, #8
 8004858:	230a      	movne	r3, #10
 800485a:	4851      	ldr	r0, [pc, #324]	; (80049a0 <_printf_i+0x23c>)
 800485c:	2100      	movs	r1, #0
 800485e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004862:	6865      	ldr	r5, [r4, #4]
 8004864:	2d00      	cmp	r5, #0
 8004866:	bfa8      	it	ge
 8004868:	6821      	ldrge	r1, [r4, #0]
 800486a:	60a5      	str	r5, [r4, #8]
 800486c:	bfa4      	itt	ge
 800486e:	f021 0104 	bicge.w	r1, r1, #4
 8004872:	6021      	strge	r1, [r4, #0]
 8004874:	b90e      	cbnz	r6, 800487a <_printf_i+0x116>
 8004876:	2d00      	cmp	r5, #0
 8004878:	d04b      	beq.n	8004912 <_printf_i+0x1ae>
 800487a:	4615      	mov	r5, r2
 800487c:	fbb6 f1f3 	udiv	r1, r6, r3
 8004880:	fb03 6711 	mls	r7, r3, r1, r6
 8004884:	5dc7      	ldrb	r7, [r0, r7]
 8004886:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800488a:	4637      	mov	r7, r6
 800488c:	42bb      	cmp	r3, r7
 800488e:	460e      	mov	r6, r1
 8004890:	d9f4      	bls.n	800487c <_printf_i+0x118>
 8004892:	2b08      	cmp	r3, #8
 8004894:	d10b      	bne.n	80048ae <_printf_i+0x14a>
 8004896:	6823      	ldr	r3, [r4, #0]
 8004898:	07de      	lsls	r6, r3, #31
 800489a:	d508      	bpl.n	80048ae <_printf_i+0x14a>
 800489c:	6923      	ldr	r3, [r4, #16]
 800489e:	6861      	ldr	r1, [r4, #4]
 80048a0:	4299      	cmp	r1, r3
 80048a2:	bfde      	ittt	le
 80048a4:	2330      	movle	r3, #48	; 0x30
 80048a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80048aa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80048ae:	1b52      	subs	r2, r2, r5
 80048b0:	6122      	str	r2, [r4, #16]
 80048b2:	464b      	mov	r3, r9
 80048b4:	4621      	mov	r1, r4
 80048b6:	4640      	mov	r0, r8
 80048b8:	f8cd a000 	str.w	sl, [sp]
 80048bc:	aa03      	add	r2, sp, #12
 80048be:	f7ff fedf 	bl	8004680 <_printf_common>
 80048c2:	3001      	adds	r0, #1
 80048c4:	d14a      	bne.n	800495c <_printf_i+0x1f8>
 80048c6:	f04f 30ff 	mov.w	r0, #4294967295
 80048ca:	b004      	add	sp, #16
 80048cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048d0:	6823      	ldr	r3, [r4, #0]
 80048d2:	f043 0320 	orr.w	r3, r3, #32
 80048d6:	6023      	str	r3, [r4, #0]
 80048d8:	2778      	movs	r7, #120	; 0x78
 80048da:	4832      	ldr	r0, [pc, #200]	; (80049a4 <_printf_i+0x240>)
 80048dc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80048e0:	6823      	ldr	r3, [r4, #0]
 80048e2:	6829      	ldr	r1, [r5, #0]
 80048e4:	061f      	lsls	r7, r3, #24
 80048e6:	f851 6b04 	ldr.w	r6, [r1], #4
 80048ea:	d402      	bmi.n	80048f2 <_printf_i+0x18e>
 80048ec:	065f      	lsls	r7, r3, #25
 80048ee:	bf48      	it	mi
 80048f0:	b2b6      	uxthmi	r6, r6
 80048f2:	07df      	lsls	r7, r3, #31
 80048f4:	bf48      	it	mi
 80048f6:	f043 0320 	orrmi.w	r3, r3, #32
 80048fa:	6029      	str	r1, [r5, #0]
 80048fc:	bf48      	it	mi
 80048fe:	6023      	strmi	r3, [r4, #0]
 8004900:	b91e      	cbnz	r6, 800490a <_printf_i+0x1a6>
 8004902:	6823      	ldr	r3, [r4, #0]
 8004904:	f023 0320 	bic.w	r3, r3, #32
 8004908:	6023      	str	r3, [r4, #0]
 800490a:	2310      	movs	r3, #16
 800490c:	e7a6      	b.n	800485c <_printf_i+0xf8>
 800490e:	4824      	ldr	r0, [pc, #144]	; (80049a0 <_printf_i+0x23c>)
 8004910:	e7e4      	b.n	80048dc <_printf_i+0x178>
 8004912:	4615      	mov	r5, r2
 8004914:	e7bd      	b.n	8004892 <_printf_i+0x12e>
 8004916:	682b      	ldr	r3, [r5, #0]
 8004918:	6826      	ldr	r6, [r4, #0]
 800491a:	1d18      	adds	r0, r3, #4
 800491c:	6961      	ldr	r1, [r4, #20]
 800491e:	6028      	str	r0, [r5, #0]
 8004920:	0635      	lsls	r5, r6, #24
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	d501      	bpl.n	800492a <_printf_i+0x1c6>
 8004926:	6019      	str	r1, [r3, #0]
 8004928:	e002      	b.n	8004930 <_printf_i+0x1cc>
 800492a:	0670      	lsls	r0, r6, #25
 800492c:	d5fb      	bpl.n	8004926 <_printf_i+0x1c2>
 800492e:	8019      	strh	r1, [r3, #0]
 8004930:	2300      	movs	r3, #0
 8004932:	4615      	mov	r5, r2
 8004934:	6123      	str	r3, [r4, #16]
 8004936:	e7bc      	b.n	80048b2 <_printf_i+0x14e>
 8004938:	682b      	ldr	r3, [r5, #0]
 800493a:	2100      	movs	r1, #0
 800493c:	1d1a      	adds	r2, r3, #4
 800493e:	602a      	str	r2, [r5, #0]
 8004940:	681d      	ldr	r5, [r3, #0]
 8004942:	6862      	ldr	r2, [r4, #4]
 8004944:	4628      	mov	r0, r5
 8004946:	f000 f859 	bl	80049fc <memchr>
 800494a:	b108      	cbz	r0, 8004950 <_printf_i+0x1ec>
 800494c:	1b40      	subs	r0, r0, r5
 800494e:	6060      	str	r0, [r4, #4]
 8004950:	6863      	ldr	r3, [r4, #4]
 8004952:	6123      	str	r3, [r4, #16]
 8004954:	2300      	movs	r3, #0
 8004956:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800495a:	e7aa      	b.n	80048b2 <_printf_i+0x14e>
 800495c:	462a      	mov	r2, r5
 800495e:	4649      	mov	r1, r9
 8004960:	4640      	mov	r0, r8
 8004962:	6923      	ldr	r3, [r4, #16]
 8004964:	47d0      	blx	sl
 8004966:	3001      	adds	r0, #1
 8004968:	d0ad      	beq.n	80048c6 <_printf_i+0x162>
 800496a:	6823      	ldr	r3, [r4, #0]
 800496c:	079b      	lsls	r3, r3, #30
 800496e:	d413      	bmi.n	8004998 <_printf_i+0x234>
 8004970:	68e0      	ldr	r0, [r4, #12]
 8004972:	9b03      	ldr	r3, [sp, #12]
 8004974:	4298      	cmp	r0, r3
 8004976:	bfb8      	it	lt
 8004978:	4618      	movlt	r0, r3
 800497a:	e7a6      	b.n	80048ca <_printf_i+0x166>
 800497c:	2301      	movs	r3, #1
 800497e:	4632      	mov	r2, r6
 8004980:	4649      	mov	r1, r9
 8004982:	4640      	mov	r0, r8
 8004984:	47d0      	blx	sl
 8004986:	3001      	adds	r0, #1
 8004988:	d09d      	beq.n	80048c6 <_printf_i+0x162>
 800498a:	3501      	adds	r5, #1
 800498c:	68e3      	ldr	r3, [r4, #12]
 800498e:	9903      	ldr	r1, [sp, #12]
 8004990:	1a5b      	subs	r3, r3, r1
 8004992:	42ab      	cmp	r3, r5
 8004994:	dcf2      	bgt.n	800497c <_printf_i+0x218>
 8004996:	e7eb      	b.n	8004970 <_printf_i+0x20c>
 8004998:	2500      	movs	r5, #0
 800499a:	f104 0619 	add.w	r6, r4, #25
 800499e:	e7f5      	b.n	800498c <_printf_i+0x228>
 80049a0:	08004f38 	.word	0x08004f38
 80049a4:	08004f49 	.word	0x08004f49

080049a8 <memmove>:
 80049a8:	4288      	cmp	r0, r1
 80049aa:	b510      	push	{r4, lr}
 80049ac:	eb01 0402 	add.w	r4, r1, r2
 80049b0:	d902      	bls.n	80049b8 <memmove+0x10>
 80049b2:	4284      	cmp	r4, r0
 80049b4:	4623      	mov	r3, r4
 80049b6:	d807      	bhi.n	80049c8 <memmove+0x20>
 80049b8:	1e43      	subs	r3, r0, #1
 80049ba:	42a1      	cmp	r1, r4
 80049bc:	d008      	beq.n	80049d0 <memmove+0x28>
 80049be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80049c6:	e7f8      	b.n	80049ba <memmove+0x12>
 80049c8:	4601      	mov	r1, r0
 80049ca:	4402      	add	r2, r0
 80049cc:	428a      	cmp	r2, r1
 80049ce:	d100      	bne.n	80049d2 <memmove+0x2a>
 80049d0:	bd10      	pop	{r4, pc}
 80049d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80049d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80049da:	e7f7      	b.n	80049cc <memmove+0x24>

080049dc <_sbrk_r>:
 80049dc:	b538      	push	{r3, r4, r5, lr}
 80049de:	2300      	movs	r3, #0
 80049e0:	4d05      	ldr	r5, [pc, #20]	; (80049f8 <_sbrk_r+0x1c>)
 80049e2:	4604      	mov	r4, r0
 80049e4:	4608      	mov	r0, r1
 80049e6:	602b      	str	r3, [r5, #0]
 80049e8:	f7fb fdbe 	bl	8000568 <_sbrk>
 80049ec:	1c43      	adds	r3, r0, #1
 80049ee:	d102      	bne.n	80049f6 <_sbrk_r+0x1a>
 80049f0:	682b      	ldr	r3, [r5, #0]
 80049f2:	b103      	cbz	r3, 80049f6 <_sbrk_r+0x1a>
 80049f4:	6023      	str	r3, [r4, #0]
 80049f6:	bd38      	pop	{r3, r4, r5, pc}
 80049f8:	200003b8 	.word	0x200003b8

080049fc <memchr>:
 80049fc:	4603      	mov	r3, r0
 80049fe:	b510      	push	{r4, lr}
 8004a00:	b2c9      	uxtb	r1, r1
 8004a02:	4402      	add	r2, r0
 8004a04:	4293      	cmp	r3, r2
 8004a06:	4618      	mov	r0, r3
 8004a08:	d101      	bne.n	8004a0e <memchr+0x12>
 8004a0a:	2000      	movs	r0, #0
 8004a0c:	e003      	b.n	8004a16 <memchr+0x1a>
 8004a0e:	7804      	ldrb	r4, [r0, #0]
 8004a10:	3301      	adds	r3, #1
 8004a12:	428c      	cmp	r4, r1
 8004a14:	d1f6      	bne.n	8004a04 <memchr+0x8>
 8004a16:	bd10      	pop	{r4, pc}

08004a18 <_realloc_r>:
 8004a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a1c:	4680      	mov	r8, r0
 8004a1e:	4614      	mov	r4, r2
 8004a20:	460e      	mov	r6, r1
 8004a22:	b921      	cbnz	r1, 8004a2e <_realloc_r+0x16>
 8004a24:	4611      	mov	r1, r2
 8004a26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a2a:	f7ff bc45 	b.w	80042b8 <_malloc_r>
 8004a2e:	b92a      	cbnz	r2, 8004a3c <_realloc_r+0x24>
 8004a30:	f7ff fbda 	bl	80041e8 <_free_r>
 8004a34:	4625      	mov	r5, r4
 8004a36:	4628      	mov	r0, r5
 8004a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a3c:	f000 f81b 	bl	8004a76 <_malloc_usable_size_r>
 8004a40:	4284      	cmp	r4, r0
 8004a42:	4607      	mov	r7, r0
 8004a44:	d802      	bhi.n	8004a4c <_realloc_r+0x34>
 8004a46:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004a4a:	d812      	bhi.n	8004a72 <_realloc_r+0x5a>
 8004a4c:	4621      	mov	r1, r4
 8004a4e:	4640      	mov	r0, r8
 8004a50:	f7ff fc32 	bl	80042b8 <_malloc_r>
 8004a54:	4605      	mov	r5, r0
 8004a56:	2800      	cmp	r0, #0
 8004a58:	d0ed      	beq.n	8004a36 <_realloc_r+0x1e>
 8004a5a:	42bc      	cmp	r4, r7
 8004a5c:	4622      	mov	r2, r4
 8004a5e:	4631      	mov	r1, r6
 8004a60:	bf28      	it	cs
 8004a62:	463a      	movcs	r2, r7
 8004a64:	f7ff fbb2 	bl	80041cc <memcpy>
 8004a68:	4631      	mov	r1, r6
 8004a6a:	4640      	mov	r0, r8
 8004a6c:	f7ff fbbc 	bl	80041e8 <_free_r>
 8004a70:	e7e1      	b.n	8004a36 <_realloc_r+0x1e>
 8004a72:	4635      	mov	r5, r6
 8004a74:	e7df      	b.n	8004a36 <_realloc_r+0x1e>

08004a76 <_malloc_usable_size_r>:
 8004a76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a7a:	1f18      	subs	r0, r3, #4
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	bfbc      	itt	lt
 8004a80:	580b      	ldrlt	r3, [r1, r0]
 8004a82:	18c0      	addlt	r0, r0, r3
 8004a84:	4770      	bx	lr
	...

08004a88 <_init>:
 8004a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a8a:	bf00      	nop
 8004a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a8e:	bc08      	pop	{r3}
 8004a90:	469e      	mov	lr, r3
 8004a92:	4770      	bx	lr

08004a94 <_fini>:
 8004a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a96:	bf00      	nop
 8004a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a9a:	bc08      	pop	{r3}
 8004a9c:	469e      	mov	lr, r3
 8004a9e:	4770      	bx	lr
