
PdM-PCSE_TP_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003804  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000758  08003910  08003910  00013910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004068  08004068  00020130  2**0
                  CONTENTS
  4 .ARM          00000000  08004068  08004068  00020130  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004068  08004068  00020130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004068  08004068  00014068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800406c  0800406c  0001406c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000130  20000000  08004070  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  20000130  080041a0  00020130  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  080041a0  0002036c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020159  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000acc8  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001eaf  00000000  00000000  0002ae64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a88  00000000  00000000  0002cd18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000830  00000000  00000000  0002d7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017cf2  00000000  00000000  0002dfd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e3ca  00000000  00000000  00045cc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008509e  00000000  00000000  0005408c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002fb8  00000000  00000000  000d912c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000dc0e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000130 	.word	0x20000130
 8000128:	00000000 	.word	0x00000000
 800012c:	080038f8 	.word	0x080038f8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000134 	.word	0x20000134
 8000148:	080038f8 	.word	0x080038f8

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f001 f803 	bl	800115c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f817 	bl	8000188 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f851 	bl	8000200 <MX_GPIO_Init>
  //MX_USART2_UART_Init();
  //MX_I2C1_Init();
  /* USER CODE BEGIN 2 */
  uartInit();
 800015e:	f000 ff6b 	bl	8001038 <uartInit>
  i2c_init();
 8000162:	f000 fc43 	bl	80009ec <i2c_init>

  debounceFSM_init();
 8000166:	f000 fa11 	bl	800058c <debounceFSM_init>
  menuMEF_init();
 800016a:	f000 fc69 	bl	8000a40 <menuMEF_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  action_t menuAction = NONE;
 800016e:	2300      	movs	r3, #0
 8000170:	71fb      	strb	r3, [r7, #7]

  while(1){

	  debounceFSM_update(); // checkear el estado del pulsador y actualizar su valor
 8000172:	f000 fa1b 	bl	80005ac <debounceFSM_update>
	  menuAction = menuMEF_update(); // obtener la accion del pulsador (NONE, EXECUTE, NEXT)
 8000176:	f000 fcaf 	bl	8000ad8 <menuMEF_update>
 800017a:	4603      	mov	r3, r0
 800017c:	71fb      	strb	r3, [r7, #7]
	  menuMEF_set_state(menuAction); // ejecutar la accion correspondiente al estado y a la accion del pulsador
 800017e:	79fb      	ldrb	r3, [r7, #7]
 8000180:	4618      	mov	r0, r3
 8000182:	f000 fcfb 	bl	8000b7c <menuMEF_set_state>
	  debounceFSM_update(); // checkear el estado del pulsador y actualizar su valor
 8000186:	e7f4      	b.n	8000172 <main+0x26>

08000188 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b090      	sub	sp, #64	; 0x40
 800018c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800018e:	f107 0318 	add.w	r3, r7, #24
 8000192:	2228      	movs	r2, #40	; 0x28
 8000194:	2100      	movs	r1, #0
 8000196:	4618      	mov	r0, r3
 8000198:	f002 ff1c 	bl	8002fd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800019c:	1d3b      	adds	r3, r7, #4
 800019e:	2200      	movs	r2, #0
 80001a0:	601a      	str	r2, [r3, #0]
 80001a2:	605a      	str	r2, [r3, #4]
 80001a4:	609a      	str	r2, [r3, #8]
 80001a6:	60da      	str	r2, [r3, #12]
 80001a8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001aa:	2301      	movs	r3, #1
 80001ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80001ae:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80001b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001b4:	2300      	movs	r3, #0
 80001b6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001b8:	f107 0318 	add.w	r3, r7, #24
 80001bc:	4618      	mov	r0, r3
 80001be:	f001 ffeb 	bl	8002198 <HAL_RCC_OscConfig>
 80001c2:	4603      	mov	r3, r0
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d001      	beq.n	80001cc <SystemClock_Config+0x44>
  {
    Error_Handler();
 80001c8:	f000 f888 	bl	80002dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001cc:	230f      	movs	r3, #15
 80001ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80001d0:	2301      	movs	r3, #1
 80001d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d4:	2300      	movs	r3, #0
 80001d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001de:	2300      	movs	r3, #0
 80001e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001e2:	1d3b      	adds	r3, r7, #4
 80001e4:	2100      	movs	r1, #0
 80001e6:	4618      	mov	r0, r3
 80001e8:	f002 fa58 	bl	800269c <HAL_RCC_ClockConfig>
 80001ec:	4603      	mov	r3, r0
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d001      	beq.n	80001f6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80001f2:	f000 f873 	bl	80002dc <Error_Handler>
  }
}
 80001f6:	bf00      	nop
 80001f8:	3740      	adds	r7, #64	; 0x40
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bd80      	pop	{r7, pc}
	...

08000200 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b088      	sub	sp, #32
 8000204:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000206:	f107 0310 	add.w	r3, r7, #16
 800020a:	2200      	movs	r2, #0
 800020c:	601a      	str	r2, [r3, #0]
 800020e:	605a      	str	r2, [r3, #4]
 8000210:	609a      	str	r2, [r3, #8]
 8000212:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000214:	4b2d      	ldr	r3, [pc, #180]	; (80002cc <MX_GPIO_Init+0xcc>)
 8000216:	699b      	ldr	r3, [r3, #24]
 8000218:	4a2c      	ldr	r2, [pc, #176]	; (80002cc <MX_GPIO_Init+0xcc>)
 800021a:	f043 0310 	orr.w	r3, r3, #16
 800021e:	6193      	str	r3, [r2, #24]
 8000220:	4b2a      	ldr	r3, [pc, #168]	; (80002cc <MX_GPIO_Init+0xcc>)
 8000222:	699b      	ldr	r3, [r3, #24]
 8000224:	f003 0310 	and.w	r3, r3, #16
 8000228:	60fb      	str	r3, [r7, #12]
 800022a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800022c:	4b27      	ldr	r3, [pc, #156]	; (80002cc <MX_GPIO_Init+0xcc>)
 800022e:	699b      	ldr	r3, [r3, #24]
 8000230:	4a26      	ldr	r2, [pc, #152]	; (80002cc <MX_GPIO_Init+0xcc>)
 8000232:	f043 0320 	orr.w	r3, r3, #32
 8000236:	6193      	str	r3, [r2, #24]
 8000238:	4b24      	ldr	r3, [pc, #144]	; (80002cc <MX_GPIO_Init+0xcc>)
 800023a:	699b      	ldr	r3, [r3, #24]
 800023c:	f003 0320 	and.w	r3, r3, #32
 8000240:	60bb      	str	r3, [r7, #8]
 8000242:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000244:	4b21      	ldr	r3, [pc, #132]	; (80002cc <MX_GPIO_Init+0xcc>)
 8000246:	699b      	ldr	r3, [r3, #24]
 8000248:	4a20      	ldr	r2, [pc, #128]	; (80002cc <MX_GPIO_Init+0xcc>)
 800024a:	f043 0304 	orr.w	r3, r3, #4
 800024e:	6193      	str	r3, [r2, #24]
 8000250:	4b1e      	ldr	r3, [pc, #120]	; (80002cc <MX_GPIO_Init+0xcc>)
 8000252:	699b      	ldr	r3, [r3, #24]
 8000254:	f003 0304 	and.w	r3, r3, #4
 8000258:	607b      	str	r3, [r7, #4]
 800025a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800025c:	4b1b      	ldr	r3, [pc, #108]	; (80002cc <MX_GPIO_Init+0xcc>)
 800025e:	699b      	ldr	r3, [r3, #24]
 8000260:	4a1a      	ldr	r2, [pc, #104]	; (80002cc <MX_GPIO_Init+0xcc>)
 8000262:	f043 0308 	orr.w	r3, r3, #8
 8000266:	6193      	str	r3, [r2, #24]
 8000268:	4b18      	ldr	r3, [pc, #96]	; (80002cc <MX_GPIO_Init+0xcc>)
 800026a:	699b      	ldr	r3, [r3, #24]
 800026c:	f003 0308 	and.w	r3, r3, #8
 8000270:	603b      	str	r3, [r7, #0]
 8000272:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000274:	2200      	movs	r2, #0
 8000276:	2120      	movs	r1, #32
 8000278:	4815      	ldr	r0, [pc, #84]	; (80002d0 <MX_GPIO_Init+0xd0>)
 800027a:	f001 fa9e 	bl	80017ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800027e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000282:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000284:	4b13      	ldr	r3, [pc, #76]	; (80002d4 <MX_GPIO_Init+0xd4>)
 8000286:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000288:	2300      	movs	r3, #0
 800028a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800028c:	f107 0310 	add.w	r3, r7, #16
 8000290:	4619      	mov	r1, r3
 8000292:	4811      	ldr	r0, [pc, #68]	; (80002d8 <MX_GPIO_Init+0xd8>)
 8000294:	f001 f8f6 	bl	8001484 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000298:	2320      	movs	r3, #32
 800029a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800029c:	2301      	movs	r3, #1
 800029e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002a0:	2300      	movs	r3, #0
 80002a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002a4:	2302      	movs	r3, #2
 80002a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80002a8:	f107 0310 	add.w	r3, r7, #16
 80002ac:	4619      	mov	r1, r3
 80002ae:	4808      	ldr	r0, [pc, #32]	; (80002d0 <MX_GPIO_Init+0xd0>)
 80002b0:	f001 f8e8 	bl	8001484 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80002b4:	2200      	movs	r2, #0
 80002b6:	2100      	movs	r1, #0
 80002b8:	2028      	movs	r0, #40	; 0x28
 80002ba:	f001 f8ac 	bl	8001416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80002be:	2028      	movs	r0, #40	; 0x28
 80002c0:	f001 f8c5 	bl	800144e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80002c4:	bf00      	nop
 80002c6:	3720      	adds	r7, #32
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	40021000 	.word	0x40021000
 80002d0:	40010800 	.word	0x40010800
 80002d4:	10110000 	.word	0x10110000
 80002d8:	40011000 	.word	0x40011000

080002dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002e0:	b672      	cpsid	i
}
 80002e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002e4:	e7fe      	b.n	80002e4 <Error_Handler+0x8>
	...

080002e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b085      	sub	sp, #20
 80002ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002ee:	4b15      	ldr	r3, [pc, #84]	; (8000344 <HAL_MspInit+0x5c>)
 80002f0:	699b      	ldr	r3, [r3, #24]
 80002f2:	4a14      	ldr	r2, [pc, #80]	; (8000344 <HAL_MspInit+0x5c>)
 80002f4:	f043 0301 	orr.w	r3, r3, #1
 80002f8:	6193      	str	r3, [r2, #24]
 80002fa:	4b12      	ldr	r3, [pc, #72]	; (8000344 <HAL_MspInit+0x5c>)
 80002fc:	699b      	ldr	r3, [r3, #24]
 80002fe:	f003 0301 	and.w	r3, r3, #1
 8000302:	60bb      	str	r3, [r7, #8]
 8000304:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000306:	4b0f      	ldr	r3, [pc, #60]	; (8000344 <HAL_MspInit+0x5c>)
 8000308:	69db      	ldr	r3, [r3, #28]
 800030a:	4a0e      	ldr	r2, [pc, #56]	; (8000344 <HAL_MspInit+0x5c>)
 800030c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000310:	61d3      	str	r3, [r2, #28]
 8000312:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <HAL_MspInit+0x5c>)
 8000314:	69db      	ldr	r3, [r3, #28]
 8000316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800031a:	607b      	str	r3, [r7, #4]
 800031c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800031e:	4b0a      	ldr	r3, [pc, #40]	; (8000348 <HAL_MspInit+0x60>)
 8000320:	685b      	ldr	r3, [r3, #4]
 8000322:	60fb      	str	r3, [r7, #12]
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800032a:	60fb      	str	r3, [r7, #12]
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000332:	60fb      	str	r3, [r7, #12]
 8000334:	4a04      	ldr	r2, [pc, #16]	; (8000348 <HAL_MspInit+0x60>)
 8000336:	68fb      	ldr	r3, [r7, #12]
 8000338:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800033a:	bf00      	nop
 800033c:	3714      	adds	r7, #20
 800033e:	46bd      	mov	sp, r7
 8000340:	bc80      	pop	{r7}
 8000342:	4770      	bx	lr
 8000344:	40021000 	.word	0x40021000
 8000348:	40010000 	.word	0x40010000

0800034c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b08a      	sub	sp, #40	; 0x28
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000354:	f107 0314 	add.w	r3, r7, #20
 8000358:	2200      	movs	r2, #0
 800035a:	601a      	str	r2, [r3, #0]
 800035c:	605a      	str	r2, [r3, #4]
 800035e:	609a      	str	r2, [r3, #8]
 8000360:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	4a1d      	ldr	r2, [pc, #116]	; (80003dc <HAL_I2C_MspInit+0x90>)
 8000368:	4293      	cmp	r3, r2
 800036a:	d132      	bne.n	80003d2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800036c:	4b1c      	ldr	r3, [pc, #112]	; (80003e0 <HAL_I2C_MspInit+0x94>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	4a1b      	ldr	r2, [pc, #108]	; (80003e0 <HAL_I2C_MspInit+0x94>)
 8000372:	f043 0308 	orr.w	r3, r3, #8
 8000376:	6193      	str	r3, [r2, #24]
 8000378:	4b19      	ldr	r3, [pc, #100]	; (80003e0 <HAL_I2C_MspInit+0x94>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	f003 0308 	and.w	r3, r3, #8
 8000380:	613b      	str	r3, [r7, #16]
 8000382:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000384:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000388:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800038a:	2312      	movs	r3, #18
 800038c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800038e:	2303      	movs	r3, #3
 8000390:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000392:	f107 0314 	add.w	r3, r7, #20
 8000396:	4619      	mov	r1, r3
 8000398:	4812      	ldr	r0, [pc, #72]	; (80003e4 <HAL_I2C_MspInit+0x98>)
 800039a:	f001 f873 	bl	8001484 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800039e:	4b12      	ldr	r3, [pc, #72]	; (80003e8 <HAL_I2C_MspInit+0x9c>)
 80003a0:	685b      	ldr	r3, [r3, #4]
 80003a2:	627b      	str	r3, [r7, #36]	; 0x24
 80003a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003a6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80003aa:	627b      	str	r3, [r7, #36]	; 0x24
 80003ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003ae:	f043 0302 	orr.w	r3, r3, #2
 80003b2:	627b      	str	r3, [r7, #36]	; 0x24
 80003b4:	4a0c      	ldr	r2, [pc, #48]	; (80003e8 <HAL_I2C_MspInit+0x9c>)
 80003b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003b8:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80003ba:	4b09      	ldr	r3, [pc, #36]	; (80003e0 <HAL_I2C_MspInit+0x94>)
 80003bc:	69db      	ldr	r3, [r3, #28]
 80003be:	4a08      	ldr	r2, [pc, #32]	; (80003e0 <HAL_I2C_MspInit+0x94>)
 80003c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80003c4:	61d3      	str	r3, [r2, #28]
 80003c6:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <HAL_I2C_MspInit+0x94>)
 80003c8:	69db      	ldr	r3, [r3, #28]
 80003ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80003ce:	60fb      	str	r3, [r7, #12]
 80003d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80003d2:	bf00      	nop
 80003d4:	3728      	adds	r7, #40	; 0x28
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	40005400 	.word	0x40005400
 80003e0:	40021000 	.word	0x40021000
 80003e4:	40010c00 	.word	0x40010c00
 80003e8:	40010000 	.word	0x40010000

080003ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b088      	sub	sp, #32
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f4:	f107 0310 	add.w	r3, r7, #16
 80003f8:	2200      	movs	r2, #0
 80003fa:	601a      	str	r2, [r3, #0]
 80003fc:	605a      	str	r2, [r3, #4]
 80003fe:	609a      	str	r2, [r3, #8]
 8000400:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	4a15      	ldr	r2, [pc, #84]	; (800045c <HAL_UART_MspInit+0x70>)
 8000408:	4293      	cmp	r3, r2
 800040a:	d123      	bne.n	8000454 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800040c:	4b14      	ldr	r3, [pc, #80]	; (8000460 <HAL_UART_MspInit+0x74>)
 800040e:	69db      	ldr	r3, [r3, #28]
 8000410:	4a13      	ldr	r2, [pc, #76]	; (8000460 <HAL_UART_MspInit+0x74>)
 8000412:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000416:	61d3      	str	r3, [r2, #28]
 8000418:	4b11      	ldr	r3, [pc, #68]	; (8000460 <HAL_UART_MspInit+0x74>)
 800041a:	69db      	ldr	r3, [r3, #28]
 800041c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000420:	60fb      	str	r3, [r7, #12]
 8000422:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000424:	4b0e      	ldr	r3, [pc, #56]	; (8000460 <HAL_UART_MspInit+0x74>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	4a0d      	ldr	r2, [pc, #52]	; (8000460 <HAL_UART_MspInit+0x74>)
 800042a:	f043 0304 	orr.w	r3, r3, #4
 800042e:	6193      	str	r3, [r2, #24]
 8000430:	4b0b      	ldr	r3, [pc, #44]	; (8000460 <HAL_UART_MspInit+0x74>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	f003 0304 	and.w	r3, r3, #4
 8000438:	60bb      	str	r3, [r7, #8]
 800043a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800043c:	230c      	movs	r3, #12
 800043e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000440:	2302      	movs	r3, #2
 8000442:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000444:	2302      	movs	r3, #2
 8000446:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000448:	f107 0310 	add.w	r3, r7, #16
 800044c:	4619      	mov	r1, r3
 800044e:	4805      	ldr	r0, [pc, #20]	; (8000464 <HAL_UART_MspInit+0x78>)
 8000450:	f001 f818 	bl	8001484 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000454:	bf00      	nop
 8000456:	3720      	adds	r7, #32
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	40004400 	.word	0x40004400
 8000460:	40021000 	.word	0x40021000
 8000464:	40010800 	.word	0x40010800

08000468 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800046c:	e7fe      	b.n	800046c <NMI_Handler+0x4>

0800046e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800046e:	b480      	push	{r7}
 8000470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000472:	e7fe      	b.n	8000472 <HardFault_Handler+0x4>

08000474 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000478:	e7fe      	b.n	8000478 <MemManage_Handler+0x4>

0800047a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800047a:	b480      	push	{r7}
 800047c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800047e:	e7fe      	b.n	800047e <BusFault_Handler+0x4>

08000480 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000484:	e7fe      	b.n	8000484 <UsageFault_Handler+0x4>

08000486 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000486:	b480      	push	{r7}
 8000488:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800048a:	bf00      	nop
 800048c:	46bd      	mov	sp, r7
 800048e:	bc80      	pop	{r7}
 8000490:	4770      	bx	lr

08000492 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000492:	b480      	push	{r7}
 8000494:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000496:	bf00      	nop
 8000498:	46bd      	mov	sp, r7
 800049a:	bc80      	pop	{r7}
 800049c:	4770      	bx	lr

0800049e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800049e:	b480      	push	{r7}
 80004a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004a2:	bf00      	nop
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bc80      	pop	{r7}
 80004a8:	4770      	bx	lr

080004aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004aa:	b580      	push	{r7, lr}
 80004ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004ae:	f000 fe9b 	bl	80011e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004b2:	bf00      	nop
 80004b4:	bd80      	pop	{r7, pc}

080004b6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80004b6:	b580      	push	{r7, lr}
 80004b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80004ba:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80004be:	f001 f9ad 	bl	800181c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80004c2:	bf00      	nop
 80004c4:	bd80      	pop	{r7, pc}
	...

080004c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004d0:	4a14      	ldr	r2, [pc, #80]	; (8000524 <_sbrk+0x5c>)
 80004d2:	4b15      	ldr	r3, [pc, #84]	; (8000528 <_sbrk+0x60>)
 80004d4:	1ad3      	subs	r3, r2, r3
 80004d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004d8:	697b      	ldr	r3, [r7, #20]
 80004da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004dc:	4b13      	ldr	r3, [pc, #76]	; (800052c <_sbrk+0x64>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d102      	bne.n	80004ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004e4:	4b11      	ldr	r3, [pc, #68]	; (800052c <_sbrk+0x64>)
 80004e6:	4a12      	ldr	r2, [pc, #72]	; (8000530 <_sbrk+0x68>)
 80004e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004ea:	4b10      	ldr	r3, [pc, #64]	; (800052c <_sbrk+0x64>)
 80004ec:	681a      	ldr	r2, [r3, #0]
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	4413      	add	r3, r2
 80004f2:	693a      	ldr	r2, [r7, #16]
 80004f4:	429a      	cmp	r2, r3
 80004f6:	d207      	bcs.n	8000508 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004f8:	f002 fd74 	bl	8002fe4 <__errno>
 80004fc:	4603      	mov	r3, r0
 80004fe:	220c      	movs	r2, #12
 8000500:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000502:	f04f 33ff 	mov.w	r3, #4294967295
 8000506:	e009      	b.n	800051c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000508:	4b08      	ldr	r3, [pc, #32]	; (800052c <_sbrk+0x64>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800050e:	4b07      	ldr	r3, [pc, #28]	; (800052c <_sbrk+0x64>)
 8000510:	681a      	ldr	r2, [r3, #0]
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	4413      	add	r3, r2
 8000516:	4a05      	ldr	r2, [pc, #20]	; (800052c <_sbrk+0x64>)
 8000518:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800051a:	68fb      	ldr	r3, [r7, #12]
}
 800051c:	4618      	mov	r0, r3
 800051e:	3718      	adds	r7, #24
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	20005000 	.word	0x20005000
 8000528:	00000400 	.word	0x00000400
 800052c:	2000014c 	.word	0x2000014c
 8000530:	20000370 	.word	0x20000370

08000534 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr

08000540 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000540:	f7ff fff8 	bl	8000534 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000544:	480b      	ldr	r0, [pc, #44]	; (8000574 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000546:	490c      	ldr	r1, [pc, #48]	; (8000578 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000548:	4a0c      	ldr	r2, [pc, #48]	; (800057c <LoopFillZerobss+0x16>)
  movs r3, #0
 800054a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800054c:	e002      	b.n	8000554 <LoopCopyDataInit>

0800054e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800054e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000550:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000552:	3304      	adds	r3, #4

08000554 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000554:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000556:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000558:	d3f9      	bcc.n	800054e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800055a:	4a09      	ldr	r2, [pc, #36]	; (8000580 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800055c:	4c09      	ldr	r4, [pc, #36]	; (8000584 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800055e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000560:	e001      	b.n	8000566 <LoopFillZerobss>

08000562 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000562:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000564:	3204      	adds	r2, #4

08000566 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000566:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000568:	d3fb      	bcc.n	8000562 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800056a:	f002 fd41 	bl	8002ff0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800056e:	f7ff fded 	bl	800014c <main>
  bx lr
 8000572:	4770      	bx	lr
  ldr r0, =_sdata
 8000574:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000578:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 800057c:	08004070 	.word	0x08004070
  ldr r2, =_sbss
 8000580:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 8000584:	2000036c 	.word	0x2000036c

08000588 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000588:	e7fe      	b.n	8000588 <ADC1_2_IRQHandler>
	...

0800058c <debounceFSM_init>:


/* DEFINICION DE FUNCIONES */

// Definicion de inicializacion del anti rebote
void debounceFSM_init(){
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
	estado = BUTTON_UP;
 8000590:	4b04      	ldr	r3, [pc, #16]	; (80005a4 <debounceFSM_init+0x18>)
 8000592:	2200      	movs	r2, #0
 8000594:	701a      	strb	r2, [r3, #0]
	//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, RESET); // iniciar con led apagado (salida)
	delayInit(&delayHandle, DEBOUNCE_DELAY);
 8000596:	2128      	movs	r1, #40	; 0x28
 8000598:	4803      	ldr	r0, [pc, #12]	; (80005a8 <debounceFSM_init+0x1c>)
 800059a:	f000 f8b5 	bl	8000708 <delayInit>
}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000150 	.word	0x20000150
 80005a8:	20000154 	.word	0x20000154

080005ac <debounceFSM_update>:

// Definicion de actualizacion del valor del pulsador con anti rebote por software
void debounceFSM_update(){
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	switch(estado){
 80005b0:	4b34      	ldr	r3, [pc, #208]	; (8000684 <debounceFSM_update+0xd8>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	2b03      	cmp	r3, #3
 80005b6:	d859      	bhi.n	800066c <debounceFSM_update+0xc0>
 80005b8:	a201      	add	r2, pc, #4	; (adr r2, 80005c0 <debounceFSM_update+0x14>)
 80005ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005be:	bf00      	nop
 80005c0:	080005d1 	.word	0x080005d1
 80005c4:	080005e9 	.word	0x080005e9
 80005c8:	0800061f 	.word	0x0800061f
 80005cc:	08000637 	.word	0x08000637
	case BUTTON_UP:
		// si el pin esta low pasar al estado BUTTON_FALLING
		if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 0){
 80005d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d4:	482c      	ldr	r0, [pc, #176]	; (8000688 <debounceFSM_update+0xdc>)
 80005d6:	f001 f8d9 	bl	800178c <HAL_GPIO_ReadPin>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d148      	bne.n	8000672 <debounceFSM_update+0xc6>
			estado = BUTTON_FALLING;
 80005e0:	4b28      	ldr	r3, [pc, #160]	; (8000684 <debounceFSM_update+0xd8>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	701a      	strb	r2, [r3, #0]
		}
		break;
 80005e6:	e044      	b.n	8000672 <debounceFSM_update+0xc6>
	case BUTTON_FALLING:
		// si el pin esta high luego de 40 ms, volver a BUTTON_UP
		// si el pin esta low luego de 40 ms, cambiar a BUTTON_DOWN
		if(delayRead(&delayHandle) == true){ // si transcurrio el debounceDelay, muestrear pulsador nuevamente. Iniciar delay si es llamado por 1ra vez
 80005e8:	4828      	ldr	r0, [pc, #160]	; (800068c <debounceFSM_update+0xe0>)
 80005ea:	f000 f8aa 	bl	8000742 <delayRead>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d040      	beq.n	8000676 <debounceFSM_update+0xca>
			if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 1){ // pulsador no presionado >> 1
 80005f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005f8:	4823      	ldr	r0, [pc, #140]	; (8000688 <debounceFSM_update+0xdc>)
 80005fa:	f001 f8c7 	bl	800178c <HAL_GPIO_ReadPin>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b01      	cmp	r3, #1
 8000602:	d103      	bne.n	800060c <debounceFSM_update+0x60>
				estado = BUTTON_UP; // si sigue high, el estado vuelve a BUTTON_UP
 8000604:	4b1f      	ldr	r3, [pc, #124]	; (8000684 <debounceFSM_update+0xd8>)
 8000606:	2200      	movs	r2, #0
 8000608:	701a      	strb	r2, [r3, #0]
				buttonPressed();
				// Reemplazo del encendido del led por la deteccion unica del flanco descendente
				fallingState = true;
			}
		}
		break;
 800060a:	e034      	b.n	8000676 <debounceFSM_update+0xca>
				estado = BUTTON_DOWN;
 800060c:	4b1d      	ldr	r3, [pc, #116]	; (8000684 <debounceFSM_update+0xd8>)
 800060e:	2202      	movs	r2, #2
 8000610:	701a      	strb	r2, [r3, #0]
				buttonPressed();
 8000612:	f000 f86d 	bl	80006f0 <buttonPressed>
				fallingState = true;
 8000616:	4b1e      	ldr	r3, [pc, #120]	; (8000690 <debounceFSM_update+0xe4>)
 8000618:	2201      	movs	r2, #1
 800061a:	701a      	strb	r2, [r3, #0]
		break;
 800061c:	e02b      	b.n	8000676 <debounceFSM_update+0xca>
	case BUTTON_DOWN:
		// si el pin esta high, pasar al estado BUTTON_RAISING
		if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 1){
 800061e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000622:	4819      	ldr	r0, [pc, #100]	; (8000688 <debounceFSM_update+0xdc>)
 8000624:	f001 f8b2 	bl	800178c <HAL_GPIO_ReadPin>
 8000628:	4603      	mov	r3, r0
 800062a:	2b01      	cmp	r3, #1
 800062c:	d125      	bne.n	800067a <debounceFSM_update+0xce>
			estado = BUTTON_RAISING;
 800062e:	4b15      	ldr	r3, [pc, #84]	; (8000684 <debounceFSM_update+0xd8>)
 8000630:	2203      	movs	r2, #3
 8000632:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000634:	e021      	b.n	800067a <debounceFSM_update+0xce>
	case BUTTON_RAISING:
		// si el pin esta low luego de 40 ms, volver a BUTTON_DOWN
		// si el pin esta high luego de 40 ms, cambiar a BUTTON_UP
		if(delayRead(&delayHandle) == true){ // si transcurrio el debounceDelay, muestrear pulsador nuevamente
 8000636:	4815      	ldr	r0, [pc, #84]	; (800068c <debounceFSM_update+0xe0>)
 8000638:	f000 f883 	bl	8000742 <delayRead>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d01d      	beq.n	800067e <debounceFSM_update+0xd2>
			if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 0){ // pulsador presionado >> 0
 8000642:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000646:	4810      	ldr	r0, [pc, #64]	; (8000688 <debounceFSM_update+0xdc>)
 8000648:	f001 f8a0 	bl	800178c <HAL_GPIO_ReadPin>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d103      	bne.n	800065a <debounceFSM_update+0xae>
				estado = BUTTON_DOWN; // si sigue low, el estado vuelve a BUTTON_DOWN
 8000652:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <debounceFSM_update+0xd8>)
 8000654:	2202      	movs	r2, #2
 8000656:	701a      	strb	r2, [r3, #0]
				buttonReleased();
				risingState = true;
			}
		}

		break;
 8000658:	e011      	b.n	800067e <debounceFSM_update+0xd2>
				estado = BUTTON_UP;
 800065a:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <debounceFSM_update+0xd8>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
				buttonReleased();
 8000660:	f000 f84c 	bl	80006fc <buttonReleased>
				risingState = true;
 8000664:	4b0b      	ldr	r3, [pc, #44]	; (8000694 <debounceFSM_update+0xe8>)
 8000666:	2201      	movs	r2, #1
 8000668:	701a      	strb	r2, [r3, #0]
		break;
 800066a:	e008      	b.n	800067e <debounceFSM_update+0xd2>
	default:
		// checkear errores
		// reiniciar estado
		debounceFSM_init();
 800066c:	f7ff ff8e 	bl	800058c <debounceFSM_init>
		break;
 8000670:	e006      	b.n	8000680 <debounceFSM_update+0xd4>
		break;
 8000672:	bf00      	nop
 8000674:	e004      	b.n	8000680 <debounceFSM_update+0xd4>
		break;
 8000676:	bf00      	nop
 8000678:	e002      	b.n	8000680 <debounceFSM_update+0xd4>
		break;
 800067a:	bf00      	nop
 800067c:	e000      	b.n	8000680 <debounceFSM_update+0xd4>
		break;
 800067e:	bf00      	nop
	}
}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000150 	.word	0x20000150
 8000688:	40011000 	.word	0x40011000
 800068c:	20000154 	.word	0x20000154
 8000690:	20000151 	.word	0x20000151
 8000694:	20000152 	.word	0x20000152

08000698 <readKey_down>:

// La funcion retorna true al detectar el flanco descendente y se autoresetea
bool_t readKey_down(){
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
	bool_t result = false;
 800069e:	2300      	movs	r3, #0
 80006a0:	71fb      	strb	r3, [r7, #7]
	// retornar true solo si se detecta flanco descendente
	if(fallingState == true){
 80006a2:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <readKey_down+0x28>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d004      	beq.n	80006b4 <readKey_down+0x1c>
		fallingState = false; // resetear variable privada
 80006aa:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <readKey_down+0x28>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	701a      	strb	r2, [r3, #0]
		result = true;
 80006b0:	2301      	movs	r3, #1
 80006b2:	71fb      	strb	r3, [r7, #7]
	}
	return result;
 80006b4:	79fb      	ldrb	r3, [r7, #7]
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bc80      	pop	{r7}
 80006be:	4770      	bx	lr
 80006c0:	20000151 	.word	0x20000151

080006c4 <readKey_up>:

// La funcion retorna true al detectar el flanco ascendente y se autoresetea
bool_t readKey_up(){
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
	bool_t result = false;
 80006ca:	2300      	movs	r3, #0
 80006cc:	71fb      	strb	r3, [r7, #7]
	// retornar true solo si se detecta flanco ascendente
	if(risingState == true){
 80006ce:	4b07      	ldr	r3, [pc, #28]	; (80006ec <readKey_up+0x28>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d004      	beq.n	80006e0 <readKey_up+0x1c>
		risingState = false; // resetear variable privada
 80006d6:	4b05      	ldr	r3, [pc, #20]	; (80006ec <readKey_up+0x28>)
 80006d8:	2200      	movs	r2, #0
 80006da:	701a      	strb	r2, [r3, #0]
		result = true;
 80006dc:	2301      	movs	r3, #1
 80006de:	71fb      	strb	r3, [r7, #7]
	}
	return result;
 80006e0:	79fb      	ldrb	r3, [r7, #7]
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bc80      	pop	{r7}
 80006ea:	4770      	bx	lr
 80006ec:	20000152 	.word	0x20000152

080006f0 <buttonPressed>:


// Definicion de funcion para boton presionado
void buttonPressed(){
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, SET);
	// ejecutar la accion deseada al detectar pulsado
	//uartSendString("\r\nFlanco descendente!\r\n");
}
 80006f4:	bf00      	nop
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr

080006fc <buttonReleased>:

// Definicion de funcion para boton liberado
void buttonReleased(){
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, RESET);
	// ejecutar la accion deseada al detectar liberacion
	//uartSendString("\r\nFlanco ascendente!\r\n");
}
 8000700:	bf00      	nop
 8000702:	46bd      	mov	sp, r7
 8000704:	bc80      	pop	{r7}
 8000706:	4770      	bx	lr

08000708 <delayInit>:
/**
	* @brief Inicializacion del temporizador
	* @param delay struct {startTime, duration, running}
	* @retval Ninguno
	*/
void delayInit( delay_t * delay, tick_t duration ){
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	6039      	str	r1, [r7, #0]
	if(duration > 10000) duration = 10000; // limitar el tiempo a 10 segundos
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	f242 7210 	movw	r2, #10000	; 0x2710
 8000718:	4293      	cmp	r3, r2
 800071a:	d902      	bls.n	8000722 <delayInit+0x1a>
 800071c:	f242 7310 	movw	r3, #10000	; 0x2710
 8000720:	603b      	str	r3, [r7, #0]
	if(duration < 5) duration = 5; // limitar el tiempo minimo a 5 ms
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	2b04      	cmp	r3, #4
 8000726:	d801      	bhi.n	800072c <delayInit+0x24>
 8000728:	2305      	movs	r3, #5
 800072a:	603b      	str	r3, [r7, #0]

	delay->duration = duration;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	683a      	ldr	r2, [r7, #0]
 8000730:	605a      	str	r2, [r3, #4]
	delay->running = false;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2200      	movs	r2, #0
 8000736:	721a      	strb	r2, [r3, #8]
}
 8000738:	bf00      	nop
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	bc80      	pop	{r7}
 8000740:	4770      	bx	lr

08000742 <delayRead>:
/**
	* @brief Comparacion de delay vs contador milisegundos. Inicia timer si no esta en func
	* @param delay struct {startTime, duration, running}
	* @retval bool true si se cumplio el tiempo / false si no
	*/
bool_t delayRead( delay_t * delay ){
 8000742:	b580      	push	{r7, lr}
 8000744:	b082      	sub	sp, #8
 8000746:	af00      	add	r7, sp, #0
 8000748:	6078      	str	r0, [r7, #4]

	if(delay->running == false){ // activar timer
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	7a1b      	ldrb	r3, [r3, #8]
 800074e:	f083 0301 	eor.w	r3, r3, #1
 8000752:	b2db      	uxtb	r3, r3
 8000754:	2b00      	cmp	r3, #0
 8000756:	d00a      	beq.n	800076e <delayRead+0x2c>
		delay->running = true;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2201      	movs	r2, #1
 800075c:	721a      	strb	r2, [r3, #8]
		delay->startTime = HAL_GetTick(); // tomar valor de contador en [ms] actual
 800075e:	f000 fd55 	bl	800120c <HAL_GetTick>
 8000762:	4603      	mov	r3, r0
 8000764:	461a      	mov	r2, r3
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	601a      	str	r2, [r3, #0]
		return false; // salir de la funcion
 800076a:	2300      	movs	r3, #0
 800076c:	e010      	b.n	8000790 <delayRead+0x4e>
	} else {
		// si running == true ya estaba activo el timer, comparar valor actual con duration
		if(HAL_GetTick() - delay->startTime > delay->duration){ // si es timeout
 800076e:	f000 fd4d 	bl	800120c <HAL_GetTick>
 8000772:	4603      	mov	r3, r0
 8000774:	461a      	mov	r2, r3
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	1ad2      	subs	r2, r2, r3
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	685b      	ldr	r3, [r3, #4]
 8000780:	429a      	cmp	r2, r3
 8000782:	d904      	bls.n	800078e <delayRead+0x4c>
			delay->running = false; // reset el flag
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2200      	movs	r2, #0
 8000788:	721a      	strb	r2, [r3, #8]
			return true;
 800078a:	2301      	movs	r3, #1
 800078c:	e000      	b.n	8000790 <delayRead+0x4e>
		} else {
			// si no es timeout
			return false;
 800078e:	2300      	movs	r3, #0
		}
	}
}
 8000790:	4618      	mov	r0, r3
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <lcd_send_byte>:
/**************************** WRITE TO LCD FUNCTIONS ***************************/

/* Serial->Parallel: output Byte Px: D7 D6 D5 D4 BT E RW RS */


void lcd_send_byte(uint8_t byte, bool rs, bool rw){
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	71fb      	strb	r3, [r7, #7]
 80007a2:	460b      	mov	r3, r1
 80007a4:	71bb      	strb	r3, [r7, #6]
 80007a6:	4613      	mov	r3, r2
 80007a8:	717b      	strb	r3, [r7, #5]
	// byte contains 8 bits of information  / byteType can be INSTRUCTION or DATA
	uint8_t upperByte = (byte & HIGH_NIBBLE); // mask with 1111 0000
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	f023 030f 	bic.w	r3, r3, #15
 80007b0:	73fb      	strb	r3, [r7, #15]
	uint8_t lowerByte = (byte << 4); // shift 4 to the left so lower nibble becomes high
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	011b      	lsls	r3, r3, #4
 80007b6:	73bb      	strb	r3, [r7, #14]

	// add rs and rw bits
	upperByte |= ((rs<<RS_POS) | (rw<<RW_POS) | (BT_ON<<BT_POS));
 80007b8:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80007bc:	797b      	ldrb	r3, [r7, #5]
 80007be:	005b      	lsls	r3, r3, #1
 80007c0:	b25b      	sxtb	r3, r3
 80007c2:	4313      	orrs	r3, r2
 80007c4:	b25b      	sxtb	r3, r3
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	7bfb      	ldrb	r3, [r7, #15]
 80007ca:	4313      	orrs	r3, r2
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	f043 0308 	orr.w	r3, r3, #8
 80007d2:	73fb      	strb	r3, [r7, #15]
	lowerByte |= ((rs<<RS_POS) | (rw<<RW_POS) | (BT_ON<<BT_POS));
 80007d4:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80007d8:	797b      	ldrb	r3, [r7, #5]
 80007da:	005b      	lsls	r3, r3, #1
 80007dc:	b25b      	sxtb	r3, r3
 80007de:	4313      	orrs	r3, r2
 80007e0:	b25b      	sxtb	r3, r3
 80007e2:	b2da      	uxtb	r2, r3
 80007e4:	7bbb      	ldrb	r3, [r7, #14]
 80007e6:	4313      	orrs	r3, r2
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	f043 0308 	orr.w	r3, r3, #8
 80007ee:	73bb      	strb	r3, [r7, #14]
	// E bit 1 0 1 0 to create pulses in LCD controller

	uint8_t byteSequence[4] = {
 80007f0:	7bfb      	ldrb	r3, [r7, #15]
 80007f2:	f043 0304 	orr.w	r3, r3, #4
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	723b      	strb	r3, [r7, #8]
 80007fa:	7bfb      	ldrb	r3, [r7, #15]
 80007fc:	727b      	strb	r3, [r7, #9]
 80007fe:	7bbb      	ldrb	r3, [r7, #14]
 8000800:	f043 0304 	orr.w	r3, r3, #4
 8000804:	b2db      	uxtb	r3, r3
 8000806:	72bb      	strb	r3, [r7, #10]
 8000808:	7bbb      	ldrb	r3, [r7, #14]
 800080a:	72fb      	strb	r3, [r7, #11]
			(upperByte | (E_LOW<<E_POS)),
			(lowerByte | (E_HIGH<<E_POS)),
			(lowerByte | (E_LOW<<E_POS))
	};

	send_bytes_i2c(LCD_ADDRESS, byteSequence, 4, I2C_WRITE);
 800080c:	f107 0108 	add.w	r1, r7, #8
 8000810:	2300      	movs	r3, #0
 8000812:	2204      	movs	r2, #4
 8000814:	2027      	movs	r0, #39	; 0x27
 8000816:	f000 f807 	bl	8000828 <send_bytes_i2c>
	HAL_Delay(5);
 800081a:	2005      	movs	r0, #5
 800081c:	f000 fd00 	bl	8001220 <HAL_Delay>

}
 8000820:	bf00      	nop
 8000822:	3710      	adds	r7, #16
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <send_bytes_i2c>:

void send_bytes_i2c(uint8_t slaveAddress, uint8_t byteSequence[], uint8_t sequenceSize, bool i2c_rw){
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af02      	add	r7, sp, #8
 800082e:	6039      	str	r1, [r7, #0]
 8000830:	4611      	mov	r1, r2
 8000832:	461a      	mov	r2, r3
 8000834:	4603      	mov	r3, r0
 8000836:	71fb      	strb	r3, [r7, #7]
 8000838:	460b      	mov	r3, r1
 800083a:	71bb      	strb	r3, [r7, #6]
 800083c:	4613      	mov	r3, r2
 800083e:	717b      	strb	r3, [r7, #5]
	slaveAddress = ((slaveAddress<<1) | i2c_rw); // i2c WRITE or READ
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	005b      	lsls	r3, r3, #1
 8000844:	b25a      	sxtb	r2, r3
 8000846:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800084a:	4313      	orrs	r3, r2
 800084c:	b25b      	sxtb	r3, r3
 800084e:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&i2cHandle, slaveAddress, byteSequence, sequenceSize, 100);
 8000850:	79fb      	ldrb	r3, [r7, #7]
 8000852:	b299      	uxth	r1, r3
 8000854:	79bb      	ldrb	r3, [r7, #6]
 8000856:	b29b      	uxth	r3, r3
 8000858:	2264      	movs	r2, #100	; 0x64
 800085a:	9200      	str	r2, [sp, #0]
 800085c:	683a      	ldr	r2, [r7, #0]
 800085e:	4803      	ldr	r0, [pc, #12]	; (800086c <send_bytes_i2c+0x44>)
 8000860:	f001 f942 	bl	8001ae8 <HAL_I2C_Master_Transmit>
}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000160 	.word	0x20000160

08000870 <lcd_clear>:

void lcd_clear(){
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
	lcd_send_byte(0x01, RS_INSTRUCTION, RW_WRITE);
 8000874:	2200      	movs	r2, #0
 8000876:	2100      	movs	r1, #0
 8000878:	2001      	movs	r0, #1
 800087a:	f7ff ff8d 	bl	8000798 <lcd_send_byte>
}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}

08000882 <return_home>:

void return_home(){
 8000882:	b580      	push	{r7, lr}
 8000884:	af00      	add	r7, sp, #0
	lcd_send_byte(0x02, RS_INSTRUCTION, RW_WRITE);
 8000886:	2200      	movs	r2, #0
 8000888:	2100      	movs	r1, #0
 800088a:	2002      	movs	r0, #2
 800088c:	f7ff ff84 	bl	8000798 <lcd_send_byte>
}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}

08000894 <lcd_set_position>:

void lcd_set_position(uint8_t row, uint8_t column){
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	460a      	mov	r2, r1
 800089e:	71fb      	strb	r3, [r7, #7]
 80008a0:	4613      	mov	r3, r2
 80008a2:	71bb      	strb	r3, [r7, #6]
	// for LCD 16x2 check ranges
	if(row>2) row = 2;
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	2b02      	cmp	r3, #2
 80008a8:	d901      	bls.n	80008ae <lcd_set_position+0x1a>
 80008aa:	2302      	movs	r3, #2
 80008ac:	71fb      	strb	r3, [r7, #7]
	if(row<1) row = 1;
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d101      	bne.n	80008b8 <lcd_set_position+0x24>
 80008b4:	2301      	movs	r3, #1
 80008b6:	71fb      	strb	r3, [r7, #7]
	if(column>16) column = 16;
 80008b8:	79bb      	ldrb	r3, [r7, #6]
 80008ba:	2b10      	cmp	r3, #16
 80008bc:	d901      	bls.n	80008c2 <lcd_set_position+0x2e>
 80008be:	2310      	movs	r3, #16
 80008c0:	71bb      	strb	r3, [r7, #6]
	if(column<1) column = 1;
 80008c2:	79bb      	ldrb	r3, [r7, #6]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d101      	bne.n	80008cc <lcd_set_position+0x38>
 80008c8:	2301      	movs	r3, #1
 80008ca:	71bb      	strb	r3, [r7, #6]

	uint8_t ddram = ddram_address_16x2[row-1][column-1];
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	1e5a      	subs	r2, r3, #1
 80008d0:	79bb      	ldrb	r3, [r7, #6]
 80008d2:	3b01      	subs	r3, #1
 80008d4:	4909      	ldr	r1, [pc, #36]	; (80008fc <lcd_set_position+0x68>)
 80008d6:	0112      	lsls	r2, r2, #4
 80008d8:	440a      	add	r2, r1
 80008da:	4413      	add	r3, r2
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	73fb      	strb	r3, [r7, #15]
	uint8_t ddram_cmd = ddram | (1<<7); // add a 1 in DB7 for DDRAM command
 80008e0:	7bfb      	ldrb	r3, [r7, #15]
 80008e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008e6:	73bb      	strb	r3, [r7, #14]

	lcd_send_byte(ddram_cmd, RS_INSTRUCTION, RW_WRITE); // send address as instruction, not data
 80008e8:	7bbb      	ldrb	r3, [r7, #14]
 80008ea:	2200      	movs	r2, #0
 80008ec:	2100      	movs	r1, #0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f7ff ff52 	bl	8000798 <lcd_send_byte>
}
 80008f4:	bf00      	nop
 80008f6:	3710      	adds	r7, #16
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	08003f00 	.word	0x08003f00

08000900 <lcd_print_text>:

void lcd_print_text(uint8_t text[], uint8_t size){
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	460b      	mov	r3, r1
 800090a:	70fb      	strb	r3, [r7, #3]

	for(uint8_t i = 0; i < size-1; i++){ // -1 to exclude the '/0' char
 800090c:	2300      	movs	r3, #0
 800090e:	73fb      	strb	r3, [r7, #15]
 8000910:	e00e      	b.n	8000930 <lcd_print_text+0x30>
		HAL_Delay(1); // without this some chars go missing
 8000912:	2001      	movs	r0, #1
 8000914:	f000 fc84 	bl	8001220 <HAL_Delay>
		lcd_send_byte(text[i], RS_DATA, RW_WRITE);
 8000918:	7bfb      	ldrb	r3, [r7, #15]
 800091a:	687a      	ldr	r2, [r7, #4]
 800091c:	4413      	add	r3, r2
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	2200      	movs	r2, #0
 8000922:	2101      	movs	r1, #1
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff ff37 	bl	8000798 <lcd_send_byte>
	for(uint8_t i = 0; i < size-1; i++){ // -1 to exclude the '/0' char
 800092a:	7bfb      	ldrb	r3, [r7, #15]
 800092c:	3301      	adds	r3, #1
 800092e:	73fb      	strb	r3, [r7, #15]
 8000930:	7bfa      	ldrb	r2, [r7, #15]
 8000932:	78fb      	ldrb	r3, [r7, #3]
 8000934:	3b01      	subs	r3, #1
 8000936:	429a      	cmp	r2, r3
 8000938:	dbeb      	blt.n	8000912 <lcd_print_text+0x12>
	}
}
 800093a:	bf00      	nop
 800093c:	bf00      	nop
 800093e:	3710      	adds	r7, #16
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}

08000944 <lcd_init>:
void lcd_print_custom_character(uint8_t customCharArray[], uint8_t index){
	create_character(index, customCharArray);
	lcd_send_byte(index, RS_DATA, RW_WRITE);
}

void lcd_init(){
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
	// initialization sequence p46 HD44780 datasheet
	HAL_Delay(60); // wait >40 ms
 8000948:	203c      	movs	r0, #60	; 0x3c
 800094a:	f000 fc69 	bl	8001220 <HAL_Delay>
	lcd_send_byte(0x30, RS_INSTRUCTION, RW_WRITE); // 0 0 1 1 x x x x -> 0x30
 800094e:	2200      	movs	r2, #0
 8000950:	2100      	movs	r1, #0
 8000952:	2030      	movs	r0, #48	; 0x30
 8000954:	f7ff ff20 	bl	8000798 <lcd_send_byte>
	HAL_Delay(10); // wait > 4 ms
 8000958:	200a      	movs	r0, #10
 800095a:	f000 fc61 	bl	8001220 <HAL_Delay>
	lcd_send_byte(0x30, RS_INSTRUCTION, RW_WRITE);
 800095e:	2200      	movs	r2, #0
 8000960:	2100      	movs	r1, #0
 8000962:	2030      	movs	r0, #48	; 0x30
 8000964:	f7ff ff18 	bl	8000798 <lcd_send_byte>
	HAL_Delay(10); // wait > 0.1 ms
 8000968:	200a      	movs	r0, #10
 800096a:	f000 fc59 	bl	8001220 <HAL_Delay>
	lcd_send_byte(0x30, RS_INSTRUCTION, RW_WRITE);
 800096e:	2200      	movs	r2, #0
 8000970:	2100      	movs	r1, #0
 8000972:	2030      	movs	r0, #48	; 0x30
 8000974:	f7ff ff10 	bl	8000798 <lcd_send_byte>
	HAL_Delay(10);
 8000978:	200a      	movs	r0, #10
 800097a:	f000 fc51 	bl	8001220 <HAL_Delay>
	lcd_send_byte(0x20, RS_INSTRUCTION, RW_WRITE); // 0 0 1 DL=0 x x x x -> 0x20 / Function set: DL=4-bit mode
 800097e:	2200      	movs	r2, #0
 8000980:	2100      	movs	r1, #0
 8000982:	2020      	movs	r0, #32
 8000984:	f7ff ff08 	bl	8000798 <lcd_send_byte>
	// start in 4 bit mode
	lcd_send_byte(0x28, RS_INSTRUCTION, RW_WRITE); // 0 0 1 0 N=1 F=0 x x -> 0x28 / Function set: N=2-lines, F=5x8
 8000988:	2200      	movs	r2, #0
 800098a:	2100      	movs	r1, #0
 800098c:	2028      	movs	r0, #40	; 0x28
 800098e:	f7ff ff03 	bl	8000798 <lcd_send_byte>
	HAL_Delay(10);
 8000992:	200a      	movs	r0, #10
 8000994:	f000 fc44 	bl	8001220 <HAL_Delay>
	lcd_send_byte(0x08, RS_INSTRUCTION, RW_WRITE); // 0 0 0 0 1 D=0 C=0 B=0 -> 0x08 / Display control: D=display off, C=cursor off, B=blink off
 8000998:	2200      	movs	r2, #0
 800099a:	2100      	movs	r1, #0
 800099c:	2008      	movs	r0, #8
 800099e:	f7ff fefb 	bl	8000798 <lcd_send_byte>
	HAL_Delay(10);
 80009a2:	200a      	movs	r0, #10
 80009a4:	f000 fc3c 	bl	8001220 <HAL_Delay>
	lcd_clear();
 80009a8:	f7ff ff62 	bl	8000870 <lcd_clear>
	HAL_Delay(10);
 80009ac:	200a      	movs	r0, #10
 80009ae:	f000 fc37 	bl	8001220 <HAL_Delay>
	lcd_send_byte(0x06, RS_INSTRUCTION, RW_WRITE); // 0 0 0 0 0 1 ID=1 S=0 -> 0x06/ Entry mode: ID=increment, S=no display shift
 80009b2:	2200      	movs	r2, #0
 80009b4:	2100      	movs	r1, #0
 80009b6:	2006      	movs	r0, #6
 80009b8:	f7ff feee 	bl	8000798 <lcd_send_byte>
	HAL_Delay(10);
 80009bc:	200a      	movs	r0, #10
 80009be:	f000 fc2f 	bl	8001220 <HAL_Delay>
	lcd_send_byte(0x0C, RS_INSTRUCTION, RW_WRITE); // 0 0 0 0 1 D=1 C=0 B=0 -> 0x0C / Display control:D-display on, C=cursor off, B=blink off
 80009c2:	2200      	movs	r2, #0
 80009c4:	2100      	movs	r1, #0
 80009c6:	200c      	movs	r0, #12
 80009c8:	f7ff fee6 	bl	8000798 <lcd_send_byte>
	HAL_Delay(10);
 80009cc:	200a      	movs	r0, #10
 80009ce:	f000 fc27 	bl	8001220 <HAL_Delay>
	lcd_clear();
 80009d2:	f7ff ff4d 	bl	8000870 <lcd_clear>
	HAL_Delay(10);
 80009d6:	200a      	movs	r0, #10
 80009d8:	f000 fc22 	bl	8001220 <HAL_Delay>
	return_home();
 80009dc:	f7ff ff51 	bl	8000882 <return_home>
	HAL_Delay(10);
 80009e0:	200a      	movs	r0, #10
 80009e2:	f000 fc1d 	bl	8001220 <HAL_Delay>
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
	...

080009ec <i2c_init>:

void i2c_linker(I2C_HandleTypeDef * i2cInstance){
	i2cHandle = *i2cInstance;
}

void i2c_init(void){
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0

	i2cHandle.Instance = I2C1;
 80009f0:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <i2c_init+0x48>)
 80009f2:	4a11      	ldr	r2, [pc, #68]	; (8000a38 <i2c_init+0x4c>)
 80009f4:	601a      	str	r2, [r3, #0]
	i2cHandle.Init.ClockSpeed = 100000;
 80009f6:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <i2c_init+0x48>)
 80009f8:	4a10      	ldr	r2, [pc, #64]	; (8000a3c <i2c_init+0x50>)
 80009fa:	605a      	str	r2, [r3, #4]
	i2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009fc:	4b0d      	ldr	r3, [pc, #52]	; (8000a34 <i2c_init+0x48>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
	i2cHandle.Init.OwnAddress1 = 0;
 8000a02:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <i2c_init+0x48>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	60da      	str	r2, [r3, #12]
	i2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a08:	4b0a      	ldr	r3, [pc, #40]	; (8000a34 <i2c_init+0x48>)
 8000a0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a0e:	611a      	str	r2, [r3, #16]
	i2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a10:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <i2c_init+0x48>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	615a      	str	r2, [r3, #20]
	i2cHandle.Init.OwnAddress2 = 0;
 8000a16:	4b07      	ldr	r3, [pc, #28]	; (8000a34 <i2c_init+0x48>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
	i2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a1c:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <i2c_init+0x48>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	61da      	str	r2, [r3, #28]
	i2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a22:	4b04      	ldr	r3, [pc, #16]	; (8000a34 <i2c_init+0x48>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&i2cHandle) != HAL_OK)
 8000a28:	4802      	ldr	r0, [pc, #8]	; (8000a34 <i2c_init+0x48>)
 8000a2a:	f000 ff19 	bl	8001860 <HAL_I2C_Init>
  {
    //Error_Handler();
  }
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20000160 	.word	0x20000160
 8000a38:	40005400 	.word	0x40005400
 8000a3c:	000186a0 	.word	0x000186a0

08000a40 <menuMEF_init>:
static uint16_t blinkRepeat = BLINK_REPEAT_DEFAULT; // almacena el valor de las repeticiones

static uint8_t optionText[13][16] = {"1-LED ON       ", "2-LED OFF      ", "3-BLINK LED    ", "4-MOTOR CW+    ", "5-MOTOR CCW-   ", "6-FREE         ",
				"EJECUTANDO_1   ", "EJECUTANDO_2   ", "EJECUTANDO_3   ", "EJECUTANDO_4   ", "EJECUTANDO_5   ", "EJECUTANDO_6   "};

void menuMEF_init(){
 8000a40:	b590      	push	{r4, r7, lr}
 8000a42:	b08d      	sub	sp, #52	; 0x34
 8000a44:	af00      	add	r7, sp, #0
	pulseHandle.nextTime = NEXT_TIME;
 8000a46:	4b1e      	ldr	r3, [pc, #120]	; (8000ac0 <menuMEF_init+0x80>)
 8000a48:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000a4c:	819a      	strh	r2, [r3, #12]
	pulseHandle.executeTime = EXECUTE_TIME;
 8000a4e:	4b1c      	ldr	r3, [pc, #112]	; (8000ac0 <menuMEF_init+0x80>)
 8000a50:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000a54:	81da      	strh	r2, [r3, #14]
	currentState = OPTION_1;
 8000a56:	4b1b      	ldr	r3, [pc, #108]	; (8000ac4 <menuMEF_init+0x84>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	701a      	strb	r2, [r3, #0]

	// ingreso de parametros por la terminal
	menuMEF_user_input();
 8000a5c:	f000 fa36 	bl	8000ecc <menuMEF_user_input>

	// Comienzo del LCD
	lcd_init();
 8000a60:	f7ff ff70 	bl	8000944 <lcd_init>
	uint8_t welcomeText[] = "* MENU MEF *";
 8000a64:	4b18      	ldr	r3, [pc, #96]	; (8000ac8 <menuMEF_init+0x88>)
 8000a66:	f107 0420 	add.w	r4, r7, #32
 8000a6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a6c:	c407      	stmia	r4!, {r0, r1, r2}
 8000a6e:	7023      	strb	r3, [r4, #0]

	lcd_print_text(welcomeText, sizeof(welcomeText)/sizeof(welcomeText[0]));
 8000a70:	f107 0320 	add.w	r3, r7, #32
 8000a74:	210d      	movs	r1, #13
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff ff42 	bl	8000900 <lcd_print_text>
//		HAL_Delay(500);
//	}

	// Mostrar comienzo en terminal

	uartSendString("\r\n*************** Comienzo MENU MEF ****************\r\n");
 8000a7c:	4813      	ldr	r0, [pc, #76]	; (8000acc <menuMEF_init+0x8c>)
 8000a7e:	f000 fb0f 	bl	80010a0 <uartSendString>
	uint8_t buffer[32];
	sprintf(buffer, "%s\r\n", optionText[currentState]);
 8000a82:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <menuMEF_init+0x84>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	011b      	lsls	r3, r3, #4
 8000a88:	4a11      	ldr	r2, [pc, #68]	; (8000ad0 <menuMEF_init+0x90>)
 8000a8a:	441a      	add	r2, r3
 8000a8c:	463b      	mov	r3, r7
 8000a8e:	4911      	ldr	r1, [pc, #68]	; (8000ad4 <menuMEF_init+0x94>)
 8000a90:	4618      	mov	r0, r3
 8000a92:	f002 fa7f 	bl	8002f94 <siprintf>
	uartSendString(buffer);
 8000a96:	463b      	mov	r3, r7
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f000 fb01 	bl	80010a0 <uartSendString>

	lcd_set_position(2, 1);
 8000a9e:	2101      	movs	r1, #1
 8000aa0:	2002      	movs	r0, #2
 8000aa2:	f7ff fef7 	bl	8000894 <lcd_set_position>
	lcd_print_text(optionText[currentState], sizeof(optionText)/sizeof(optionText[0]));
 8000aa6:	4b07      	ldr	r3, [pc, #28]	; (8000ac4 <menuMEF_init+0x84>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	011b      	lsls	r3, r3, #4
 8000aac:	4a08      	ldr	r2, [pc, #32]	; (8000ad0 <menuMEF_init+0x90>)
 8000aae:	4413      	add	r3, r2
 8000ab0:	210d      	movs	r1, #13
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff ff24 	bl	8000900 <lcd_print_text>

}
 8000ab8:	bf00      	nop
 8000aba:	3734      	adds	r7, #52	; 0x34
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd90      	pop	{r4, r7, pc}
 8000ac0:	200001b8 	.word	0x200001b8
 8000ac4:	200001b4 	.word	0x200001b4
 8000ac8:	08003950 	.word	0x08003950
 8000acc:	08003910 	.word	0x08003910
 8000ad0:	20000008 	.word	0x20000008
 8000ad4:	08003948 	.word	0x08003948

08000ad8 <menuMEF_update>:

// actualiza el estado de la MEF en funcion del largo del pulso
// retorna NEXT, EXECUTE o NONE para establecer el estado actual de la MEF en menuMEF_set_state()
action_t menuMEF_update(void){
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
	action_t command = NONE;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	71fb      	strb	r3, [r7, #7]
	if(readKey_down() == true){
 8000ae2:	f7ff fdd9 	bl	8000698 <readKey_down>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d004      	beq.n	8000af6 <menuMEF_update+0x1e>
		// comenzar conteo
		pulseHandle.startTime = HAL_GetTick(); // tiempo desde boton presionado
 8000aec:	f000 fb8e 	bl	800120c <HAL_GetTick>
 8000af0:	4603      	mov	r3, r0
 8000af2:	4a1e      	ldr	r2, [pc, #120]	; (8000b6c <menuMEF_update+0x94>)
 8000af4:	6013      	str	r3, [r2, #0]
	}
	if(readKey_up() == true){
 8000af6:	f7ff fde5 	bl	80006c4 <readKey_up>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d02f      	beq.n	8000b60 <menuMEF_update+0x88>
		// terminar conteo y pasar de opcion o ejecutarla
		pulseHandle.stopTime = HAL_GetTick(); // tiempo desde boton presionado
 8000b00:	f000 fb84 	bl	800120c <HAL_GetTick>
 8000b04:	4603      	mov	r3, r0
 8000b06:	4a19      	ldr	r2, [pc, #100]	; (8000b6c <menuMEF_update+0x94>)
 8000b08:	6053      	str	r3, [r2, #4]
		pulseHandle.deltaTime = pulseHandle.stopTime - pulseHandle.startTime; // if stop>start
 8000b0a:	4b18      	ldr	r3, [pc, #96]	; (8000b6c <menuMEF_update+0x94>)
 8000b0c:	685a      	ldr	r2, [r3, #4]
 8000b0e:	4b17      	ldr	r3, [pc, #92]	; (8000b6c <menuMEF_update+0x94>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	1ad3      	subs	r3, r2, r3
 8000b14:	4a15      	ldr	r2, [pc, #84]	; (8000b6c <menuMEF_update+0x94>)
 8000b16:	6093      	str	r3, [r2, #8]

		if( executingRoutine == false){
 8000b18:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <menuMEF_update+0x98>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	f083 0301 	eor.w	r3, r3, #1
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d01a      	beq.n	8000b5c <menuMEF_update+0x84>
			if(pulseHandle.deltaTime < pulseHandle.nextTime){
 8000b26:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <menuMEF_update+0x94>)
 8000b28:	689b      	ldr	r3, [r3, #8]
 8000b2a:	4a10      	ldr	r2, [pc, #64]	; (8000b6c <menuMEF_update+0x94>)
 8000b2c:	8992      	ldrh	r2, [r2, #12]
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d205      	bcs.n	8000b3e <menuMEF_update+0x66>
				command = NEXT;
 8000b32:	2301      	movs	r3, #1
 8000b34:	71fb      	strb	r3, [r7, #7]
				uartSendString("NEXT\r\n");
 8000b36:	480f      	ldr	r0, [pc, #60]	; (8000b74 <menuMEF_update+0x9c>)
 8000b38:	f000 fab2 	bl	80010a0 <uartSendString>
 8000b3c:	e010      	b.n	8000b60 <menuMEF_update+0x88>
			} else if (pulseHandle.deltaTime > pulseHandle.executeTime){
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	; (8000b6c <menuMEF_update+0x94>)
 8000b40:	689b      	ldr	r3, [r3, #8]
 8000b42:	4a0a      	ldr	r2, [pc, #40]	; (8000b6c <menuMEF_update+0x94>)
 8000b44:	89d2      	ldrh	r2, [r2, #14]
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d905      	bls.n	8000b56 <menuMEF_update+0x7e>
				command = EXECUTE;
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	71fb      	strb	r3, [r7, #7]
				uartSendString("EXECUTE\r\n");
 8000b4e:	480a      	ldr	r0, [pc, #40]	; (8000b78 <menuMEF_update+0xa0>)
 8000b50:	f000 faa6 	bl	80010a0 <uartSendString>
 8000b54:	e004      	b.n	8000b60 <menuMEF_update+0x88>
			} else{
				command = NONE;
 8000b56:	2300      	movs	r3, #0
 8000b58:	71fb      	strb	r3, [r7, #7]
 8000b5a:	e001      	b.n	8000b60 <menuMEF_update+0x88>
			}
		} else{
			command = STOP;
 8000b5c:	2304      	movs	r3, #4
 8000b5e:	71fb      	strb	r3, [r7, #7]
		}
	}
	return command;
 8000b60:	79fb      	ldrb	r3, [r7, #7]
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	200001b8 	.word	0x200001b8
 8000b70:	200001c8 	.word	0x200001c8
 8000b74:	08003960 	.word	0x08003960
 8000b78:	08003968 	.word	0x08003968

08000b7c <menuMEF_set_state>:

// Actualiza el estado actual del menu (MEF)
void menuMEF_set_state(action_t command){
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	71fb      	strb	r3, [r7, #7]

	if(command == STOP){
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	2b04      	cmp	r3, #4
 8000b8a:	d105      	bne.n	8000b98 <menuMEF_set_state+0x1c>
		blink_stop(LED_PORT,LED_PIN);
 8000b8c:	2120      	movs	r1, #32
 8000b8e:	4819      	ldr	r0, [pc, #100]	; (8000bf4 <menuMEF_set_state+0x78>)
 8000b90:	f000 f97a 	bl	8000e88 <blink_stop>
		motor_stop();
 8000b94:	f000 f994 	bl	8000ec0 <motor_stop>
	}

	if(command == NEXT){
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d10d      	bne.n	8000bba <menuMEF_set_state+0x3e>
		if(currentState == OPTION_6){ // volver al inicio
 8000b9e:	4b16      	ldr	r3, [pc, #88]	; (8000bf8 <menuMEF_set_state+0x7c>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b05      	cmp	r3, #5
 8000ba4:	d103      	bne.n	8000bae <menuMEF_set_state+0x32>
			currentState = OPTION_1;
 8000ba6:	4b14      	ldr	r3, [pc, #80]	; (8000bf8 <menuMEF_set_state+0x7c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	701a      	strb	r2, [r3, #0]
 8000bac:	e005      	b.n	8000bba <menuMEF_set_state+0x3e>
		} else {
			currentState++; // avanzar a la siguiente opcion
 8000bae:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <menuMEF_set_state+0x7c>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	b2da      	uxtb	r2, r3
 8000bb6:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <menuMEF_set_state+0x7c>)
 8000bb8:	701a      	strb	r2, [r3, #0]
		}
	}

	if(command == EXECUTE){
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	2b03      	cmp	r3, #3
 8000bbe:	d105      	bne.n	8000bcc <menuMEF_set_state+0x50>
		currentState = currentState + OPTION_OFFSET; // pasar a estado EXECUTE_x
 8000bc0:	4b0d      	ldr	r3, [pc, #52]	; (8000bf8 <menuMEF_set_state+0x7c>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	3306      	adds	r3, #6
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <menuMEF_set_state+0x7c>)
 8000bca:	701a      	strb	r2, [r3, #0]
	}
	// si hubo un pulso indicando NEXT o EXECUTE, actualizar LCD y ejecutar la rutina correspondiente
	// actualizar solo cuando hay un cambio
	if((command == EXECUTE) || (command == NEXT)){
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	2b03      	cmp	r3, #3
 8000bd0:	d002      	beq.n	8000bd8 <menuMEF_set_state+0x5c>
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d103      	bne.n	8000be0 <menuMEF_set_state+0x64>
		menuMEF_update_display(command); // actualizar display LCD
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f000 f80e 	bl	8000bfc <menuMEF_update_display>
	}
	menuMEF_execute(currentState); // iniciar/continuar rutina si corresponde
 8000be0:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <menuMEF_set_state+0x7c>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f000 f85b 	bl	8000ca0 <menuMEF_execute>
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40010800 	.word	0x40010800
 8000bf8:	200001b4 	.word	0x200001b4

08000bfc <menuMEF_update_display>:

void menuMEF_update_display( action_t command){
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	; 0x28
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	71fb      	strb	r3, [r7, #7]
	char buffer[32];
	// Escribir al LCD
	if((command == NEXT) || (command == BACK)){
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d002      	beq.n	8000c12 <menuMEF_update_display+0x16>
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	d11c      	bne.n	8000c4c <menuMEF_update_display+0x50>
		// enviar estado actual 'Opcion x' al LCD
		//sprintf(buffer, "Opcion %d\r\n", currentState+1);
		sprintf(buffer, "%s\r\n", optionText[currentState]);
 8000c12:	4b20      	ldr	r3, [pc, #128]	; (8000c94 <menuMEF_update_display+0x98>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	011b      	lsls	r3, r3, #4
 8000c18:	4a1f      	ldr	r2, [pc, #124]	; (8000c98 <menuMEF_update_display+0x9c>)
 8000c1a:	441a      	add	r2, r3
 8000c1c:	f107 0308 	add.w	r3, r7, #8
 8000c20:	491e      	ldr	r1, [pc, #120]	; (8000c9c <menuMEF_update_display+0xa0>)
 8000c22:	4618      	mov	r0, r3
 8000c24:	f002 f9b6 	bl	8002f94 <siprintf>
		uartSendString(buffer);
 8000c28:	f107 0308 	add.w	r3, r7, #8
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f000 fa37 	bl	80010a0 <uartSendString>

		lcd_set_position(2, 1);
 8000c32:	2101      	movs	r1, #1
 8000c34:	2002      	movs	r0, #2
 8000c36:	f7ff fe2d 	bl	8000894 <lcd_set_position>
		lcd_print_text(optionText[currentState], sizeof(optionText)/sizeof(optionText[0]));
 8000c3a:	4b16      	ldr	r3, [pc, #88]	; (8000c94 <menuMEF_update_display+0x98>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	011b      	lsls	r3, r3, #4
 8000c40:	4a15      	ldr	r2, [pc, #84]	; (8000c98 <menuMEF_update_display+0x9c>)
 8000c42:	4413      	add	r3, r2
 8000c44:	210d      	movs	r1, #13
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff fe5a 	bl	8000900 <lcd_print_text>

	}
	if(command == EXECUTE){
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	2b03      	cmp	r3, #3
 8000c50:	d11c      	bne.n	8000c8c <menuMEF_update_display+0x90>
		// enviar estado actual 'Ejecutando x' al LCD
		//sprintf(buffer, "Ejecutando %d\r\n", currentState+1);
		sprintf(buffer, "%s\r\n", optionText[currentState]);
 8000c52:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <menuMEF_update_display+0x98>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	011b      	lsls	r3, r3, #4
 8000c58:	4a0f      	ldr	r2, [pc, #60]	; (8000c98 <menuMEF_update_display+0x9c>)
 8000c5a:	441a      	add	r2, r3
 8000c5c:	f107 0308 	add.w	r3, r7, #8
 8000c60:	490e      	ldr	r1, [pc, #56]	; (8000c9c <menuMEF_update_display+0xa0>)
 8000c62:	4618      	mov	r0, r3
 8000c64:	f002 f996 	bl	8002f94 <siprintf>
		uartSendString(buffer);
 8000c68:	f107 0308 	add.w	r3, r7, #8
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f000 fa17 	bl	80010a0 <uartSendString>

		lcd_set_position(2, 1);
 8000c72:	2101      	movs	r1, #1
 8000c74:	2002      	movs	r0, #2
 8000c76:	f7ff fe0d 	bl	8000894 <lcd_set_position>
		//lcd_print_text(optionText[currentState+OPTION_OFFSET], sizeof(optionText)/sizeof(optionText[0]));
		lcd_print_text(optionText[currentState], sizeof(optionText)/sizeof(optionText[0]));
 8000c7a:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <menuMEF_update_display+0x98>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	011b      	lsls	r3, r3, #4
 8000c80:	4a05      	ldr	r2, [pc, #20]	; (8000c98 <menuMEF_update_display+0x9c>)
 8000c82:	4413      	add	r3, r2
 8000c84:	210d      	movs	r1, #13
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff fe3a 	bl	8000900 <lcd_print_text>
	}

}
 8000c8c:	bf00      	nop
 8000c8e:	3728      	adds	r7, #40	; 0x28
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	200001b4 	.word	0x200001b4
 8000c98:	20000008 	.word	0x20000008
 8000c9c:	08003948 	.word	0x08003948

08000ca0 <menuMEF_execute>:

void menuMEF_execute(){
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
	// ejecutar la opcion seleccionada
	//blink_led(LED_PORT, LED_PIN, 500, 10);
	switch (currentState){
 8000ca4:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <menuMEF_execute+0x5c>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	3b06      	subs	r3, #6
 8000caa:	2b05      	cmp	r3, #5
 8000cac:	d822      	bhi.n	8000cf4 <menuMEF_execute+0x54>
 8000cae:	a201      	add	r2, pc, #4	; (adr r2, 8000cb4 <menuMEF_execute+0x14>)
 8000cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cb4:	08000ccd 	.word	0x08000ccd
 8000cb8:	08000cd7 	.word	0x08000cd7
 8000cbc:	08000ce1 	.word	0x08000ce1
 8000cc0:	08000cf5 	.word	0x08000cf5
 8000cc4:	08000cf5 	.word	0x08000cf5
 8000cc8:	08000cf5 	.word	0x08000cf5
	case EXECUTE_1:
		// ejecutar 1
		led_on(LED_PORT, LED_PIN);
 8000ccc:	2120      	movs	r1, #32
 8000cce:	480c      	ldr	r0, [pc, #48]	; (8000d00 <menuMEF_execute+0x60>)
 8000cd0:	f000 f84a 	bl	8000d68 <led_on>
		break;
 8000cd4:	e00f      	b.n	8000cf6 <menuMEF_execute+0x56>
	case EXECUTE_2:
		// ejecutar 2
		led_off(LED_PORT, LED_PIN);
 8000cd6:	2120      	movs	r1, #32
 8000cd8:	4809      	ldr	r0, [pc, #36]	; (8000d00 <menuMEF_execute+0x60>)
 8000cda:	f000 f85f 	bl	8000d9c <led_off>
		break;
 8000cde:	e00a      	b.n	8000cf6 <menuMEF_execute+0x56>
	case EXECUTE_3:
		// ejecutar 3
		blink_led(LED_PORT, LED_PIN, blinkPeriod, blinkRepeat);
 8000ce0:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <menuMEF_execute+0x64>)
 8000ce2:	881a      	ldrh	r2, [r3, #0]
 8000ce4:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <menuMEF_execute+0x68>)
 8000ce6:	881b      	ldrh	r3, [r3, #0]
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	2120      	movs	r1, #32
 8000cec:	4804      	ldr	r0, [pc, #16]	; (8000d00 <menuMEF_execute+0x60>)
 8000cee:	f000 f86f 	bl	8000dd0 <blink_led>
		break;
 8000cf2:	e000      	b.n	8000cf6 <menuMEF_execute+0x56>
	case EXECUTE_6:
		// ejecutar 6
		break;
	default:
		// error
		break;
 8000cf4:	bf00      	nop
	}


}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	200001b4 	.word	0x200001b4
 8000d00:	40010800 	.word	0x40010800
 8000d04:	20000004 	.word	0x20000004
 8000d08:	20000006 	.word	0x20000006

08000d0c <menuMEF_reset_state>:

void menuMEF_reset_state(){
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
	if((currentState >= EXECUTE_1) & (currentState <= EXECUTE_6) & (executingRoutine == false)){
 8000d10:	4b13      	ldr	r3, [pc, #76]	; (8000d60 <menuMEF_reset_state+0x54>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b05      	cmp	r3, #5
 8000d16:	bf8c      	ite	hi
 8000d18:	2301      	movhi	r3, #1
 8000d1a:	2300      	movls	r3, #0
 8000d1c:	b2da      	uxtb	r2, r3
 8000d1e:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <menuMEF_reset_state+0x54>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	2b0b      	cmp	r3, #11
 8000d24:	bf94      	ite	ls
 8000d26:	2301      	movls	r3, #1
 8000d28:	2300      	movhi	r3, #0
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	461a      	mov	r2, r3
 8000d32:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <menuMEF_reset_state+0x58>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	f083 0301 	eor.w	r3, r3, #1
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d005      	beq.n	8000d4e <menuMEF_reset_state+0x42>
		currentState = currentState - OPTION_OFFSET;
 8000d42:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <menuMEF_reset_state+0x54>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	3b06      	subs	r3, #6
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <menuMEF_reset_state+0x54>)
 8000d4c:	701a      	strb	r2, [r3, #0]
	}
	executingRoutine = false;
 8000d4e:	4b05      	ldr	r3, [pc, #20]	; (8000d64 <menuMEF_reset_state+0x58>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	701a      	strb	r2, [r3, #0]
	menuMEF_update_display(BACK);
 8000d54:	2002      	movs	r0, #2
 8000d56:	f7ff ff51 	bl	8000bfc <menuMEF_update_display>
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	200001b4 	.word	0x200001b4
 8000d64:	200001c8 	.word	0x200001c8

08000d68 <led_on>:

void led_on(GPIO_TypeDef * port, uint16_t pin ){
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	460b      	mov	r3, r1
 8000d72:	807b      	strh	r3, [r7, #2]
	executingRoutine = true;
 8000d74:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <led_on+0x30>)
 8000d76:	2201      	movs	r2, #1
 8000d78:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(port, pin, SET);
 8000d7a:	887b      	ldrh	r3, [r7, #2]
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	4619      	mov	r1, r3
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f000 fd1a 	bl	80017ba <HAL_GPIO_WritePin>
	executingRoutine = false;
 8000d86:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <led_on+0x30>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	701a      	strb	r2, [r3, #0]
	menuMEF_reset_state();
 8000d8c:	f7ff ffbe 	bl	8000d0c <menuMEF_reset_state>
}
 8000d90:	bf00      	nop
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	200001c8 	.word	0x200001c8

08000d9c <led_off>:

void led_off(GPIO_TypeDef * port, uint16_t pin ){
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	460b      	mov	r3, r1
 8000da6:	807b      	strh	r3, [r7, #2]
	executingRoutine = true;
 8000da8:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <led_off+0x30>)
 8000daa:	2201      	movs	r2, #1
 8000dac:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(port, pin, RESET);
 8000dae:	887b      	ldrh	r3, [r7, #2]
 8000db0:	2200      	movs	r2, #0
 8000db2:	4619      	mov	r1, r3
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	f000 fd00 	bl	80017ba <HAL_GPIO_WritePin>
	executingRoutine = false;
 8000dba:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <led_off+0x30>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	701a      	strb	r2, [r3, #0]
	menuMEF_reset_state();
 8000dc0:	f7ff ffa4 	bl	8000d0c <menuMEF_reset_state>
}
 8000dc4:	bf00      	nop
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	200001c8 	.word	0x200001c8

08000dd0 <blink_led>:

void blink_led(GPIO_TypeDef * port, uint16_t pin, uint16_t period, uint8_t repeat){
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	4608      	mov	r0, r1
 8000dda:	4611      	mov	r1, r2
 8000ddc:	461a      	mov	r2, r3
 8000dde:	4603      	mov	r3, r0
 8000de0:	817b      	strh	r3, [r7, #10]
 8000de2:	460b      	mov	r3, r1
 8000de4:	813b      	strh	r3, [r7, #8]
 8000de6:	4613      	mov	r3, r2
 8000de8:	71fb      	strb	r3, [r7, #7]

	if((count == 0) & (executingRoutine == false)){
 8000dea:	4b24      	ldr	r3, [pc, #144]	; (8000e7c <blink_led+0xac>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	bf0c      	ite	eq
 8000df2:	2301      	moveq	r3, #1
 8000df4:	2300      	movne	r3, #0
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	461a      	mov	r2, r3
 8000dfa:	4b21      	ldr	r3, [pc, #132]	; (8000e80 <blink_led+0xb0>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	f083 0301 	eor.w	r3, r3, #1
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	4013      	ands	r3, r2
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d00d      	beq.n	8000e26 <blink_led+0x56>
		//count = 0;
		executingRoutine = true;
 8000e0a:	4b1d      	ldr	r3, [pc, #116]	; (8000e80 <blink_led+0xb0>)
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(port, pin, SET);
 8000e10:	897b      	ldrh	r3, [r7, #10]
 8000e12:	2201      	movs	r2, #1
 8000e14:	4619      	mov	r1, r3
 8000e16:	68f8      	ldr	r0, [r7, #12]
 8000e18:	f000 fccf 	bl	80017ba <HAL_GPIO_WritePin>
		delayInit(&delayBlinkHandle, period );
 8000e1c:	893b      	ldrh	r3, [r7, #8]
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4818      	ldr	r0, [pc, #96]	; (8000e84 <blink_led+0xb4>)
 8000e22:	f7ff fc71 	bl	8000708 <delayInit>
	}
	// repetir
	if(delayRead(&delayBlinkHandle) == true){
 8000e26:	4817      	ldr	r0, [pc, #92]	; (8000e84 <blink_led+0xb4>)
 8000e28:	f7ff fc8b 	bl	8000742 <delayRead>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d00a      	beq.n	8000e48 <blink_led+0x78>
		HAL_GPIO_TogglePin(port, pin);
 8000e32:	897b      	ldrh	r3, [r7, #10]
 8000e34:	4619      	mov	r1, r3
 8000e36:	68f8      	ldr	r0, [r7, #12]
 8000e38:	f000 fcd7 	bl	80017ea <HAL_GPIO_TogglePin>
		count++;
 8000e3c:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <blink_led+0xac>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	3301      	adds	r3, #1
 8000e42:	b2da      	uxtb	r2, r3
 8000e44:	4b0d      	ldr	r3, [pc, #52]	; (8000e7c <blink_led+0xac>)
 8000e46:	701a      	strb	r2, [r3, #0]
	}
	// blink stop
	if(count >= repeat*2){
 8000e48:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <blink_led+0xac>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	429a      	cmp	r2, r3
 8000e54:	db0d      	blt.n	8000e72 <blink_led+0xa2>
		HAL_GPIO_WritePin(port, pin, RESET);
 8000e56:	897b      	ldrh	r3, [r7, #10]
 8000e58:	2200      	movs	r2, #0
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	68f8      	ldr	r0, [r7, #12]
 8000e5e:	f000 fcac 	bl	80017ba <HAL_GPIO_WritePin>
		count = 0;
 8000e62:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <blink_led+0xac>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	701a      	strb	r2, [r3, #0]
		executingRoutine = false;
 8000e68:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <blink_led+0xb0>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	701a      	strb	r2, [r3, #0]
		menuMEF_reset_state();
 8000e6e:	f7ff ff4d 	bl	8000d0c <menuMEF_reset_state>
//		HAL_GPIO_TogglePin(port, pin);
//		HAL_Delay(period);
//	}
//	executingRoutine = false;
//	menuMEF_reset_state();
}
 8000e72:	bf00      	nop
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	200001c9 	.word	0x200001c9
 8000e80:	200001c8 	.word	0x200001c8
 8000e84:	200001cc 	.word	0x200001cc

08000e88 <blink_stop>:

void blink_stop(GPIO_TypeDef * port, uint16_t pin){
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	460b      	mov	r3, r1
 8000e92:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(port, pin, RESET);
 8000e94:	887b      	ldrh	r3, [r7, #2]
 8000e96:	2200      	movs	r2, #0
 8000e98:	4619      	mov	r1, r3
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f000 fc8d 	bl	80017ba <HAL_GPIO_WritePin>
	count = 0;
 8000ea0:	4b05      	ldr	r3, [pc, #20]	; (8000eb8 <blink_stop+0x30>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	701a      	strb	r2, [r3, #0]
	executingRoutine = false;
 8000ea6:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <blink_stop+0x34>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	701a      	strb	r2, [r3, #0]
	menuMEF_reset_state();
 8000eac:	f7ff ff2e 	bl	8000d0c <menuMEF_reset_state>
}
 8000eb0:	bf00      	nop
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	200001c9 	.word	0x200001c9
 8000ebc:	200001c8 	.word	0x200001c8

08000ec0 <motor_stop>:

void motor_stop(){
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0

}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bc80      	pop	{r7}
 8000eca:	4770      	bx	lr

08000ecc <menuMEF_user_input>:

void menuMEF_user_input(){
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b0f8      	sub	sp, #480	; 0x1e0
 8000ed0:	af02      	add	r7, sp, #8
	uint8_t intro[] = "######################### COMIENZO DEL PROGRAMA #########################\r\n"
 8000ed2:	4a31      	ldr	r2, [pc, #196]	; (8000f98 <menuMEF_user_input+0xcc>)
 8000ed4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ed8:	4611      	mov	r1, r2
 8000eda:	22c5      	movs	r2, #197	; 0xc5
 8000edc:	4618      	mov	r0, r3
 8000ede:	f002 f8ad 	bl	800303c <memcpy>
			      "# Ingrese a continuacion los parametros del parpadeo del led en ms\r\n"
				  "# Presione ENTER para utilizar [valor] por defecto:\r\n";
	uint8_t periodPrompt[64];
	uint8_t repeatPrompt[64];
	sprintf(periodPrompt,"# [%d-%d] Ingrese el Periodo [%d]: ", BLINK_PERIOD_MIN, BLINK_PERIOD_MAX, blinkPeriod);
 8000ee2:	4b2e      	ldr	r3, [pc, #184]	; (8000f9c <menuMEF_user_input+0xd0>)
 8000ee4:	881b      	ldrh	r3, [r3, #0]
 8000ee6:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8000eea:	9300      	str	r3, [sp, #0]
 8000eec:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000ef0:	2264      	movs	r2, #100	; 0x64
 8000ef2:	492b      	ldr	r1, [pc, #172]	; (8000fa0 <menuMEF_user_input+0xd4>)
 8000ef4:	f002 f84e 	bl	8002f94 <siprintf>
	sprintf(repeatPrompt,"# [%d-%d]Ingrese las repeticiones [%d]: ", BLINK_REPEAT_MIN, BLINK_REPEAT_MAX, blinkRepeat);
 8000ef8:	4b2a      	ldr	r3, [pc, #168]	; (8000fa4 <menuMEF_user_input+0xd8>)
 8000efa:	881b      	ldrh	r3, [r3, #0]
 8000efc:	f107 0090 	add.w	r0, r7, #144	; 0x90
 8000f00:	9300      	str	r3, [sp, #0]
 8000f02:	2314      	movs	r3, #20
 8000f04:	2201      	movs	r2, #1
 8000f06:	4928      	ldr	r1, [pc, #160]	; (8000fa8 <menuMEF_user_input+0xdc>)
 8000f08:	f002 f844 	bl	8002f94 <siprintf>

	uartSendString(intro);
 8000f0c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f10:	4618      	mov	r0, r3
 8000f12:	f000 f8c5 	bl	80010a0 <uartSendString>

	uartSendString(periodPrompt);
 8000f16:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f000 f8c0 	bl	80010a0 <uartSendString>
	blinkPeriod = get_value(BLINK_PERIOD_MIN, BLINK_PERIOD_MAX, BLINK_PERIOD_DEFAULT);
 8000f20:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f24:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000f28:	2064      	movs	r0, #100	; 0x64
 8000f2a:	f000 f843 	bl	8000fb4 <get_value>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	461a      	mov	r2, r3
 8000f32:	4b1a      	ldr	r3, [pc, #104]	; (8000f9c <menuMEF_user_input+0xd0>)
 8000f34:	801a      	strh	r2, [r3, #0]

	uartSendString(repeatPrompt);
 8000f36:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f000 f8b0 	bl	80010a0 <uartSendString>
	blinkRepeat = get_value(BLINK_REPEAT_MIN, BLINK_REPEAT_MAX, BLINK_REPEAT_DEFAULT);
 8000f40:	220a      	movs	r2, #10
 8000f42:	2114      	movs	r1, #20
 8000f44:	2001      	movs	r0, #1
 8000f46:	f000 f835 	bl	8000fb4 <get_value>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <menuMEF_user_input+0xd8>)
 8000f50:	801a      	strh	r2, [r3, #0]

	uint8_t parameters[64];
	sprintf(parameters,"# Parametros blinky: periodo [%d], Repecitiones [%d]\r\n", blinkPeriod, blinkRepeat );
 8000f52:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <menuMEF_user_input+0xd0>)
 8000f54:	881b      	ldrh	r3, [r3, #0]
 8000f56:	461a      	mov	r2, r3
 8000f58:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <menuMEF_user_input+0xd8>)
 8000f5a:	881b      	ldrh	r3, [r3, #0]
 8000f5c:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000f60:	4912      	ldr	r1, [pc, #72]	; (8000fac <menuMEF_user_input+0xe0>)
 8000f62:	f002 f817 	bl	8002f94 <siprintf>
	uartSendString(parameters);
 8000f66:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f000 f898 	bl	80010a0 <uartSendString>

	uint8_t end[] = "#########################################################################\r\n";
 8000f70:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8000f74:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8000f78:	4a0d      	ldr	r2, [pc, #52]	; (8000fb0 <menuMEF_user_input+0xe4>)
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	4611      	mov	r1, r2
 8000f7e:	234c      	movs	r3, #76	; 0x4c
 8000f80:	461a      	mov	r2, r3
 8000f82:	f002 f85b 	bl	800303c <memcpy>
	uartSendString(end);
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f000 f889 	bl	80010a0 <uartSendString>
}
 8000f8e:	bf00      	nop
 8000f90:	f507 77ec 	add.w	r7, r7, #472	; 0x1d8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	080039fc 	.word	0x080039fc
 8000f9c:	20000004 	.word	0x20000004
 8000fa0:	08003974 	.word	0x08003974
 8000fa4:	20000006 	.word	0x20000006
 8000fa8:	08003998 	.word	0x08003998
 8000fac:	080039c4 	.word	0x080039c4
 8000fb0:	08003ac4 	.word	0x08003ac4

08000fb4 <get_value>:


uint16_t get_value(uint16_t min, uint16_t max, uint16_t defaultValue){
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	80fb      	strh	r3, [r7, #6]
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	80bb      	strh	r3, [r7, #4]
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	807b      	strh	r3, [r7, #2]
	uint8_t inputBuffer[10];
	uint16_t value;

	while(1){
		uartReceiveString(inputBuffer, sizeof(inputBuffer)/sizeof(inputBuffer[0]));
 8000fc6:	f107 030c 	add.w	r3, r7, #12
 8000fca:	210a      	movs	r1, #10
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f000 f889 	bl	80010e4 <uartReceiveString>
		if(inputBuffer[0] == '\0'){
 8000fd2:	7b3b      	ldrb	r3, [r7, #12]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d105      	bne.n	8000fe4 <get_value+0x30>
			value = defaultValue;
 8000fd8:	887b      	ldrh	r3, [r7, #2]
 8000fda:	82fb      	strh	r3, [r7, #22]
			uartSendString("\r\n");
 8000fdc:	4814      	ldr	r0, [pc, #80]	; (8001030 <get_value+0x7c>)
 8000fde:	f000 f85f 	bl	80010a0 <uartSendString>
			break;
 8000fe2:	e020      	b.n	8001026 <get_value+0x72>
		}
		//uartSendString(periodBuffer);
		uartSendString("\r\n");
 8000fe4:	4812      	ldr	r0, [pc, #72]	; (8001030 <get_value+0x7c>)
 8000fe6:	f000 f85b 	bl	80010a0 <uartSendString>
		value = (uint16_t) atoi(inputBuffer);
 8000fea:	f107 030c 	add.w	r3, r7, #12
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f001 ff44 	bl	8002e7c <atoi>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	82fb      	strh	r3, [r7, #22]
		if( (value <= max) & (value >= min) ){
 8000ff8:	8afa      	ldrh	r2, [r7, #22]
 8000ffa:	88bb      	ldrh	r3, [r7, #4]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	bf94      	ite	ls
 8001000:	2301      	movls	r3, #1
 8001002:	2300      	movhi	r3, #0
 8001004:	b2da      	uxtb	r2, r3
 8001006:	8af9      	ldrh	r1, [r7, #22]
 8001008:	88fb      	ldrh	r3, [r7, #6]
 800100a:	4299      	cmp	r1, r3
 800100c:	bf2c      	ite	cs
 800100e:	2301      	movcs	r3, #1
 8001010:	2300      	movcc	r3, #0
 8001012:	b2db      	uxtb	r3, r3
 8001014:	4013      	ands	r3, r2
 8001016:	b2db      	uxtb	r3, r3
 8001018:	2b00      	cmp	r3, #0
 800101a:	d103      	bne.n	8001024 <get_value+0x70>
			break;
		} else{
			uartSendString("\r\n# Valor fuera de rango!\r\nIngresar nuevamente: ");
 800101c:	4805      	ldr	r0, [pc, #20]	; (8001034 <get_value+0x80>)
 800101e:	f000 f83f 	bl	80010a0 <uartSendString>
	while(1){
 8001022:	e7d0      	b.n	8000fc6 <get_value+0x12>
			break;
 8001024:	bf00      	nop
		}
	}
	return value;
 8001026:	8afb      	ldrh	r3, [r7, #22]
}
 8001028:	4618      	mov	r0, r3
 800102a:	3718      	adds	r7, #24
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	08003b10 	.word	0x08003b10
 8001034:	08003b14 	.word	0x08003b14

08001038 <uartInit>:

/* > Descripcion: Inicializa la uart con la configuracion preestablecida y envia dicha config a la terminal
 * > Parametro: ninguno
 * > Retorno: retorna un boolt_t true en caso exito o false caso contrario
 */
bool_t uartInit(){
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
	// uartHandle >> estructura de dato UART_HandleTypeDef declarada en API_uart.h
	bool_t returnFlag = false;
 800103e:	2300      	movs	r3, #0
 8001040:	71fb      	strb	r3, [r7, #7]

	uartHandle.Instance = USE_USART; // instancia de la uart >> usb conectado a usart2
 8001042:	4b14      	ldr	r3, [pc, #80]	; (8001094 <uartInit+0x5c>)
 8001044:	4a14      	ldr	r2, [pc, #80]	; (8001098 <uartInit+0x60>)
 8001046:	601a      	str	r2, [r3, #0]
	uartHandle.Init.BaudRate = 9600; // baudrate tipico
 8001048:	4b12      	ldr	r3, [pc, #72]	; (8001094 <uartInit+0x5c>)
 800104a:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800104e:	605a      	str	r2, [r3, #4]
	uartHandle.Init.WordLength = UART_WORDLENGTH_8B; // tamano de los datos >> 8 bits
 8001050:	4b10      	ldr	r3, [pc, #64]	; (8001094 <uartInit+0x5c>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
	uartHandle.Init.StopBits = UART_STOPBITS_1; // cantidad de stop bits >> 1 solo
 8001056:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <uartInit+0x5c>)
 8001058:	2200      	movs	r2, #0
 800105a:	60da      	str	r2, [r3, #12]
	uartHandle.Init.Parity = UART_PARITY_NONE; // tipo de paridad >> ninguno
 800105c:	4b0d      	ldr	r3, [pc, #52]	; (8001094 <uartInit+0x5c>)
 800105e:	2200      	movs	r2, #0
 8001060:	611a      	str	r2, [r3, #16]
	uartHandle.Init.Mode = UART_MODE_TX_RX; // modo recepcion/recepcion habilitado
 8001062:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <uartInit+0x5c>)
 8001064:	220c      	movs	r2, #12
 8001066:	615a      	str	r2, [r3, #20]
	uartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE; // sin control de flujo por hardware
 8001068:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <uartInit+0x5c>)
 800106a:	2200      	movs	r2, #0
 800106c:	619a      	str	r2, [r3, #24]
	uartHandle.Init.OverSampling = UART_OVERSAMPLING_16; // cantidad de muestras por tiempo de bit
 800106e:	4b09      	ldr	r3, [pc, #36]	; (8001094 <uartInit+0x5c>)
 8001070:	2200      	movs	r2, #0
 8001072:	61da      	str	r2, [r3, #28]

	if (HAL_UART_Init(&uartHandle) == HAL_OK){ // retornar true si es exitosa la configuracion
 8001074:	4807      	ldr	r0, [pc, #28]	; (8001094 <uartInit+0x5c>)
 8001076:	f001 fc9f 	bl	80029b8 <HAL_UART_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d104      	bne.n	800108a <uartInit+0x52>
		//print_uart_config(uartHandle); // imprimir configuracion si la config fue exitosa
		uartSendString("\r\nUART inicializada\r\n");
 8001080:	4806      	ldr	r0, [pc, #24]	; (800109c <uartInit+0x64>)
 8001082:	f000 f80d 	bl	80010a0 <uartSendString>
		returnFlag = true;
 8001086:	2301      	movs	r3, #1
 8001088:	71fb      	strb	r3, [r7, #7]
	}

	return returnFlag;
 800108a:	79fb      	ldrb	r3, [r7, #7]
}
 800108c:	4618      	mov	r0, r3
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	200001d8 	.word	0x200001d8
 8001098:	40004400 	.word	0x40004400
 800109c:	08003b48 	.word	0x08003b48

080010a0 <uartSendString>:
/* > Descripcion: envia un string (buffer <pstring>) por la uart, finalizando en el caracter NULL
 * > Parametro: <pstring> puntero del tipo uint8_t
 * 				El buffer de envio tendra una cantidad maxima de caracteres definida en <SEND_BUFFER_MAX_SIZE>
 * > Retorno: ninguno
 */
void uartSendString(uint8_t * pstring){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	// pstring se envia sin tamano debe recorrerse incrementando la direccion por aritmetica de pointers
	uint16_t index = 0; // indice para recorrer array pstring, admite hasta 2^16 caracteres
 80010a8:	2300      	movs	r3, #0
 80010aa:	81fb      	strh	r3, [r7, #14]
	while(1){
		if( (*(pstring+index) == '\0') || (index > SEND_BUFFER_MAX_SIZE) ) break; // al encontrarse el NULL salir de funcion
 80010ac:	89fb      	ldrh	r3, [r7, #14]
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	4413      	add	r3, r2
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d00e      	beq.n	80010d6 <uartSendString+0x36>
 80010b8:	89fb      	ldrh	r3, [r7, #14]
 80010ba:	2bff      	cmp	r3, #255	; 0xff
 80010bc:	d80b      	bhi.n	80010d6 <uartSendString+0x36>
		HAL_UART_Transmit(&uartHandle, (pstring+index), 1, 100); // enviar caracter x caracter
 80010be:	89fb      	ldrh	r3, [r7, #14]
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	18d1      	adds	r1, r2, r3
 80010c4:	2364      	movs	r3, #100	; 0x64
 80010c6:	2201      	movs	r2, #1
 80010c8:	4805      	ldr	r0, [pc, #20]	; (80010e0 <uartSendString+0x40>)
 80010ca:	f001 fcc5 	bl	8002a58 <HAL_UART_Transmit>
		index++;
 80010ce:	89fb      	ldrh	r3, [r7, #14]
 80010d0:	3301      	adds	r3, #1
 80010d2:	81fb      	strh	r3, [r7, #14]
		if( (*(pstring+index) == '\0') || (index > SEND_BUFFER_MAX_SIZE) ) break; // al encontrarse el NULL salir de funcion
 80010d4:	e7ea      	b.n	80010ac <uartSendString+0xc>
	}
}
 80010d6:	bf00      	nop
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	200001d8 	.word	0x200001d8

080010e4 <uartReceiveString>:
 * 				  y detiene la coleccion de caracteres al encontrarse un '\r' (se ha presionado ENTER)
 * > Parametro: <pstring> puntero del tipo uint8_t / <size> tamano del buffer de recepcion
 * > 			El buffer de recepcion tendra una cantidad maxima de caracteres definida en <RECEIVE_BUFFER_MAX_SIZE>
 * > Retorno: ninguno
 */
void uartReceiveString(uint8_t * pstring, uint16_t size){
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	460b      	mov	r3, r1
 80010ee:	807b      	strh	r3, [r7, #2]
	if(size > RECEIVE_BUFFER_MAX_SIZE) size = RECEIVE_BUFFER_MAX_SIZE;
 80010f0:	887b      	ldrh	r3, [r7, #2]
 80010f2:	2bff      	cmp	r3, #255	; 0xff
 80010f4:	d901      	bls.n	80010fa <uartReceiveString+0x16>
 80010f6:	23ff      	movs	r3, #255	; 0xff
 80010f8:	807b      	strh	r3, [r7, #2]
	if(size < 1 ) size = 1;
 80010fa:	887b      	ldrh	r3, [r7, #2]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d101      	bne.n	8001104 <uartReceiveString+0x20>
 8001100:	2301      	movs	r3, #1
 8001102:	807b      	strh	r3, [r7, #2]

	uint16_t index = 0;
 8001104:	2300      	movs	r3, #0
 8001106:	81fb      	strh	r3, [r7, #14]
	while(1){
		HAL_UART_Receive(&uartHandle, (pstring+index), 1, HAL_MAX_DELAY); // recibir y esperar cada caracter hasta <size>
 8001108:	89fb      	ldrh	r3, [r7, #14]
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	18d1      	adds	r1, r2, r3
 800110e:	f04f 33ff 	mov.w	r3, #4294967295
 8001112:	2201      	movs	r2, #1
 8001114:	4810      	ldr	r0, [pc, #64]	; (8001158 <uartReceiveString+0x74>)
 8001116:	f001 fd22 	bl	8002b5e <HAL_UART_Receive>
		if( (index == size) ||  ( (*(pstring+index)) == '\r') ) break; // finalizar while al alzancar la cant de caracteres indicada
 800111a:	89fa      	ldrh	r2, [r7, #14]
 800111c:	887b      	ldrh	r3, [r7, #2]
 800111e:	429a      	cmp	r2, r3
 8001120:	d011      	beq.n	8001146 <uartReceiveString+0x62>
 8001122:	89fb      	ldrh	r3, [r7, #14]
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	4413      	add	r3, r2
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	2b0d      	cmp	r3, #13
 800112c:	d00b      	beq.n	8001146 <uartReceiveString+0x62>
		HAL_UART_Transmit(&uartHandle, (pstring+index), 1, 10);
 800112e:	89fb      	ldrh	r3, [r7, #14]
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	18d1      	adds	r1, r2, r3
 8001134:	230a      	movs	r3, #10
 8001136:	2201      	movs	r2, #1
 8001138:	4807      	ldr	r0, [pc, #28]	; (8001158 <uartReceiveString+0x74>)
 800113a:	f001 fc8d 	bl	8002a58 <HAL_UART_Transmit>
		index++;
 800113e:	89fb      	ldrh	r3, [r7, #14]
 8001140:	3301      	adds	r3, #1
 8001142:	81fb      	strh	r3, [r7, #14]
		HAL_UART_Receive(&uartHandle, (pstring+index), 1, HAL_MAX_DELAY); // recibir y esperar cada caracter hasta <size>
 8001144:	e7e0      	b.n	8001108 <uartReceiveString+0x24>
	}

	*(pstring+index) = '\0'; // agregar el NULL al final para conformar el string
 8001146:	89fb      	ldrh	r3, [r7, #14]
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	4413      	add	r3, r2
 800114c:	2200      	movs	r2, #0
 800114e:	701a      	strb	r2, [r3, #0]
}
 8001150:	bf00      	nop
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	200001d8 	.word	0x200001d8

0800115c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001160:	4b08      	ldr	r3, [pc, #32]	; (8001184 <HAL_Init+0x28>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a07      	ldr	r2, [pc, #28]	; (8001184 <HAL_Init+0x28>)
 8001166:	f043 0310 	orr.w	r3, r3, #16
 800116a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800116c:	2003      	movs	r0, #3
 800116e:	f000 f947 	bl	8001400 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001172:	2000      	movs	r0, #0
 8001174:	f000 f808 	bl	8001188 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001178:	f7ff f8b6 	bl	80002e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40022000 	.word	0x40022000

08001188 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001190:	4b12      	ldr	r3, [pc, #72]	; (80011dc <HAL_InitTick+0x54>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <HAL_InitTick+0x58>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	4619      	mov	r1, r3
 800119a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800119e:	fbb3 f3f1 	udiv	r3, r3, r1
 80011a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011a6:	4618      	mov	r0, r3
 80011a8:	f000 f95f 	bl	800146a <HAL_SYSTICK_Config>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e00e      	b.n	80011d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2b0f      	cmp	r3, #15
 80011ba:	d80a      	bhi.n	80011d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011bc:	2200      	movs	r2, #0
 80011be:	6879      	ldr	r1, [r7, #4]
 80011c0:	f04f 30ff 	mov.w	r0, #4294967295
 80011c4:	f000 f927 	bl	8001416 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011c8:	4a06      	ldr	r2, [pc, #24]	; (80011e4 <HAL_InitTick+0x5c>)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ce:	2300      	movs	r3, #0
 80011d0:	e000      	b.n	80011d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000000 	.word	0x20000000
 80011e0:	200000dc 	.word	0x200000dc
 80011e4:	200000d8 	.word	0x200000d8

080011e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011ec:	4b05      	ldr	r3, [pc, #20]	; (8001204 <HAL_IncTick+0x1c>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	461a      	mov	r2, r3
 80011f2:	4b05      	ldr	r3, [pc, #20]	; (8001208 <HAL_IncTick+0x20>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4413      	add	r3, r2
 80011f8:	4a03      	ldr	r2, [pc, #12]	; (8001208 <HAL_IncTick+0x20>)
 80011fa:	6013      	str	r3, [r2, #0]
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr
 8001204:	200000dc 	.word	0x200000dc
 8001208:	20000220 	.word	0x20000220

0800120c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  return uwTick;
 8001210:	4b02      	ldr	r3, [pc, #8]	; (800121c <HAL_GetTick+0x10>)
 8001212:	681b      	ldr	r3, [r3, #0]
}
 8001214:	4618      	mov	r0, r3
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr
 800121c:	20000220 	.word	0x20000220

08001220 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001228:	f7ff fff0 	bl	800120c <HAL_GetTick>
 800122c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001238:	d005      	beq.n	8001246 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800123a:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <HAL_Delay+0x44>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	461a      	mov	r2, r3
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	4413      	add	r3, r2
 8001244:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001246:	bf00      	nop
 8001248:	f7ff ffe0 	bl	800120c <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	429a      	cmp	r2, r3
 8001256:	d8f7      	bhi.n	8001248 <HAL_Delay+0x28>
  {
  }
}
 8001258:	bf00      	nop
 800125a:	bf00      	nop
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	200000dc 	.word	0x200000dc

08001268 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001278:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <__NVIC_SetPriorityGrouping+0x44>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800127e:	68ba      	ldr	r2, [r7, #8]
 8001280:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001284:	4013      	ands	r3, r2
 8001286:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001290:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001298:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800129a:	4a04      	ldr	r2, [pc, #16]	; (80012ac <__NVIC_SetPriorityGrouping+0x44>)
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	60d3      	str	r3, [r2, #12]
}
 80012a0:	bf00      	nop
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bc80      	pop	{r7}
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b4:	4b04      	ldr	r3, [pc, #16]	; (80012c8 <__NVIC_GetPriorityGrouping+0x18>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	0a1b      	lsrs	r3, r3, #8
 80012ba:	f003 0307 	and.w	r3, r3, #7
}
 80012be:	4618      	mov	r0, r3
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	db0b      	blt.n	80012f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	f003 021f 	and.w	r2, r3, #31
 80012e4:	4906      	ldr	r1, [pc, #24]	; (8001300 <__NVIC_EnableIRQ+0x34>)
 80012e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ea:	095b      	lsrs	r3, r3, #5
 80012ec:	2001      	movs	r0, #1
 80012ee:	fa00 f202 	lsl.w	r2, r0, r2
 80012f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bc80      	pop	{r7}
 80012fe:	4770      	bx	lr
 8001300:	e000e100 	.word	0xe000e100

08001304 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	6039      	str	r1, [r7, #0]
 800130e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001314:	2b00      	cmp	r3, #0
 8001316:	db0a      	blt.n	800132e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	b2da      	uxtb	r2, r3
 800131c:	490c      	ldr	r1, [pc, #48]	; (8001350 <__NVIC_SetPriority+0x4c>)
 800131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001322:	0112      	lsls	r2, r2, #4
 8001324:	b2d2      	uxtb	r2, r2
 8001326:	440b      	add	r3, r1
 8001328:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800132c:	e00a      	b.n	8001344 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	b2da      	uxtb	r2, r3
 8001332:	4908      	ldr	r1, [pc, #32]	; (8001354 <__NVIC_SetPriority+0x50>)
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	f003 030f 	and.w	r3, r3, #15
 800133a:	3b04      	subs	r3, #4
 800133c:	0112      	lsls	r2, r2, #4
 800133e:	b2d2      	uxtb	r2, r2
 8001340:	440b      	add	r3, r1
 8001342:	761a      	strb	r2, [r3, #24]
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	bc80      	pop	{r7}
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	e000e100 	.word	0xe000e100
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001358:	b480      	push	{r7}
 800135a:	b089      	sub	sp, #36	; 0x24
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	f1c3 0307 	rsb	r3, r3, #7
 8001372:	2b04      	cmp	r3, #4
 8001374:	bf28      	it	cs
 8001376:	2304      	movcs	r3, #4
 8001378:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	3304      	adds	r3, #4
 800137e:	2b06      	cmp	r3, #6
 8001380:	d902      	bls.n	8001388 <NVIC_EncodePriority+0x30>
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	3b03      	subs	r3, #3
 8001386:	e000      	b.n	800138a <NVIC_EncodePriority+0x32>
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800138c:	f04f 32ff 	mov.w	r2, #4294967295
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	43da      	mvns	r2, r3
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	401a      	ands	r2, r3
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013a0:	f04f 31ff 	mov.w	r1, #4294967295
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	fa01 f303 	lsl.w	r3, r1, r3
 80013aa:	43d9      	mvns	r1, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b0:	4313      	orrs	r3, r2
         );
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3724      	adds	r7, #36	; 0x24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr

080013bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013cc:	d301      	bcc.n	80013d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ce:	2301      	movs	r3, #1
 80013d0:	e00f      	b.n	80013f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013d2:	4a0a      	ldr	r2, [pc, #40]	; (80013fc <SysTick_Config+0x40>)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3b01      	subs	r3, #1
 80013d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013da:	210f      	movs	r1, #15
 80013dc:	f04f 30ff 	mov.w	r0, #4294967295
 80013e0:	f7ff ff90 	bl	8001304 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013e4:	4b05      	ldr	r3, [pc, #20]	; (80013fc <SysTick_Config+0x40>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ea:	4b04      	ldr	r3, [pc, #16]	; (80013fc <SysTick_Config+0x40>)
 80013ec:	2207      	movs	r2, #7
 80013ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	e000e010 	.word	0xe000e010

08001400 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff ff2d 	bl	8001268 <__NVIC_SetPriorityGrouping>
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001416:	b580      	push	{r7, lr}
 8001418:	b086      	sub	sp, #24
 800141a:	af00      	add	r7, sp, #0
 800141c:	4603      	mov	r3, r0
 800141e:	60b9      	str	r1, [r7, #8]
 8001420:	607a      	str	r2, [r7, #4]
 8001422:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001428:	f7ff ff42 	bl	80012b0 <__NVIC_GetPriorityGrouping>
 800142c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	68b9      	ldr	r1, [r7, #8]
 8001432:	6978      	ldr	r0, [r7, #20]
 8001434:	f7ff ff90 	bl	8001358 <NVIC_EncodePriority>
 8001438:	4602      	mov	r2, r0
 800143a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800143e:	4611      	mov	r1, r2
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff ff5f 	bl	8001304 <__NVIC_SetPriority>
}
 8001446:	bf00      	nop
 8001448:	3718      	adds	r7, #24
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b082      	sub	sp, #8
 8001452:	af00      	add	r7, sp, #0
 8001454:	4603      	mov	r3, r0
 8001456:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff ff35 	bl	80012cc <__NVIC_EnableIRQ>
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b082      	sub	sp, #8
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f7ff ffa2 	bl	80013bc <SysTick_Config>
 8001478:	4603      	mov	r3, r0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
	...

08001484 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001484:	b480      	push	{r7}
 8001486:	b08b      	sub	sp, #44	; 0x2c
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800148e:	2300      	movs	r3, #0
 8001490:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001492:	2300      	movs	r3, #0
 8001494:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001496:	e169      	b.n	800176c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001498:	2201      	movs	r2, #1
 800149a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	69fa      	ldr	r2, [r7, #28]
 80014a8:	4013      	ands	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	f040 8158 	bne.w	8001766 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	4a9a      	ldr	r2, [pc, #616]	; (8001724 <HAL_GPIO_Init+0x2a0>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d05e      	beq.n	800157e <HAL_GPIO_Init+0xfa>
 80014c0:	4a98      	ldr	r2, [pc, #608]	; (8001724 <HAL_GPIO_Init+0x2a0>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d875      	bhi.n	80015b2 <HAL_GPIO_Init+0x12e>
 80014c6:	4a98      	ldr	r2, [pc, #608]	; (8001728 <HAL_GPIO_Init+0x2a4>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d058      	beq.n	800157e <HAL_GPIO_Init+0xfa>
 80014cc:	4a96      	ldr	r2, [pc, #600]	; (8001728 <HAL_GPIO_Init+0x2a4>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d86f      	bhi.n	80015b2 <HAL_GPIO_Init+0x12e>
 80014d2:	4a96      	ldr	r2, [pc, #600]	; (800172c <HAL_GPIO_Init+0x2a8>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d052      	beq.n	800157e <HAL_GPIO_Init+0xfa>
 80014d8:	4a94      	ldr	r2, [pc, #592]	; (800172c <HAL_GPIO_Init+0x2a8>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d869      	bhi.n	80015b2 <HAL_GPIO_Init+0x12e>
 80014de:	4a94      	ldr	r2, [pc, #592]	; (8001730 <HAL_GPIO_Init+0x2ac>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d04c      	beq.n	800157e <HAL_GPIO_Init+0xfa>
 80014e4:	4a92      	ldr	r2, [pc, #584]	; (8001730 <HAL_GPIO_Init+0x2ac>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d863      	bhi.n	80015b2 <HAL_GPIO_Init+0x12e>
 80014ea:	4a92      	ldr	r2, [pc, #584]	; (8001734 <HAL_GPIO_Init+0x2b0>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d046      	beq.n	800157e <HAL_GPIO_Init+0xfa>
 80014f0:	4a90      	ldr	r2, [pc, #576]	; (8001734 <HAL_GPIO_Init+0x2b0>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d85d      	bhi.n	80015b2 <HAL_GPIO_Init+0x12e>
 80014f6:	2b12      	cmp	r3, #18
 80014f8:	d82a      	bhi.n	8001550 <HAL_GPIO_Init+0xcc>
 80014fa:	2b12      	cmp	r3, #18
 80014fc:	d859      	bhi.n	80015b2 <HAL_GPIO_Init+0x12e>
 80014fe:	a201      	add	r2, pc, #4	; (adr r2, 8001504 <HAL_GPIO_Init+0x80>)
 8001500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001504:	0800157f 	.word	0x0800157f
 8001508:	08001559 	.word	0x08001559
 800150c:	0800156b 	.word	0x0800156b
 8001510:	080015ad 	.word	0x080015ad
 8001514:	080015b3 	.word	0x080015b3
 8001518:	080015b3 	.word	0x080015b3
 800151c:	080015b3 	.word	0x080015b3
 8001520:	080015b3 	.word	0x080015b3
 8001524:	080015b3 	.word	0x080015b3
 8001528:	080015b3 	.word	0x080015b3
 800152c:	080015b3 	.word	0x080015b3
 8001530:	080015b3 	.word	0x080015b3
 8001534:	080015b3 	.word	0x080015b3
 8001538:	080015b3 	.word	0x080015b3
 800153c:	080015b3 	.word	0x080015b3
 8001540:	080015b3 	.word	0x080015b3
 8001544:	080015b3 	.word	0x080015b3
 8001548:	08001561 	.word	0x08001561
 800154c:	08001575 	.word	0x08001575
 8001550:	4a79      	ldr	r2, [pc, #484]	; (8001738 <HAL_GPIO_Init+0x2b4>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d013      	beq.n	800157e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001556:	e02c      	b.n	80015b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	623b      	str	r3, [r7, #32]
          break;
 800155e:	e029      	b.n	80015b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	3304      	adds	r3, #4
 8001566:	623b      	str	r3, [r7, #32]
          break;
 8001568:	e024      	b.n	80015b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	3308      	adds	r3, #8
 8001570:	623b      	str	r3, [r7, #32]
          break;
 8001572:	e01f      	b.n	80015b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	330c      	adds	r3, #12
 800157a:	623b      	str	r3, [r7, #32]
          break;
 800157c:	e01a      	b.n	80015b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d102      	bne.n	800158c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001586:	2304      	movs	r3, #4
 8001588:	623b      	str	r3, [r7, #32]
          break;
 800158a:	e013      	b.n	80015b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d105      	bne.n	80015a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001594:	2308      	movs	r3, #8
 8001596:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	69fa      	ldr	r2, [r7, #28]
 800159c:	611a      	str	r2, [r3, #16]
          break;
 800159e:	e009      	b.n	80015b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015a0:	2308      	movs	r3, #8
 80015a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	69fa      	ldr	r2, [r7, #28]
 80015a8:	615a      	str	r2, [r3, #20]
          break;
 80015aa:	e003      	b.n	80015b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015ac:	2300      	movs	r3, #0
 80015ae:	623b      	str	r3, [r7, #32]
          break;
 80015b0:	e000      	b.n	80015b4 <HAL_GPIO_Init+0x130>
          break;
 80015b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	2bff      	cmp	r3, #255	; 0xff
 80015b8:	d801      	bhi.n	80015be <HAL_GPIO_Init+0x13a>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	e001      	b.n	80015c2 <HAL_GPIO_Init+0x13e>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	3304      	adds	r3, #4
 80015c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	2bff      	cmp	r3, #255	; 0xff
 80015c8:	d802      	bhi.n	80015d0 <HAL_GPIO_Init+0x14c>
 80015ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	e002      	b.n	80015d6 <HAL_GPIO_Init+0x152>
 80015d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d2:	3b08      	subs	r3, #8
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	210f      	movs	r1, #15
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	fa01 f303 	lsl.w	r3, r1, r3
 80015e4:	43db      	mvns	r3, r3
 80015e6:	401a      	ands	r2, r3
 80015e8:	6a39      	ldr	r1, [r7, #32]
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	fa01 f303 	lsl.w	r3, r1, r3
 80015f0:	431a      	orrs	r2, r3
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f000 80b1 	beq.w	8001766 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001604:	4b4d      	ldr	r3, [pc, #308]	; (800173c <HAL_GPIO_Init+0x2b8>)
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	4a4c      	ldr	r2, [pc, #304]	; (800173c <HAL_GPIO_Init+0x2b8>)
 800160a:	f043 0301 	orr.w	r3, r3, #1
 800160e:	6193      	str	r3, [r2, #24]
 8001610:	4b4a      	ldr	r3, [pc, #296]	; (800173c <HAL_GPIO_Init+0x2b8>)
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	f003 0301 	and.w	r3, r3, #1
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800161c:	4a48      	ldr	r2, [pc, #288]	; (8001740 <HAL_GPIO_Init+0x2bc>)
 800161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001620:	089b      	lsrs	r3, r3, #2
 8001622:	3302      	adds	r3, #2
 8001624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001628:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800162a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162c:	f003 0303 	and.w	r3, r3, #3
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	220f      	movs	r2, #15
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	43db      	mvns	r3, r3
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	4013      	ands	r3, r2
 800163e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4a40      	ldr	r2, [pc, #256]	; (8001744 <HAL_GPIO_Init+0x2c0>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d013      	beq.n	8001670 <HAL_GPIO_Init+0x1ec>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4a3f      	ldr	r2, [pc, #252]	; (8001748 <HAL_GPIO_Init+0x2c4>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d00d      	beq.n	800166c <HAL_GPIO_Init+0x1e8>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4a3e      	ldr	r2, [pc, #248]	; (800174c <HAL_GPIO_Init+0x2c8>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d007      	beq.n	8001668 <HAL_GPIO_Init+0x1e4>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4a3d      	ldr	r2, [pc, #244]	; (8001750 <HAL_GPIO_Init+0x2cc>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d101      	bne.n	8001664 <HAL_GPIO_Init+0x1e0>
 8001660:	2303      	movs	r3, #3
 8001662:	e006      	b.n	8001672 <HAL_GPIO_Init+0x1ee>
 8001664:	2304      	movs	r3, #4
 8001666:	e004      	b.n	8001672 <HAL_GPIO_Init+0x1ee>
 8001668:	2302      	movs	r3, #2
 800166a:	e002      	b.n	8001672 <HAL_GPIO_Init+0x1ee>
 800166c:	2301      	movs	r3, #1
 800166e:	e000      	b.n	8001672 <HAL_GPIO_Init+0x1ee>
 8001670:	2300      	movs	r3, #0
 8001672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001674:	f002 0203 	and.w	r2, r2, #3
 8001678:	0092      	lsls	r2, r2, #2
 800167a:	4093      	lsls	r3, r2
 800167c:	68fa      	ldr	r2, [r7, #12]
 800167e:	4313      	orrs	r3, r2
 8001680:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001682:	492f      	ldr	r1, [pc, #188]	; (8001740 <HAL_GPIO_Init+0x2bc>)
 8001684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001686:	089b      	lsrs	r3, r3, #2
 8001688:	3302      	adds	r3, #2
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d006      	beq.n	80016aa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800169c:	4b2d      	ldr	r3, [pc, #180]	; (8001754 <HAL_GPIO_Init+0x2d0>)
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	492c      	ldr	r1, [pc, #176]	; (8001754 <HAL_GPIO_Init+0x2d0>)
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	608b      	str	r3, [r1, #8]
 80016a8:	e006      	b.n	80016b8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016aa:	4b2a      	ldr	r3, [pc, #168]	; (8001754 <HAL_GPIO_Init+0x2d0>)
 80016ac:	689a      	ldr	r2, [r3, #8]
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	43db      	mvns	r3, r3
 80016b2:	4928      	ldr	r1, [pc, #160]	; (8001754 <HAL_GPIO_Init+0x2d0>)
 80016b4:	4013      	ands	r3, r2
 80016b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d006      	beq.n	80016d2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016c4:	4b23      	ldr	r3, [pc, #140]	; (8001754 <HAL_GPIO_Init+0x2d0>)
 80016c6:	68da      	ldr	r2, [r3, #12]
 80016c8:	4922      	ldr	r1, [pc, #136]	; (8001754 <HAL_GPIO_Init+0x2d0>)
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	60cb      	str	r3, [r1, #12]
 80016d0:	e006      	b.n	80016e0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016d2:	4b20      	ldr	r3, [pc, #128]	; (8001754 <HAL_GPIO_Init+0x2d0>)
 80016d4:	68da      	ldr	r2, [r3, #12]
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	43db      	mvns	r3, r3
 80016da:	491e      	ldr	r1, [pc, #120]	; (8001754 <HAL_GPIO_Init+0x2d0>)
 80016dc:	4013      	ands	r3, r2
 80016de:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d006      	beq.n	80016fa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016ec:	4b19      	ldr	r3, [pc, #100]	; (8001754 <HAL_GPIO_Init+0x2d0>)
 80016ee:	685a      	ldr	r2, [r3, #4]
 80016f0:	4918      	ldr	r1, [pc, #96]	; (8001754 <HAL_GPIO_Init+0x2d0>)
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	604b      	str	r3, [r1, #4]
 80016f8:	e006      	b.n	8001708 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016fa:	4b16      	ldr	r3, [pc, #88]	; (8001754 <HAL_GPIO_Init+0x2d0>)
 80016fc:	685a      	ldr	r2, [r3, #4]
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	43db      	mvns	r3, r3
 8001702:	4914      	ldr	r1, [pc, #80]	; (8001754 <HAL_GPIO_Init+0x2d0>)
 8001704:	4013      	ands	r3, r2
 8001706:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d021      	beq.n	8001758 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001714:	4b0f      	ldr	r3, [pc, #60]	; (8001754 <HAL_GPIO_Init+0x2d0>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	490e      	ldr	r1, [pc, #56]	; (8001754 <HAL_GPIO_Init+0x2d0>)
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	4313      	orrs	r3, r2
 800171e:	600b      	str	r3, [r1, #0]
 8001720:	e021      	b.n	8001766 <HAL_GPIO_Init+0x2e2>
 8001722:	bf00      	nop
 8001724:	10320000 	.word	0x10320000
 8001728:	10310000 	.word	0x10310000
 800172c:	10220000 	.word	0x10220000
 8001730:	10210000 	.word	0x10210000
 8001734:	10120000 	.word	0x10120000
 8001738:	10110000 	.word	0x10110000
 800173c:	40021000 	.word	0x40021000
 8001740:	40010000 	.word	0x40010000
 8001744:	40010800 	.word	0x40010800
 8001748:	40010c00 	.word	0x40010c00
 800174c:	40011000 	.word	0x40011000
 8001750:	40011400 	.word	0x40011400
 8001754:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001758:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <HAL_GPIO_Init+0x304>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	43db      	mvns	r3, r3
 8001760:	4909      	ldr	r1, [pc, #36]	; (8001788 <HAL_GPIO_Init+0x304>)
 8001762:	4013      	ands	r3, r2
 8001764:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001768:	3301      	adds	r3, #1
 800176a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001772:	fa22 f303 	lsr.w	r3, r2, r3
 8001776:	2b00      	cmp	r3, #0
 8001778:	f47f ae8e 	bne.w	8001498 <HAL_GPIO_Init+0x14>
  }
}
 800177c:	bf00      	nop
 800177e:	bf00      	nop
 8001780:	372c      	adds	r7, #44	; 0x2c
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr
 8001788:	40010400 	.word	0x40010400

0800178c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	460b      	mov	r3, r1
 8001796:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689a      	ldr	r2, [r3, #8]
 800179c:	887b      	ldrh	r3, [r7, #2]
 800179e:	4013      	ands	r3, r2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d002      	beq.n	80017aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017a4:	2301      	movs	r3, #1
 80017a6:	73fb      	strb	r3, [r7, #15]
 80017a8:	e001      	b.n	80017ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017aa:	2300      	movs	r3, #0
 80017ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr

080017ba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b083      	sub	sp, #12
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
 80017c2:	460b      	mov	r3, r1
 80017c4:	807b      	strh	r3, [r7, #2]
 80017c6:	4613      	mov	r3, r2
 80017c8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017ca:	787b      	ldrb	r3, [r7, #1]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d003      	beq.n	80017d8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017d0:	887a      	ldrh	r2, [r7, #2]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017d6:	e003      	b.n	80017e0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017d8:	887b      	ldrh	r3, [r7, #2]
 80017da:	041a      	lsls	r2, r3, #16
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	611a      	str	r2, [r3, #16]
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr

080017ea <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b085      	sub	sp, #20
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
 80017f2:	460b      	mov	r3, r1
 80017f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017fc:	887a      	ldrh	r2, [r7, #2]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	4013      	ands	r3, r2
 8001802:	041a      	lsls	r2, r3, #16
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	43d9      	mvns	r1, r3
 8001808:	887b      	ldrh	r3, [r7, #2]
 800180a:	400b      	ands	r3, r1
 800180c:	431a      	orrs	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	611a      	str	r2, [r3, #16]
}
 8001812:	bf00      	nop
 8001814:	3714      	adds	r7, #20
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr

0800181c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001826:	4b08      	ldr	r3, [pc, #32]	; (8001848 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001828:	695a      	ldr	r2, [r3, #20]
 800182a:	88fb      	ldrh	r3, [r7, #6]
 800182c:	4013      	ands	r3, r2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d006      	beq.n	8001840 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001832:	4a05      	ldr	r2, [pc, #20]	; (8001848 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001834:	88fb      	ldrh	r3, [r7, #6]
 8001836:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001838:	88fb      	ldrh	r3, [r7, #6]
 800183a:	4618      	mov	r0, r3
 800183c:	f000 f806 	bl	800184c <HAL_GPIO_EXTI_Callback>
  }
}
 8001840:	bf00      	nop
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40010400 	.word	0x40010400

0800184c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr

08001860 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d101      	bne.n	8001872 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e12b      	b.n	8001aca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2b00      	cmp	r3, #0
 800187c:	d106      	bne.n	800188c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7fe fd60 	bl	800034c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2224      	movs	r2, #36	; 0x24
 8001890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f022 0201 	bic.w	r2, r2, #1
 80018a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018c4:	f001 f832 	bl	800292c <HAL_RCC_GetPCLK1Freq>
 80018c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	4a81      	ldr	r2, [pc, #516]	; (8001ad4 <HAL_I2C_Init+0x274>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d807      	bhi.n	80018e4 <HAL_I2C_Init+0x84>
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	4a80      	ldr	r2, [pc, #512]	; (8001ad8 <HAL_I2C_Init+0x278>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	bf94      	ite	ls
 80018dc:	2301      	movls	r3, #1
 80018de:	2300      	movhi	r3, #0
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	e006      	b.n	80018f2 <HAL_I2C_Init+0x92>
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	4a7d      	ldr	r2, [pc, #500]	; (8001adc <HAL_I2C_Init+0x27c>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	bf94      	ite	ls
 80018ec:	2301      	movls	r3, #1
 80018ee:	2300      	movhi	r3, #0
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e0e7      	b.n	8001aca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	4a78      	ldr	r2, [pc, #480]	; (8001ae0 <HAL_I2C_Init+0x280>)
 80018fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001902:	0c9b      	lsrs	r3, r3, #18
 8001904:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	68ba      	ldr	r2, [r7, #8]
 8001916:	430a      	orrs	r2, r1
 8001918:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	6a1b      	ldr	r3, [r3, #32]
 8001920:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	4a6a      	ldr	r2, [pc, #424]	; (8001ad4 <HAL_I2C_Init+0x274>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d802      	bhi.n	8001934 <HAL_I2C_Init+0xd4>
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	3301      	adds	r3, #1
 8001932:	e009      	b.n	8001948 <HAL_I2C_Init+0xe8>
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800193a:	fb02 f303 	mul.w	r3, r2, r3
 800193e:	4a69      	ldr	r2, [pc, #420]	; (8001ae4 <HAL_I2C_Init+0x284>)
 8001940:	fba2 2303 	umull	r2, r3, r2, r3
 8001944:	099b      	lsrs	r3, r3, #6
 8001946:	3301      	adds	r3, #1
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	6812      	ldr	r2, [r2, #0]
 800194c:	430b      	orrs	r3, r1
 800194e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	69db      	ldr	r3, [r3, #28]
 8001956:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800195a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	495c      	ldr	r1, [pc, #368]	; (8001ad4 <HAL_I2C_Init+0x274>)
 8001964:	428b      	cmp	r3, r1
 8001966:	d819      	bhi.n	800199c <HAL_I2C_Init+0x13c>
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	1e59      	subs	r1, r3, #1
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	fbb1 f3f3 	udiv	r3, r1, r3
 8001976:	1c59      	adds	r1, r3, #1
 8001978:	f640 73fc 	movw	r3, #4092	; 0xffc
 800197c:	400b      	ands	r3, r1
 800197e:	2b00      	cmp	r3, #0
 8001980:	d00a      	beq.n	8001998 <HAL_I2C_Init+0x138>
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	1e59      	subs	r1, r3, #1
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001990:	3301      	adds	r3, #1
 8001992:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001996:	e051      	b.n	8001a3c <HAL_I2C_Init+0x1dc>
 8001998:	2304      	movs	r3, #4
 800199a:	e04f      	b.n	8001a3c <HAL_I2C_Init+0x1dc>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d111      	bne.n	80019c8 <HAL_I2C_Init+0x168>
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	1e58      	subs	r0, r3, #1
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6859      	ldr	r1, [r3, #4]
 80019ac:	460b      	mov	r3, r1
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	440b      	add	r3, r1
 80019b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80019b6:	3301      	adds	r3, #1
 80019b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019bc:	2b00      	cmp	r3, #0
 80019be:	bf0c      	ite	eq
 80019c0:	2301      	moveq	r3, #1
 80019c2:	2300      	movne	r3, #0
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	e012      	b.n	80019ee <HAL_I2C_Init+0x18e>
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	1e58      	subs	r0, r3, #1
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6859      	ldr	r1, [r3, #4]
 80019d0:	460b      	mov	r3, r1
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	440b      	add	r3, r1
 80019d6:	0099      	lsls	r1, r3, #2
 80019d8:	440b      	add	r3, r1
 80019da:	fbb0 f3f3 	udiv	r3, r0, r3
 80019de:	3301      	adds	r3, #1
 80019e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	bf0c      	ite	eq
 80019e8:	2301      	moveq	r3, #1
 80019ea:	2300      	movne	r3, #0
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <HAL_I2C_Init+0x196>
 80019f2:	2301      	movs	r3, #1
 80019f4:	e022      	b.n	8001a3c <HAL_I2C_Init+0x1dc>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d10e      	bne.n	8001a1c <HAL_I2C_Init+0x1bc>
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	1e58      	subs	r0, r3, #1
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6859      	ldr	r1, [r3, #4]
 8001a06:	460b      	mov	r3, r1
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	440b      	add	r3, r1
 8001a0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a10:	3301      	adds	r3, #1
 8001a12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a1a:	e00f      	b.n	8001a3c <HAL_I2C_Init+0x1dc>
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	1e58      	subs	r0, r3, #1
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6859      	ldr	r1, [r3, #4]
 8001a24:	460b      	mov	r3, r1
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	440b      	add	r3, r1
 8001a2a:	0099      	lsls	r1, r3, #2
 8001a2c:	440b      	add	r3, r1
 8001a2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a32:	3301      	adds	r3, #1
 8001a34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a3c:	6879      	ldr	r1, [r7, #4]
 8001a3e:	6809      	ldr	r1, [r1, #0]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	69da      	ldr	r2, [r3, #28]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a1b      	ldr	r3, [r3, #32]
 8001a56:	431a      	orrs	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001a6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	6911      	ldr	r1, [r2, #16]
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	68d2      	ldr	r2, [r2, #12]
 8001a76:	4311      	orrs	r1, r2
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	6812      	ldr	r2, [r2, #0]
 8001a7c:	430b      	orrs	r3, r1
 8001a7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	695a      	ldr	r2, [r3, #20]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	431a      	orrs	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f042 0201 	orr.w	r2, r2, #1
 8001aaa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2220      	movs	r2, #32
 8001ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	000186a0 	.word	0x000186a0
 8001ad8:	001e847f 	.word	0x001e847f
 8001adc:	003d08ff 	.word	0x003d08ff
 8001ae0:	431bde83 	.word	0x431bde83
 8001ae4:	10624dd3 	.word	0x10624dd3

08001ae8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b088      	sub	sp, #32
 8001aec:	af02      	add	r7, sp, #8
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	607a      	str	r2, [r7, #4]
 8001af2:	461a      	mov	r2, r3
 8001af4:	460b      	mov	r3, r1
 8001af6:	817b      	strh	r3, [r7, #10]
 8001af8:	4613      	mov	r3, r2
 8001afa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001afc:	f7ff fb86 	bl	800120c <HAL_GetTick>
 8001b00:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b20      	cmp	r3, #32
 8001b0c:	f040 80e0 	bne.w	8001cd0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	2319      	movs	r3, #25
 8001b16:	2201      	movs	r2, #1
 8001b18:	4970      	ldr	r1, [pc, #448]	; (8001cdc <HAL_I2C_Master_Transmit+0x1f4>)
 8001b1a:	68f8      	ldr	r0, [r7, #12]
 8001b1c:	f000 f964 	bl	8001de8 <I2C_WaitOnFlagUntilTimeout>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001b26:	2302      	movs	r3, #2
 8001b28:	e0d3      	b.n	8001cd2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d101      	bne.n	8001b38 <HAL_I2C_Master_Transmit+0x50>
 8001b34:	2302      	movs	r3, #2
 8001b36:	e0cc      	b.n	8001cd2 <HAL_I2C_Master_Transmit+0x1ea>
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d007      	beq.n	8001b5e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f042 0201 	orr.w	r2, r2, #1
 8001b5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b6c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2221      	movs	r2, #33	; 0x21
 8001b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2210      	movs	r2, #16
 8001b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2200      	movs	r2, #0
 8001b82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	893a      	ldrh	r2, [r7, #8]
 8001b8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	4a50      	ldr	r2, [pc, #320]	; (8001ce0 <HAL_I2C_Master_Transmit+0x1f8>)
 8001b9e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001ba0:	8979      	ldrh	r1, [r7, #10]
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	6a3a      	ldr	r2, [r7, #32]
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f000 f89c 	bl	8001ce4 <I2C_MasterRequestWrite>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e08d      	b.n	8001cd2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	613b      	str	r3, [r7, #16]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	695b      	ldr	r3, [r3, #20]
 8001bc0:	613b      	str	r3, [r7, #16]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	613b      	str	r3, [r7, #16]
 8001bca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001bcc:	e066      	b.n	8001c9c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bce:	697a      	ldr	r2, [r7, #20]
 8001bd0:	6a39      	ldr	r1, [r7, #32]
 8001bd2:	68f8      	ldr	r0, [r7, #12]
 8001bd4:	f000 fa22 	bl	800201c <I2C_WaitOnTXEFlagUntilTimeout>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d00d      	beq.n	8001bfa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	2b04      	cmp	r3, #4
 8001be4:	d107      	bne.n	8001bf6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bf4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e06b      	b.n	8001cd2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfe:	781a      	ldrb	r2, [r3, #0]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0a:	1c5a      	adds	r2, r3, #1
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	3b01      	subs	r3, #1
 8001c18:	b29a      	uxth	r2, r3
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c22:	3b01      	subs	r3, #1
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	695b      	ldr	r3, [r3, #20]
 8001c30:	f003 0304 	and.w	r3, r3, #4
 8001c34:	2b04      	cmp	r3, #4
 8001c36:	d11b      	bne.n	8001c70 <HAL_I2C_Master_Transmit+0x188>
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d017      	beq.n	8001c70 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c44:	781a      	ldrb	r2, [r3, #0]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c50:	1c5a      	adds	r2, r3, #1
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	3b01      	subs	r3, #1
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	6a39      	ldr	r1, [r7, #32]
 8001c74:	68f8      	ldr	r0, [r7, #12]
 8001c76:	f000 fa19 	bl	80020ac <I2C_WaitOnBTFFlagUntilTimeout>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d00d      	beq.n	8001c9c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c84:	2b04      	cmp	r3, #4
 8001c86:	d107      	bne.n	8001c98 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c96:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e01a      	b.n	8001cd2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d194      	bne.n	8001bce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2220      	movs	r2, #32
 8001cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	e000      	b.n	8001cd2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001cd0:	2302      	movs	r3, #2
  }
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3718      	adds	r7, #24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	00100002 	.word	0x00100002
 8001ce0:	ffff0000 	.word	0xffff0000

08001ce4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b088      	sub	sp, #32
 8001ce8:	af02      	add	r7, sp, #8
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	607a      	str	r2, [r7, #4]
 8001cee:	603b      	str	r3, [r7, #0]
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	2b08      	cmp	r3, #8
 8001cfe:	d006      	beq.n	8001d0e <I2C_MasterRequestWrite+0x2a>
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d003      	beq.n	8001d0e <I2C_MasterRequestWrite+0x2a>
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d0c:	d108      	bne.n	8001d20 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	e00b      	b.n	8001d38 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d24:	2b12      	cmp	r3, #18
 8001d26:	d107      	bne.n	8001d38 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d36:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	9300      	str	r3, [sp, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d44:	68f8      	ldr	r0, [r7, #12]
 8001d46:	f000 f84f 	bl	8001de8 <I2C_WaitOnFlagUntilTimeout>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d00d      	beq.n	8001d6c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d5e:	d103      	bne.n	8001d68 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d66:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e035      	b.n	8001dd8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d74:	d108      	bne.n	8001d88 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d76:	897b      	ldrh	r3, [r7, #10]
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001d84:	611a      	str	r2, [r3, #16]
 8001d86:	e01b      	b.n	8001dc0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001d88:	897b      	ldrh	r3, [r7, #10]
 8001d8a:	11db      	asrs	r3, r3, #7
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	f003 0306 	and.w	r3, r3, #6
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	f063 030f 	orn	r3, r3, #15
 8001d98:	b2da      	uxtb	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	490e      	ldr	r1, [pc, #56]	; (8001de0 <I2C_MasterRequestWrite+0xfc>)
 8001da6:	68f8      	ldr	r0, [r7, #12]
 8001da8:	f000 f898 	bl	8001edc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e010      	b.n	8001dd8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001db6:	897b      	ldrh	r3, [r7, #10]
 8001db8:	b2da      	uxtb	r2, r3
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	4907      	ldr	r1, [pc, #28]	; (8001de4 <I2C_MasterRequestWrite+0x100>)
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	f000 f888 	bl	8001edc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e000      	b.n	8001dd8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3718      	adds	r7, #24
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	00010008 	.word	0x00010008
 8001de4:	00010002 	.word	0x00010002

08001de8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	603b      	str	r3, [r7, #0]
 8001df4:	4613      	mov	r3, r2
 8001df6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001df8:	e048      	b.n	8001e8c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e00:	d044      	beq.n	8001e8c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e02:	f7ff fa03 	bl	800120c <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d302      	bcc.n	8001e18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d139      	bne.n	8001e8c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	0c1b      	lsrs	r3, r3, #16
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d10d      	bne.n	8001e3e <I2C_WaitOnFlagUntilTimeout+0x56>
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	695b      	ldr	r3, [r3, #20]
 8001e28:	43da      	mvns	r2, r3
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	bf0c      	ite	eq
 8001e34:	2301      	moveq	r3, #1
 8001e36:	2300      	movne	r3, #0
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	e00c      	b.n	8001e58 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	43da      	mvns	r2, r3
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	bf0c      	ite	eq
 8001e50:	2301      	moveq	r3, #1
 8001e52:	2300      	movne	r3, #0
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	461a      	mov	r2, r3
 8001e58:	79fb      	ldrb	r3, [r7, #7]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d116      	bne.n	8001e8c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2200      	movs	r2, #0
 8001e62:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2220      	movs	r2, #32
 8001e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e78:	f043 0220 	orr.w	r2, r3, #32
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e023      	b.n	8001ed4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	0c1b      	lsrs	r3, r3, #16
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d10d      	bne.n	8001eb2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	695b      	ldr	r3, [r3, #20]
 8001e9c:	43da      	mvns	r2, r3
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	bf0c      	ite	eq
 8001ea8:	2301      	moveq	r3, #1
 8001eaa:	2300      	movne	r3, #0
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	461a      	mov	r2, r3
 8001eb0:	e00c      	b.n	8001ecc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	43da      	mvns	r2, r3
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	bf0c      	ite	eq
 8001ec4:	2301      	moveq	r3, #1
 8001ec6:	2300      	movne	r3, #0
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	461a      	mov	r2, r3
 8001ecc:	79fb      	ldrb	r3, [r7, #7]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d093      	beq.n	8001dfa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001ed2:	2300      	movs	r3, #0
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3710      	adds	r7, #16
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
 8001ee8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001eea:	e071      	b.n	8001fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ef6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001efa:	d123      	bne.n	8001f44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f0a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2220      	movs	r2, #32
 8001f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f30:	f043 0204 	orr.w	r2, r3, #4
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e067      	b.n	8002014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f4a:	d041      	beq.n	8001fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f4c:	f7ff f95e 	bl	800120c <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d302      	bcc.n	8001f62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d136      	bne.n	8001fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	0c1b      	lsrs	r3, r3, #16
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d10c      	bne.n	8001f86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	43da      	mvns	r2, r3
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	4013      	ands	r3, r2
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	bf14      	ite	ne
 8001f7e:	2301      	movne	r3, #1
 8001f80:	2300      	moveq	r3, #0
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	e00b      	b.n	8001f9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	43da      	mvns	r2, r3
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	4013      	ands	r3, r2
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	bf14      	ite	ne
 8001f98:	2301      	movne	r3, #1
 8001f9a:	2300      	moveq	r3, #0
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d016      	beq.n	8001fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2220      	movs	r2, #32
 8001fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbc:	f043 0220 	orr.w	r2, r3, #32
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e021      	b.n	8002014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	0c1b      	lsrs	r3, r3, #16
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d10c      	bne.n	8001ff4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	695b      	ldr	r3, [r3, #20]
 8001fe0:	43da      	mvns	r2, r3
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	bf14      	ite	ne
 8001fec:	2301      	movne	r3, #1
 8001fee:	2300      	moveq	r3, #0
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	e00b      	b.n	800200c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	43da      	mvns	r2, r3
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	4013      	ands	r3, r2
 8002000:	b29b      	uxth	r3, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	bf14      	ite	ne
 8002006:	2301      	movne	r3, #1
 8002008:	2300      	moveq	r3, #0
 800200a:	b2db      	uxtb	r3, r3
 800200c:	2b00      	cmp	r3, #0
 800200e:	f47f af6d 	bne.w	8001eec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002028:	e034      	b.n	8002094 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800202a:	68f8      	ldr	r0, [r7, #12]
 800202c:	f000 f886 	bl	800213c <I2C_IsAcknowledgeFailed>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e034      	b.n	80020a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002040:	d028      	beq.n	8002094 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002042:	f7ff f8e3 	bl	800120c <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	68ba      	ldr	r2, [r7, #8]
 800204e:	429a      	cmp	r2, r3
 8002050:	d302      	bcc.n	8002058 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d11d      	bne.n	8002094 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002062:	2b80      	cmp	r3, #128	; 0x80
 8002064:	d016      	beq.n	8002094 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2200      	movs	r2, #0
 800206a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2220      	movs	r2, #32
 8002070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2200      	movs	r2, #0
 8002078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002080:	f043 0220 	orr.w	r2, r3, #32
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e007      	b.n	80020a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800209e:	2b80      	cmp	r3, #128	; 0x80
 80020a0:	d1c3      	bne.n	800202a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80020b8:	e034      	b.n	8002124 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f000 f83e 	bl	800213c <I2C_IsAcknowledgeFailed>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e034      	b.n	8002134 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020d0:	d028      	beq.n	8002124 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020d2:	f7ff f89b 	bl	800120c <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	68ba      	ldr	r2, [r7, #8]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d302      	bcc.n	80020e8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d11d      	bne.n	8002124 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	f003 0304 	and.w	r3, r3, #4
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	d016      	beq.n	8002124 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2200      	movs	r2, #0
 80020fa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2220      	movs	r2, #32
 8002100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002110:	f043 0220 	orr.w	r2, r3, #32
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e007      	b.n	8002134 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	f003 0304 	and.w	r3, r3, #4
 800212e:	2b04      	cmp	r3, #4
 8002130:	d1c3      	bne.n	80020ba <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	3710      	adds	r7, #16
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800214e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002152:	d11b      	bne.n	800218c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800215c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2220      	movs	r2, #32
 8002168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002178:	f043 0204 	orr.w	r2, r3, #4
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e000      	b.n	800218e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr

08002198 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e272      	b.n	8002690 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f000 8087 	beq.w	80022c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021b8:	4b92      	ldr	r3, [pc, #584]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f003 030c 	and.w	r3, r3, #12
 80021c0:	2b04      	cmp	r3, #4
 80021c2:	d00c      	beq.n	80021de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021c4:	4b8f      	ldr	r3, [pc, #572]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f003 030c 	and.w	r3, r3, #12
 80021cc:	2b08      	cmp	r3, #8
 80021ce:	d112      	bne.n	80021f6 <HAL_RCC_OscConfig+0x5e>
 80021d0:	4b8c      	ldr	r3, [pc, #560]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021dc:	d10b      	bne.n	80021f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021de:	4b89      	ldr	r3, [pc, #548]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d06c      	beq.n	80022c4 <HAL_RCC_OscConfig+0x12c>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d168      	bne.n	80022c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e24c      	b.n	8002690 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021fe:	d106      	bne.n	800220e <HAL_RCC_OscConfig+0x76>
 8002200:	4b80      	ldr	r3, [pc, #512]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a7f      	ldr	r2, [pc, #508]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 8002206:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800220a:	6013      	str	r3, [r2, #0]
 800220c:	e02e      	b.n	800226c <HAL_RCC_OscConfig+0xd4>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d10c      	bne.n	8002230 <HAL_RCC_OscConfig+0x98>
 8002216:	4b7b      	ldr	r3, [pc, #492]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a7a      	ldr	r2, [pc, #488]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 800221c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002220:	6013      	str	r3, [r2, #0]
 8002222:	4b78      	ldr	r3, [pc, #480]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a77      	ldr	r2, [pc, #476]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 8002228:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800222c:	6013      	str	r3, [r2, #0]
 800222e:	e01d      	b.n	800226c <HAL_RCC_OscConfig+0xd4>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002238:	d10c      	bne.n	8002254 <HAL_RCC_OscConfig+0xbc>
 800223a:	4b72      	ldr	r3, [pc, #456]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a71      	ldr	r2, [pc, #452]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 8002240:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002244:	6013      	str	r3, [r2, #0]
 8002246:	4b6f      	ldr	r3, [pc, #444]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a6e      	ldr	r2, [pc, #440]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 800224c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002250:	6013      	str	r3, [r2, #0]
 8002252:	e00b      	b.n	800226c <HAL_RCC_OscConfig+0xd4>
 8002254:	4b6b      	ldr	r3, [pc, #428]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a6a      	ldr	r2, [pc, #424]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 800225a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800225e:	6013      	str	r3, [r2, #0]
 8002260:	4b68      	ldr	r3, [pc, #416]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a67      	ldr	r2, [pc, #412]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 8002266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800226a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d013      	beq.n	800229c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002274:	f7fe ffca 	bl	800120c <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800227c:	f7fe ffc6 	bl	800120c <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b64      	cmp	r3, #100	; 0x64
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e200      	b.n	8002690 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228e:	4b5d      	ldr	r3, [pc, #372]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d0f0      	beq.n	800227c <HAL_RCC_OscConfig+0xe4>
 800229a:	e014      	b.n	80022c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229c:	f7fe ffb6 	bl	800120c <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022a4:	f7fe ffb2 	bl	800120c <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b64      	cmp	r3, #100	; 0x64
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e1ec      	b.n	8002690 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022b6:	4b53      	ldr	r3, [pc, #332]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1f0      	bne.n	80022a4 <HAL_RCC_OscConfig+0x10c>
 80022c2:	e000      	b.n	80022c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d063      	beq.n	800239a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022d2:	4b4c      	ldr	r3, [pc, #304]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f003 030c 	and.w	r3, r3, #12
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00b      	beq.n	80022f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022de:	4b49      	ldr	r3, [pc, #292]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f003 030c 	and.w	r3, r3, #12
 80022e6:	2b08      	cmp	r3, #8
 80022e8:	d11c      	bne.n	8002324 <HAL_RCC_OscConfig+0x18c>
 80022ea:	4b46      	ldr	r3, [pc, #280]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d116      	bne.n	8002324 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022f6:	4b43      	ldr	r3, [pc, #268]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d005      	beq.n	800230e <HAL_RCC_OscConfig+0x176>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d001      	beq.n	800230e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e1c0      	b.n	8002690 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800230e:	4b3d      	ldr	r3, [pc, #244]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	4939      	ldr	r1, [pc, #228]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 800231e:	4313      	orrs	r3, r2
 8002320:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002322:	e03a      	b.n	800239a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d020      	beq.n	800236e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800232c:	4b36      	ldr	r3, [pc, #216]	; (8002408 <HAL_RCC_OscConfig+0x270>)
 800232e:	2201      	movs	r2, #1
 8002330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002332:	f7fe ff6b 	bl	800120c <HAL_GetTick>
 8002336:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002338:	e008      	b.n	800234c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800233a:	f7fe ff67 	bl	800120c <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e1a1      	b.n	8002690 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800234c:	4b2d      	ldr	r3, [pc, #180]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d0f0      	beq.n	800233a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002358:	4b2a      	ldr	r3, [pc, #168]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	695b      	ldr	r3, [r3, #20]
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	4927      	ldr	r1, [pc, #156]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 8002368:	4313      	orrs	r3, r2
 800236a:	600b      	str	r3, [r1, #0]
 800236c:	e015      	b.n	800239a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800236e:	4b26      	ldr	r3, [pc, #152]	; (8002408 <HAL_RCC_OscConfig+0x270>)
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002374:	f7fe ff4a 	bl	800120c <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800237c:	f7fe ff46 	bl	800120c <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e180      	b.n	8002690 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800238e:	4b1d      	ldr	r3, [pc, #116]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1f0      	bne.n	800237c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0308 	and.w	r3, r3, #8
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d03a      	beq.n	800241c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d019      	beq.n	80023e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ae:	4b17      	ldr	r3, [pc, #92]	; (800240c <HAL_RCC_OscConfig+0x274>)
 80023b0:	2201      	movs	r2, #1
 80023b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b4:	f7fe ff2a 	bl	800120c <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023bc:	f7fe ff26 	bl	800120c <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e160      	b.n	8002690 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ce:	4b0d      	ldr	r3, [pc, #52]	; (8002404 <HAL_RCC_OscConfig+0x26c>)
 80023d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d0f0      	beq.n	80023bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023da:	2001      	movs	r0, #1
 80023dc:	f000 face 	bl	800297c <RCC_Delay>
 80023e0:	e01c      	b.n	800241c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023e2:	4b0a      	ldr	r3, [pc, #40]	; (800240c <HAL_RCC_OscConfig+0x274>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e8:	f7fe ff10 	bl	800120c <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023ee:	e00f      	b.n	8002410 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023f0:	f7fe ff0c 	bl	800120c <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d908      	bls.n	8002410 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e146      	b.n	8002690 <HAL_RCC_OscConfig+0x4f8>
 8002402:	bf00      	nop
 8002404:	40021000 	.word	0x40021000
 8002408:	42420000 	.word	0x42420000
 800240c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002410:	4b92      	ldr	r3, [pc, #584]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 8002412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1e9      	bne.n	80023f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0304 	and.w	r3, r3, #4
 8002424:	2b00      	cmp	r3, #0
 8002426:	f000 80a6 	beq.w	8002576 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800242a:	2300      	movs	r3, #0
 800242c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800242e:	4b8b      	ldr	r3, [pc, #556]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10d      	bne.n	8002456 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800243a:	4b88      	ldr	r3, [pc, #544]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	4a87      	ldr	r2, [pc, #540]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 8002440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002444:	61d3      	str	r3, [r2, #28]
 8002446:	4b85      	ldr	r3, [pc, #532]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800244e:	60bb      	str	r3, [r7, #8]
 8002450:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002452:	2301      	movs	r3, #1
 8002454:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002456:	4b82      	ldr	r3, [pc, #520]	; (8002660 <HAL_RCC_OscConfig+0x4c8>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800245e:	2b00      	cmp	r3, #0
 8002460:	d118      	bne.n	8002494 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002462:	4b7f      	ldr	r3, [pc, #508]	; (8002660 <HAL_RCC_OscConfig+0x4c8>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a7e      	ldr	r2, [pc, #504]	; (8002660 <HAL_RCC_OscConfig+0x4c8>)
 8002468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800246c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800246e:	f7fe fecd 	bl	800120c <HAL_GetTick>
 8002472:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002474:	e008      	b.n	8002488 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002476:	f7fe fec9 	bl	800120c <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b64      	cmp	r3, #100	; 0x64
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e103      	b.n	8002690 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002488:	4b75      	ldr	r3, [pc, #468]	; (8002660 <HAL_RCC_OscConfig+0x4c8>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002490:	2b00      	cmp	r3, #0
 8002492:	d0f0      	beq.n	8002476 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d106      	bne.n	80024aa <HAL_RCC_OscConfig+0x312>
 800249c:	4b6f      	ldr	r3, [pc, #444]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 800249e:	6a1b      	ldr	r3, [r3, #32]
 80024a0:	4a6e      	ldr	r2, [pc, #440]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 80024a2:	f043 0301 	orr.w	r3, r3, #1
 80024a6:	6213      	str	r3, [r2, #32]
 80024a8:	e02d      	b.n	8002506 <HAL_RCC_OscConfig+0x36e>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10c      	bne.n	80024cc <HAL_RCC_OscConfig+0x334>
 80024b2:	4b6a      	ldr	r3, [pc, #424]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 80024b4:	6a1b      	ldr	r3, [r3, #32]
 80024b6:	4a69      	ldr	r2, [pc, #420]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 80024b8:	f023 0301 	bic.w	r3, r3, #1
 80024bc:	6213      	str	r3, [r2, #32]
 80024be:	4b67      	ldr	r3, [pc, #412]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	4a66      	ldr	r2, [pc, #408]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 80024c4:	f023 0304 	bic.w	r3, r3, #4
 80024c8:	6213      	str	r3, [r2, #32]
 80024ca:	e01c      	b.n	8002506 <HAL_RCC_OscConfig+0x36e>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	2b05      	cmp	r3, #5
 80024d2:	d10c      	bne.n	80024ee <HAL_RCC_OscConfig+0x356>
 80024d4:	4b61      	ldr	r3, [pc, #388]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	4a60      	ldr	r2, [pc, #384]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 80024da:	f043 0304 	orr.w	r3, r3, #4
 80024de:	6213      	str	r3, [r2, #32]
 80024e0:	4b5e      	ldr	r3, [pc, #376]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 80024e2:	6a1b      	ldr	r3, [r3, #32]
 80024e4:	4a5d      	ldr	r2, [pc, #372]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 80024e6:	f043 0301 	orr.w	r3, r3, #1
 80024ea:	6213      	str	r3, [r2, #32]
 80024ec:	e00b      	b.n	8002506 <HAL_RCC_OscConfig+0x36e>
 80024ee:	4b5b      	ldr	r3, [pc, #364]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 80024f0:	6a1b      	ldr	r3, [r3, #32]
 80024f2:	4a5a      	ldr	r2, [pc, #360]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 80024f4:	f023 0301 	bic.w	r3, r3, #1
 80024f8:	6213      	str	r3, [r2, #32]
 80024fa:	4b58      	ldr	r3, [pc, #352]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	4a57      	ldr	r2, [pc, #348]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 8002500:	f023 0304 	bic.w	r3, r3, #4
 8002504:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d015      	beq.n	800253a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800250e:	f7fe fe7d 	bl	800120c <HAL_GetTick>
 8002512:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002514:	e00a      	b.n	800252c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002516:	f7fe fe79 	bl	800120c <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	f241 3288 	movw	r2, #5000	; 0x1388
 8002524:	4293      	cmp	r3, r2
 8002526:	d901      	bls.n	800252c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e0b1      	b.n	8002690 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800252c:	4b4b      	ldr	r3, [pc, #300]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d0ee      	beq.n	8002516 <HAL_RCC_OscConfig+0x37e>
 8002538:	e014      	b.n	8002564 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800253a:	f7fe fe67 	bl	800120c <HAL_GetTick>
 800253e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002540:	e00a      	b.n	8002558 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002542:	f7fe fe63 	bl	800120c <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002550:	4293      	cmp	r3, r2
 8002552:	d901      	bls.n	8002558 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e09b      	b.n	8002690 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002558:	4b40      	ldr	r3, [pc, #256]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 800255a:	6a1b      	ldr	r3, [r3, #32]
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1ee      	bne.n	8002542 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002564:	7dfb      	ldrb	r3, [r7, #23]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d105      	bne.n	8002576 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800256a:	4b3c      	ldr	r3, [pc, #240]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	4a3b      	ldr	r2, [pc, #236]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 8002570:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002574:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	69db      	ldr	r3, [r3, #28]
 800257a:	2b00      	cmp	r3, #0
 800257c:	f000 8087 	beq.w	800268e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002580:	4b36      	ldr	r3, [pc, #216]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f003 030c 	and.w	r3, r3, #12
 8002588:	2b08      	cmp	r3, #8
 800258a:	d061      	beq.n	8002650 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	69db      	ldr	r3, [r3, #28]
 8002590:	2b02      	cmp	r3, #2
 8002592:	d146      	bne.n	8002622 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002594:	4b33      	ldr	r3, [pc, #204]	; (8002664 <HAL_RCC_OscConfig+0x4cc>)
 8002596:	2200      	movs	r2, #0
 8002598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259a:	f7fe fe37 	bl	800120c <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025a0:	e008      	b.n	80025b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025a2:	f7fe fe33 	bl	800120c <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e06d      	b.n	8002690 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025b4:	4b29      	ldr	r3, [pc, #164]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1f0      	bne.n	80025a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025c8:	d108      	bne.n	80025dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025ca:	4b24      	ldr	r3, [pc, #144]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	4921      	ldr	r1, [pc, #132]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025dc:	4b1f      	ldr	r3, [pc, #124]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a19      	ldr	r1, [r3, #32]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ec:	430b      	orrs	r3, r1
 80025ee:	491b      	ldr	r1, [pc, #108]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025f4:	4b1b      	ldr	r3, [pc, #108]	; (8002664 <HAL_RCC_OscConfig+0x4cc>)
 80025f6:	2201      	movs	r2, #1
 80025f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fa:	f7fe fe07 	bl	800120c <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002600:	e008      	b.n	8002614 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002602:	f7fe fe03 	bl	800120c <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e03d      	b.n	8002690 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002614:	4b11      	ldr	r3, [pc, #68]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0f0      	beq.n	8002602 <HAL_RCC_OscConfig+0x46a>
 8002620:	e035      	b.n	800268e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002622:	4b10      	ldr	r3, [pc, #64]	; (8002664 <HAL_RCC_OscConfig+0x4cc>)
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002628:	f7fe fdf0 	bl	800120c <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002630:	f7fe fdec 	bl	800120c <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e026      	b.n	8002690 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002642:	4b06      	ldr	r3, [pc, #24]	; (800265c <HAL_RCC_OscConfig+0x4c4>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1f0      	bne.n	8002630 <HAL_RCC_OscConfig+0x498>
 800264e:	e01e      	b.n	800268e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	69db      	ldr	r3, [r3, #28]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d107      	bne.n	8002668 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e019      	b.n	8002690 <HAL_RCC_OscConfig+0x4f8>
 800265c:	40021000 	.word	0x40021000
 8002660:	40007000 	.word	0x40007000
 8002664:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002668:	4b0b      	ldr	r3, [pc, #44]	; (8002698 <HAL_RCC_OscConfig+0x500>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a1b      	ldr	r3, [r3, #32]
 8002678:	429a      	cmp	r2, r3
 800267a:	d106      	bne.n	800268a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002686:	429a      	cmp	r2, r3
 8002688:	d001      	beq.n	800268e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e000      	b.n	8002690 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800268e:	2300      	movs	r3, #0
}
 8002690:	4618      	mov	r0, r3
 8002692:	3718      	adds	r7, #24
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40021000 	.word	0x40021000

0800269c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d101      	bne.n	80026b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e0d0      	b.n	8002852 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026b0:	4b6a      	ldr	r3, [pc, #424]	; (800285c <HAL_RCC_ClockConfig+0x1c0>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0307 	and.w	r3, r3, #7
 80026b8:	683a      	ldr	r2, [r7, #0]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d910      	bls.n	80026e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026be:	4b67      	ldr	r3, [pc, #412]	; (800285c <HAL_RCC_ClockConfig+0x1c0>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f023 0207 	bic.w	r2, r3, #7
 80026c6:	4965      	ldr	r1, [pc, #404]	; (800285c <HAL_RCC_ClockConfig+0x1c0>)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ce:	4b63      	ldr	r3, [pc, #396]	; (800285c <HAL_RCC_ClockConfig+0x1c0>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0307 	and.w	r3, r3, #7
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d001      	beq.n	80026e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e0b8      	b.n	8002852 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d020      	beq.n	800272e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0304 	and.w	r3, r3, #4
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d005      	beq.n	8002704 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026f8:	4b59      	ldr	r3, [pc, #356]	; (8002860 <HAL_RCC_ClockConfig+0x1c4>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	4a58      	ldr	r2, [pc, #352]	; (8002860 <HAL_RCC_ClockConfig+0x1c4>)
 80026fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002702:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0308 	and.w	r3, r3, #8
 800270c:	2b00      	cmp	r3, #0
 800270e:	d005      	beq.n	800271c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002710:	4b53      	ldr	r3, [pc, #332]	; (8002860 <HAL_RCC_ClockConfig+0x1c4>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	4a52      	ldr	r2, [pc, #328]	; (8002860 <HAL_RCC_ClockConfig+0x1c4>)
 8002716:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800271a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800271c:	4b50      	ldr	r3, [pc, #320]	; (8002860 <HAL_RCC_ClockConfig+0x1c4>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	494d      	ldr	r1, [pc, #308]	; (8002860 <HAL_RCC_ClockConfig+0x1c4>)
 800272a:	4313      	orrs	r3, r2
 800272c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	2b00      	cmp	r3, #0
 8002738:	d040      	beq.n	80027bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d107      	bne.n	8002752 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002742:	4b47      	ldr	r3, [pc, #284]	; (8002860 <HAL_RCC_ClockConfig+0x1c4>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d115      	bne.n	800277a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e07f      	b.n	8002852 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	2b02      	cmp	r3, #2
 8002758:	d107      	bne.n	800276a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800275a:	4b41      	ldr	r3, [pc, #260]	; (8002860 <HAL_RCC_ClockConfig+0x1c4>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d109      	bne.n	800277a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e073      	b.n	8002852 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800276a:	4b3d      	ldr	r3, [pc, #244]	; (8002860 <HAL_RCC_ClockConfig+0x1c4>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e06b      	b.n	8002852 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800277a:	4b39      	ldr	r3, [pc, #228]	; (8002860 <HAL_RCC_ClockConfig+0x1c4>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f023 0203 	bic.w	r2, r3, #3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	4936      	ldr	r1, [pc, #216]	; (8002860 <HAL_RCC_ClockConfig+0x1c4>)
 8002788:	4313      	orrs	r3, r2
 800278a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800278c:	f7fe fd3e 	bl	800120c <HAL_GetTick>
 8002790:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002792:	e00a      	b.n	80027aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002794:	f7fe fd3a 	bl	800120c <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e053      	b.n	8002852 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027aa:	4b2d      	ldr	r3, [pc, #180]	; (8002860 <HAL_RCC_ClockConfig+0x1c4>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f003 020c 	and.w	r2, r3, #12
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d1eb      	bne.n	8002794 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027bc:	4b27      	ldr	r3, [pc, #156]	; (800285c <HAL_RCC_ClockConfig+0x1c0>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d210      	bcs.n	80027ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ca:	4b24      	ldr	r3, [pc, #144]	; (800285c <HAL_RCC_ClockConfig+0x1c0>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f023 0207 	bic.w	r2, r3, #7
 80027d2:	4922      	ldr	r1, [pc, #136]	; (800285c <HAL_RCC_ClockConfig+0x1c0>)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027da:	4b20      	ldr	r3, [pc, #128]	; (800285c <HAL_RCC_ClockConfig+0x1c0>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0307 	and.w	r3, r3, #7
 80027e2:	683a      	ldr	r2, [r7, #0]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d001      	beq.n	80027ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e032      	b.n	8002852 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0304 	and.w	r3, r3, #4
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d008      	beq.n	800280a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027f8:	4b19      	ldr	r3, [pc, #100]	; (8002860 <HAL_RCC_ClockConfig+0x1c4>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	4916      	ldr	r1, [pc, #88]	; (8002860 <HAL_RCC_ClockConfig+0x1c4>)
 8002806:	4313      	orrs	r3, r2
 8002808:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0308 	and.w	r3, r3, #8
 8002812:	2b00      	cmp	r3, #0
 8002814:	d009      	beq.n	800282a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002816:	4b12      	ldr	r3, [pc, #72]	; (8002860 <HAL_RCC_ClockConfig+0x1c4>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	490e      	ldr	r1, [pc, #56]	; (8002860 <HAL_RCC_ClockConfig+0x1c4>)
 8002826:	4313      	orrs	r3, r2
 8002828:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800282a:	f000 f821 	bl	8002870 <HAL_RCC_GetSysClockFreq>
 800282e:	4602      	mov	r2, r0
 8002830:	4b0b      	ldr	r3, [pc, #44]	; (8002860 <HAL_RCC_ClockConfig+0x1c4>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	091b      	lsrs	r3, r3, #4
 8002836:	f003 030f 	and.w	r3, r3, #15
 800283a:	490a      	ldr	r1, [pc, #40]	; (8002864 <HAL_RCC_ClockConfig+0x1c8>)
 800283c:	5ccb      	ldrb	r3, [r1, r3]
 800283e:	fa22 f303 	lsr.w	r3, r2, r3
 8002842:	4a09      	ldr	r2, [pc, #36]	; (8002868 <HAL_RCC_ClockConfig+0x1cc>)
 8002844:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002846:	4b09      	ldr	r3, [pc, #36]	; (800286c <HAL_RCC_ClockConfig+0x1d0>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f7fe fc9c 	bl	8001188 <HAL_InitTick>

  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	40022000 	.word	0x40022000
 8002860:	40021000 	.word	0x40021000
 8002864:	08003ee8 	.word	0x08003ee8
 8002868:	20000000 	.word	0x20000000
 800286c:	200000d8 	.word	0x200000d8

08002870 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002870:	b480      	push	{r7}
 8002872:	b087      	sub	sp, #28
 8002874:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002876:	2300      	movs	r3, #0
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	2300      	movs	r3, #0
 800287c:	60bb      	str	r3, [r7, #8]
 800287e:	2300      	movs	r3, #0
 8002880:	617b      	str	r3, [r7, #20]
 8002882:	2300      	movs	r3, #0
 8002884:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002886:	2300      	movs	r3, #0
 8002888:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800288a:	4b1e      	ldr	r3, [pc, #120]	; (8002904 <HAL_RCC_GetSysClockFreq+0x94>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f003 030c 	and.w	r3, r3, #12
 8002896:	2b04      	cmp	r3, #4
 8002898:	d002      	beq.n	80028a0 <HAL_RCC_GetSysClockFreq+0x30>
 800289a:	2b08      	cmp	r3, #8
 800289c:	d003      	beq.n	80028a6 <HAL_RCC_GetSysClockFreq+0x36>
 800289e:	e027      	b.n	80028f0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028a0:	4b19      	ldr	r3, [pc, #100]	; (8002908 <HAL_RCC_GetSysClockFreq+0x98>)
 80028a2:	613b      	str	r3, [r7, #16]
      break;
 80028a4:	e027      	b.n	80028f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	0c9b      	lsrs	r3, r3, #18
 80028aa:	f003 030f 	and.w	r3, r3, #15
 80028ae:	4a17      	ldr	r2, [pc, #92]	; (800290c <HAL_RCC_GetSysClockFreq+0x9c>)
 80028b0:	5cd3      	ldrb	r3, [r2, r3]
 80028b2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d010      	beq.n	80028e0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028be:	4b11      	ldr	r3, [pc, #68]	; (8002904 <HAL_RCC_GetSysClockFreq+0x94>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	0c5b      	lsrs	r3, r3, #17
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	4a11      	ldr	r2, [pc, #68]	; (8002910 <HAL_RCC_GetSysClockFreq+0xa0>)
 80028ca:	5cd3      	ldrb	r3, [r2, r3]
 80028cc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a0d      	ldr	r2, [pc, #52]	; (8002908 <HAL_RCC_GetSysClockFreq+0x98>)
 80028d2:	fb03 f202 	mul.w	r2, r3, r2
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028dc:	617b      	str	r3, [r7, #20]
 80028de:	e004      	b.n	80028ea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a0c      	ldr	r2, [pc, #48]	; (8002914 <HAL_RCC_GetSysClockFreq+0xa4>)
 80028e4:	fb02 f303 	mul.w	r3, r2, r3
 80028e8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	613b      	str	r3, [r7, #16]
      break;
 80028ee:	e002      	b.n	80028f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028f0:	4b05      	ldr	r3, [pc, #20]	; (8002908 <HAL_RCC_GetSysClockFreq+0x98>)
 80028f2:	613b      	str	r3, [r7, #16]
      break;
 80028f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028f6:	693b      	ldr	r3, [r7, #16]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	371c      	adds	r7, #28
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bc80      	pop	{r7}
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	40021000 	.word	0x40021000
 8002908:	007a1200 	.word	0x007a1200
 800290c:	08003f20 	.word	0x08003f20
 8002910:	08003f30 	.word	0x08003f30
 8002914:	003d0900 	.word	0x003d0900

08002918 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800291c:	4b02      	ldr	r3, [pc, #8]	; (8002928 <HAL_RCC_GetHCLKFreq+0x10>)
 800291e:	681b      	ldr	r3, [r3, #0]
}
 8002920:	4618      	mov	r0, r3
 8002922:	46bd      	mov	sp, r7
 8002924:	bc80      	pop	{r7}
 8002926:	4770      	bx	lr
 8002928:	20000000 	.word	0x20000000

0800292c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002930:	f7ff fff2 	bl	8002918 <HAL_RCC_GetHCLKFreq>
 8002934:	4602      	mov	r2, r0
 8002936:	4b05      	ldr	r3, [pc, #20]	; (800294c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	0a1b      	lsrs	r3, r3, #8
 800293c:	f003 0307 	and.w	r3, r3, #7
 8002940:	4903      	ldr	r1, [pc, #12]	; (8002950 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002942:	5ccb      	ldrb	r3, [r1, r3]
 8002944:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002948:	4618      	mov	r0, r3
 800294a:	bd80      	pop	{r7, pc}
 800294c:	40021000 	.word	0x40021000
 8002950:	08003ef8 	.word	0x08003ef8

08002954 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002958:	f7ff ffde 	bl	8002918 <HAL_RCC_GetHCLKFreq>
 800295c:	4602      	mov	r2, r0
 800295e:	4b05      	ldr	r3, [pc, #20]	; (8002974 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	0adb      	lsrs	r3, r3, #11
 8002964:	f003 0307 	and.w	r3, r3, #7
 8002968:	4903      	ldr	r1, [pc, #12]	; (8002978 <HAL_RCC_GetPCLK2Freq+0x24>)
 800296a:	5ccb      	ldrb	r3, [r1, r3]
 800296c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002970:	4618      	mov	r0, r3
 8002972:	bd80      	pop	{r7, pc}
 8002974:	40021000 	.word	0x40021000
 8002978:	08003ef8 	.word	0x08003ef8

0800297c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002984:	4b0a      	ldr	r3, [pc, #40]	; (80029b0 <RCC_Delay+0x34>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a0a      	ldr	r2, [pc, #40]	; (80029b4 <RCC_Delay+0x38>)
 800298a:	fba2 2303 	umull	r2, r3, r2, r3
 800298e:	0a5b      	lsrs	r3, r3, #9
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	fb02 f303 	mul.w	r3, r2, r3
 8002996:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002998:	bf00      	nop
  }
  while (Delay --);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	1e5a      	subs	r2, r3, #1
 800299e:	60fa      	str	r2, [r7, #12]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1f9      	bne.n	8002998 <RCC_Delay+0x1c>
}
 80029a4:	bf00      	nop
 80029a6:	bf00      	nop
 80029a8:	3714      	adds	r7, #20
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bc80      	pop	{r7}
 80029ae:	4770      	bx	lr
 80029b0:	20000000 	.word	0x20000000
 80029b4:	10624dd3 	.word	0x10624dd3

080029b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e042      	b.n	8002a50 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d106      	bne.n	80029e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f7fd fd04 	bl	80003ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2224      	movs	r2, #36	; 0x24
 80029e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68da      	ldr	r2, [r3, #12]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f000 f9af 	bl	8002d60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	691a      	ldr	r2, [r3, #16]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	695a      	ldr	r2, [r3, #20]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68da      	ldr	r2, [r3, #12]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2220      	movs	r2, #32
 8002a44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b08a      	sub	sp, #40	; 0x28
 8002a5c:	af02      	add	r7, sp, #8
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	603b      	str	r3, [r7, #0]
 8002a64:	4613      	mov	r3, r2
 8002a66:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2b20      	cmp	r3, #32
 8002a76:	d16d      	bne.n	8002b54 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d002      	beq.n	8002a84 <HAL_UART_Transmit+0x2c>
 8002a7e:	88fb      	ldrh	r3, [r7, #6]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d101      	bne.n	8002a88 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e066      	b.n	8002b56 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2221      	movs	r2, #33	; 0x21
 8002a92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a96:	f7fe fbb9 	bl	800120c <HAL_GetTick>
 8002a9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	88fa      	ldrh	r2, [r7, #6]
 8002aa0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	88fa      	ldrh	r2, [r7, #6]
 8002aa6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ab0:	d108      	bne.n	8002ac4 <HAL_UART_Transmit+0x6c>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d104      	bne.n	8002ac4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002aba:	2300      	movs	r3, #0
 8002abc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	61bb      	str	r3, [r7, #24]
 8002ac2:	e003      	b.n	8002acc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002acc:	e02a      	b.n	8002b24 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	9300      	str	r3, [sp, #0]
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	2180      	movs	r1, #128	; 0x80
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f000 f8d2 	bl	8002c82 <UART_WaitOnFlagUntilTimeout>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e036      	b.n	8002b56 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10b      	bne.n	8002b06 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	881b      	ldrh	r3, [r3, #0]
 8002af2:	461a      	mov	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002afc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	3302      	adds	r3, #2
 8002b02:	61bb      	str	r3, [r7, #24]
 8002b04:	e007      	b.n	8002b16 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	781a      	ldrb	r2, [r3, #0]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	3301      	adds	r3, #1
 8002b14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1cf      	bne.n	8002ace <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	2200      	movs	r2, #0
 8002b36:	2140      	movs	r1, #64	; 0x40
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	f000 f8a2 	bl	8002c82 <UART_WaitOnFlagUntilTimeout>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d001      	beq.n	8002b48 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e006      	b.n	8002b56 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2220      	movs	r2, #32
 8002b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002b50:	2300      	movs	r3, #0
 8002b52:	e000      	b.n	8002b56 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002b54:	2302      	movs	r3, #2
  }
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3720      	adds	r7, #32
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b08a      	sub	sp, #40	; 0x28
 8002b62:	af02      	add	r7, sp, #8
 8002b64:	60f8      	str	r0, [r7, #12]
 8002b66:	60b9      	str	r1, [r7, #8]
 8002b68:	603b      	str	r3, [r7, #0]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b20      	cmp	r3, #32
 8002b7c:	d17c      	bne.n	8002c78 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d002      	beq.n	8002b8a <HAL_UART_Receive+0x2c>
 8002b84:	88fb      	ldrh	r3, [r7, #6]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e075      	b.n	8002c7a <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2222      	movs	r2, #34	; 0x22
 8002b98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ba2:	f7fe fb33 	bl	800120c <HAL_GetTick>
 8002ba6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	88fa      	ldrh	r2, [r7, #6]
 8002bac:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	88fa      	ldrh	r2, [r7, #6]
 8002bb2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bbc:	d108      	bne.n	8002bd0 <HAL_UART_Receive+0x72>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d104      	bne.n	8002bd0 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	61bb      	str	r3, [r7, #24]
 8002bce:	e003      	b.n	8002bd8 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002bd8:	e043      	b.n	8002c62 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	9300      	str	r3, [sp, #0]
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	2200      	movs	r2, #0
 8002be2:	2120      	movs	r1, #32
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	f000 f84c 	bl	8002c82 <UART_WaitOnFlagUntilTimeout>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e042      	b.n	8002c7a <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d10c      	bne.n	8002c14 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	3302      	adds	r3, #2
 8002c10:	61bb      	str	r3, [r7, #24]
 8002c12:	e01f      	b.n	8002c54 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c1c:	d007      	beq.n	8002c2e <HAL_UART_Receive+0xd0>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d10a      	bne.n	8002c3c <HAL_UART_Receive+0xde>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d106      	bne.n	8002c3c <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	b2da      	uxtb	r2, r3
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	701a      	strb	r2, [r3, #0]
 8002c3a:	e008      	b.n	8002c4e <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c48:	b2da      	uxtb	r2, r3
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	3301      	adds	r3, #1
 8002c52:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d1b6      	bne.n	8002bda <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2220      	movs	r2, #32
 8002c70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8002c74:	2300      	movs	r3, #0
 8002c76:	e000      	b.n	8002c7a <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002c78:	2302      	movs	r3, #2
  }
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3720      	adds	r7, #32
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b090      	sub	sp, #64	; 0x40
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	60f8      	str	r0, [r7, #12]
 8002c8a:	60b9      	str	r1, [r7, #8]
 8002c8c:	603b      	str	r3, [r7, #0]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c92:	e050      	b.n	8002d36 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c9a:	d04c      	beq.n	8002d36 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d007      	beq.n	8002cb2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ca2:	f7fe fab3 	bl	800120c <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d241      	bcs.n	8002d36 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	330c      	adds	r3, #12
 8002cb8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cbc:	e853 3f00 	ldrex	r3, [r3]
 8002cc0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	330c      	adds	r3, #12
 8002cd0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cd2:	637a      	str	r2, [r7, #52]	; 0x34
 8002cd4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002cd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cda:	e841 2300 	strex	r3, r2, [r1]
 8002cde:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1e5      	bne.n	8002cb2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	3314      	adds	r3, #20
 8002cec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	e853 3f00 	ldrex	r3, [r3]
 8002cf4:	613b      	str	r3, [r7, #16]
   return(result);
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	f023 0301 	bic.w	r3, r3, #1
 8002cfc:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	3314      	adds	r3, #20
 8002d04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d06:	623a      	str	r2, [r7, #32]
 8002d08:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d0a:	69f9      	ldr	r1, [r7, #28]
 8002d0c:	6a3a      	ldr	r2, [r7, #32]
 8002d0e:	e841 2300 	strex	r3, r2, [r1]
 8002d12:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1e5      	bne.n	8002ce6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2220      	movs	r2, #32
 8002d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2220      	movs	r2, #32
 8002d26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e00f      	b.n	8002d56 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	68ba      	ldr	r2, [r7, #8]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	bf0c      	ite	eq
 8002d46:	2301      	moveq	r3, #1
 8002d48:	2300      	movne	r3, #0
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	79fb      	ldrb	r3, [r7, #7]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d09f      	beq.n	8002c94 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3740      	adds	r7, #64	; 0x40
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
	...

08002d60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	68da      	ldr	r2, [r3, #12]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	689a      	ldr	r2, [r3, #8]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	431a      	orrs	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	695b      	ldr	r3, [r3, #20]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002d9a:	f023 030c 	bic.w	r3, r3, #12
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	6812      	ldr	r2, [r2, #0]
 8002da2:	68b9      	ldr	r1, [r7, #8]
 8002da4:	430b      	orrs	r3, r1
 8002da6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	699a      	ldr	r2, [r3, #24]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a2c      	ldr	r2, [pc, #176]	; (8002e74 <UART_SetConfig+0x114>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d103      	bne.n	8002dd0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002dc8:	f7ff fdc4 	bl	8002954 <HAL_RCC_GetPCLK2Freq>
 8002dcc:	60f8      	str	r0, [r7, #12]
 8002dce:	e002      	b.n	8002dd6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002dd0:	f7ff fdac 	bl	800292c <HAL_RCC_GetPCLK1Freq>
 8002dd4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	4413      	add	r3, r2
 8002dde:	009a      	lsls	r2, r3, #2
 8002de0:	441a      	add	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dec:	4a22      	ldr	r2, [pc, #136]	; (8002e78 <UART_SetConfig+0x118>)
 8002dee:	fba2 2303 	umull	r2, r3, r2, r3
 8002df2:	095b      	lsrs	r3, r3, #5
 8002df4:	0119      	lsls	r1, r3, #4
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	4413      	add	r3, r2
 8002dfe:	009a      	lsls	r2, r3, #2
 8002e00:	441a      	add	r2, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e0c:	4b1a      	ldr	r3, [pc, #104]	; (8002e78 <UART_SetConfig+0x118>)
 8002e0e:	fba3 0302 	umull	r0, r3, r3, r2
 8002e12:	095b      	lsrs	r3, r3, #5
 8002e14:	2064      	movs	r0, #100	; 0x64
 8002e16:	fb00 f303 	mul.w	r3, r0, r3
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	011b      	lsls	r3, r3, #4
 8002e1e:	3332      	adds	r3, #50	; 0x32
 8002e20:	4a15      	ldr	r2, [pc, #84]	; (8002e78 <UART_SetConfig+0x118>)
 8002e22:	fba2 2303 	umull	r2, r3, r2, r3
 8002e26:	095b      	lsrs	r3, r3, #5
 8002e28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e2c:	4419      	add	r1, r3
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	4613      	mov	r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	4413      	add	r3, r2
 8002e36:	009a      	lsls	r2, r3, #2
 8002e38:	441a      	add	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e44:	4b0c      	ldr	r3, [pc, #48]	; (8002e78 <UART_SetConfig+0x118>)
 8002e46:	fba3 0302 	umull	r0, r3, r3, r2
 8002e4a:	095b      	lsrs	r3, r3, #5
 8002e4c:	2064      	movs	r0, #100	; 0x64
 8002e4e:	fb00 f303 	mul.w	r3, r0, r3
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	011b      	lsls	r3, r3, #4
 8002e56:	3332      	adds	r3, #50	; 0x32
 8002e58:	4a07      	ldr	r2, [pc, #28]	; (8002e78 <UART_SetConfig+0x118>)
 8002e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5e:	095b      	lsrs	r3, r3, #5
 8002e60:	f003 020f 	and.w	r2, r3, #15
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	440a      	add	r2, r1
 8002e6a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002e6c:	bf00      	nop
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	40013800 	.word	0x40013800
 8002e78:	51eb851f 	.word	0x51eb851f

08002e7c <atoi>:
 8002e7c:	220a      	movs	r2, #10
 8002e7e:	2100      	movs	r1, #0
 8002e80:	f000 b87e 	b.w	8002f80 <strtol>

08002e84 <_strtol_l.constprop.0>:
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e8a:	4686      	mov	lr, r0
 8002e8c:	4690      	mov	r8, r2
 8002e8e:	d001      	beq.n	8002e94 <_strtol_l.constprop.0+0x10>
 8002e90:	2b24      	cmp	r3, #36	; 0x24
 8002e92:	d906      	bls.n	8002ea2 <_strtol_l.constprop.0+0x1e>
 8002e94:	f000 f8a6 	bl	8002fe4 <__errno>
 8002e98:	2316      	movs	r3, #22
 8002e9a:	6003      	str	r3, [r0, #0]
 8002e9c:	2000      	movs	r0, #0
 8002e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ea2:	460d      	mov	r5, r1
 8002ea4:	4835      	ldr	r0, [pc, #212]	; (8002f7c <_strtol_l.constprop.0+0xf8>)
 8002ea6:	462a      	mov	r2, r5
 8002ea8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002eac:	5d06      	ldrb	r6, [r0, r4]
 8002eae:	f016 0608 	ands.w	r6, r6, #8
 8002eb2:	d1f8      	bne.n	8002ea6 <_strtol_l.constprop.0+0x22>
 8002eb4:	2c2d      	cmp	r4, #45	; 0x2d
 8002eb6:	d12e      	bne.n	8002f16 <_strtol_l.constprop.0+0x92>
 8002eb8:	2601      	movs	r6, #1
 8002eba:	782c      	ldrb	r4, [r5, #0]
 8002ebc:	1c95      	adds	r5, r2, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d057      	beq.n	8002f72 <_strtol_l.constprop.0+0xee>
 8002ec2:	2b10      	cmp	r3, #16
 8002ec4:	d109      	bne.n	8002eda <_strtol_l.constprop.0+0x56>
 8002ec6:	2c30      	cmp	r4, #48	; 0x30
 8002ec8:	d107      	bne.n	8002eda <_strtol_l.constprop.0+0x56>
 8002eca:	782a      	ldrb	r2, [r5, #0]
 8002ecc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8002ed0:	2a58      	cmp	r2, #88	; 0x58
 8002ed2:	d149      	bne.n	8002f68 <_strtol_l.constprop.0+0xe4>
 8002ed4:	2310      	movs	r3, #16
 8002ed6:	786c      	ldrb	r4, [r5, #1]
 8002ed8:	3502      	adds	r5, #2
 8002eda:	2200      	movs	r2, #0
 8002edc:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8002ee0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8002ee4:	fbbc f9f3 	udiv	r9, ip, r3
 8002ee8:	4610      	mov	r0, r2
 8002eea:	fb03 ca19 	mls	sl, r3, r9, ip
 8002eee:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8002ef2:	2f09      	cmp	r7, #9
 8002ef4:	d814      	bhi.n	8002f20 <_strtol_l.constprop.0+0x9c>
 8002ef6:	463c      	mov	r4, r7
 8002ef8:	42a3      	cmp	r3, r4
 8002efa:	dd20      	ble.n	8002f3e <_strtol_l.constprop.0+0xba>
 8002efc:	1c57      	adds	r7, r2, #1
 8002efe:	d007      	beq.n	8002f10 <_strtol_l.constprop.0+0x8c>
 8002f00:	4581      	cmp	r9, r0
 8002f02:	d319      	bcc.n	8002f38 <_strtol_l.constprop.0+0xb4>
 8002f04:	d101      	bne.n	8002f0a <_strtol_l.constprop.0+0x86>
 8002f06:	45a2      	cmp	sl, r4
 8002f08:	db16      	blt.n	8002f38 <_strtol_l.constprop.0+0xb4>
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	fb00 4003 	mla	r0, r0, r3, r4
 8002f10:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002f14:	e7eb      	b.n	8002eee <_strtol_l.constprop.0+0x6a>
 8002f16:	2c2b      	cmp	r4, #43	; 0x2b
 8002f18:	bf04      	itt	eq
 8002f1a:	782c      	ldrbeq	r4, [r5, #0]
 8002f1c:	1c95      	addeq	r5, r2, #2
 8002f1e:	e7ce      	b.n	8002ebe <_strtol_l.constprop.0+0x3a>
 8002f20:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8002f24:	2f19      	cmp	r7, #25
 8002f26:	d801      	bhi.n	8002f2c <_strtol_l.constprop.0+0xa8>
 8002f28:	3c37      	subs	r4, #55	; 0x37
 8002f2a:	e7e5      	b.n	8002ef8 <_strtol_l.constprop.0+0x74>
 8002f2c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8002f30:	2f19      	cmp	r7, #25
 8002f32:	d804      	bhi.n	8002f3e <_strtol_l.constprop.0+0xba>
 8002f34:	3c57      	subs	r4, #87	; 0x57
 8002f36:	e7df      	b.n	8002ef8 <_strtol_l.constprop.0+0x74>
 8002f38:	f04f 32ff 	mov.w	r2, #4294967295
 8002f3c:	e7e8      	b.n	8002f10 <_strtol_l.constprop.0+0x8c>
 8002f3e:	1c53      	adds	r3, r2, #1
 8002f40:	d108      	bne.n	8002f54 <_strtol_l.constprop.0+0xd0>
 8002f42:	2322      	movs	r3, #34	; 0x22
 8002f44:	4660      	mov	r0, ip
 8002f46:	f8ce 3000 	str.w	r3, [lr]
 8002f4a:	f1b8 0f00 	cmp.w	r8, #0
 8002f4e:	d0a6      	beq.n	8002e9e <_strtol_l.constprop.0+0x1a>
 8002f50:	1e69      	subs	r1, r5, #1
 8002f52:	e006      	b.n	8002f62 <_strtol_l.constprop.0+0xde>
 8002f54:	b106      	cbz	r6, 8002f58 <_strtol_l.constprop.0+0xd4>
 8002f56:	4240      	negs	r0, r0
 8002f58:	f1b8 0f00 	cmp.w	r8, #0
 8002f5c:	d09f      	beq.n	8002e9e <_strtol_l.constprop.0+0x1a>
 8002f5e:	2a00      	cmp	r2, #0
 8002f60:	d1f6      	bne.n	8002f50 <_strtol_l.constprop.0+0xcc>
 8002f62:	f8c8 1000 	str.w	r1, [r8]
 8002f66:	e79a      	b.n	8002e9e <_strtol_l.constprop.0+0x1a>
 8002f68:	2430      	movs	r4, #48	; 0x30
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1b5      	bne.n	8002eda <_strtol_l.constprop.0+0x56>
 8002f6e:	2308      	movs	r3, #8
 8002f70:	e7b3      	b.n	8002eda <_strtol_l.constprop.0+0x56>
 8002f72:	2c30      	cmp	r4, #48	; 0x30
 8002f74:	d0a9      	beq.n	8002eca <_strtol_l.constprop.0+0x46>
 8002f76:	230a      	movs	r3, #10
 8002f78:	e7af      	b.n	8002eda <_strtol_l.constprop.0+0x56>
 8002f7a:	bf00      	nop
 8002f7c:	08003f33 	.word	0x08003f33

08002f80 <strtol>:
 8002f80:	4613      	mov	r3, r2
 8002f82:	460a      	mov	r2, r1
 8002f84:	4601      	mov	r1, r0
 8002f86:	4802      	ldr	r0, [pc, #8]	; (8002f90 <strtol+0x10>)
 8002f88:	6800      	ldr	r0, [r0, #0]
 8002f8a:	f7ff bf7b 	b.w	8002e84 <_strtol_l.constprop.0>
 8002f8e:	bf00      	nop
 8002f90:	2000012c 	.word	0x2000012c

08002f94 <siprintf>:
 8002f94:	b40e      	push	{r1, r2, r3}
 8002f96:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002f9a:	b500      	push	{lr}
 8002f9c:	b09c      	sub	sp, #112	; 0x70
 8002f9e:	ab1d      	add	r3, sp, #116	; 0x74
 8002fa0:	9002      	str	r0, [sp, #8]
 8002fa2:	9006      	str	r0, [sp, #24]
 8002fa4:	9107      	str	r1, [sp, #28]
 8002fa6:	9104      	str	r1, [sp, #16]
 8002fa8:	4808      	ldr	r0, [pc, #32]	; (8002fcc <siprintf+0x38>)
 8002faa:	4909      	ldr	r1, [pc, #36]	; (8002fd0 <siprintf+0x3c>)
 8002fac:	f853 2b04 	ldr.w	r2, [r3], #4
 8002fb0:	9105      	str	r1, [sp, #20]
 8002fb2:	6800      	ldr	r0, [r0, #0]
 8002fb4:	a902      	add	r1, sp, #8
 8002fb6:	9301      	str	r3, [sp, #4]
 8002fb8:	f000 f99c 	bl	80032f4 <_svfiprintf_r>
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	9b02      	ldr	r3, [sp, #8]
 8002fc0:	701a      	strb	r2, [r3, #0]
 8002fc2:	b01c      	add	sp, #112	; 0x70
 8002fc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8002fc8:	b003      	add	sp, #12
 8002fca:	4770      	bx	lr
 8002fcc:	2000012c 	.word	0x2000012c
 8002fd0:	ffff0208 	.word	0xffff0208

08002fd4 <memset>:
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	4402      	add	r2, r0
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d100      	bne.n	8002fde <memset+0xa>
 8002fdc:	4770      	bx	lr
 8002fde:	f803 1b01 	strb.w	r1, [r3], #1
 8002fe2:	e7f9      	b.n	8002fd8 <memset+0x4>

08002fe4 <__errno>:
 8002fe4:	4b01      	ldr	r3, [pc, #4]	; (8002fec <__errno+0x8>)
 8002fe6:	6818      	ldr	r0, [r3, #0]
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	2000012c 	.word	0x2000012c

08002ff0 <__libc_init_array>:
 8002ff0:	b570      	push	{r4, r5, r6, lr}
 8002ff2:	2600      	movs	r6, #0
 8002ff4:	4d0c      	ldr	r5, [pc, #48]	; (8003028 <__libc_init_array+0x38>)
 8002ff6:	4c0d      	ldr	r4, [pc, #52]	; (800302c <__libc_init_array+0x3c>)
 8002ff8:	1b64      	subs	r4, r4, r5
 8002ffa:	10a4      	asrs	r4, r4, #2
 8002ffc:	42a6      	cmp	r6, r4
 8002ffe:	d109      	bne.n	8003014 <__libc_init_array+0x24>
 8003000:	f000 fc7a 	bl	80038f8 <_init>
 8003004:	2600      	movs	r6, #0
 8003006:	4d0a      	ldr	r5, [pc, #40]	; (8003030 <__libc_init_array+0x40>)
 8003008:	4c0a      	ldr	r4, [pc, #40]	; (8003034 <__libc_init_array+0x44>)
 800300a:	1b64      	subs	r4, r4, r5
 800300c:	10a4      	asrs	r4, r4, #2
 800300e:	42a6      	cmp	r6, r4
 8003010:	d105      	bne.n	800301e <__libc_init_array+0x2e>
 8003012:	bd70      	pop	{r4, r5, r6, pc}
 8003014:	f855 3b04 	ldr.w	r3, [r5], #4
 8003018:	4798      	blx	r3
 800301a:	3601      	adds	r6, #1
 800301c:	e7ee      	b.n	8002ffc <__libc_init_array+0xc>
 800301e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003022:	4798      	blx	r3
 8003024:	3601      	adds	r6, #1
 8003026:	e7f2      	b.n	800300e <__libc_init_array+0x1e>
 8003028:	08004068 	.word	0x08004068
 800302c:	08004068 	.word	0x08004068
 8003030:	08004068 	.word	0x08004068
 8003034:	0800406c 	.word	0x0800406c

08003038 <__retarget_lock_acquire_recursive>:
 8003038:	4770      	bx	lr

0800303a <__retarget_lock_release_recursive>:
 800303a:	4770      	bx	lr

0800303c <memcpy>:
 800303c:	440a      	add	r2, r1
 800303e:	4291      	cmp	r1, r2
 8003040:	f100 33ff 	add.w	r3, r0, #4294967295
 8003044:	d100      	bne.n	8003048 <memcpy+0xc>
 8003046:	4770      	bx	lr
 8003048:	b510      	push	{r4, lr}
 800304a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800304e:	4291      	cmp	r1, r2
 8003050:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003054:	d1f9      	bne.n	800304a <memcpy+0xe>
 8003056:	bd10      	pop	{r4, pc}

08003058 <_free_r>:
 8003058:	b538      	push	{r3, r4, r5, lr}
 800305a:	4605      	mov	r5, r0
 800305c:	2900      	cmp	r1, #0
 800305e:	d040      	beq.n	80030e2 <_free_r+0x8a>
 8003060:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003064:	1f0c      	subs	r4, r1, #4
 8003066:	2b00      	cmp	r3, #0
 8003068:	bfb8      	it	lt
 800306a:	18e4      	addlt	r4, r4, r3
 800306c:	f000 f8dc 	bl	8003228 <__malloc_lock>
 8003070:	4a1c      	ldr	r2, [pc, #112]	; (80030e4 <_free_r+0x8c>)
 8003072:	6813      	ldr	r3, [r2, #0]
 8003074:	b933      	cbnz	r3, 8003084 <_free_r+0x2c>
 8003076:	6063      	str	r3, [r4, #4]
 8003078:	6014      	str	r4, [r2, #0]
 800307a:	4628      	mov	r0, r5
 800307c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003080:	f000 b8d8 	b.w	8003234 <__malloc_unlock>
 8003084:	42a3      	cmp	r3, r4
 8003086:	d908      	bls.n	800309a <_free_r+0x42>
 8003088:	6820      	ldr	r0, [r4, #0]
 800308a:	1821      	adds	r1, r4, r0
 800308c:	428b      	cmp	r3, r1
 800308e:	bf01      	itttt	eq
 8003090:	6819      	ldreq	r1, [r3, #0]
 8003092:	685b      	ldreq	r3, [r3, #4]
 8003094:	1809      	addeq	r1, r1, r0
 8003096:	6021      	streq	r1, [r4, #0]
 8003098:	e7ed      	b.n	8003076 <_free_r+0x1e>
 800309a:	461a      	mov	r2, r3
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	b10b      	cbz	r3, 80030a4 <_free_r+0x4c>
 80030a0:	42a3      	cmp	r3, r4
 80030a2:	d9fa      	bls.n	800309a <_free_r+0x42>
 80030a4:	6811      	ldr	r1, [r2, #0]
 80030a6:	1850      	adds	r0, r2, r1
 80030a8:	42a0      	cmp	r0, r4
 80030aa:	d10b      	bne.n	80030c4 <_free_r+0x6c>
 80030ac:	6820      	ldr	r0, [r4, #0]
 80030ae:	4401      	add	r1, r0
 80030b0:	1850      	adds	r0, r2, r1
 80030b2:	4283      	cmp	r3, r0
 80030b4:	6011      	str	r1, [r2, #0]
 80030b6:	d1e0      	bne.n	800307a <_free_r+0x22>
 80030b8:	6818      	ldr	r0, [r3, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	4408      	add	r0, r1
 80030be:	6010      	str	r0, [r2, #0]
 80030c0:	6053      	str	r3, [r2, #4]
 80030c2:	e7da      	b.n	800307a <_free_r+0x22>
 80030c4:	d902      	bls.n	80030cc <_free_r+0x74>
 80030c6:	230c      	movs	r3, #12
 80030c8:	602b      	str	r3, [r5, #0]
 80030ca:	e7d6      	b.n	800307a <_free_r+0x22>
 80030cc:	6820      	ldr	r0, [r4, #0]
 80030ce:	1821      	adds	r1, r4, r0
 80030d0:	428b      	cmp	r3, r1
 80030d2:	bf01      	itttt	eq
 80030d4:	6819      	ldreq	r1, [r3, #0]
 80030d6:	685b      	ldreq	r3, [r3, #4]
 80030d8:	1809      	addeq	r1, r1, r0
 80030da:	6021      	streq	r1, [r4, #0]
 80030dc:	6063      	str	r3, [r4, #4]
 80030de:	6054      	str	r4, [r2, #4]
 80030e0:	e7cb      	b.n	800307a <_free_r+0x22>
 80030e2:	bd38      	pop	{r3, r4, r5, pc}
 80030e4:	20000364 	.word	0x20000364

080030e8 <sbrk_aligned>:
 80030e8:	b570      	push	{r4, r5, r6, lr}
 80030ea:	4e0e      	ldr	r6, [pc, #56]	; (8003124 <sbrk_aligned+0x3c>)
 80030ec:	460c      	mov	r4, r1
 80030ee:	6831      	ldr	r1, [r6, #0]
 80030f0:	4605      	mov	r5, r0
 80030f2:	b911      	cbnz	r1, 80030fa <sbrk_aligned+0x12>
 80030f4:	f000 fbaa 	bl	800384c <_sbrk_r>
 80030f8:	6030      	str	r0, [r6, #0]
 80030fa:	4621      	mov	r1, r4
 80030fc:	4628      	mov	r0, r5
 80030fe:	f000 fba5 	bl	800384c <_sbrk_r>
 8003102:	1c43      	adds	r3, r0, #1
 8003104:	d00a      	beq.n	800311c <sbrk_aligned+0x34>
 8003106:	1cc4      	adds	r4, r0, #3
 8003108:	f024 0403 	bic.w	r4, r4, #3
 800310c:	42a0      	cmp	r0, r4
 800310e:	d007      	beq.n	8003120 <sbrk_aligned+0x38>
 8003110:	1a21      	subs	r1, r4, r0
 8003112:	4628      	mov	r0, r5
 8003114:	f000 fb9a 	bl	800384c <_sbrk_r>
 8003118:	3001      	adds	r0, #1
 800311a:	d101      	bne.n	8003120 <sbrk_aligned+0x38>
 800311c:	f04f 34ff 	mov.w	r4, #4294967295
 8003120:	4620      	mov	r0, r4
 8003122:	bd70      	pop	{r4, r5, r6, pc}
 8003124:	20000368 	.word	0x20000368

08003128 <_malloc_r>:
 8003128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800312c:	1ccd      	adds	r5, r1, #3
 800312e:	f025 0503 	bic.w	r5, r5, #3
 8003132:	3508      	adds	r5, #8
 8003134:	2d0c      	cmp	r5, #12
 8003136:	bf38      	it	cc
 8003138:	250c      	movcc	r5, #12
 800313a:	2d00      	cmp	r5, #0
 800313c:	4607      	mov	r7, r0
 800313e:	db01      	blt.n	8003144 <_malloc_r+0x1c>
 8003140:	42a9      	cmp	r1, r5
 8003142:	d905      	bls.n	8003150 <_malloc_r+0x28>
 8003144:	230c      	movs	r3, #12
 8003146:	2600      	movs	r6, #0
 8003148:	603b      	str	r3, [r7, #0]
 800314a:	4630      	mov	r0, r6
 800314c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003150:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003224 <_malloc_r+0xfc>
 8003154:	f000 f868 	bl	8003228 <__malloc_lock>
 8003158:	f8d8 3000 	ldr.w	r3, [r8]
 800315c:	461c      	mov	r4, r3
 800315e:	bb5c      	cbnz	r4, 80031b8 <_malloc_r+0x90>
 8003160:	4629      	mov	r1, r5
 8003162:	4638      	mov	r0, r7
 8003164:	f7ff ffc0 	bl	80030e8 <sbrk_aligned>
 8003168:	1c43      	adds	r3, r0, #1
 800316a:	4604      	mov	r4, r0
 800316c:	d155      	bne.n	800321a <_malloc_r+0xf2>
 800316e:	f8d8 4000 	ldr.w	r4, [r8]
 8003172:	4626      	mov	r6, r4
 8003174:	2e00      	cmp	r6, #0
 8003176:	d145      	bne.n	8003204 <_malloc_r+0xdc>
 8003178:	2c00      	cmp	r4, #0
 800317a:	d048      	beq.n	800320e <_malloc_r+0xe6>
 800317c:	6823      	ldr	r3, [r4, #0]
 800317e:	4631      	mov	r1, r6
 8003180:	4638      	mov	r0, r7
 8003182:	eb04 0903 	add.w	r9, r4, r3
 8003186:	f000 fb61 	bl	800384c <_sbrk_r>
 800318a:	4581      	cmp	r9, r0
 800318c:	d13f      	bne.n	800320e <_malloc_r+0xe6>
 800318e:	6821      	ldr	r1, [r4, #0]
 8003190:	4638      	mov	r0, r7
 8003192:	1a6d      	subs	r5, r5, r1
 8003194:	4629      	mov	r1, r5
 8003196:	f7ff ffa7 	bl	80030e8 <sbrk_aligned>
 800319a:	3001      	adds	r0, #1
 800319c:	d037      	beq.n	800320e <_malloc_r+0xe6>
 800319e:	6823      	ldr	r3, [r4, #0]
 80031a0:	442b      	add	r3, r5
 80031a2:	6023      	str	r3, [r4, #0]
 80031a4:	f8d8 3000 	ldr.w	r3, [r8]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d038      	beq.n	800321e <_malloc_r+0xf6>
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	42a2      	cmp	r2, r4
 80031b0:	d12b      	bne.n	800320a <_malloc_r+0xe2>
 80031b2:	2200      	movs	r2, #0
 80031b4:	605a      	str	r2, [r3, #4]
 80031b6:	e00f      	b.n	80031d8 <_malloc_r+0xb0>
 80031b8:	6822      	ldr	r2, [r4, #0]
 80031ba:	1b52      	subs	r2, r2, r5
 80031bc:	d41f      	bmi.n	80031fe <_malloc_r+0xd6>
 80031be:	2a0b      	cmp	r2, #11
 80031c0:	d917      	bls.n	80031f2 <_malloc_r+0xca>
 80031c2:	1961      	adds	r1, r4, r5
 80031c4:	42a3      	cmp	r3, r4
 80031c6:	6025      	str	r5, [r4, #0]
 80031c8:	bf18      	it	ne
 80031ca:	6059      	strne	r1, [r3, #4]
 80031cc:	6863      	ldr	r3, [r4, #4]
 80031ce:	bf08      	it	eq
 80031d0:	f8c8 1000 	streq.w	r1, [r8]
 80031d4:	5162      	str	r2, [r4, r5]
 80031d6:	604b      	str	r3, [r1, #4]
 80031d8:	4638      	mov	r0, r7
 80031da:	f104 060b 	add.w	r6, r4, #11
 80031de:	f000 f829 	bl	8003234 <__malloc_unlock>
 80031e2:	f026 0607 	bic.w	r6, r6, #7
 80031e6:	1d23      	adds	r3, r4, #4
 80031e8:	1af2      	subs	r2, r6, r3
 80031ea:	d0ae      	beq.n	800314a <_malloc_r+0x22>
 80031ec:	1b9b      	subs	r3, r3, r6
 80031ee:	50a3      	str	r3, [r4, r2]
 80031f0:	e7ab      	b.n	800314a <_malloc_r+0x22>
 80031f2:	42a3      	cmp	r3, r4
 80031f4:	6862      	ldr	r2, [r4, #4]
 80031f6:	d1dd      	bne.n	80031b4 <_malloc_r+0x8c>
 80031f8:	f8c8 2000 	str.w	r2, [r8]
 80031fc:	e7ec      	b.n	80031d8 <_malloc_r+0xb0>
 80031fe:	4623      	mov	r3, r4
 8003200:	6864      	ldr	r4, [r4, #4]
 8003202:	e7ac      	b.n	800315e <_malloc_r+0x36>
 8003204:	4634      	mov	r4, r6
 8003206:	6876      	ldr	r6, [r6, #4]
 8003208:	e7b4      	b.n	8003174 <_malloc_r+0x4c>
 800320a:	4613      	mov	r3, r2
 800320c:	e7cc      	b.n	80031a8 <_malloc_r+0x80>
 800320e:	230c      	movs	r3, #12
 8003210:	4638      	mov	r0, r7
 8003212:	603b      	str	r3, [r7, #0]
 8003214:	f000 f80e 	bl	8003234 <__malloc_unlock>
 8003218:	e797      	b.n	800314a <_malloc_r+0x22>
 800321a:	6025      	str	r5, [r4, #0]
 800321c:	e7dc      	b.n	80031d8 <_malloc_r+0xb0>
 800321e:	605b      	str	r3, [r3, #4]
 8003220:	deff      	udf	#255	; 0xff
 8003222:	bf00      	nop
 8003224:	20000364 	.word	0x20000364

08003228 <__malloc_lock>:
 8003228:	4801      	ldr	r0, [pc, #4]	; (8003230 <__malloc_lock+0x8>)
 800322a:	f7ff bf05 	b.w	8003038 <__retarget_lock_acquire_recursive>
 800322e:	bf00      	nop
 8003230:	20000360 	.word	0x20000360

08003234 <__malloc_unlock>:
 8003234:	4801      	ldr	r0, [pc, #4]	; (800323c <__malloc_unlock+0x8>)
 8003236:	f7ff bf00 	b.w	800303a <__retarget_lock_release_recursive>
 800323a:	bf00      	nop
 800323c:	20000360 	.word	0x20000360

08003240 <__ssputs_r>:
 8003240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003244:	461f      	mov	r7, r3
 8003246:	688e      	ldr	r6, [r1, #8]
 8003248:	4682      	mov	sl, r0
 800324a:	42be      	cmp	r6, r7
 800324c:	460c      	mov	r4, r1
 800324e:	4690      	mov	r8, r2
 8003250:	680b      	ldr	r3, [r1, #0]
 8003252:	d82c      	bhi.n	80032ae <__ssputs_r+0x6e>
 8003254:	898a      	ldrh	r2, [r1, #12]
 8003256:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800325a:	d026      	beq.n	80032aa <__ssputs_r+0x6a>
 800325c:	6965      	ldr	r5, [r4, #20]
 800325e:	6909      	ldr	r1, [r1, #16]
 8003260:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003264:	eba3 0901 	sub.w	r9, r3, r1
 8003268:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800326c:	1c7b      	adds	r3, r7, #1
 800326e:	444b      	add	r3, r9
 8003270:	106d      	asrs	r5, r5, #1
 8003272:	429d      	cmp	r5, r3
 8003274:	bf38      	it	cc
 8003276:	461d      	movcc	r5, r3
 8003278:	0553      	lsls	r3, r2, #21
 800327a:	d527      	bpl.n	80032cc <__ssputs_r+0x8c>
 800327c:	4629      	mov	r1, r5
 800327e:	f7ff ff53 	bl	8003128 <_malloc_r>
 8003282:	4606      	mov	r6, r0
 8003284:	b360      	cbz	r0, 80032e0 <__ssputs_r+0xa0>
 8003286:	464a      	mov	r2, r9
 8003288:	6921      	ldr	r1, [r4, #16]
 800328a:	f7ff fed7 	bl	800303c <memcpy>
 800328e:	89a3      	ldrh	r3, [r4, #12]
 8003290:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003298:	81a3      	strh	r3, [r4, #12]
 800329a:	6126      	str	r6, [r4, #16]
 800329c:	444e      	add	r6, r9
 800329e:	6026      	str	r6, [r4, #0]
 80032a0:	463e      	mov	r6, r7
 80032a2:	6165      	str	r5, [r4, #20]
 80032a4:	eba5 0509 	sub.w	r5, r5, r9
 80032a8:	60a5      	str	r5, [r4, #8]
 80032aa:	42be      	cmp	r6, r7
 80032ac:	d900      	bls.n	80032b0 <__ssputs_r+0x70>
 80032ae:	463e      	mov	r6, r7
 80032b0:	4632      	mov	r2, r6
 80032b2:	4641      	mov	r1, r8
 80032b4:	6820      	ldr	r0, [r4, #0]
 80032b6:	f000 faaf 	bl	8003818 <memmove>
 80032ba:	2000      	movs	r0, #0
 80032bc:	68a3      	ldr	r3, [r4, #8]
 80032be:	1b9b      	subs	r3, r3, r6
 80032c0:	60a3      	str	r3, [r4, #8]
 80032c2:	6823      	ldr	r3, [r4, #0]
 80032c4:	4433      	add	r3, r6
 80032c6:	6023      	str	r3, [r4, #0]
 80032c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032cc:	462a      	mov	r2, r5
 80032ce:	f000 fadb 	bl	8003888 <_realloc_r>
 80032d2:	4606      	mov	r6, r0
 80032d4:	2800      	cmp	r0, #0
 80032d6:	d1e0      	bne.n	800329a <__ssputs_r+0x5a>
 80032d8:	4650      	mov	r0, sl
 80032da:	6921      	ldr	r1, [r4, #16]
 80032dc:	f7ff febc 	bl	8003058 <_free_r>
 80032e0:	230c      	movs	r3, #12
 80032e2:	f8ca 3000 	str.w	r3, [sl]
 80032e6:	89a3      	ldrh	r3, [r4, #12]
 80032e8:	f04f 30ff 	mov.w	r0, #4294967295
 80032ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032f0:	81a3      	strh	r3, [r4, #12]
 80032f2:	e7e9      	b.n	80032c8 <__ssputs_r+0x88>

080032f4 <_svfiprintf_r>:
 80032f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032f8:	4698      	mov	r8, r3
 80032fa:	898b      	ldrh	r3, [r1, #12]
 80032fc:	4607      	mov	r7, r0
 80032fe:	061b      	lsls	r3, r3, #24
 8003300:	460d      	mov	r5, r1
 8003302:	4614      	mov	r4, r2
 8003304:	b09d      	sub	sp, #116	; 0x74
 8003306:	d50e      	bpl.n	8003326 <_svfiprintf_r+0x32>
 8003308:	690b      	ldr	r3, [r1, #16]
 800330a:	b963      	cbnz	r3, 8003326 <_svfiprintf_r+0x32>
 800330c:	2140      	movs	r1, #64	; 0x40
 800330e:	f7ff ff0b 	bl	8003128 <_malloc_r>
 8003312:	6028      	str	r0, [r5, #0]
 8003314:	6128      	str	r0, [r5, #16]
 8003316:	b920      	cbnz	r0, 8003322 <_svfiprintf_r+0x2e>
 8003318:	230c      	movs	r3, #12
 800331a:	603b      	str	r3, [r7, #0]
 800331c:	f04f 30ff 	mov.w	r0, #4294967295
 8003320:	e0d0      	b.n	80034c4 <_svfiprintf_r+0x1d0>
 8003322:	2340      	movs	r3, #64	; 0x40
 8003324:	616b      	str	r3, [r5, #20]
 8003326:	2300      	movs	r3, #0
 8003328:	9309      	str	r3, [sp, #36]	; 0x24
 800332a:	2320      	movs	r3, #32
 800332c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003330:	2330      	movs	r3, #48	; 0x30
 8003332:	f04f 0901 	mov.w	r9, #1
 8003336:	f8cd 800c 	str.w	r8, [sp, #12]
 800333a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80034dc <_svfiprintf_r+0x1e8>
 800333e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003342:	4623      	mov	r3, r4
 8003344:	469a      	mov	sl, r3
 8003346:	f813 2b01 	ldrb.w	r2, [r3], #1
 800334a:	b10a      	cbz	r2, 8003350 <_svfiprintf_r+0x5c>
 800334c:	2a25      	cmp	r2, #37	; 0x25
 800334e:	d1f9      	bne.n	8003344 <_svfiprintf_r+0x50>
 8003350:	ebba 0b04 	subs.w	fp, sl, r4
 8003354:	d00b      	beq.n	800336e <_svfiprintf_r+0x7a>
 8003356:	465b      	mov	r3, fp
 8003358:	4622      	mov	r2, r4
 800335a:	4629      	mov	r1, r5
 800335c:	4638      	mov	r0, r7
 800335e:	f7ff ff6f 	bl	8003240 <__ssputs_r>
 8003362:	3001      	adds	r0, #1
 8003364:	f000 80a9 	beq.w	80034ba <_svfiprintf_r+0x1c6>
 8003368:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800336a:	445a      	add	r2, fp
 800336c:	9209      	str	r2, [sp, #36]	; 0x24
 800336e:	f89a 3000 	ldrb.w	r3, [sl]
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 80a1 	beq.w	80034ba <_svfiprintf_r+0x1c6>
 8003378:	2300      	movs	r3, #0
 800337a:	f04f 32ff 	mov.w	r2, #4294967295
 800337e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003382:	f10a 0a01 	add.w	sl, sl, #1
 8003386:	9304      	str	r3, [sp, #16]
 8003388:	9307      	str	r3, [sp, #28]
 800338a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800338e:	931a      	str	r3, [sp, #104]	; 0x68
 8003390:	4654      	mov	r4, sl
 8003392:	2205      	movs	r2, #5
 8003394:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003398:	4850      	ldr	r0, [pc, #320]	; (80034dc <_svfiprintf_r+0x1e8>)
 800339a:	f000 fa67 	bl	800386c <memchr>
 800339e:	9a04      	ldr	r2, [sp, #16]
 80033a0:	b9d8      	cbnz	r0, 80033da <_svfiprintf_r+0xe6>
 80033a2:	06d0      	lsls	r0, r2, #27
 80033a4:	bf44      	itt	mi
 80033a6:	2320      	movmi	r3, #32
 80033a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80033ac:	0711      	lsls	r1, r2, #28
 80033ae:	bf44      	itt	mi
 80033b0:	232b      	movmi	r3, #43	; 0x2b
 80033b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80033b6:	f89a 3000 	ldrb.w	r3, [sl]
 80033ba:	2b2a      	cmp	r3, #42	; 0x2a
 80033bc:	d015      	beq.n	80033ea <_svfiprintf_r+0xf6>
 80033be:	4654      	mov	r4, sl
 80033c0:	2000      	movs	r0, #0
 80033c2:	f04f 0c0a 	mov.w	ip, #10
 80033c6:	9a07      	ldr	r2, [sp, #28]
 80033c8:	4621      	mov	r1, r4
 80033ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80033ce:	3b30      	subs	r3, #48	; 0x30
 80033d0:	2b09      	cmp	r3, #9
 80033d2:	d94d      	bls.n	8003470 <_svfiprintf_r+0x17c>
 80033d4:	b1b0      	cbz	r0, 8003404 <_svfiprintf_r+0x110>
 80033d6:	9207      	str	r2, [sp, #28]
 80033d8:	e014      	b.n	8003404 <_svfiprintf_r+0x110>
 80033da:	eba0 0308 	sub.w	r3, r0, r8
 80033de:	fa09 f303 	lsl.w	r3, r9, r3
 80033e2:	4313      	orrs	r3, r2
 80033e4:	46a2      	mov	sl, r4
 80033e6:	9304      	str	r3, [sp, #16]
 80033e8:	e7d2      	b.n	8003390 <_svfiprintf_r+0x9c>
 80033ea:	9b03      	ldr	r3, [sp, #12]
 80033ec:	1d19      	adds	r1, r3, #4
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	9103      	str	r1, [sp, #12]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	bfbb      	ittet	lt
 80033f6:	425b      	neglt	r3, r3
 80033f8:	f042 0202 	orrlt.w	r2, r2, #2
 80033fc:	9307      	strge	r3, [sp, #28]
 80033fe:	9307      	strlt	r3, [sp, #28]
 8003400:	bfb8      	it	lt
 8003402:	9204      	strlt	r2, [sp, #16]
 8003404:	7823      	ldrb	r3, [r4, #0]
 8003406:	2b2e      	cmp	r3, #46	; 0x2e
 8003408:	d10c      	bne.n	8003424 <_svfiprintf_r+0x130>
 800340a:	7863      	ldrb	r3, [r4, #1]
 800340c:	2b2a      	cmp	r3, #42	; 0x2a
 800340e:	d134      	bne.n	800347a <_svfiprintf_r+0x186>
 8003410:	9b03      	ldr	r3, [sp, #12]
 8003412:	3402      	adds	r4, #2
 8003414:	1d1a      	adds	r2, r3, #4
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	9203      	str	r2, [sp, #12]
 800341a:	2b00      	cmp	r3, #0
 800341c:	bfb8      	it	lt
 800341e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003422:	9305      	str	r3, [sp, #20]
 8003424:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80034e0 <_svfiprintf_r+0x1ec>
 8003428:	2203      	movs	r2, #3
 800342a:	4650      	mov	r0, sl
 800342c:	7821      	ldrb	r1, [r4, #0]
 800342e:	f000 fa1d 	bl	800386c <memchr>
 8003432:	b138      	cbz	r0, 8003444 <_svfiprintf_r+0x150>
 8003434:	2240      	movs	r2, #64	; 0x40
 8003436:	9b04      	ldr	r3, [sp, #16]
 8003438:	eba0 000a 	sub.w	r0, r0, sl
 800343c:	4082      	lsls	r2, r0
 800343e:	4313      	orrs	r3, r2
 8003440:	3401      	adds	r4, #1
 8003442:	9304      	str	r3, [sp, #16]
 8003444:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003448:	2206      	movs	r2, #6
 800344a:	4826      	ldr	r0, [pc, #152]	; (80034e4 <_svfiprintf_r+0x1f0>)
 800344c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003450:	f000 fa0c 	bl	800386c <memchr>
 8003454:	2800      	cmp	r0, #0
 8003456:	d038      	beq.n	80034ca <_svfiprintf_r+0x1d6>
 8003458:	4b23      	ldr	r3, [pc, #140]	; (80034e8 <_svfiprintf_r+0x1f4>)
 800345a:	bb1b      	cbnz	r3, 80034a4 <_svfiprintf_r+0x1b0>
 800345c:	9b03      	ldr	r3, [sp, #12]
 800345e:	3307      	adds	r3, #7
 8003460:	f023 0307 	bic.w	r3, r3, #7
 8003464:	3308      	adds	r3, #8
 8003466:	9303      	str	r3, [sp, #12]
 8003468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800346a:	4433      	add	r3, r6
 800346c:	9309      	str	r3, [sp, #36]	; 0x24
 800346e:	e768      	b.n	8003342 <_svfiprintf_r+0x4e>
 8003470:	460c      	mov	r4, r1
 8003472:	2001      	movs	r0, #1
 8003474:	fb0c 3202 	mla	r2, ip, r2, r3
 8003478:	e7a6      	b.n	80033c8 <_svfiprintf_r+0xd4>
 800347a:	2300      	movs	r3, #0
 800347c:	f04f 0c0a 	mov.w	ip, #10
 8003480:	4619      	mov	r1, r3
 8003482:	3401      	adds	r4, #1
 8003484:	9305      	str	r3, [sp, #20]
 8003486:	4620      	mov	r0, r4
 8003488:	f810 2b01 	ldrb.w	r2, [r0], #1
 800348c:	3a30      	subs	r2, #48	; 0x30
 800348e:	2a09      	cmp	r2, #9
 8003490:	d903      	bls.n	800349a <_svfiprintf_r+0x1a6>
 8003492:	2b00      	cmp	r3, #0
 8003494:	d0c6      	beq.n	8003424 <_svfiprintf_r+0x130>
 8003496:	9105      	str	r1, [sp, #20]
 8003498:	e7c4      	b.n	8003424 <_svfiprintf_r+0x130>
 800349a:	4604      	mov	r4, r0
 800349c:	2301      	movs	r3, #1
 800349e:	fb0c 2101 	mla	r1, ip, r1, r2
 80034a2:	e7f0      	b.n	8003486 <_svfiprintf_r+0x192>
 80034a4:	ab03      	add	r3, sp, #12
 80034a6:	9300      	str	r3, [sp, #0]
 80034a8:	462a      	mov	r2, r5
 80034aa:	4638      	mov	r0, r7
 80034ac:	4b0f      	ldr	r3, [pc, #60]	; (80034ec <_svfiprintf_r+0x1f8>)
 80034ae:	a904      	add	r1, sp, #16
 80034b0:	f3af 8000 	nop.w
 80034b4:	1c42      	adds	r2, r0, #1
 80034b6:	4606      	mov	r6, r0
 80034b8:	d1d6      	bne.n	8003468 <_svfiprintf_r+0x174>
 80034ba:	89ab      	ldrh	r3, [r5, #12]
 80034bc:	065b      	lsls	r3, r3, #25
 80034be:	f53f af2d 	bmi.w	800331c <_svfiprintf_r+0x28>
 80034c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80034c4:	b01d      	add	sp, #116	; 0x74
 80034c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034ca:	ab03      	add	r3, sp, #12
 80034cc:	9300      	str	r3, [sp, #0]
 80034ce:	462a      	mov	r2, r5
 80034d0:	4638      	mov	r0, r7
 80034d2:	4b06      	ldr	r3, [pc, #24]	; (80034ec <_svfiprintf_r+0x1f8>)
 80034d4:	a904      	add	r1, sp, #16
 80034d6:	f000 f87d 	bl	80035d4 <_printf_i>
 80034da:	e7eb      	b.n	80034b4 <_svfiprintf_r+0x1c0>
 80034dc:	08004033 	.word	0x08004033
 80034e0:	08004039 	.word	0x08004039
 80034e4:	0800403d 	.word	0x0800403d
 80034e8:	00000000 	.word	0x00000000
 80034ec:	08003241 	.word	0x08003241

080034f0 <_printf_common>:
 80034f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034f4:	4616      	mov	r6, r2
 80034f6:	4699      	mov	r9, r3
 80034f8:	688a      	ldr	r2, [r1, #8]
 80034fa:	690b      	ldr	r3, [r1, #16]
 80034fc:	4607      	mov	r7, r0
 80034fe:	4293      	cmp	r3, r2
 8003500:	bfb8      	it	lt
 8003502:	4613      	movlt	r3, r2
 8003504:	6033      	str	r3, [r6, #0]
 8003506:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800350a:	460c      	mov	r4, r1
 800350c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003510:	b10a      	cbz	r2, 8003516 <_printf_common+0x26>
 8003512:	3301      	adds	r3, #1
 8003514:	6033      	str	r3, [r6, #0]
 8003516:	6823      	ldr	r3, [r4, #0]
 8003518:	0699      	lsls	r1, r3, #26
 800351a:	bf42      	ittt	mi
 800351c:	6833      	ldrmi	r3, [r6, #0]
 800351e:	3302      	addmi	r3, #2
 8003520:	6033      	strmi	r3, [r6, #0]
 8003522:	6825      	ldr	r5, [r4, #0]
 8003524:	f015 0506 	ands.w	r5, r5, #6
 8003528:	d106      	bne.n	8003538 <_printf_common+0x48>
 800352a:	f104 0a19 	add.w	sl, r4, #25
 800352e:	68e3      	ldr	r3, [r4, #12]
 8003530:	6832      	ldr	r2, [r6, #0]
 8003532:	1a9b      	subs	r3, r3, r2
 8003534:	42ab      	cmp	r3, r5
 8003536:	dc2b      	bgt.n	8003590 <_printf_common+0xa0>
 8003538:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800353c:	1e13      	subs	r3, r2, #0
 800353e:	6822      	ldr	r2, [r4, #0]
 8003540:	bf18      	it	ne
 8003542:	2301      	movne	r3, #1
 8003544:	0692      	lsls	r2, r2, #26
 8003546:	d430      	bmi.n	80035aa <_printf_common+0xba>
 8003548:	4649      	mov	r1, r9
 800354a:	4638      	mov	r0, r7
 800354c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003550:	47c0      	blx	r8
 8003552:	3001      	adds	r0, #1
 8003554:	d023      	beq.n	800359e <_printf_common+0xae>
 8003556:	6823      	ldr	r3, [r4, #0]
 8003558:	6922      	ldr	r2, [r4, #16]
 800355a:	f003 0306 	and.w	r3, r3, #6
 800355e:	2b04      	cmp	r3, #4
 8003560:	bf14      	ite	ne
 8003562:	2500      	movne	r5, #0
 8003564:	6833      	ldreq	r3, [r6, #0]
 8003566:	f04f 0600 	mov.w	r6, #0
 800356a:	bf08      	it	eq
 800356c:	68e5      	ldreq	r5, [r4, #12]
 800356e:	f104 041a 	add.w	r4, r4, #26
 8003572:	bf08      	it	eq
 8003574:	1aed      	subeq	r5, r5, r3
 8003576:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800357a:	bf08      	it	eq
 800357c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003580:	4293      	cmp	r3, r2
 8003582:	bfc4      	itt	gt
 8003584:	1a9b      	subgt	r3, r3, r2
 8003586:	18ed      	addgt	r5, r5, r3
 8003588:	42b5      	cmp	r5, r6
 800358a:	d11a      	bne.n	80035c2 <_printf_common+0xd2>
 800358c:	2000      	movs	r0, #0
 800358e:	e008      	b.n	80035a2 <_printf_common+0xb2>
 8003590:	2301      	movs	r3, #1
 8003592:	4652      	mov	r2, sl
 8003594:	4649      	mov	r1, r9
 8003596:	4638      	mov	r0, r7
 8003598:	47c0      	blx	r8
 800359a:	3001      	adds	r0, #1
 800359c:	d103      	bne.n	80035a6 <_printf_common+0xb6>
 800359e:	f04f 30ff 	mov.w	r0, #4294967295
 80035a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035a6:	3501      	adds	r5, #1
 80035a8:	e7c1      	b.n	800352e <_printf_common+0x3e>
 80035aa:	2030      	movs	r0, #48	; 0x30
 80035ac:	18e1      	adds	r1, r4, r3
 80035ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80035b2:	1c5a      	adds	r2, r3, #1
 80035b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80035b8:	4422      	add	r2, r4
 80035ba:	3302      	adds	r3, #2
 80035bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80035c0:	e7c2      	b.n	8003548 <_printf_common+0x58>
 80035c2:	2301      	movs	r3, #1
 80035c4:	4622      	mov	r2, r4
 80035c6:	4649      	mov	r1, r9
 80035c8:	4638      	mov	r0, r7
 80035ca:	47c0      	blx	r8
 80035cc:	3001      	adds	r0, #1
 80035ce:	d0e6      	beq.n	800359e <_printf_common+0xae>
 80035d0:	3601      	adds	r6, #1
 80035d2:	e7d9      	b.n	8003588 <_printf_common+0x98>

080035d4 <_printf_i>:
 80035d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80035d8:	7e0f      	ldrb	r7, [r1, #24]
 80035da:	4691      	mov	r9, r2
 80035dc:	2f78      	cmp	r7, #120	; 0x78
 80035de:	4680      	mov	r8, r0
 80035e0:	460c      	mov	r4, r1
 80035e2:	469a      	mov	sl, r3
 80035e4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80035e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80035ea:	d807      	bhi.n	80035fc <_printf_i+0x28>
 80035ec:	2f62      	cmp	r7, #98	; 0x62
 80035ee:	d80a      	bhi.n	8003606 <_printf_i+0x32>
 80035f0:	2f00      	cmp	r7, #0
 80035f2:	f000 80d5 	beq.w	80037a0 <_printf_i+0x1cc>
 80035f6:	2f58      	cmp	r7, #88	; 0x58
 80035f8:	f000 80c1 	beq.w	800377e <_printf_i+0x1aa>
 80035fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003600:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003604:	e03a      	b.n	800367c <_printf_i+0xa8>
 8003606:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800360a:	2b15      	cmp	r3, #21
 800360c:	d8f6      	bhi.n	80035fc <_printf_i+0x28>
 800360e:	a101      	add	r1, pc, #4	; (adr r1, 8003614 <_printf_i+0x40>)
 8003610:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003614:	0800366d 	.word	0x0800366d
 8003618:	08003681 	.word	0x08003681
 800361c:	080035fd 	.word	0x080035fd
 8003620:	080035fd 	.word	0x080035fd
 8003624:	080035fd 	.word	0x080035fd
 8003628:	080035fd 	.word	0x080035fd
 800362c:	08003681 	.word	0x08003681
 8003630:	080035fd 	.word	0x080035fd
 8003634:	080035fd 	.word	0x080035fd
 8003638:	080035fd 	.word	0x080035fd
 800363c:	080035fd 	.word	0x080035fd
 8003640:	08003787 	.word	0x08003787
 8003644:	080036ad 	.word	0x080036ad
 8003648:	08003741 	.word	0x08003741
 800364c:	080035fd 	.word	0x080035fd
 8003650:	080035fd 	.word	0x080035fd
 8003654:	080037a9 	.word	0x080037a9
 8003658:	080035fd 	.word	0x080035fd
 800365c:	080036ad 	.word	0x080036ad
 8003660:	080035fd 	.word	0x080035fd
 8003664:	080035fd 	.word	0x080035fd
 8003668:	08003749 	.word	0x08003749
 800366c:	682b      	ldr	r3, [r5, #0]
 800366e:	1d1a      	adds	r2, r3, #4
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	602a      	str	r2, [r5, #0]
 8003674:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003678:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800367c:	2301      	movs	r3, #1
 800367e:	e0a0      	b.n	80037c2 <_printf_i+0x1ee>
 8003680:	6820      	ldr	r0, [r4, #0]
 8003682:	682b      	ldr	r3, [r5, #0]
 8003684:	0607      	lsls	r7, r0, #24
 8003686:	f103 0104 	add.w	r1, r3, #4
 800368a:	6029      	str	r1, [r5, #0]
 800368c:	d501      	bpl.n	8003692 <_printf_i+0xbe>
 800368e:	681e      	ldr	r6, [r3, #0]
 8003690:	e003      	b.n	800369a <_printf_i+0xc6>
 8003692:	0646      	lsls	r6, r0, #25
 8003694:	d5fb      	bpl.n	800368e <_printf_i+0xba>
 8003696:	f9b3 6000 	ldrsh.w	r6, [r3]
 800369a:	2e00      	cmp	r6, #0
 800369c:	da03      	bge.n	80036a6 <_printf_i+0xd2>
 800369e:	232d      	movs	r3, #45	; 0x2d
 80036a0:	4276      	negs	r6, r6
 80036a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036a6:	230a      	movs	r3, #10
 80036a8:	4859      	ldr	r0, [pc, #356]	; (8003810 <_printf_i+0x23c>)
 80036aa:	e012      	b.n	80036d2 <_printf_i+0xfe>
 80036ac:	682b      	ldr	r3, [r5, #0]
 80036ae:	6820      	ldr	r0, [r4, #0]
 80036b0:	1d19      	adds	r1, r3, #4
 80036b2:	6029      	str	r1, [r5, #0]
 80036b4:	0605      	lsls	r5, r0, #24
 80036b6:	d501      	bpl.n	80036bc <_printf_i+0xe8>
 80036b8:	681e      	ldr	r6, [r3, #0]
 80036ba:	e002      	b.n	80036c2 <_printf_i+0xee>
 80036bc:	0641      	lsls	r1, r0, #25
 80036be:	d5fb      	bpl.n	80036b8 <_printf_i+0xe4>
 80036c0:	881e      	ldrh	r6, [r3, #0]
 80036c2:	2f6f      	cmp	r7, #111	; 0x6f
 80036c4:	bf0c      	ite	eq
 80036c6:	2308      	moveq	r3, #8
 80036c8:	230a      	movne	r3, #10
 80036ca:	4851      	ldr	r0, [pc, #324]	; (8003810 <_printf_i+0x23c>)
 80036cc:	2100      	movs	r1, #0
 80036ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80036d2:	6865      	ldr	r5, [r4, #4]
 80036d4:	2d00      	cmp	r5, #0
 80036d6:	bfa8      	it	ge
 80036d8:	6821      	ldrge	r1, [r4, #0]
 80036da:	60a5      	str	r5, [r4, #8]
 80036dc:	bfa4      	itt	ge
 80036de:	f021 0104 	bicge.w	r1, r1, #4
 80036e2:	6021      	strge	r1, [r4, #0]
 80036e4:	b90e      	cbnz	r6, 80036ea <_printf_i+0x116>
 80036e6:	2d00      	cmp	r5, #0
 80036e8:	d04b      	beq.n	8003782 <_printf_i+0x1ae>
 80036ea:	4615      	mov	r5, r2
 80036ec:	fbb6 f1f3 	udiv	r1, r6, r3
 80036f0:	fb03 6711 	mls	r7, r3, r1, r6
 80036f4:	5dc7      	ldrb	r7, [r0, r7]
 80036f6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80036fa:	4637      	mov	r7, r6
 80036fc:	42bb      	cmp	r3, r7
 80036fe:	460e      	mov	r6, r1
 8003700:	d9f4      	bls.n	80036ec <_printf_i+0x118>
 8003702:	2b08      	cmp	r3, #8
 8003704:	d10b      	bne.n	800371e <_printf_i+0x14a>
 8003706:	6823      	ldr	r3, [r4, #0]
 8003708:	07de      	lsls	r6, r3, #31
 800370a:	d508      	bpl.n	800371e <_printf_i+0x14a>
 800370c:	6923      	ldr	r3, [r4, #16]
 800370e:	6861      	ldr	r1, [r4, #4]
 8003710:	4299      	cmp	r1, r3
 8003712:	bfde      	ittt	le
 8003714:	2330      	movle	r3, #48	; 0x30
 8003716:	f805 3c01 	strble.w	r3, [r5, #-1]
 800371a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800371e:	1b52      	subs	r2, r2, r5
 8003720:	6122      	str	r2, [r4, #16]
 8003722:	464b      	mov	r3, r9
 8003724:	4621      	mov	r1, r4
 8003726:	4640      	mov	r0, r8
 8003728:	f8cd a000 	str.w	sl, [sp]
 800372c:	aa03      	add	r2, sp, #12
 800372e:	f7ff fedf 	bl	80034f0 <_printf_common>
 8003732:	3001      	adds	r0, #1
 8003734:	d14a      	bne.n	80037cc <_printf_i+0x1f8>
 8003736:	f04f 30ff 	mov.w	r0, #4294967295
 800373a:	b004      	add	sp, #16
 800373c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003740:	6823      	ldr	r3, [r4, #0]
 8003742:	f043 0320 	orr.w	r3, r3, #32
 8003746:	6023      	str	r3, [r4, #0]
 8003748:	2778      	movs	r7, #120	; 0x78
 800374a:	4832      	ldr	r0, [pc, #200]	; (8003814 <_printf_i+0x240>)
 800374c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003750:	6823      	ldr	r3, [r4, #0]
 8003752:	6829      	ldr	r1, [r5, #0]
 8003754:	061f      	lsls	r7, r3, #24
 8003756:	f851 6b04 	ldr.w	r6, [r1], #4
 800375a:	d402      	bmi.n	8003762 <_printf_i+0x18e>
 800375c:	065f      	lsls	r7, r3, #25
 800375e:	bf48      	it	mi
 8003760:	b2b6      	uxthmi	r6, r6
 8003762:	07df      	lsls	r7, r3, #31
 8003764:	bf48      	it	mi
 8003766:	f043 0320 	orrmi.w	r3, r3, #32
 800376a:	6029      	str	r1, [r5, #0]
 800376c:	bf48      	it	mi
 800376e:	6023      	strmi	r3, [r4, #0]
 8003770:	b91e      	cbnz	r6, 800377a <_printf_i+0x1a6>
 8003772:	6823      	ldr	r3, [r4, #0]
 8003774:	f023 0320 	bic.w	r3, r3, #32
 8003778:	6023      	str	r3, [r4, #0]
 800377a:	2310      	movs	r3, #16
 800377c:	e7a6      	b.n	80036cc <_printf_i+0xf8>
 800377e:	4824      	ldr	r0, [pc, #144]	; (8003810 <_printf_i+0x23c>)
 8003780:	e7e4      	b.n	800374c <_printf_i+0x178>
 8003782:	4615      	mov	r5, r2
 8003784:	e7bd      	b.n	8003702 <_printf_i+0x12e>
 8003786:	682b      	ldr	r3, [r5, #0]
 8003788:	6826      	ldr	r6, [r4, #0]
 800378a:	1d18      	adds	r0, r3, #4
 800378c:	6961      	ldr	r1, [r4, #20]
 800378e:	6028      	str	r0, [r5, #0]
 8003790:	0635      	lsls	r5, r6, #24
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	d501      	bpl.n	800379a <_printf_i+0x1c6>
 8003796:	6019      	str	r1, [r3, #0]
 8003798:	e002      	b.n	80037a0 <_printf_i+0x1cc>
 800379a:	0670      	lsls	r0, r6, #25
 800379c:	d5fb      	bpl.n	8003796 <_printf_i+0x1c2>
 800379e:	8019      	strh	r1, [r3, #0]
 80037a0:	2300      	movs	r3, #0
 80037a2:	4615      	mov	r5, r2
 80037a4:	6123      	str	r3, [r4, #16]
 80037a6:	e7bc      	b.n	8003722 <_printf_i+0x14e>
 80037a8:	682b      	ldr	r3, [r5, #0]
 80037aa:	2100      	movs	r1, #0
 80037ac:	1d1a      	adds	r2, r3, #4
 80037ae:	602a      	str	r2, [r5, #0]
 80037b0:	681d      	ldr	r5, [r3, #0]
 80037b2:	6862      	ldr	r2, [r4, #4]
 80037b4:	4628      	mov	r0, r5
 80037b6:	f000 f859 	bl	800386c <memchr>
 80037ba:	b108      	cbz	r0, 80037c0 <_printf_i+0x1ec>
 80037bc:	1b40      	subs	r0, r0, r5
 80037be:	6060      	str	r0, [r4, #4]
 80037c0:	6863      	ldr	r3, [r4, #4]
 80037c2:	6123      	str	r3, [r4, #16]
 80037c4:	2300      	movs	r3, #0
 80037c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037ca:	e7aa      	b.n	8003722 <_printf_i+0x14e>
 80037cc:	462a      	mov	r2, r5
 80037ce:	4649      	mov	r1, r9
 80037d0:	4640      	mov	r0, r8
 80037d2:	6923      	ldr	r3, [r4, #16]
 80037d4:	47d0      	blx	sl
 80037d6:	3001      	adds	r0, #1
 80037d8:	d0ad      	beq.n	8003736 <_printf_i+0x162>
 80037da:	6823      	ldr	r3, [r4, #0]
 80037dc:	079b      	lsls	r3, r3, #30
 80037de:	d413      	bmi.n	8003808 <_printf_i+0x234>
 80037e0:	68e0      	ldr	r0, [r4, #12]
 80037e2:	9b03      	ldr	r3, [sp, #12]
 80037e4:	4298      	cmp	r0, r3
 80037e6:	bfb8      	it	lt
 80037e8:	4618      	movlt	r0, r3
 80037ea:	e7a6      	b.n	800373a <_printf_i+0x166>
 80037ec:	2301      	movs	r3, #1
 80037ee:	4632      	mov	r2, r6
 80037f0:	4649      	mov	r1, r9
 80037f2:	4640      	mov	r0, r8
 80037f4:	47d0      	blx	sl
 80037f6:	3001      	adds	r0, #1
 80037f8:	d09d      	beq.n	8003736 <_printf_i+0x162>
 80037fa:	3501      	adds	r5, #1
 80037fc:	68e3      	ldr	r3, [r4, #12]
 80037fe:	9903      	ldr	r1, [sp, #12]
 8003800:	1a5b      	subs	r3, r3, r1
 8003802:	42ab      	cmp	r3, r5
 8003804:	dcf2      	bgt.n	80037ec <_printf_i+0x218>
 8003806:	e7eb      	b.n	80037e0 <_printf_i+0x20c>
 8003808:	2500      	movs	r5, #0
 800380a:	f104 0619 	add.w	r6, r4, #25
 800380e:	e7f5      	b.n	80037fc <_printf_i+0x228>
 8003810:	08004044 	.word	0x08004044
 8003814:	08004055 	.word	0x08004055

08003818 <memmove>:
 8003818:	4288      	cmp	r0, r1
 800381a:	b510      	push	{r4, lr}
 800381c:	eb01 0402 	add.w	r4, r1, r2
 8003820:	d902      	bls.n	8003828 <memmove+0x10>
 8003822:	4284      	cmp	r4, r0
 8003824:	4623      	mov	r3, r4
 8003826:	d807      	bhi.n	8003838 <memmove+0x20>
 8003828:	1e43      	subs	r3, r0, #1
 800382a:	42a1      	cmp	r1, r4
 800382c:	d008      	beq.n	8003840 <memmove+0x28>
 800382e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003832:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003836:	e7f8      	b.n	800382a <memmove+0x12>
 8003838:	4601      	mov	r1, r0
 800383a:	4402      	add	r2, r0
 800383c:	428a      	cmp	r2, r1
 800383e:	d100      	bne.n	8003842 <memmove+0x2a>
 8003840:	bd10      	pop	{r4, pc}
 8003842:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003846:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800384a:	e7f7      	b.n	800383c <memmove+0x24>

0800384c <_sbrk_r>:
 800384c:	b538      	push	{r3, r4, r5, lr}
 800384e:	2300      	movs	r3, #0
 8003850:	4d05      	ldr	r5, [pc, #20]	; (8003868 <_sbrk_r+0x1c>)
 8003852:	4604      	mov	r4, r0
 8003854:	4608      	mov	r0, r1
 8003856:	602b      	str	r3, [r5, #0]
 8003858:	f7fc fe36 	bl	80004c8 <_sbrk>
 800385c:	1c43      	adds	r3, r0, #1
 800385e:	d102      	bne.n	8003866 <_sbrk_r+0x1a>
 8003860:	682b      	ldr	r3, [r5, #0]
 8003862:	b103      	cbz	r3, 8003866 <_sbrk_r+0x1a>
 8003864:	6023      	str	r3, [r4, #0]
 8003866:	bd38      	pop	{r3, r4, r5, pc}
 8003868:	2000035c 	.word	0x2000035c

0800386c <memchr>:
 800386c:	4603      	mov	r3, r0
 800386e:	b510      	push	{r4, lr}
 8003870:	b2c9      	uxtb	r1, r1
 8003872:	4402      	add	r2, r0
 8003874:	4293      	cmp	r3, r2
 8003876:	4618      	mov	r0, r3
 8003878:	d101      	bne.n	800387e <memchr+0x12>
 800387a:	2000      	movs	r0, #0
 800387c:	e003      	b.n	8003886 <memchr+0x1a>
 800387e:	7804      	ldrb	r4, [r0, #0]
 8003880:	3301      	adds	r3, #1
 8003882:	428c      	cmp	r4, r1
 8003884:	d1f6      	bne.n	8003874 <memchr+0x8>
 8003886:	bd10      	pop	{r4, pc}

08003888 <_realloc_r>:
 8003888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800388c:	4680      	mov	r8, r0
 800388e:	4614      	mov	r4, r2
 8003890:	460e      	mov	r6, r1
 8003892:	b921      	cbnz	r1, 800389e <_realloc_r+0x16>
 8003894:	4611      	mov	r1, r2
 8003896:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800389a:	f7ff bc45 	b.w	8003128 <_malloc_r>
 800389e:	b92a      	cbnz	r2, 80038ac <_realloc_r+0x24>
 80038a0:	f7ff fbda 	bl	8003058 <_free_r>
 80038a4:	4625      	mov	r5, r4
 80038a6:	4628      	mov	r0, r5
 80038a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038ac:	f000 f81b 	bl	80038e6 <_malloc_usable_size_r>
 80038b0:	4284      	cmp	r4, r0
 80038b2:	4607      	mov	r7, r0
 80038b4:	d802      	bhi.n	80038bc <_realloc_r+0x34>
 80038b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80038ba:	d812      	bhi.n	80038e2 <_realloc_r+0x5a>
 80038bc:	4621      	mov	r1, r4
 80038be:	4640      	mov	r0, r8
 80038c0:	f7ff fc32 	bl	8003128 <_malloc_r>
 80038c4:	4605      	mov	r5, r0
 80038c6:	2800      	cmp	r0, #0
 80038c8:	d0ed      	beq.n	80038a6 <_realloc_r+0x1e>
 80038ca:	42bc      	cmp	r4, r7
 80038cc:	4622      	mov	r2, r4
 80038ce:	4631      	mov	r1, r6
 80038d0:	bf28      	it	cs
 80038d2:	463a      	movcs	r2, r7
 80038d4:	f7ff fbb2 	bl	800303c <memcpy>
 80038d8:	4631      	mov	r1, r6
 80038da:	4640      	mov	r0, r8
 80038dc:	f7ff fbbc 	bl	8003058 <_free_r>
 80038e0:	e7e1      	b.n	80038a6 <_realloc_r+0x1e>
 80038e2:	4635      	mov	r5, r6
 80038e4:	e7df      	b.n	80038a6 <_realloc_r+0x1e>

080038e6 <_malloc_usable_size_r>:
 80038e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038ea:	1f18      	subs	r0, r3, #4
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	bfbc      	itt	lt
 80038f0:	580b      	ldrlt	r3, [r1, r0]
 80038f2:	18c0      	addlt	r0, r0, r3
 80038f4:	4770      	bx	lr
	...

080038f8 <_init>:
 80038f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038fa:	bf00      	nop
 80038fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038fe:	bc08      	pop	{r3}
 8003900:	469e      	mov	lr, r3
 8003902:	4770      	bx	lr

08003904 <_fini>:
 8003904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003906:	bf00      	nop
 8003908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800390a:	bc08      	pop	{r3}
 800390c:	469e      	mov	lr, r3
 800390e:	4770      	bx	lr
