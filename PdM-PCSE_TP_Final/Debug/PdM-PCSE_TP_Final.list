
PdM-PCSE_TP_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d54  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e8  08002e60  08002e60  00012e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003448  08003448  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08003448  08003448  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003448  08003448  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003448  08003448  00013448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800344c  0800344c  0001344c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08003450  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  20000064  080034b4  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  080034b4  000202a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a498  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c46  00000000  00000000  0002a568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a00  00000000  00000000  0002c1b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007bd  00000000  00000000  0002cbb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017874  00000000  00000000  0002d36d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d9b0  00000000  00000000  00044be1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084b55  00000000  00000000  00052591  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002dbc  00000000  00000000  000d70e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000d9ea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e48 	.word	0x08002e48

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	08002e48 	.word	0x08002e48

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fe27 	bl	8000da4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f817 	bl	8000188 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f87f 	bl	800025c <MX_GPIO_Init>
  //MX_USART2_UART_Init();
  MX_I2C1_Init();
 800015e:	f000 f84f 	bl	8000200 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  uartInit();
 8000162:	f000 fd99 	bl	8000c98 <uartInit>
  debounceFSM_init();
 8000166:	f000 fa2d 	bl	80005c4 <debounceFSM_init>
  menuMEF_init();
 800016a:	f000 fb31 	bl	80007d0 <menuMEF_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //delayInit(&delayHandle, delays[0]);
  //uint8_t option = 0; // comenzar con la primer opcion de delay
  //uint8_t sendBuffer[32];
  action_t menuAction = NONE;
 800016e:	2300      	movs	r3, #0
 8000170:	71fb      	strb	r3, [r7, #7]


  while(1){

	  // checkear el estado del pulsador y actualizar el valor que lee readKey() >> deteccion flanco descendente
	  debounceFSM_update();
 8000172:	f000 fa37 	bl	80005e4 <debounceFSM_update>
	  menuAction = menuMEF_update();
 8000176:	f000 fb45 	bl	8000804 <menuMEF_update>
 800017a:	4603      	mov	r3, r0
 800017c:	71fb      	strb	r3, [r7, #7]
	  menuMEF_set_state(menuAction);
 800017e:	79fb      	ldrb	r3, [r7, #7]
 8000180:	4618      	mov	r0, r3
 8000182:	f000 fb91 	bl	80008a8 <menuMEF_set_state>
	  debounceFSM_update();
 8000186:	e7f4      	b.n	8000172 <main+0x26>

08000188 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b090      	sub	sp, #64	; 0x40
 800018c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800018e:	f107 0318 	add.w	r3, r7, #24
 8000192:	2228      	movs	r2, #40	; 0x28
 8000194:	2100      	movs	r1, #0
 8000196:	4618      	mov	r0, r3
 8000198:	f002 f9c4 	bl	8002524 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800019c:	1d3b      	adds	r3, r7, #4
 800019e:	2200      	movs	r2, #0
 80001a0:	601a      	str	r2, [r3, #0]
 80001a2:	605a      	str	r2, [r3, #4]
 80001a4:	609a      	str	r2, [r3, #8]
 80001a6:	60da      	str	r2, [r3, #12]
 80001a8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001aa:	2301      	movs	r3, #1
 80001ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80001ae:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80001b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001b4:	2300      	movs	r3, #0
 80001b6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001b8:	f107 0318 	add.w	r3, r7, #24
 80001bc:	4618      	mov	r0, r3
 80001be:	f001 fa93 	bl	80016e8 <HAL_RCC_OscConfig>
 80001c2:	4603      	mov	r3, r0
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d001      	beq.n	80001cc <SystemClock_Config+0x44>
  {
    Error_Handler();
 80001c8:	f000 f8b6 	bl	8000338 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001cc:	230f      	movs	r3, #15
 80001ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80001d0:	2301      	movs	r3, #1
 80001d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d4:	2300      	movs	r3, #0
 80001d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001de:	2300      	movs	r3, #0
 80001e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001e2:	1d3b      	adds	r3, r7, #4
 80001e4:	2100      	movs	r1, #0
 80001e6:	4618      	mov	r0, r3
 80001e8:	f001 fd00 	bl	8001bec <HAL_RCC_ClockConfig>
 80001ec:	4603      	mov	r3, r0
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d001      	beq.n	80001f6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80001f2:	f000 f8a1 	bl	8000338 <Error_Handler>
  }
}
 80001f6:	bf00      	nop
 80001f8:	3740      	adds	r7, #64	; 0x40
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bd80      	pop	{r7, pc}
	...

08000200 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000204:	4b12      	ldr	r3, [pc, #72]	; (8000250 <MX_I2C1_Init+0x50>)
 8000206:	4a13      	ldr	r2, [pc, #76]	; (8000254 <MX_I2C1_Init+0x54>)
 8000208:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800020a:	4b11      	ldr	r3, [pc, #68]	; (8000250 <MX_I2C1_Init+0x50>)
 800020c:	4a12      	ldr	r2, [pc, #72]	; (8000258 <MX_I2C1_Init+0x58>)
 800020e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000210:	4b0f      	ldr	r3, [pc, #60]	; (8000250 <MX_I2C1_Init+0x50>)
 8000212:	2200      	movs	r2, #0
 8000214:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000216:	4b0e      	ldr	r3, [pc, #56]	; (8000250 <MX_I2C1_Init+0x50>)
 8000218:	2200      	movs	r2, #0
 800021a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800021c:	4b0c      	ldr	r3, [pc, #48]	; (8000250 <MX_I2C1_Init+0x50>)
 800021e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000222:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000224:	4b0a      	ldr	r3, [pc, #40]	; (8000250 <MX_I2C1_Init+0x50>)
 8000226:	2200      	movs	r2, #0
 8000228:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <MX_I2C1_Init+0x50>)
 800022c:	2200      	movs	r2, #0
 800022e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000230:	4b07      	ldr	r3, [pc, #28]	; (8000250 <MX_I2C1_Init+0x50>)
 8000232:	2200      	movs	r2, #0
 8000234:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000236:	4b06      	ldr	r3, [pc, #24]	; (8000250 <MX_I2C1_Init+0x50>)
 8000238:	2200      	movs	r2, #0
 800023a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800023c:	4804      	ldr	r0, [pc, #16]	; (8000250 <MX_I2C1_Init+0x50>)
 800023e:	f001 f90f 	bl	8001460 <HAL_I2C_Init>
 8000242:	4603      	mov	r3, r0
 8000244:	2b00      	cmp	r3, #0
 8000246:	d001      	beq.n	800024c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000248:	f000 f876 	bl	8000338 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800024c:	bf00      	nop
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000080 	.word	0x20000080
 8000254:	40005400 	.word	0x40005400
 8000258:	000186a0 	.word	0x000186a0

0800025c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b088      	sub	sp, #32
 8000260:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000262:	f107 0310 	add.w	r3, r7, #16
 8000266:	2200      	movs	r2, #0
 8000268:	601a      	str	r2, [r3, #0]
 800026a:	605a      	str	r2, [r3, #4]
 800026c:	609a      	str	r2, [r3, #8]
 800026e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000270:	4b2d      	ldr	r3, [pc, #180]	; (8000328 <MX_GPIO_Init+0xcc>)
 8000272:	699b      	ldr	r3, [r3, #24]
 8000274:	4a2c      	ldr	r2, [pc, #176]	; (8000328 <MX_GPIO_Init+0xcc>)
 8000276:	f043 0310 	orr.w	r3, r3, #16
 800027a:	6193      	str	r3, [r2, #24]
 800027c:	4b2a      	ldr	r3, [pc, #168]	; (8000328 <MX_GPIO_Init+0xcc>)
 800027e:	699b      	ldr	r3, [r3, #24]
 8000280:	f003 0310 	and.w	r3, r3, #16
 8000284:	60fb      	str	r3, [r7, #12]
 8000286:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000288:	4b27      	ldr	r3, [pc, #156]	; (8000328 <MX_GPIO_Init+0xcc>)
 800028a:	699b      	ldr	r3, [r3, #24]
 800028c:	4a26      	ldr	r2, [pc, #152]	; (8000328 <MX_GPIO_Init+0xcc>)
 800028e:	f043 0320 	orr.w	r3, r3, #32
 8000292:	6193      	str	r3, [r2, #24]
 8000294:	4b24      	ldr	r3, [pc, #144]	; (8000328 <MX_GPIO_Init+0xcc>)
 8000296:	699b      	ldr	r3, [r3, #24]
 8000298:	f003 0320 	and.w	r3, r3, #32
 800029c:	60bb      	str	r3, [r7, #8]
 800029e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002a0:	4b21      	ldr	r3, [pc, #132]	; (8000328 <MX_GPIO_Init+0xcc>)
 80002a2:	699b      	ldr	r3, [r3, #24]
 80002a4:	4a20      	ldr	r2, [pc, #128]	; (8000328 <MX_GPIO_Init+0xcc>)
 80002a6:	f043 0304 	orr.w	r3, r3, #4
 80002aa:	6193      	str	r3, [r2, #24]
 80002ac:	4b1e      	ldr	r3, [pc, #120]	; (8000328 <MX_GPIO_Init+0xcc>)
 80002ae:	699b      	ldr	r3, [r3, #24]
 80002b0:	f003 0304 	and.w	r3, r3, #4
 80002b4:	607b      	str	r3, [r7, #4]
 80002b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002b8:	4b1b      	ldr	r3, [pc, #108]	; (8000328 <MX_GPIO_Init+0xcc>)
 80002ba:	699b      	ldr	r3, [r3, #24]
 80002bc:	4a1a      	ldr	r2, [pc, #104]	; (8000328 <MX_GPIO_Init+0xcc>)
 80002be:	f043 0308 	orr.w	r3, r3, #8
 80002c2:	6193      	str	r3, [r2, #24]
 80002c4:	4b18      	ldr	r3, [pc, #96]	; (8000328 <MX_GPIO_Init+0xcc>)
 80002c6:	699b      	ldr	r3, [r3, #24]
 80002c8:	f003 0308 	and.w	r3, r3, #8
 80002cc:	603b      	str	r3, [r7, #0]
 80002ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80002d0:	2200      	movs	r2, #0
 80002d2:	2120      	movs	r1, #32
 80002d4:	4815      	ldr	r0, [pc, #84]	; (800032c <MX_GPIO_Init+0xd0>)
 80002d6:	f001 f870 	bl	80013ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002e0:	4b13      	ldr	r3, [pc, #76]	; (8000330 <MX_GPIO_Init+0xd4>)
 80002e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002e4:	2300      	movs	r3, #0
 80002e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80002e8:	f107 0310 	add.w	r3, r7, #16
 80002ec:	4619      	mov	r1, r3
 80002ee:	4811      	ldr	r0, [pc, #68]	; (8000334 <MX_GPIO_Init+0xd8>)
 80002f0:	f000 fec8 	bl	8001084 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80002f4:	2320      	movs	r3, #32
 80002f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002f8:	2301      	movs	r3, #1
 80002fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002fc:	2300      	movs	r3, #0
 80002fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000300:	2302      	movs	r3, #2
 8000302:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000304:	f107 0310 	add.w	r3, r7, #16
 8000308:	4619      	mov	r1, r3
 800030a:	4808      	ldr	r0, [pc, #32]	; (800032c <MX_GPIO_Init+0xd0>)
 800030c:	f000 feba 	bl	8001084 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000310:	2200      	movs	r2, #0
 8000312:	2100      	movs	r1, #0
 8000314:	2028      	movs	r0, #40	; 0x28
 8000316:	f000 fe7e 	bl	8001016 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800031a:	2028      	movs	r0, #40	; 0x28
 800031c:	f000 fe97 	bl	800104e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000320:	bf00      	nop
 8000322:	3720      	adds	r7, #32
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}
 8000328:	40021000 	.word	0x40021000
 800032c:	40010800 	.word	0x40010800
 8000330:	10110000 	.word	0x10110000
 8000334:	40011000 	.word	0x40011000

08000338 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800033c:	b672      	cpsid	i
}
 800033e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000340:	e7fe      	b.n	8000340 <Error_Handler+0x8>
	...

08000344 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000344:	b480      	push	{r7}
 8000346:	b085      	sub	sp, #20
 8000348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800034a:	4b15      	ldr	r3, [pc, #84]	; (80003a0 <HAL_MspInit+0x5c>)
 800034c:	699b      	ldr	r3, [r3, #24]
 800034e:	4a14      	ldr	r2, [pc, #80]	; (80003a0 <HAL_MspInit+0x5c>)
 8000350:	f043 0301 	orr.w	r3, r3, #1
 8000354:	6193      	str	r3, [r2, #24]
 8000356:	4b12      	ldr	r3, [pc, #72]	; (80003a0 <HAL_MspInit+0x5c>)
 8000358:	699b      	ldr	r3, [r3, #24]
 800035a:	f003 0301 	and.w	r3, r3, #1
 800035e:	60bb      	str	r3, [r7, #8]
 8000360:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000362:	4b0f      	ldr	r3, [pc, #60]	; (80003a0 <HAL_MspInit+0x5c>)
 8000364:	69db      	ldr	r3, [r3, #28]
 8000366:	4a0e      	ldr	r2, [pc, #56]	; (80003a0 <HAL_MspInit+0x5c>)
 8000368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800036c:	61d3      	str	r3, [r2, #28]
 800036e:	4b0c      	ldr	r3, [pc, #48]	; (80003a0 <HAL_MspInit+0x5c>)
 8000370:	69db      	ldr	r3, [r3, #28]
 8000372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000376:	607b      	str	r3, [r7, #4]
 8000378:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800037a:	4b0a      	ldr	r3, [pc, #40]	; (80003a4 <HAL_MspInit+0x60>)
 800037c:	685b      	ldr	r3, [r3, #4]
 800037e:	60fb      	str	r3, [r7, #12]
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000386:	60fb      	str	r3, [r7, #12]
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800038e:	60fb      	str	r3, [r7, #12]
 8000390:	4a04      	ldr	r2, [pc, #16]	; (80003a4 <HAL_MspInit+0x60>)
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000396:	bf00      	nop
 8000398:	3714      	adds	r7, #20
 800039a:	46bd      	mov	sp, r7
 800039c:	bc80      	pop	{r7}
 800039e:	4770      	bx	lr
 80003a0:	40021000 	.word	0x40021000
 80003a4:	40010000 	.word	0x40010000

080003a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b088      	sub	sp, #32
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b0:	f107 0310 	add.w	r3, r7, #16
 80003b4:	2200      	movs	r2, #0
 80003b6:	601a      	str	r2, [r3, #0]
 80003b8:	605a      	str	r2, [r3, #4]
 80003ba:	609a      	str	r2, [r3, #8]
 80003bc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	4a15      	ldr	r2, [pc, #84]	; (8000418 <HAL_I2C_MspInit+0x70>)
 80003c4:	4293      	cmp	r3, r2
 80003c6:	d123      	bne.n	8000410 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003c8:	4b14      	ldr	r3, [pc, #80]	; (800041c <HAL_I2C_MspInit+0x74>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	4a13      	ldr	r2, [pc, #76]	; (800041c <HAL_I2C_MspInit+0x74>)
 80003ce:	f043 0308 	orr.w	r3, r3, #8
 80003d2:	6193      	str	r3, [r2, #24]
 80003d4:	4b11      	ldr	r3, [pc, #68]	; (800041c <HAL_I2C_MspInit+0x74>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	f003 0308 	and.w	r3, r3, #8
 80003dc:	60fb      	str	r3, [r7, #12]
 80003de:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80003e0:	23c0      	movs	r3, #192	; 0xc0
 80003e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80003e4:	2312      	movs	r3, #18
 80003e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003e8:	2303      	movs	r3, #3
 80003ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003ec:	f107 0310 	add.w	r3, r7, #16
 80003f0:	4619      	mov	r1, r3
 80003f2:	480b      	ldr	r0, [pc, #44]	; (8000420 <HAL_I2C_MspInit+0x78>)
 80003f4:	f000 fe46 	bl	8001084 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80003f8:	4b08      	ldr	r3, [pc, #32]	; (800041c <HAL_I2C_MspInit+0x74>)
 80003fa:	69db      	ldr	r3, [r3, #28]
 80003fc:	4a07      	ldr	r2, [pc, #28]	; (800041c <HAL_I2C_MspInit+0x74>)
 80003fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000402:	61d3      	str	r3, [r2, #28]
 8000404:	4b05      	ldr	r3, [pc, #20]	; (800041c <HAL_I2C_MspInit+0x74>)
 8000406:	69db      	ldr	r3, [r3, #28]
 8000408:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800040c:	60bb      	str	r3, [r7, #8]
 800040e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000410:	bf00      	nop
 8000412:	3720      	adds	r7, #32
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	40005400 	.word	0x40005400
 800041c:	40021000 	.word	0x40021000
 8000420:	40010c00 	.word	0x40010c00

08000424 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b088      	sub	sp, #32
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800042c:	f107 0310 	add.w	r3, r7, #16
 8000430:	2200      	movs	r2, #0
 8000432:	601a      	str	r2, [r3, #0]
 8000434:	605a      	str	r2, [r3, #4]
 8000436:	609a      	str	r2, [r3, #8]
 8000438:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	4a15      	ldr	r2, [pc, #84]	; (8000494 <HAL_UART_MspInit+0x70>)
 8000440:	4293      	cmp	r3, r2
 8000442:	d123      	bne.n	800048c <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000444:	4b14      	ldr	r3, [pc, #80]	; (8000498 <HAL_UART_MspInit+0x74>)
 8000446:	69db      	ldr	r3, [r3, #28]
 8000448:	4a13      	ldr	r2, [pc, #76]	; (8000498 <HAL_UART_MspInit+0x74>)
 800044a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800044e:	61d3      	str	r3, [r2, #28]
 8000450:	4b11      	ldr	r3, [pc, #68]	; (8000498 <HAL_UART_MspInit+0x74>)
 8000452:	69db      	ldr	r3, [r3, #28]
 8000454:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000458:	60fb      	str	r3, [r7, #12]
 800045a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800045c:	4b0e      	ldr	r3, [pc, #56]	; (8000498 <HAL_UART_MspInit+0x74>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	4a0d      	ldr	r2, [pc, #52]	; (8000498 <HAL_UART_MspInit+0x74>)
 8000462:	f043 0304 	orr.w	r3, r3, #4
 8000466:	6193      	str	r3, [r2, #24]
 8000468:	4b0b      	ldr	r3, [pc, #44]	; (8000498 <HAL_UART_MspInit+0x74>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	f003 0304 	and.w	r3, r3, #4
 8000470:	60bb      	str	r3, [r7, #8]
 8000472:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000474:	230c      	movs	r3, #12
 8000476:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000478:	2302      	movs	r3, #2
 800047a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800047c:	2302      	movs	r3, #2
 800047e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000480:	f107 0310 	add.w	r3, r7, #16
 8000484:	4619      	mov	r1, r3
 8000486:	4805      	ldr	r0, [pc, #20]	; (800049c <HAL_UART_MspInit+0x78>)
 8000488:	f000 fdfc 	bl	8001084 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800048c:	bf00      	nop
 800048e:	3720      	adds	r7, #32
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}
 8000494:	40004400 	.word	0x40004400
 8000498:	40021000 	.word	0x40021000
 800049c:	40010800 	.word	0x40010800

080004a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004a4:	e7fe      	b.n	80004a4 <NMI_Handler+0x4>

080004a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004a6:	b480      	push	{r7}
 80004a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004aa:	e7fe      	b.n	80004aa <HardFault_Handler+0x4>

080004ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004b0:	e7fe      	b.n	80004b0 <MemManage_Handler+0x4>

080004b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004b2:	b480      	push	{r7}
 80004b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004b6:	e7fe      	b.n	80004b6 <BusFault_Handler+0x4>

080004b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004bc:	e7fe      	b.n	80004bc <UsageFault_Handler+0x4>

080004be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004be:	b480      	push	{r7}
 80004c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004c2:	bf00      	nop
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bc80      	pop	{r7}
 80004c8:	4770      	bx	lr

080004ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004ca:	b480      	push	{r7}
 80004cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004ce:	bf00      	nop
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bc80      	pop	{r7}
 80004d4:	4770      	bx	lr

080004d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004d6:	b480      	push	{r7}
 80004d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004da:	bf00      	nop
 80004dc:	46bd      	mov	sp, r7
 80004de:	bc80      	pop	{r7}
 80004e0:	4770      	bx	lr

080004e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004e2:	b580      	push	{r7, lr}
 80004e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004e6:	f000 fca3 	bl	8000e30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}

080004ee <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80004ee:	b580      	push	{r7, lr}
 80004f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80004f2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80004f6:	f000 ff91 	bl	800141c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80004fa:	bf00      	nop
 80004fc:	bd80      	pop	{r7, pc}
	...

08000500 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b086      	sub	sp, #24
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000508:	4a14      	ldr	r2, [pc, #80]	; (800055c <_sbrk+0x5c>)
 800050a:	4b15      	ldr	r3, [pc, #84]	; (8000560 <_sbrk+0x60>)
 800050c:	1ad3      	subs	r3, r2, r3
 800050e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000510:	697b      	ldr	r3, [r7, #20]
 8000512:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000514:	4b13      	ldr	r3, [pc, #76]	; (8000564 <_sbrk+0x64>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d102      	bne.n	8000522 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800051c:	4b11      	ldr	r3, [pc, #68]	; (8000564 <_sbrk+0x64>)
 800051e:	4a12      	ldr	r2, [pc, #72]	; (8000568 <_sbrk+0x68>)
 8000520:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000522:	4b10      	ldr	r3, [pc, #64]	; (8000564 <_sbrk+0x64>)
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4413      	add	r3, r2
 800052a:	693a      	ldr	r2, [r7, #16]
 800052c:	429a      	cmp	r2, r3
 800052e:	d207      	bcs.n	8000540 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000530:	f002 f800 	bl	8002534 <__errno>
 8000534:	4603      	mov	r3, r0
 8000536:	220c      	movs	r2, #12
 8000538:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800053a:	f04f 33ff 	mov.w	r3, #4294967295
 800053e:	e009      	b.n	8000554 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000540:	4b08      	ldr	r3, [pc, #32]	; (8000564 <_sbrk+0x64>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000546:	4b07      	ldr	r3, [pc, #28]	; (8000564 <_sbrk+0x64>)
 8000548:	681a      	ldr	r2, [r3, #0]
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	4413      	add	r3, r2
 800054e:	4a05      	ldr	r2, [pc, #20]	; (8000564 <_sbrk+0x64>)
 8000550:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000552:	68fb      	ldr	r3, [r7, #12]
}
 8000554:	4618      	mov	r0, r3
 8000556:	3718      	adds	r7, #24
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	20005000 	.word	0x20005000
 8000560:	00000400 	.word	0x00000400
 8000564:	200000d4 	.word	0x200000d4
 8000568:	200002a0 	.word	0x200002a0

0800056c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000570:	bf00      	nop
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr

08000578 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000578:	f7ff fff8 	bl	800056c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800057c:	480b      	ldr	r0, [pc, #44]	; (80005ac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800057e:	490c      	ldr	r1, [pc, #48]	; (80005b0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000580:	4a0c      	ldr	r2, [pc, #48]	; (80005b4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000582:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000584:	e002      	b.n	800058c <LoopCopyDataInit>

08000586 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000586:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000588:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800058a:	3304      	adds	r3, #4

0800058c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800058c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800058e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000590:	d3f9      	bcc.n	8000586 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000592:	4a09      	ldr	r2, [pc, #36]	; (80005b8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000594:	4c09      	ldr	r4, [pc, #36]	; (80005bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000596:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000598:	e001      	b.n	800059e <LoopFillZerobss>

0800059a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800059a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800059c:	3204      	adds	r2, #4

0800059e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800059e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005a0:	d3fb      	bcc.n	800059a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005a2:	f001 ffcd 	bl	8002540 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005a6:	f7ff fdd1 	bl	800014c <main>
  bx lr
 80005aa:	4770      	bx	lr
  ldr r0, =_sdata
 80005ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005b0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80005b4:	08003450 	.word	0x08003450
  ldr r2, =_sbss
 80005b8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80005bc:	200002a0 	.word	0x200002a0

080005c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005c0:	e7fe      	b.n	80005c0 <ADC1_2_IRQHandler>
	...

080005c4 <debounceFSM_init>:


/* DEFINICION DE FUNCIONES */

// Definicion de inicializacion del anti rebote
void debounceFSM_init(){
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	estado = BUTTON_UP;
 80005c8:	4b04      	ldr	r3, [pc, #16]	; (80005dc <debounceFSM_init+0x18>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	701a      	strb	r2, [r3, #0]
	//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, RESET); // iniciar con led apagado (salida)
	delayInit(&delayHandle, DEBOUNCE_DELAY);
 80005ce:	2128      	movs	r1, #40	; 0x28
 80005d0:	4803      	ldr	r0, [pc, #12]	; (80005e0 <debounceFSM_init+0x1c>)
 80005d2:	f000 f8b5 	bl	8000740 <delayInit>
}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	200000d8 	.word	0x200000d8
 80005e0:	200000dc 	.word	0x200000dc

080005e4 <debounceFSM_update>:

// Definicion de actualizacion del valor del pulsador con anti rebote por software
void debounceFSM_update(){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	switch(estado){
 80005e8:	4b34      	ldr	r3, [pc, #208]	; (80006bc <debounceFSM_update+0xd8>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	2b03      	cmp	r3, #3
 80005ee:	d859      	bhi.n	80006a4 <debounceFSM_update+0xc0>
 80005f0:	a201      	add	r2, pc, #4	; (adr r2, 80005f8 <debounceFSM_update+0x14>)
 80005f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f6:	bf00      	nop
 80005f8:	08000609 	.word	0x08000609
 80005fc:	08000621 	.word	0x08000621
 8000600:	08000657 	.word	0x08000657
 8000604:	0800066f 	.word	0x0800066f
	case BUTTON_UP:
		// si el pin esta low pasar al estado BUTTON_FALLING
		if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 0){
 8000608:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800060c:	482c      	ldr	r0, [pc, #176]	; (80006c0 <debounceFSM_update+0xdc>)
 800060e:	f000 febd 	bl	800138c <HAL_GPIO_ReadPin>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d148      	bne.n	80006aa <debounceFSM_update+0xc6>
			estado = BUTTON_FALLING;
 8000618:	4b28      	ldr	r3, [pc, #160]	; (80006bc <debounceFSM_update+0xd8>)
 800061a:	2201      	movs	r2, #1
 800061c:	701a      	strb	r2, [r3, #0]
		}
		break;
 800061e:	e044      	b.n	80006aa <debounceFSM_update+0xc6>
	case BUTTON_FALLING:
		// si el pin esta high luego de 40 ms, volver a BUTTON_UP
		// si el pin esta low luego de 40 ms, cambiar a BUTTON_DOWN
		if(delayRead(&delayHandle) == true){ // si transcurrio el debounceDelay, muestrear pulsador nuevamente. Iniciar delay si es llamado por 1ra vez
 8000620:	4828      	ldr	r0, [pc, #160]	; (80006c4 <debounceFSM_update+0xe0>)
 8000622:	f000 f8aa 	bl	800077a <delayRead>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d040      	beq.n	80006ae <debounceFSM_update+0xca>
			if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 1){ // pulsador no presionado >> 1
 800062c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000630:	4823      	ldr	r0, [pc, #140]	; (80006c0 <debounceFSM_update+0xdc>)
 8000632:	f000 feab 	bl	800138c <HAL_GPIO_ReadPin>
 8000636:	4603      	mov	r3, r0
 8000638:	2b01      	cmp	r3, #1
 800063a:	d103      	bne.n	8000644 <debounceFSM_update+0x60>
				estado = BUTTON_UP; // si sigue high, el estado vuelve a BUTTON_UP
 800063c:	4b1f      	ldr	r3, [pc, #124]	; (80006bc <debounceFSM_update+0xd8>)
 800063e:	2200      	movs	r2, #0
 8000640:	701a      	strb	r2, [r3, #0]
				buttonPressed();
				// Reemplazo del encendido del led por la deteccion unica del flanco descendente
				fallingState = true;
			}
		}
		break;
 8000642:	e034      	b.n	80006ae <debounceFSM_update+0xca>
				estado = BUTTON_DOWN;
 8000644:	4b1d      	ldr	r3, [pc, #116]	; (80006bc <debounceFSM_update+0xd8>)
 8000646:	2202      	movs	r2, #2
 8000648:	701a      	strb	r2, [r3, #0]
				buttonPressed();
 800064a:	f000 f86d 	bl	8000728 <buttonPressed>
				fallingState = true;
 800064e:	4b1e      	ldr	r3, [pc, #120]	; (80006c8 <debounceFSM_update+0xe4>)
 8000650:	2201      	movs	r2, #1
 8000652:	701a      	strb	r2, [r3, #0]
		break;
 8000654:	e02b      	b.n	80006ae <debounceFSM_update+0xca>
	case BUTTON_DOWN:
		// si el pin esta high, pasar al estado BUTTON_RAISING
		if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 1){
 8000656:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800065a:	4819      	ldr	r0, [pc, #100]	; (80006c0 <debounceFSM_update+0xdc>)
 800065c:	f000 fe96 	bl	800138c <HAL_GPIO_ReadPin>
 8000660:	4603      	mov	r3, r0
 8000662:	2b01      	cmp	r3, #1
 8000664:	d125      	bne.n	80006b2 <debounceFSM_update+0xce>
			estado = BUTTON_RAISING;
 8000666:	4b15      	ldr	r3, [pc, #84]	; (80006bc <debounceFSM_update+0xd8>)
 8000668:	2203      	movs	r2, #3
 800066a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800066c:	e021      	b.n	80006b2 <debounceFSM_update+0xce>
	case BUTTON_RAISING:
		// si el pin esta low luego de 40 ms, volver a BUTTON_DOWN
		// si el pin esta high luego de 40 ms, cambiar a BUTTON_UP
		if(delayRead(&delayHandle) == true){ // si transcurrio el debounceDelay, muestrear pulsador nuevamente
 800066e:	4815      	ldr	r0, [pc, #84]	; (80006c4 <debounceFSM_update+0xe0>)
 8000670:	f000 f883 	bl	800077a <delayRead>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d01d      	beq.n	80006b6 <debounceFSM_update+0xd2>
			if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 0){ // pulsador presionado >> 0
 800067a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800067e:	4810      	ldr	r0, [pc, #64]	; (80006c0 <debounceFSM_update+0xdc>)
 8000680:	f000 fe84 	bl	800138c <HAL_GPIO_ReadPin>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d103      	bne.n	8000692 <debounceFSM_update+0xae>
				estado = BUTTON_DOWN; // si sigue low, el estado vuelve a BUTTON_DOWN
 800068a:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <debounceFSM_update+0xd8>)
 800068c:	2202      	movs	r2, #2
 800068e:	701a      	strb	r2, [r3, #0]
				buttonReleased();
				risingState = true;
			}
		}

		break;
 8000690:	e011      	b.n	80006b6 <debounceFSM_update+0xd2>
				estado = BUTTON_UP;
 8000692:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <debounceFSM_update+0xd8>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
				buttonReleased();
 8000698:	f000 f84c 	bl	8000734 <buttonReleased>
				risingState = true;
 800069c:	4b0b      	ldr	r3, [pc, #44]	; (80006cc <debounceFSM_update+0xe8>)
 800069e:	2201      	movs	r2, #1
 80006a0:	701a      	strb	r2, [r3, #0]
		break;
 80006a2:	e008      	b.n	80006b6 <debounceFSM_update+0xd2>
	default:
		// checkear errores
		// reiniciar estado
		debounceFSM_init();
 80006a4:	f7ff ff8e 	bl	80005c4 <debounceFSM_init>
		break;
 80006a8:	e006      	b.n	80006b8 <debounceFSM_update+0xd4>
		break;
 80006aa:	bf00      	nop
 80006ac:	e004      	b.n	80006b8 <debounceFSM_update+0xd4>
		break;
 80006ae:	bf00      	nop
 80006b0:	e002      	b.n	80006b8 <debounceFSM_update+0xd4>
		break;
 80006b2:	bf00      	nop
 80006b4:	e000      	b.n	80006b8 <debounceFSM_update+0xd4>
		break;
 80006b6:	bf00      	nop
	}
}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	200000d8 	.word	0x200000d8
 80006c0:	40011000 	.word	0x40011000
 80006c4:	200000dc 	.word	0x200000dc
 80006c8:	200000d9 	.word	0x200000d9
 80006cc:	200000da 	.word	0x200000da

080006d0 <readKey_down>:

// La funcion retorna true al detectar el flanco descendente y se autoresetea
bool_t readKey_down(){
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
	bool_t result = false;
 80006d6:	2300      	movs	r3, #0
 80006d8:	71fb      	strb	r3, [r7, #7]
	// retornar true solo si se detecta flanco descendente
	if(fallingState == true){
 80006da:	4b07      	ldr	r3, [pc, #28]	; (80006f8 <readKey_down+0x28>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d004      	beq.n	80006ec <readKey_down+0x1c>
		fallingState = false; // resetear variable privada
 80006e2:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <readKey_down+0x28>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	701a      	strb	r2, [r3, #0]
		result = true;
 80006e8:	2301      	movs	r3, #1
 80006ea:	71fb      	strb	r3, [r7, #7]
	}
	return result;
 80006ec:	79fb      	ldrb	r3, [r7, #7]
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr
 80006f8:	200000d9 	.word	0x200000d9

080006fc <readKey_up>:

// La funcion retorna true al detectar el flanco ascendente y se autoresetea
bool_t readKey_up(){
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
	bool_t result = false;
 8000702:	2300      	movs	r3, #0
 8000704:	71fb      	strb	r3, [r7, #7]
	// retornar true solo si se detecta flanco ascendente
	if(risingState == true){
 8000706:	4b07      	ldr	r3, [pc, #28]	; (8000724 <readKey_up+0x28>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d004      	beq.n	8000718 <readKey_up+0x1c>
		risingState = false; // resetear variable privada
 800070e:	4b05      	ldr	r3, [pc, #20]	; (8000724 <readKey_up+0x28>)
 8000710:	2200      	movs	r2, #0
 8000712:	701a      	strb	r2, [r3, #0]
		result = true;
 8000714:	2301      	movs	r3, #1
 8000716:	71fb      	strb	r3, [r7, #7]
	}
	return result;
 8000718:	79fb      	ldrb	r3, [r7, #7]
}
 800071a:	4618      	mov	r0, r3
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	bc80      	pop	{r7}
 8000722:	4770      	bx	lr
 8000724:	200000da 	.word	0x200000da

08000728 <buttonPressed>:


// Definicion de funcion para boton presionado
void buttonPressed(){
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, SET);
	// ejecutar la accion deseada al detectar pulsado
	//uartSendString("\r\nFlanco descendente!\r\n");
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr

08000734 <buttonReleased>:

// Definicion de funcion para boton liberado
void buttonReleased(){
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, RESET);
	// ejecutar la accion deseada al detectar liberacion
	//uartSendString("\r\nFlanco ascendente!\r\n");
}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	bc80      	pop	{r7}
 800073e:	4770      	bx	lr

08000740 <delayInit>:
/**
	* @brief Inicializacion del temporizador
	* @param delay struct {startTime, duration, running}
	* @retval Ninguno
	*/
void delayInit( delay_t * delay, tick_t duration ){
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	6039      	str	r1, [r7, #0]
	if(duration > 10000) duration = 10000; // limitar el tiempo a 10 segundos
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000750:	4293      	cmp	r3, r2
 8000752:	d902      	bls.n	800075a <delayInit+0x1a>
 8000754:	f242 7310 	movw	r3, #10000	; 0x2710
 8000758:	603b      	str	r3, [r7, #0]
	if(duration < 5) duration = 5; // limitar el tiempo minimo a 5 ms
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	2b04      	cmp	r3, #4
 800075e:	d801      	bhi.n	8000764 <delayInit+0x24>
 8000760:	2305      	movs	r3, #5
 8000762:	603b      	str	r3, [r7, #0]

	delay->duration = duration;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	683a      	ldr	r2, [r7, #0]
 8000768:	605a      	str	r2, [r3, #4]
	delay->running = false;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2200      	movs	r2, #0
 800076e:	721a      	strb	r2, [r3, #8]
}
 8000770:	bf00      	nop
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr

0800077a <delayRead>:
/**
	* @brief Comparacion de delay vs contador milisegundos. Inicia timer si no esta en func
	* @param delay struct {startTime, duration, running}
	* @retval bool true si se cumplio el tiempo / false si no
	*/
bool_t delayRead( delay_t * delay ){
 800077a:	b580      	push	{r7, lr}
 800077c:	b082      	sub	sp, #8
 800077e:	af00      	add	r7, sp, #0
 8000780:	6078      	str	r0, [r7, #4]

	if(delay->running == false){ // activar timer
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	7a1b      	ldrb	r3, [r3, #8]
 8000786:	f083 0301 	eor.w	r3, r3, #1
 800078a:	b2db      	uxtb	r3, r3
 800078c:	2b00      	cmp	r3, #0
 800078e:	d00a      	beq.n	80007a6 <delayRead+0x2c>
		delay->running = true;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2201      	movs	r2, #1
 8000794:	721a      	strb	r2, [r3, #8]
		delay->startTime = HAL_GetTick(); // tomar valor de contador en [ms] actual
 8000796:	f000 fb5d 	bl	8000e54 <HAL_GetTick>
 800079a:	4603      	mov	r3, r0
 800079c:	461a      	mov	r2, r3
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	601a      	str	r2, [r3, #0]
		return false; // salir de la funcion
 80007a2:	2300      	movs	r3, #0
 80007a4:	e010      	b.n	80007c8 <delayRead+0x4e>
	} else {
		// si running == true ya estaba activo el timer, comparar valor actual con duration
		if(HAL_GetTick() - delay->startTime > delay->duration){ // si es timeout
 80007a6:	f000 fb55 	bl	8000e54 <HAL_GetTick>
 80007aa:	4603      	mov	r3, r0
 80007ac:	461a      	mov	r2, r3
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	1ad2      	subs	r2, r2, r3
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	685b      	ldr	r3, [r3, #4]
 80007b8:	429a      	cmp	r2, r3
 80007ba:	d904      	bls.n	80007c6 <delayRead+0x4c>
			delay->running = false; // reset el flag
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2200      	movs	r2, #0
 80007c0:	721a      	strb	r2, [r3, #8]
			return true;
 80007c2:	2301      	movs	r3, #1
 80007c4:	e000      	b.n	80007c8 <delayRead+0x4e>
		} else {
			// si no es timeout
			return false;
 80007c6:	2300      	movs	r3, #0
		}
	}
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <menuMEF_init>:
static delay_t delayBlinkHandle;
static blinkPeriod = BLINK_PERIOD;
static blinkRepeat = BLINK_REPEAT;


void menuMEF_init(){
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
	pulseHandle.nextTime = NEXT_TIME;
 80007d4:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <menuMEF_init+0x28>)
 80007d6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80007da:	819a      	strh	r2, [r3, #12]
	pulseHandle.executeTime = EXECUTE_TIME;
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <menuMEF_init+0x28>)
 80007de:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80007e2:	81da      	strh	r2, [r3, #14]
	currentState = OPTION_1;
 80007e4:	4b05      	ldr	r3, [pc, #20]	; (80007fc <menuMEF_init+0x2c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	701a      	strb	r2, [r3, #0]
	// ingreso de parametros
	menuMEF_user_input();
 80007ea:	f000 f9e7 	bl	8000bbc <menuMEF_user_input>
	// enviar OPCION 1 al LCD
	uartSendString("Opcion 1\r\n");
 80007ee:	4804      	ldr	r0, [pc, #16]	; (8000800 <menuMEF_init+0x30>)
 80007f0:	f000 fa86 	bl	8000d00 <uartSendString>
}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	200000ec 	.word	0x200000ec
 80007fc:	200000e8 	.word	0x200000e8
 8000800:	08002e60 	.word	0x08002e60

08000804 <menuMEF_update>:

// actualiza el estado de la MEF en funcion del largo del pulso
// retorna NEXT, EXECUTE o NONE para establecer el estado actual de la MEF en menuMEF_set_state()
action_t menuMEF_update(void){
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
	action_t command = NONE;
 800080a:	2300      	movs	r3, #0
 800080c:	71fb      	strb	r3, [r7, #7]
	if(readKey_down() == true){
 800080e:	f7ff ff5f 	bl	80006d0 <readKey_down>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d004      	beq.n	8000822 <menuMEF_update+0x1e>
		// comenzar conteo
		pulseHandle.startTime = HAL_GetTick(); // tiempo desde boton presionado
 8000818:	f000 fb1c 	bl	8000e54 <HAL_GetTick>
 800081c:	4603      	mov	r3, r0
 800081e:	4a1e      	ldr	r2, [pc, #120]	; (8000898 <menuMEF_update+0x94>)
 8000820:	6013      	str	r3, [r2, #0]
	}
	if(readKey_up() == true){
 8000822:	f7ff ff6b 	bl	80006fc <readKey_up>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d02f      	beq.n	800088c <menuMEF_update+0x88>
		// terminar conteo y pasar de opcion o ejecutarla
		pulseHandle.stopTime = HAL_GetTick(); // tiempo desde boton presionado
 800082c:	f000 fb12 	bl	8000e54 <HAL_GetTick>
 8000830:	4603      	mov	r3, r0
 8000832:	4a19      	ldr	r2, [pc, #100]	; (8000898 <menuMEF_update+0x94>)
 8000834:	6053      	str	r3, [r2, #4]
		pulseHandle.deltaTime = pulseHandle.stopTime - pulseHandle.startTime; // if stop>start
 8000836:	4b18      	ldr	r3, [pc, #96]	; (8000898 <menuMEF_update+0x94>)
 8000838:	685a      	ldr	r2, [r3, #4]
 800083a:	4b17      	ldr	r3, [pc, #92]	; (8000898 <menuMEF_update+0x94>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	1ad3      	subs	r3, r2, r3
 8000840:	4a15      	ldr	r2, [pc, #84]	; (8000898 <menuMEF_update+0x94>)
 8000842:	6093      	str	r3, [r2, #8]

		if( executingRoutine == false){
 8000844:	4b15      	ldr	r3, [pc, #84]	; (800089c <menuMEF_update+0x98>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	f083 0301 	eor.w	r3, r3, #1
 800084c:	b2db      	uxtb	r3, r3
 800084e:	2b00      	cmp	r3, #0
 8000850:	d01a      	beq.n	8000888 <menuMEF_update+0x84>
			if(pulseHandle.deltaTime < pulseHandle.nextTime){
 8000852:	4b11      	ldr	r3, [pc, #68]	; (8000898 <menuMEF_update+0x94>)
 8000854:	689b      	ldr	r3, [r3, #8]
 8000856:	4a10      	ldr	r2, [pc, #64]	; (8000898 <menuMEF_update+0x94>)
 8000858:	8992      	ldrh	r2, [r2, #12]
 800085a:	4293      	cmp	r3, r2
 800085c:	d205      	bcs.n	800086a <menuMEF_update+0x66>
				command = NEXT;
 800085e:	2301      	movs	r3, #1
 8000860:	71fb      	strb	r3, [r7, #7]
				uartSendString("NEXT\r\n");
 8000862:	480f      	ldr	r0, [pc, #60]	; (80008a0 <menuMEF_update+0x9c>)
 8000864:	f000 fa4c 	bl	8000d00 <uartSendString>
 8000868:	e010      	b.n	800088c <menuMEF_update+0x88>
			} else if (pulseHandle.deltaTime > pulseHandle.executeTime){
 800086a:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <menuMEF_update+0x94>)
 800086c:	689b      	ldr	r3, [r3, #8]
 800086e:	4a0a      	ldr	r2, [pc, #40]	; (8000898 <menuMEF_update+0x94>)
 8000870:	89d2      	ldrh	r2, [r2, #14]
 8000872:	4293      	cmp	r3, r2
 8000874:	d905      	bls.n	8000882 <menuMEF_update+0x7e>
				command = EXECUTE;
 8000876:	2303      	movs	r3, #3
 8000878:	71fb      	strb	r3, [r7, #7]
				uartSendString("EXECUTE\r\n");
 800087a:	480a      	ldr	r0, [pc, #40]	; (80008a4 <menuMEF_update+0xa0>)
 800087c:	f000 fa40 	bl	8000d00 <uartSendString>
 8000880:	e004      	b.n	800088c <menuMEF_update+0x88>
			} else{
				command = NONE;
 8000882:	2300      	movs	r3, #0
 8000884:	71fb      	strb	r3, [r7, #7]
 8000886:	e001      	b.n	800088c <menuMEF_update+0x88>
			}
		} else{
			command = STOP;
 8000888:	2304      	movs	r3, #4
 800088a:	71fb      	strb	r3, [r7, #7]
		}
	}
	return command;
 800088c:	79fb      	ldrb	r3, [r7, #7]
}
 800088e:	4618      	mov	r0, r3
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	200000ec 	.word	0x200000ec
 800089c:	200000fc 	.word	0x200000fc
 80008a0:	08002e6c 	.word	0x08002e6c
 80008a4:	08002e74 	.word	0x08002e74

080008a8 <menuMEF_set_state>:

// Actualiza el estado actual del menu (MEF)
void menuMEF_set_state(action_t command){
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	71fb      	strb	r3, [r7, #7]

	if(command == STOP){
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	2b04      	cmp	r3, #4
 80008b6:	d105      	bne.n	80008c4 <menuMEF_set_state+0x1c>
		blink_stop(LED_PORT,LED_PIN);
 80008b8:	2120      	movs	r1, #32
 80008ba:	4819      	ldr	r0, [pc, #100]	; (8000920 <menuMEF_set_state+0x78>)
 80008bc:	f000 f95c 	bl	8000b78 <blink_stop>
		motor_stop();
 80008c0:	f000 f976 	bl	8000bb0 <motor_stop>
	}

	if(command == NEXT){
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d10d      	bne.n	80008e6 <menuMEF_set_state+0x3e>
		if(currentState == OPTION_6){ // volver al inicio
 80008ca:	4b16      	ldr	r3, [pc, #88]	; (8000924 <menuMEF_set_state+0x7c>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	2b05      	cmp	r3, #5
 80008d0:	d103      	bne.n	80008da <menuMEF_set_state+0x32>
			currentState = OPTION_1;
 80008d2:	4b14      	ldr	r3, [pc, #80]	; (8000924 <menuMEF_set_state+0x7c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	701a      	strb	r2, [r3, #0]
 80008d8:	e005      	b.n	80008e6 <menuMEF_set_state+0x3e>
		} else {
			currentState++; // avanzar a la siguiente opcion
 80008da:	4b12      	ldr	r3, [pc, #72]	; (8000924 <menuMEF_set_state+0x7c>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	3301      	adds	r3, #1
 80008e0:	b2da      	uxtb	r2, r3
 80008e2:	4b10      	ldr	r3, [pc, #64]	; (8000924 <menuMEF_set_state+0x7c>)
 80008e4:	701a      	strb	r2, [r3, #0]
		}
	}
	// si hubo un pulso indicando NEXT o EXECUTE, actualizar LCD y ejecutar la rutina correspondiente
	// actualizar solo cuando hay un cambio
	if((command == EXECUTE) || (command == NEXT)){
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	2b03      	cmp	r3, #3
 80008ea:	d002      	beq.n	80008f2 <menuMEF_set_state+0x4a>
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d103      	bne.n	80008fa <menuMEF_set_state+0x52>
		menuMEF_update_display(command); // actualizar display LCD
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f000 f817 	bl	8000928 <menuMEF_update_display>
	}
	if(command == EXECUTE){
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	2b03      	cmp	r3, #3
 80008fe:	d105      	bne.n	800090c <menuMEF_set_state+0x64>
		currentState = currentState + OPTION_OFFSET; // pasar a estado EXECUTE_x
 8000900:	4b08      	ldr	r3, [pc, #32]	; (8000924 <menuMEF_set_state+0x7c>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	3306      	adds	r3, #6
 8000906:	b2da      	uxtb	r2, r3
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <menuMEF_set_state+0x7c>)
 800090a:	701a      	strb	r2, [r3, #0]
	}
	menuMEF_execute(currentState); // iniciar/continuar rutina si corresponde
 800090c:	4b05      	ldr	r3, [pc, #20]	; (8000924 <menuMEF_set_state+0x7c>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	4618      	mov	r0, r3
 8000912:	f000 f83d 	bl	8000990 <menuMEF_execute>
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40010800 	.word	0x40010800
 8000924:	200000e8 	.word	0x200000e8

08000928 <menuMEF_update_display>:

void menuMEF_update_display( action_t command){
 8000928:	b580      	push	{r7, lr}
 800092a:	b086      	sub	sp, #24
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	71fb      	strb	r3, [r7, #7]
	char buffer[16];
	// Escribir al LCD
	if((command == NEXT) || (command == BACK)){
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	2b01      	cmp	r3, #1
 8000936:	d002      	beq.n	800093e <menuMEF_update_display+0x16>
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	2b02      	cmp	r3, #2
 800093c:	d10d      	bne.n	800095a <menuMEF_update_display+0x32>
		// enviar estado actual 'Opcion x' al LCD
		sprintf(buffer, "Opcion %d\r\n", currentState+1);
 800093e:	4b11      	ldr	r3, [pc, #68]	; (8000984 <menuMEF_update_display+0x5c>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	1c5a      	adds	r2, r3, #1
 8000944:	f107 0308 	add.w	r3, r7, #8
 8000948:	490f      	ldr	r1, [pc, #60]	; (8000988 <menuMEF_update_display+0x60>)
 800094a:	4618      	mov	r0, r3
 800094c:	f001 fdca 	bl	80024e4 <siprintf>
		uartSendString(buffer);
 8000950:	f107 0308 	add.w	r3, r7, #8
 8000954:	4618      	mov	r0, r3
 8000956:	f000 f9d3 	bl	8000d00 <uartSendString>
	}
	if(command == EXECUTE){
 800095a:	79fb      	ldrb	r3, [r7, #7]
 800095c:	2b03      	cmp	r3, #3
 800095e:	d10d      	bne.n	800097c <menuMEF_update_display+0x54>
		// enviar estado actual 'Ejecutando x' al LCD
		sprintf(buffer, "Ejecutando %d\r\n", currentState+1);
 8000960:	4b08      	ldr	r3, [pc, #32]	; (8000984 <menuMEF_update_display+0x5c>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	1c5a      	adds	r2, r3, #1
 8000966:	f107 0308 	add.w	r3, r7, #8
 800096a:	4908      	ldr	r1, [pc, #32]	; (800098c <menuMEF_update_display+0x64>)
 800096c:	4618      	mov	r0, r3
 800096e:	f001 fdb9 	bl	80024e4 <siprintf>
		uartSendString(buffer);
 8000972:	f107 0308 	add.w	r3, r7, #8
 8000976:	4618      	mov	r0, r3
 8000978:	f000 f9c2 	bl	8000d00 <uartSendString>
	}

}
 800097c:	bf00      	nop
 800097e:	3718      	adds	r7, #24
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	200000e8 	.word	0x200000e8
 8000988:	08002e80 	.word	0x08002e80
 800098c:	08002e8c 	.word	0x08002e8c

08000990 <menuMEF_execute>:

void menuMEF_execute(){
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
	// ejecutar la opcion seleccionada
	//blink_led(LED_PORT, LED_PIN, 500, 10);
	switch (currentState){
 8000994:	4b15      	ldr	r3, [pc, #84]	; (80009ec <menuMEF_execute+0x5c>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	3b06      	subs	r3, #6
 800099a:	2b05      	cmp	r3, #5
 800099c:	d823      	bhi.n	80009e6 <menuMEF_execute+0x56>
 800099e:	a201      	add	r2, pc, #4	; (adr r2, 80009a4 <menuMEF_execute+0x14>)
 80009a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009a4:	080009bd 	.word	0x080009bd
 80009a8:	080009c7 	.word	0x080009c7
 80009ac:	080009d1 	.word	0x080009d1
 80009b0:	080009e7 	.word	0x080009e7
 80009b4:	080009e7 	.word	0x080009e7
 80009b8:	080009e7 	.word	0x080009e7
	case EXECUTE_1:
		// ejecutar 1
		led_on(LED_PORT, LED_PIN);
 80009bc:	2120      	movs	r1, #32
 80009be:	480c      	ldr	r0, [pc, #48]	; (80009f0 <menuMEF_execute+0x60>)
 80009c0:	f000 f84a 	bl	8000a58 <led_on>
		break;
 80009c4:	e010      	b.n	80009e8 <menuMEF_execute+0x58>
	case EXECUTE_2:
		// ejecutar 2
		led_off(LED_PORT, LED_PIN);
 80009c6:	2120      	movs	r1, #32
 80009c8:	4809      	ldr	r0, [pc, #36]	; (80009f0 <menuMEF_execute+0x60>)
 80009ca:	f000 f85f 	bl	8000a8c <led_off>
		break;
 80009ce:	e00b      	b.n	80009e8 <menuMEF_execute+0x58>
	case EXECUTE_3:
		// ejecutar 3
		blink_led(LED_PORT, LED_PIN, blinkPeriod, blinkRepeat);
 80009d0:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <menuMEF_execute+0x64>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	b29a      	uxth	r2, r3
 80009d6:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <menuMEF_execute+0x68>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	2120      	movs	r1, #32
 80009de:	4804      	ldr	r0, [pc, #16]	; (80009f0 <menuMEF_execute+0x60>)
 80009e0:	f000 f86e 	bl	8000ac0 <blink_led>
		break;
 80009e4:	e000      	b.n	80009e8 <menuMEF_execute+0x58>
	case EXECUTE_6:
		// ejecutar 6
		break;
	default:
		// error
		break;
 80009e6:	bf00      	nop
	}


}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	200000e8 	.word	0x200000e8
 80009f0:	40010800 	.word	0x40010800
 80009f4:	20000004 	.word	0x20000004
 80009f8:	20000008 	.word	0x20000008

080009fc <menuMEF_reset_state>:

void menuMEF_reset_state(){
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
	if((currentState >= EXECUTE_1) & (currentState <= EXECUTE_6) & (executingRoutine == false)){
 8000a00:	4b13      	ldr	r3, [pc, #76]	; (8000a50 <menuMEF_reset_state+0x54>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	2b05      	cmp	r3, #5
 8000a06:	bf8c      	ite	hi
 8000a08:	2301      	movhi	r3, #1
 8000a0a:	2300      	movls	r3, #0
 8000a0c:	b2da      	uxtb	r2, r3
 8000a0e:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <menuMEF_reset_state+0x54>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	2b0b      	cmp	r3, #11
 8000a14:	bf94      	ite	ls
 8000a16:	2301      	movls	r3, #1
 8000a18:	2300      	movhi	r3, #0
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	461a      	mov	r2, r3
 8000a22:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <menuMEF_reset_state+0x58>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	f083 0301 	eor.w	r3, r3, #1
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d005      	beq.n	8000a3e <menuMEF_reset_state+0x42>
		currentState = currentState - OPTION_OFFSET;
 8000a32:	4b07      	ldr	r3, [pc, #28]	; (8000a50 <menuMEF_reset_state+0x54>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	3b06      	subs	r3, #6
 8000a38:	b2da      	uxtb	r2, r3
 8000a3a:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <menuMEF_reset_state+0x54>)
 8000a3c:	701a      	strb	r2, [r3, #0]
	}
	executingRoutine = false;
 8000a3e:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <menuMEF_reset_state+0x58>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	701a      	strb	r2, [r3, #0]
	menuMEF_update_display(BACK);
 8000a44:	2002      	movs	r0, #2
 8000a46:	f7ff ff6f 	bl	8000928 <menuMEF_update_display>
}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	200000e8 	.word	0x200000e8
 8000a54:	200000fc 	.word	0x200000fc

08000a58 <led_on>:

void led_on(GPIO_TypeDef * port, uint16_t pin ){
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	460b      	mov	r3, r1
 8000a62:	807b      	strh	r3, [r7, #2]
	executingRoutine = true;
 8000a64:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <led_on+0x30>)
 8000a66:	2201      	movs	r2, #1
 8000a68:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(port, pin, SET);
 8000a6a:	887b      	ldrh	r3, [r7, #2]
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	4619      	mov	r1, r3
 8000a70:	6878      	ldr	r0, [r7, #4]
 8000a72:	f000 fca2 	bl	80013ba <HAL_GPIO_WritePin>
	executingRoutine = false;
 8000a76:	4b04      	ldr	r3, [pc, #16]	; (8000a88 <led_on+0x30>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	701a      	strb	r2, [r3, #0]
	menuMEF_reset_state();
 8000a7c:	f7ff ffbe 	bl	80009fc <menuMEF_reset_state>
}
 8000a80:	bf00      	nop
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	200000fc 	.word	0x200000fc

08000a8c <led_off>:

void led_off(GPIO_TypeDef * port, uint16_t pin ){
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	460b      	mov	r3, r1
 8000a96:	807b      	strh	r3, [r7, #2]
	executingRoutine = true;
 8000a98:	4b08      	ldr	r3, [pc, #32]	; (8000abc <led_off+0x30>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(port, pin, RESET);
 8000a9e:	887b      	ldrh	r3, [r7, #2]
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f000 fc88 	bl	80013ba <HAL_GPIO_WritePin>
	executingRoutine = false;
 8000aaa:	4b04      	ldr	r3, [pc, #16]	; (8000abc <led_off+0x30>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	701a      	strb	r2, [r3, #0]
	menuMEF_reset_state();
 8000ab0:	f7ff ffa4 	bl	80009fc <menuMEF_reset_state>
}
 8000ab4:	bf00      	nop
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	200000fc 	.word	0x200000fc

08000ac0 <blink_led>:

void blink_led(GPIO_TypeDef * port, uint16_t pin, uint16_t period, uint8_t repeat){
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	4608      	mov	r0, r1
 8000aca:	4611      	mov	r1, r2
 8000acc:	461a      	mov	r2, r3
 8000ace:	4603      	mov	r3, r0
 8000ad0:	817b      	strh	r3, [r7, #10]
 8000ad2:	460b      	mov	r3, r1
 8000ad4:	813b      	strh	r3, [r7, #8]
 8000ad6:	4613      	mov	r3, r2
 8000ad8:	71fb      	strb	r3, [r7, #7]

	if((count == 0) & (executingRoutine == false)){
 8000ada:	4b24      	ldr	r3, [pc, #144]	; (8000b6c <blink_led+0xac>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2301      	moveq	r3, #1
 8000ae4:	2300      	movne	r3, #0
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	461a      	mov	r2, r3
 8000aea:	4b21      	ldr	r3, [pc, #132]	; (8000b70 <blink_led+0xb0>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	f083 0301 	eor.w	r3, r3, #1
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	4013      	ands	r3, r2
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d00d      	beq.n	8000b16 <blink_led+0x56>
		//count = 0;
		executingRoutine = true;
 8000afa:	4b1d      	ldr	r3, [pc, #116]	; (8000b70 <blink_led+0xb0>)
 8000afc:	2201      	movs	r2, #1
 8000afe:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(port, pin, SET);
 8000b00:	897b      	ldrh	r3, [r7, #10]
 8000b02:	2201      	movs	r2, #1
 8000b04:	4619      	mov	r1, r3
 8000b06:	68f8      	ldr	r0, [r7, #12]
 8000b08:	f000 fc57 	bl	80013ba <HAL_GPIO_WritePin>
		delayInit(&delayBlinkHandle, period );
 8000b0c:	893b      	ldrh	r3, [r7, #8]
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4818      	ldr	r0, [pc, #96]	; (8000b74 <blink_led+0xb4>)
 8000b12:	f7ff fe15 	bl	8000740 <delayInit>
	}
	// repetir
	if(delayRead(&delayBlinkHandle) == true){
 8000b16:	4817      	ldr	r0, [pc, #92]	; (8000b74 <blink_led+0xb4>)
 8000b18:	f7ff fe2f 	bl	800077a <delayRead>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d00a      	beq.n	8000b38 <blink_led+0x78>
		HAL_GPIO_TogglePin(port, pin);
 8000b22:	897b      	ldrh	r3, [r7, #10]
 8000b24:	4619      	mov	r1, r3
 8000b26:	68f8      	ldr	r0, [r7, #12]
 8000b28:	f000 fc5f 	bl	80013ea <HAL_GPIO_TogglePin>
		count++;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <blink_led+0xac>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	3301      	adds	r3, #1
 8000b32:	b2da      	uxtb	r2, r3
 8000b34:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <blink_led+0xac>)
 8000b36:	701a      	strb	r2, [r3, #0]
	}
	// blink stop
	if(count >= repeat*2){
 8000b38:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <blink_led+0xac>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	429a      	cmp	r2, r3
 8000b44:	db0d      	blt.n	8000b62 <blink_led+0xa2>
		HAL_GPIO_WritePin(port, pin, RESET);
 8000b46:	897b      	ldrh	r3, [r7, #10]
 8000b48:	2200      	movs	r2, #0
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	68f8      	ldr	r0, [r7, #12]
 8000b4e:	f000 fc34 	bl	80013ba <HAL_GPIO_WritePin>
		count = 0;
 8000b52:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <blink_led+0xac>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	701a      	strb	r2, [r3, #0]
		executingRoutine = false;
 8000b58:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <blink_led+0xb0>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	701a      	strb	r2, [r3, #0]
		menuMEF_reset_state();
 8000b5e:	f7ff ff4d 	bl	80009fc <menuMEF_reset_state>
//		HAL_GPIO_TogglePin(port, pin);
//		HAL_Delay(period);
//	}
//	executingRoutine = false;
//	menuMEF_reset_state();
}
 8000b62:	bf00      	nop
 8000b64:	3710      	adds	r7, #16
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	200000fd 	.word	0x200000fd
 8000b70:	200000fc 	.word	0x200000fc
 8000b74:	20000100 	.word	0x20000100

08000b78 <blink_stop>:

void blink_stop(GPIO_TypeDef * port, uint16_t pin){
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	460b      	mov	r3, r1
 8000b82:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(port, pin, RESET);
 8000b84:	887b      	ldrh	r3, [r7, #2]
 8000b86:	2200      	movs	r2, #0
 8000b88:	4619      	mov	r1, r3
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f000 fc15 	bl	80013ba <HAL_GPIO_WritePin>
	count = 0;
 8000b90:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <blink_stop+0x30>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	701a      	strb	r2, [r3, #0]
	executingRoutine = false;
 8000b96:	4b05      	ldr	r3, [pc, #20]	; (8000bac <blink_stop+0x34>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	701a      	strb	r2, [r3, #0]
	menuMEF_reset_state();
 8000b9c:	f7ff ff2e 	bl	80009fc <menuMEF_reset_state>
}
 8000ba0:	bf00      	nop
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	200000fd 	.word	0x200000fd
 8000bac:	200000fc 	.word	0x200000fc

08000bb0 <motor_stop>:

void motor_stop(){
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0

}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr

08000bbc <menuMEF_user_input>:

void menuMEF_user_input(){
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b0c0      	sub	sp, #256	; 0x100
 8000bc0:	af00      	add	r7, sp, #0
	uint8_t intro[] = "Ingrese a continuacion los parametros del parpadeo del led en ms"
 8000bc2:	4a2e      	ldr	r2, [pc, #184]	; (8000c7c <menuMEF_user_input+0xc0>)
 8000bc4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000bc8:	4611      	mov	r1, r2
 8000bca:	2274      	movs	r2, #116	; 0x74
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f001 fcdd 	bl	800258c <memcpy>
			"\r\nO presione ENTER para utilizar el valor en []\r\n\r\n";
	uint8_t periodPrompt[64];
	sprintf(periodPrompt,"Ingrese el Periodo [%d]: ", blinkPeriod);
 8000bd2:	4b2b      	ldr	r3, [pc, #172]	; (8000c80 <menuMEF_user_input+0xc4>)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000bda:	492a      	ldr	r1, [pc, #168]	; (8000c84 <menuMEF_user_input+0xc8>)
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f001 fc81 	bl	80024e4 <siprintf>
	uint8_t repeatPrompt[64];
	sprintf(repeatPrompt,"Ingrese las repeticiones [%d]: ", blinkPeriod);
 8000be2:	4b27      	ldr	r3, [pc, #156]	; (8000c80 <menuMEF_user_input+0xc4>)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	f107 030c 	add.w	r3, r7, #12
 8000bea:	4927      	ldr	r1, [pc, #156]	; (8000c88 <menuMEF_user_input+0xcc>)
 8000bec:	4618      	mov	r0, r3
 8000bee:	f001 fc79 	bl	80024e4 <siprintf>

	uartSendString(intro);
 8000bf2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f000 f882 	bl	8000d00 <uartSendString>

	uartSendString(periodPrompt);
 8000bfc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c00:	4618      	mov	r0, r3
 8000c02:	f000 f87d 	bl	8000d00 <uartSendString>
	uint8_t periodBuffer[4];
	uartReceiveStringSize(periodBuffer, 3);
 8000c06:	f107 0308 	add.w	r3, r7, #8
 8000c0a:	2103      	movs	r1, #3
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f000 f899 	bl	8000d44 <uartReceiveStringSize>
	uartSendString(periodBuffer);
 8000c12:	f107 0308 	add.w	r3, r7, #8
 8000c16:	4618      	mov	r0, r3
 8000c18:	f000 f872 	bl	8000d00 <uartSendString>
	uartSendString("\r\n");
 8000c1c:	481b      	ldr	r0, [pc, #108]	; (8000c8c <menuMEF_user_input+0xd0>)
 8000c1e:	f000 f86f 	bl	8000d00 <uartSendString>
	blinkPeriod = (uint8_t) atoi(periodBuffer);
 8000c22:	f107 0308 	add.w	r3, r7, #8
 8000c26:	4618      	mov	r0, r3
 8000c28:	f001 fbd0 	bl	80023cc <atoi>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	461a      	mov	r2, r3
 8000c32:	4b13      	ldr	r3, [pc, #76]	; (8000c80 <menuMEF_user_input+0xc4>)
 8000c34:	601a      	str	r2, [r3, #0]

	uartSendString(repeatPrompt);
 8000c36:	f107 030c 	add.w	r3, r7, #12
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 f860 	bl	8000d00 <uartSendString>
	uint8_t repeatBuffer[3];
	uartReceiveStringSize(repeatBuffer, 2);
 8000c40:	1d3b      	adds	r3, r7, #4
 8000c42:	2102      	movs	r1, #2
 8000c44:	4618      	mov	r0, r3
 8000c46:	f000 f87d 	bl	8000d44 <uartReceiveStringSize>
	uartSendString(repeatBuffer);
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f000 f857 	bl	8000d00 <uartSendString>
	uartSendString("\r\n");
 8000c52:	480e      	ldr	r0, [pc, #56]	; (8000c8c <menuMEF_user_input+0xd0>)
 8000c54:	f000 f854 	bl	8000d00 <uartSendString>
	blinkRepeat = (uint8_t) atoi(repeatBuffer);
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f001 fbb6 	bl	80023cc <atoi>
 8000c60:	4603      	mov	r3, r0
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	461a      	mov	r2, r3
 8000c66:	4b0a      	ldr	r3, [pc, #40]	; (8000c90 <menuMEF_user_input+0xd4>)
 8000c68:	601a      	str	r2, [r3, #0]


	uartSendString("Comienzo...\r\n");
 8000c6a:	480a      	ldr	r0, [pc, #40]	; (8000c94 <menuMEF_user_input+0xd8>)
 8000c6c:	f000 f848 	bl	8000d00 <uartSendString>
}
 8000c70:	bf00      	nop
 8000c72:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	08002eec 	.word	0x08002eec
 8000c80:	20000004 	.word	0x20000004
 8000c84:	08002e9c 	.word	0x08002e9c
 8000c88:	08002eb8 	.word	0x08002eb8
 8000c8c:	08002ed8 	.word	0x08002ed8
 8000c90:	20000008 	.word	0x20000008
 8000c94:	08002edc 	.word	0x08002edc

08000c98 <uartInit>:

/* > Descripcion: Inicializa la uart con la configuracion preestablecida y envia dicha config a la terminal
 * > Parametro: ninguno
 * > Retorno: retorna un boolt_t true en caso exito o false caso contrario
 */
bool_t uartInit(){
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
	// uartHandle >> estructura de dato UART_HandleTypeDef declarada en API_uart.h
	bool_t returnFlag = false;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	71fb      	strb	r3, [r7, #7]

	uartHandle.Instance = USE_USART; // instancia de la uart >> usb conectado a usart2
 8000ca2:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <uartInit+0x5c>)
 8000ca4:	4a14      	ldr	r2, [pc, #80]	; (8000cf8 <uartInit+0x60>)
 8000ca6:	601a      	str	r2, [r3, #0]
	uartHandle.Init.BaudRate = 9600; // baudrate tipico
 8000ca8:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <uartInit+0x5c>)
 8000caa:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000cae:	605a      	str	r2, [r3, #4]
	uartHandle.Init.WordLength = UART_WORDLENGTH_8B; // tamano de los datos >> 8 bits
 8000cb0:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <uartInit+0x5c>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	609a      	str	r2, [r3, #8]
	uartHandle.Init.StopBits = UART_STOPBITS_1; // cantidad de stop bits >> 1 solo
 8000cb6:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <uartInit+0x5c>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	60da      	str	r2, [r3, #12]
	uartHandle.Init.Parity = UART_PARITY_NONE; // tipo de paridad >> ninguno
 8000cbc:	4b0d      	ldr	r3, [pc, #52]	; (8000cf4 <uartInit+0x5c>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	611a      	str	r2, [r3, #16]
	uartHandle.Init.Mode = UART_MODE_TX_RX; // modo recepcion/recepcion habilitado
 8000cc2:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <uartInit+0x5c>)
 8000cc4:	220c      	movs	r2, #12
 8000cc6:	615a      	str	r2, [r3, #20]
	uartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE; // sin control de flujo por hardware
 8000cc8:	4b0a      	ldr	r3, [pc, #40]	; (8000cf4 <uartInit+0x5c>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	619a      	str	r2, [r3, #24]
	uartHandle.Init.OverSampling = UART_OVERSAMPLING_16; // cantidad de muestras por tiempo de bit
 8000cce:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <uartInit+0x5c>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	61da      	str	r2, [r3, #28]

	if (HAL_UART_Init(&uartHandle) == HAL_OK){ // retornar true si es exitosa la configuracion
 8000cd4:	4807      	ldr	r0, [pc, #28]	; (8000cf4 <uartInit+0x5c>)
 8000cd6:	f001 f917 	bl	8001f08 <HAL_UART_Init>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d104      	bne.n	8000cea <uartInit+0x52>
		//print_uart_config(uartHandle); // imprimir configuracion si la config fue exitosa
		uartSendString("\r\n**************************** INICIO ****************************\r\n");
 8000ce0:	4806      	ldr	r0, [pc, #24]	; (8000cfc <uartInit+0x64>)
 8000ce2:	f000 f80d 	bl	8000d00 <uartSendString>
		returnFlag = true;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	71fb      	strb	r3, [r7, #7]
	}

	return returnFlag;
 8000cea:	79fb      	ldrb	r3, [r7, #7]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	2000010c 	.word	0x2000010c
 8000cf8:	40004400 	.word	0x40004400
 8000cfc:	08002f60 	.word	0x08002f60

08000d00 <uartSendString>:
/* > Descripcion: envia un string (buffer <pstring>) por la uart, finalizando en el caracter NULL
 * > Parametro: <pstring> puntero del tipo uint8_t
 * 				El buffer de envio tendra una cantidad maxima de caracteres definida en <SEND_BUFFER_MAX_SIZE>
 * > Retorno: ninguno
 */
void uartSendString(uint8_t * pstring){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
	// pstring se envia sin tamano debe recorrerse incrementando la direccion por aritmetica de pointers
	uint16_t index = 0; // indice para recorrer array pstring, admite hasta 2^16 caracteres
 8000d08:	2300      	movs	r3, #0
 8000d0a:	81fb      	strh	r3, [r7, #14]
	while(1){
		if( (*(pstring+index) == '\0') || (index > SEND_BUFFER_MAX_SIZE) ) break; // al encontrarse el NULL salir de funcion
 8000d0c:	89fb      	ldrh	r3, [r7, #14]
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	4413      	add	r3, r2
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d00e      	beq.n	8000d36 <uartSendString+0x36>
 8000d18:	89fb      	ldrh	r3, [r7, #14]
 8000d1a:	2b7f      	cmp	r3, #127	; 0x7f
 8000d1c:	d80b      	bhi.n	8000d36 <uartSendString+0x36>
		HAL_UART_Transmit(&uartHandle, (pstring+index), 1, 100); // enviar caracter x caracter
 8000d1e:	89fb      	ldrh	r3, [r7, #14]
 8000d20:	687a      	ldr	r2, [r7, #4]
 8000d22:	18d1      	adds	r1, r2, r3
 8000d24:	2364      	movs	r3, #100	; 0x64
 8000d26:	2201      	movs	r2, #1
 8000d28:	4805      	ldr	r0, [pc, #20]	; (8000d40 <uartSendString+0x40>)
 8000d2a:	f001 f93d 	bl	8001fa8 <HAL_UART_Transmit>
		index++;
 8000d2e:	89fb      	ldrh	r3, [r7, #14]
 8000d30:	3301      	adds	r3, #1
 8000d32:	81fb      	strh	r3, [r7, #14]
		if( (*(pstring+index) == '\0') || (index > SEND_BUFFER_MAX_SIZE) ) break; // al encontrarse el NULL salir de funcion
 8000d34:	e7ea      	b.n	8000d0c <uartSendString+0xc>
	}
}
 8000d36:	bf00      	nop
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	2000010c 	.word	0x2000010c

08000d44 <uartReceiveStringSize>:
/* > Descripcion: recibe una cantidad de caracteres contenidas en un string por la uart y las almacena en el buffer <pstring>
 * > Parametro: <pstring> puntero del tipo uint8_t / <size> cantidad de caracteres a recibir rango [1-2^16]
 * > 			El buffer de recepcion tendra una cantidad maxima de caracteres definida en <RECEIVE_BUFFER_MAX_SIZE>
 * > Retorno: ninguno
 */
void uartReceiveStringSize(uint8_t * pstring, uint16_t size){
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	807b      	strh	r3, [r7, #2]
	// limitar el rango del buffer de entrada
	if(size > RECEIVE_BUFFER_MAX_SIZE) size = RECEIVE_BUFFER_MAX_SIZE;
 8000d50:	887b      	ldrh	r3, [r7, #2]
 8000d52:	2b3f      	cmp	r3, #63	; 0x3f
 8000d54:	d901      	bls.n	8000d5a <uartReceiveStringSize+0x16>
 8000d56:	233f      	movs	r3, #63	; 0x3f
 8000d58:	807b      	strh	r3, [r7, #2]
	if(size < 1 ) size = 1;
 8000d5a:	887b      	ldrh	r3, [r7, #2]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d101      	bne.n	8000d64 <uartReceiveStringSize+0x20>
 8000d60:	2301      	movs	r3, #1
 8000d62:	807b      	strh	r3, [r7, #2]

	uint16_t index = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	81fb      	strh	r3, [r7, #14]
	while(1){
		if( index == size ) break; // finalizar while al alzancar la cant de caracteres indicada
 8000d68:	89fa      	ldrh	r2, [r7, #14]
 8000d6a:	887b      	ldrh	r3, [r7, #2]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d00c      	beq.n	8000d8a <uartReceiveStringSize+0x46>
		HAL_UART_Receive(&uartHandle, (pstring+index), 1, HAL_MAX_DELAY); // recibir y esperar cada caracter hasta <size>
 8000d70:	89fb      	ldrh	r3, [r7, #14]
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	18d1      	adds	r1, r2, r3
 8000d76:	f04f 33ff 	mov.w	r3, #4294967295
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	4808      	ldr	r0, [pc, #32]	; (8000da0 <uartReceiveStringSize+0x5c>)
 8000d7e:	f001 f996 	bl	80020ae <HAL_UART_Receive>
		index++;
 8000d82:	89fb      	ldrh	r3, [r7, #14]
 8000d84:	3301      	adds	r3, #1
 8000d86:	81fb      	strh	r3, [r7, #14]
		if( index == size ) break; // finalizar while al alzancar la cant de caracteres indicada
 8000d88:	e7ee      	b.n	8000d68 <uartReceiveStringSize+0x24>
 8000d8a:	bf00      	nop
	}

	*(pstring+index) = '\0'; // agregar el NULL al final para conformar el string
 8000d8c:	89fb      	ldrh	r3, [r7, #14]
 8000d8e:	687a      	ldr	r2, [r7, #4]
 8000d90:	4413      	add	r3, r2
 8000d92:	2200      	movs	r2, #0
 8000d94:	701a      	strb	r2, [r3, #0]
}
 8000d96:	bf00      	nop
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	2000010c 	.word	0x2000010c

08000da4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da8:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <HAL_Init+0x28>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a07      	ldr	r2, [pc, #28]	; (8000dcc <HAL_Init+0x28>)
 8000dae:	f043 0310 	orr.w	r3, r3, #16
 8000db2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db4:	2003      	movs	r0, #3
 8000db6:	f000 f923 	bl	8001000 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dba:	2000      	movs	r0, #0
 8000dbc:	f000 f808 	bl	8000dd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dc0:	f7ff fac0 	bl	8000344 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40022000 	.word	0x40022000

08000dd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dd8:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <HAL_InitTick+0x54>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <HAL_InitTick+0x58>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	4619      	mov	r1, r3
 8000de2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000de6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dee:	4618      	mov	r0, r3
 8000df0:	f000 f93b 	bl	800106a <HAL_SYSTICK_Config>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e00e      	b.n	8000e1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2b0f      	cmp	r3, #15
 8000e02:	d80a      	bhi.n	8000e1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e04:	2200      	movs	r2, #0
 8000e06:	6879      	ldr	r1, [r7, #4]
 8000e08:	f04f 30ff 	mov.w	r0, #4294967295
 8000e0c:	f000 f903 	bl	8001016 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e10:	4a06      	ldr	r2, [pc, #24]	; (8000e2c <HAL_InitTick+0x5c>)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e16:	2300      	movs	r3, #0
 8000e18:	e000      	b.n	8000e1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000000 	.word	0x20000000
 8000e28:	20000010 	.word	0x20000010
 8000e2c:	2000000c 	.word	0x2000000c

08000e30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e34:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <HAL_IncTick+0x1c>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <HAL_IncTick+0x20>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4413      	add	r3, r2
 8000e40:	4a03      	ldr	r2, [pc, #12]	; (8000e50 <HAL_IncTick+0x20>)
 8000e42:	6013      	str	r3, [r2, #0]
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr
 8000e4c:	20000010 	.word	0x20000010
 8000e50:	20000154 	.word	0x20000154

08000e54 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  return uwTick;
 8000e58:	4b02      	ldr	r3, [pc, #8]	; (8000e64 <HAL_GetTick+0x10>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr
 8000e64:	20000154 	.word	0x20000154

08000e68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e78:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <__NVIC_SetPriorityGrouping+0x44>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e7e:	68ba      	ldr	r2, [r7, #8]
 8000e80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e84:	4013      	ands	r3, r2
 8000e86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e9a:	4a04      	ldr	r2, [pc, #16]	; (8000eac <__NVIC_SetPriorityGrouping+0x44>)
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	60d3      	str	r3, [r2, #12]
}
 8000ea0:	bf00      	nop
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc80      	pop	{r7}
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb4:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <__NVIC_GetPriorityGrouping+0x18>)
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	0a1b      	lsrs	r3, r3, #8
 8000eba:	f003 0307 	and.w	r3, r3, #7
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bc80      	pop	{r7}
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	db0b      	blt.n	8000ef6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	f003 021f 	and.w	r2, r3, #31
 8000ee4:	4906      	ldr	r1, [pc, #24]	; (8000f00 <__NVIC_EnableIRQ+0x34>)
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	095b      	lsrs	r3, r3, #5
 8000eec:	2001      	movs	r0, #1
 8000eee:	fa00 f202 	lsl.w	r2, r0, r2
 8000ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr
 8000f00:	e000e100 	.word	0xe000e100

08000f04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	6039      	str	r1, [r7, #0]
 8000f0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	db0a      	blt.n	8000f2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	490c      	ldr	r1, [pc, #48]	; (8000f50 <__NVIC_SetPriority+0x4c>)
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	0112      	lsls	r2, r2, #4
 8000f24:	b2d2      	uxtb	r2, r2
 8000f26:	440b      	add	r3, r1
 8000f28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f2c:	e00a      	b.n	8000f44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	b2da      	uxtb	r2, r3
 8000f32:	4908      	ldr	r1, [pc, #32]	; (8000f54 <__NVIC_SetPriority+0x50>)
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	f003 030f 	and.w	r3, r3, #15
 8000f3a:	3b04      	subs	r3, #4
 8000f3c:	0112      	lsls	r2, r2, #4
 8000f3e:	b2d2      	uxtb	r2, r2
 8000f40:	440b      	add	r3, r1
 8000f42:	761a      	strb	r2, [r3, #24]
}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bc80      	pop	{r7}
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	e000e100 	.word	0xe000e100
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b089      	sub	sp, #36	; 0x24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	f003 0307 	and.w	r3, r3, #7
 8000f6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	f1c3 0307 	rsb	r3, r3, #7
 8000f72:	2b04      	cmp	r3, #4
 8000f74:	bf28      	it	cs
 8000f76:	2304      	movcs	r3, #4
 8000f78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	3304      	adds	r3, #4
 8000f7e:	2b06      	cmp	r3, #6
 8000f80:	d902      	bls.n	8000f88 <NVIC_EncodePriority+0x30>
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	3b03      	subs	r3, #3
 8000f86:	e000      	b.n	8000f8a <NVIC_EncodePriority+0x32>
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43da      	mvns	r2, r3
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	401a      	ands	r2, r3
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8000faa:	43d9      	mvns	r1, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb0:	4313      	orrs	r3, r2
         );
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3724      	adds	r7, #36	; 0x24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc80      	pop	{r7}
 8000fba:	4770      	bx	lr

08000fbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fcc:	d301      	bcc.n	8000fd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e00f      	b.n	8000ff2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fd2:	4a0a      	ldr	r2, [pc, #40]	; (8000ffc <SysTick_Config+0x40>)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fda:	210f      	movs	r1, #15
 8000fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe0:	f7ff ff90 	bl	8000f04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe4:	4b05      	ldr	r3, [pc, #20]	; (8000ffc <SysTick_Config+0x40>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fea:	4b04      	ldr	r3, [pc, #16]	; (8000ffc <SysTick_Config+0x40>)
 8000fec:	2207      	movs	r2, #7
 8000fee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	e000e010 	.word	0xe000e010

08001000 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f7ff ff2d 	bl	8000e68 <__NVIC_SetPriorityGrouping>
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001016:	b580      	push	{r7, lr}
 8001018:	b086      	sub	sp, #24
 800101a:	af00      	add	r7, sp, #0
 800101c:	4603      	mov	r3, r0
 800101e:	60b9      	str	r1, [r7, #8]
 8001020:	607a      	str	r2, [r7, #4]
 8001022:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001028:	f7ff ff42 	bl	8000eb0 <__NVIC_GetPriorityGrouping>
 800102c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	68b9      	ldr	r1, [r7, #8]
 8001032:	6978      	ldr	r0, [r7, #20]
 8001034:	f7ff ff90 	bl	8000f58 <NVIC_EncodePriority>
 8001038:	4602      	mov	r2, r0
 800103a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800103e:	4611      	mov	r1, r2
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff5f 	bl	8000f04 <__NVIC_SetPriority>
}
 8001046:	bf00      	nop
 8001048:	3718      	adds	r7, #24
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
 8001054:	4603      	mov	r3, r0
 8001056:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ff35 	bl	8000ecc <__NVIC_EnableIRQ>
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b082      	sub	sp, #8
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f7ff ffa2 	bl	8000fbc <SysTick_Config>
 8001078:	4603      	mov	r3, r0
}
 800107a:	4618      	mov	r0, r3
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
	...

08001084 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001084:	b480      	push	{r7}
 8001086:	b08b      	sub	sp, #44	; 0x2c
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800108e:	2300      	movs	r3, #0
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001092:	2300      	movs	r3, #0
 8001094:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001096:	e169      	b.n	800136c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001098:	2201      	movs	r2, #1
 800109a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	69fa      	ldr	r2, [r7, #28]
 80010a8:	4013      	ands	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	f040 8158 	bne.w	8001366 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	4a9a      	ldr	r2, [pc, #616]	; (8001324 <HAL_GPIO_Init+0x2a0>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d05e      	beq.n	800117e <HAL_GPIO_Init+0xfa>
 80010c0:	4a98      	ldr	r2, [pc, #608]	; (8001324 <HAL_GPIO_Init+0x2a0>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d875      	bhi.n	80011b2 <HAL_GPIO_Init+0x12e>
 80010c6:	4a98      	ldr	r2, [pc, #608]	; (8001328 <HAL_GPIO_Init+0x2a4>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d058      	beq.n	800117e <HAL_GPIO_Init+0xfa>
 80010cc:	4a96      	ldr	r2, [pc, #600]	; (8001328 <HAL_GPIO_Init+0x2a4>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d86f      	bhi.n	80011b2 <HAL_GPIO_Init+0x12e>
 80010d2:	4a96      	ldr	r2, [pc, #600]	; (800132c <HAL_GPIO_Init+0x2a8>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d052      	beq.n	800117e <HAL_GPIO_Init+0xfa>
 80010d8:	4a94      	ldr	r2, [pc, #592]	; (800132c <HAL_GPIO_Init+0x2a8>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d869      	bhi.n	80011b2 <HAL_GPIO_Init+0x12e>
 80010de:	4a94      	ldr	r2, [pc, #592]	; (8001330 <HAL_GPIO_Init+0x2ac>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d04c      	beq.n	800117e <HAL_GPIO_Init+0xfa>
 80010e4:	4a92      	ldr	r2, [pc, #584]	; (8001330 <HAL_GPIO_Init+0x2ac>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d863      	bhi.n	80011b2 <HAL_GPIO_Init+0x12e>
 80010ea:	4a92      	ldr	r2, [pc, #584]	; (8001334 <HAL_GPIO_Init+0x2b0>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d046      	beq.n	800117e <HAL_GPIO_Init+0xfa>
 80010f0:	4a90      	ldr	r2, [pc, #576]	; (8001334 <HAL_GPIO_Init+0x2b0>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d85d      	bhi.n	80011b2 <HAL_GPIO_Init+0x12e>
 80010f6:	2b12      	cmp	r3, #18
 80010f8:	d82a      	bhi.n	8001150 <HAL_GPIO_Init+0xcc>
 80010fa:	2b12      	cmp	r3, #18
 80010fc:	d859      	bhi.n	80011b2 <HAL_GPIO_Init+0x12e>
 80010fe:	a201      	add	r2, pc, #4	; (adr r2, 8001104 <HAL_GPIO_Init+0x80>)
 8001100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001104:	0800117f 	.word	0x0800117f
 8001108:	08001159 	.word	0x08001159
 800110c:	0800116b 	.word	0x0800116b
 8001110:	080011ad 	.word	0x080011ad
 8001114:	080011b3 	.word	0x080011b3
 8001118:	080011b3 	.word	0x080011b3
 800111c:	080011b3 	.word	0x080011b3
 8001120:	080011b3 	.word	0x080011b3
 8001124:	080011b3 	.word	0x080011b3
 8001128:	080011b3 	.word	0x080011b3
 800112c:	080011b3 	.word	0x080011b3
 8001130:	080011b3 	.word	0x080011b3
 8001134:	080011b3 	.word	0x080011b3
 8001138:	080011b3 	.word	0x080011b3
 800113c:	080011b3 	.word	0x080011b3
 8001140:	080011b3 	.word	0x080011b3
 8001144:	080011b3 	.word	0x080011b3
 8001148:	08001161 	.word	0x08001161
 800114c:	08001175 	.word	0x08001175
 8001150:	4a79      	ldr	r2, [pc, #484]	; (8001338 <HAL_GPIO_Init+0x2b4>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d013      	beq.n	800117e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001156:	e02c      	b.n	80011b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	623b      	str	r3, [r7, #32]
          break;
 800115e:	e029      	b.n	80011b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	3304      	adds	r3, #4
 8001166:	623b      	str	r3, [r7, #32]
          break;
 8001168:	e024      	b.n	80011b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	68db      	ldr	r3, [r3, #12]
 800116e:	3308      	adds	r3, #8
 8001170:	623b      	str	r3, [r7, #32]
          break;
 8001172:	e01f      	b.n	80011b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	330c      	adds	r3, #12
 800117a:	623b      	str	r3, [r7, #32]
          break;
 800117c:	e01a      	b.n	80011b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d102      	bne.n	800118c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001186:	2304      	movs	r3, #4
 8001188:	623b      	str	r3, [r7, #32]
          break;
 800118a:	e013      	b.n	80011b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d105      	bne.n	80011a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001194:	2308      	movs	r3, #8
 8001196:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	69fa      	ldr	r2, [r7, #28]
 800119c:	611a      	str	r2, [r3, #16]
          break;
 800119e:	e009      	b.n	80011b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011a0:	2308      	movs	r3, #8
 80011a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	69fa      	ldr	r2, [r7, #28]
 80011a8:	615a      	str	r2, [r3, #20]
          break;
 80011aa:	e003      	b.n	80011b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011ac:	2300      	movs	r3, #0
 80011ae:	623b      	str	r3, [r7, #32]
          break;
 80011b0:	e000      	b.n	80011b4 <HAL_GPIO_Init+0x130>
          break;
 80011b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	2bff      	cmp	r3, #255	; 0xff
 80011b8:	d801      	bhi.n	80011be <HAL_GPIO_Init+0x13a>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	e001      	b.n	80011c2 <HAL_GPIO_Init+0x13e>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	3304      	adds	r3, #4
 80011c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	2bff      	cmp	r3, #255	; 0xff
 80011c8:	d802      	bhi.n	80011d0 <HAL_GPIO_Init+0x14c>
 80011ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	e002      	b.n	80011d6 <HAL_GPIO_Init+0x152>
 80011d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d2:	3b08      	subs	r3, #8
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	210f      	movs	r1, #15
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	fa01 f303 	lsl.w	r3, r1, r3
 80011e4:	43db      	mvns	r3, r3
 80011e6:	401a      	ands	r2, r3
 80011e8:	6a39      	ldr	r1, [r7, #32]
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	fa01 f303 	lsl.w	r3, r1, r3
 80011f0:	431a      	orrs	r2, r3
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	f000 80b1 	beq.w	8001366 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001204:	4b4d      	ldr	r3, [pc, #308]	; (800133c <HAL_GPIO_Init+0x2b8>)
 8001206:	699b      	ldr	r3, [r3, #24]
 8001208:	4a4c      	ldr	r2, [pc, #304]	; (800133c <HAL_GPIO_Init+0x2b8>)
 800120a:	f043 0301 	orr.w	r3, r3, #1
 800120e:	6193      	str	r3, [r2, #24]
 8001210:	4b4a      	ldr	r3, [pc, #296]	; (800133c <HAL_GPIO_Init+0x2b8>)
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	f003 0301 	and.w	r3, r3, #1
 8001218:	60bb      	str	r3, [r7, #8]
 800121a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800121c:	4a48      	ldr	r2, [pc, #288]	; (8001340 <HAL_GPIO_Init+0x2bc>)
 800121e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001220:	089b      	lsrs	r3, r3, #2
 8001222:	3302      	adds	r3, #2
 8001224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001228:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800122a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122c:	f003 0303 	and.w	r3, r3, #3
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	220f      	movs	r2, #15
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	43db      	mvns	r3, r3
 800123a:	68fa      	ldr	r2, [r7, #12]
 800123c:	4013      	ands	r3, r2
 800123e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a40      	ldr	r2, [pc, #256]	; (8001344 <HAL_GPIO_Init+0x2c0>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d013      	beq.n	8001270 <HAL_GPIO_Init+0x1ec>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4a3f      	ldr	r2, [pc, #252]	; (8001348 <HAL_GPIO_Init+0x2c4>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d00d      	beq.n	800126c <HAL_GPIO_Init+0x1e8>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4a3e      	ldr	r2, [pc, #248]	; (800134c <HAL_GPIO_Init+0x2c8>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d007      	beq.n	8001268 <HAL_GPIO_Init+0x1e4>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4a3d      	ldr	r2, [pc, #244]	; (8001350 <HAL_GPIO_Init+0x2cc>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d101      	bne.n	8001264 <HAL_GPIO_Init+0x1e0>
 8001260:	2303      	movs	r3, #3
 8001262:	e006      	b.n	8001272 <HAL_GPIO_Init+0x1ee>
 8001264:	2304      	movs	r3, #4
 8001266:	e004      	b.n	8001272 <HAL_GPIO_Init+0x1ee>
 8001268:	2302      	movs	r3, #2
 800126a:	e002      	b.n	8001272 <HAL_GPIO_Init+0x1ee>
 800126c:	2301      	movs	r3, #1
 800126e:	e000      	b.n	8001272 <HAL_GPIO_Init+0x1ee>
 8001270:	2300      	movs	r3, #0
 8001272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001274:	f002 0203 	and.w	r2, r2, #3
 8001278:	0092      	lsls	r2, r2, #2
 800127a:	4093      	lsls	r3, r2
 800127c:	68fa      	ldr	r2, [r7, #12]
 800127e:	4313      	orrs	r3, r2
 8001280:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001282:	492f      	ldr	r1, [pc, #188]	; (8001340 <HAL_GPIO_Init+0x2bc>)
 8001284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001286:	089b      	lsrs	r3, r3, #2
 8001288:	3302      	adds	r3, #2
 800128a:	68fa      	ldr	r2, [r7, #12]
 800128c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d006      	beq.n	80012aa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800129c:	4b2d      	ldr	r3, [pc, #180]	; (8001354 <HAL_GPIO_Init+0x2d0>)
 800129e:	689a      	ldr	r2, [r3, #8]
 80012a0:	492c      	ldr	r1, [pc, #176]	; (8001354 <HAL_GPIO_Init+0x2d0>)
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	608b      	str	r3, [r1, #8]
 80012a8:	e006      	b.n	80012b8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012aa:	4b2a      	ldr	r3, [pc, #168]	; (8001354 <HAL_GPIO_Init+0x2d0>)
 80012ac:	689a      	ldr	r2, [r3, #8]
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	43db      	mvns	r3, r3
 80012b2:	4928      	ldr	r1, [pc, #160]	; (8001354 <HAL_GPIO_Init+0x2d0>)
 80012b4:	4013      	ands	r3, r2
 80012b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d006      	beq.n	80012d2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012c4:	4b23      	ldr	r3, [pc, #140]	; (8001354 <HAL_GPIO_Init+0x2d0>)
 80012c6:	68da      	ldr	r2, [r3, #12]
 80012c8:	4922      	ldr	r1, [pc, #136]	; (8001354 <HAL_GPIO_Init+0x2d0>)
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	60cb      	str	r3, [r1, #12]
 80012d0:	e006      	b.n	80012e0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012d2:	4b20      	ldr	r3, [pc, #128]	; (8001354 <HAL_GPIO_Init+0x2d0>)
 80012d4:	68da      	ldr	r2, [r3, #12]
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	43db      	mvns	r3, r3
 80012da:	491e      	ldr	r1, [pc, #120]	; (8001354 <HAL_GPIO_Init+0x2d0>)
 80012dc:	4013      	ands	r3, r2
 80012de:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d006      	beq.n	80012fa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012ec:	4b19      	ldr	r3, [pc, #100]	; (8001354 <HAL_GPIO_Init+0x2d0>)
 80012ee:	685a      	ldr	r2, [r3, #4]
 80012f0:	4918      	ldr	r1, [pc, #96]	; (8001354 <HAL_GPIO_Init+0x2d0>)
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	604b      	str	r3, [r1, #4]
 80012f8:	e006      	b.n	8001308 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012fa:	4b16      	ldr	r3, [pc, #88]	; (8001354 <HAL_GPIO_Init+0x2d0>)
 80012fc:	685a      	ldr	r2, [r3, #4]
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	43db      	mvns	r3, r3
 8001302:	4914      	ldr	r1, [pc, #80]	; (8001354 <HAL_GPIO_Init+0x2d0>)
 8001304:	4013      	ands	r3, r2
 8001306:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d021      	beq.n	8001358 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001314:	4b0f      	ldr	r3, [pc, #60]	; (8001354 <HAL_GPIO_Init+0x2d0>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	490e      	ldr	r1, [pc, #56]	; (8001354 <HAL_GPIO_Init+0x2d0>)
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	4313      	orrs	r3, r2
 800131e:	600b      	str	r3, [r1, #0]
 8001320:	e021      	b.n	8001366 <HAL_GPIO_Init+0x2e2>
 8001322:	bf00      	nop
 8001324:	10320000 	.word	0x10320000
 8001328:	10310000 	.word	0x10310000
 800132c:	10220000 	.word	0x10220000
 8001330:	10210000 	.word	0x10210000
 8001334:	10120000 	.word	0x10120000
 8001338:	10110000 	.word	0x10110000
 800133c:	40021000 	.word	0x40021000
 8001340:	40010000 	.word	0x40010000
 8001344:	40010800 	.word	0x40010800
 8001348:	40010c00 	.word	0x40010c00
 800134c:	40011000 	.word	0x40011000
 8001350:	40011400 	.word	0x40011400
 8001354:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001358:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <HAL_GPIO_Init+0x304>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	43db      	mvns	r3, r3
 8001360:	4909      	ldr	r1, [pc, #36]	; (8001388 <HAL_GPIO_Init+0x304>)
 8001362:	4013      	ands	r3, r2
 8001364:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001368:	3301      	adds	r3, #1
 800136a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001372:	fa22 f303 	lsr.w	r3, r2, r3
 8001376:	2b00      	cmp	r3, #0
 8001378:	f47f ae8e 	bne.w	8001098 <HAL_GPIO_Init+0x14>
  }
}
 800137c:	bf00      	nop
 800137e:	bf00      	nop
 8001380:	372c      	adds	r7, #44	; 0x2c
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr
 8001388:	40010400 	.word	0x40010400

0800138c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	460b      	mov	r3, r1
 8001396:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689a      	ldr	r2, [r3, #8]
 800139c:	887b      	ldrh	r3, [r7, #2]
 800139e:	4013      	ands	r3, r2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d002      	beq.n	80013aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013a4:	2301      	movs	r3, #1
 80013a6:	73fb      	strb	r3, [r7, #15]
 80013a8:	e001      	b.n	80013ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013aa:	2300      	movs	r3, #0
 80013ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bc80      	pop	{r7}
 80013b8:	4770      	bx	lr

080013ba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013ba:	b480      	push	{r7}
 80013bc:	b083      	sub	sp, #12
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
 80013c2:	460b      	mov	r3, r1
 80013c4:	807b      	strh	r3, [r7, #2]
 80013c6:	4613      	mov	r3, r2
 80013c8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013ca:	787b      	ldrb	r3, [r7, #1]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d003      	beq.n	80013d8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013d0:	887a      	ldrh	r2, [r7, #2]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013d6:	e003      	b.n	80013e0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013d8:	887b      	ldrh	r3, [r7, #2]
 80013da:	041a      	lsls	r2, r3, #16
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	611a      	str	r2, [r3, #16]
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bc80      	pop	{r7}
 80013e8:	4770      	bx	lr

080013ea <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013ea:	b480      	push	{r7}
 80013ec:	b085      	sub	sp, #20
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
 80013f2:	460b      	mov	r3, r1
 80013f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013fc:	887a      	ldrh	r2, [r7, #2]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	4013      	ands	r3, r2
 8001402:	041a      	lsls	r2, r3, #16
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	43d9      	mvns	r1, r3
 8001408:	887b      	ldrh	r3, [r7, #2]
 800140a:	400b      	ands	r3, r1
 800140c:	431a      	orrs	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	611a      	str	r2, [r3, #16]
}
 8001412:	bf00      	nop
 8001414:	3714      	adds	r7, #20
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr

0800141c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001426:	4b08      	ldr	r3, [pc, #32]	; (8001448 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001428:	695a      	ldr	r2, [r3, #20]
 800142a:	88fb      	ldrh	r3, [r7, #6]
 800142c:	4013      	ands	r3, r2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d006      	beq.n	8001440 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001432:	4a05      	ldr	r2, [pc, #20]	; (8001448 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001434:	88fb      	ldrh	r3, [r7, #6]
 8001436:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001438:	88fb      	ldrh	r3, [r7, #6]
 800143a:	4618      	mov	r0, r3
 800143c:	f000 f806 	bl	800144c <HAL_GPIO_EXTI_Callback>
  }
}
 8001440:	bf00      	nop
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40010400 	.word	0x40010400

0800144c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr

08001460 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d101      	bne.n	8001472 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e12b      	b.n	80016ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b00      	cmp	r3, #0
 800147c:	d106      	bne.n	800148c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7fe ff8e 	bl	80003a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2224      	movs	r2, #36	; 0x24
 8001490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f022 0201 	bic.w	r2, r2, #1
 80014a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014c4:	f000 fcda 	bl	8001e7c <HAL_RCC_GetPCLK1Freq>
 80014c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	4a81      	ldr	r2, [pc, #516]	; (80016d4 <HAL_I2C_Init+0x274>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d807      	bhi.n	80014e4 <HAL_I2C_Init+0x84>
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	4a80      	ldr	r2, [pc, #512]	; (80016d8 <HAL_I2C_Init+0x278>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	bf94      	ite	ls
 80014dc:	2301      	movls	r3, #1
 80014de:	2300      	movhi	r3, #0
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	e006      	b.n	80014f2 <HAL_I2C_Init+0x92>
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	4a7d      	ldr	r2, [pc, #500]	; (80016dc <HAL_I2C_Init+0x27c>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	bf94      	ite	ls
 80014ec:	2301      	movls	r3, #1
 80014ee:	2300      	movhi	r3, #0
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e0e7      	b.n	80016ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	4a78      	ldr	r2, [pc, #480]	; (80016e0 <HAL_I2C_Init+0x280>)
 80014fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001502:	0c9b      	lsrs	r3, r3, #18
 8001504:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	68ba      	ldr	r2, [r7, #8]
 8001516:	430a      	orrs	r2, r1
 8001518:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	6a1b      	ldr	r3, [r3, #32]
 8001520:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	4a6a      	ldr	r2, [pc, #424]	; (80016d4 <HAL_I2C_Init+0x274>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d802      	bhi.n	8001534 <HAL_I2C_Init+0xd4>
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	3301      	adds	r3, #1
 8001532:	e009      	b.n	8001548 <HAL_I2C_Init+0xe8>
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800153a:	fb02 f303 	mul.w	r3, r2, r3
 800153e:	4a69      	ldr	r2, [pc, #420]	; (80016e4 <HAL_I2C_Init+0x284>)
 8001540:	fba2 2303 	umull	r2, r3, r2, r3
 8001544:	099b      	lsrs	r3, r3, #6
 8001546:	3301      	adds	r3, #1
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	6812      	ldr	r2, [r2, #0]
 800154c:	430b      	orrs	r3, r1
 800154e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800155a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	495c      	ldr	r1, [pc, #368]	; (80016d4 <HAL_I2C_Init+0x274>)
 8001564:	428b      	cmp	r3, r1
 8001566:	d819      	bhi.n	800159c <HAL_I2C_Init+0x13c>
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	1e59      	subs	r1, r3, #1
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	fbb1 f3f3 	udiv	r3, r1, r3
 8001576:	1c59      	adds	r1, r3, #1
 8001578:	f640 73fc 	movw	r3, #4092	; 0xffc
 800157c:	400b      	ands	r3, r1
 800157e:	2b00      	cmp	r3, #0
 8001580:	d00a      	beq.n	8001598 <HAL_I2C_Init+0x138>
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	1e59      	subs	r1, r3, #1
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001590:	3301      	adds	r3, #1
 8001592:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001596:	e051      	b.n	800163c <HAL_I2C_Init+0x1dc>
 8001598:	2304      	movs	r3, #4
 800159a:	e04f      	b.n	800163c <HAL_I2C_Init+0x1dc>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d111      	bne.n	80015c8 <HAL_I2C_Init+0x168>
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	1e58      	subs	r0, r3, #1
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6859      	ldr	r1, [r3, #4]
 80015ac:	460b      	mov	r3, r1
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	440b      	add	r3, r1
 80015b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80015b6:	3301      	adds	r3, #1
 80015b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015bc:	2b00      	cmp	r3, #0
 80015be:	bf0c      	ite	eq
 80015c0:	2301      	moveq	r3, #1
 80015c2:	2300      	movne	r3, #0
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	e012      	b.n	80015ee <HAL_I2C_Init+0x18e>
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	1e58      	subs	r0, r3, #1
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6859      	ldr	r1, [r3, #4]
 80015d0:	460b      	mov	r3, r1
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	440b      	add	r3, r1
 80015d6:	0099      	lsls	r1, r3, #2
 80015d8:	440b      	add	r3, r1
 80015da:	fbb0 f3f3 	udiv	r3, r0, r3
 80015de:	3301      	adds	r3, #1
 80015e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	bf0c      	ite	eq
 80015e8:	2301      	moveq	r3, #1
 80015ea:	2300      	movne	r3, #0
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <HAL_I2C_Init+0x196>
 80015f2:	2301      	movs	r3, #1
 80015f4:	e022      	b.n	800163c <HAL_I2C_Init+0x1dc>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d10e      	bne.n	800161c <HAL_I2C_Init+0x1bc>
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	1e58      	subs	r0, r3, #1
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6859      	ldr	r1, [r3, #4]
 8001606:	460b      	mov	r3, r1
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	440b      	add	r3, r1
 800160c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001610:	3301      	adds	r3, #1
 8001612:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800161a:	e00f      	b.n	800163c <HAL_I2C_Init+0x1dc>
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	1e58      	subs	r0, r3, #1
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6859      	ldr	r1, [r3, #4]
 8001624:	460b      	mov	r3, r1
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	440b      	add	r3, r1
 800162a:	0099      	lsls	r1, r3, #2
 800162c:	440b      	add	r3, r1
 800162e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001632:	3301      	adds	r3, #1
 8001634:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001638:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800163c:	6879      	ldr	r1, [r7, #4]
 800163e:	6809      	ldr	r1, [r1, #0]
 8001640:	4313      	orrs	r3, r2
 8001642:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	69da      	ldr	r2, [r3, #28]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a1b      	ldr	r3, [r3, #32]
 8001656:	431a      	orrs	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	430a      	orrs	r2, r1
 800165e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800166a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	6911      	ldr	r1, [r2, #16]
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	68d2      	ldr	r2, [r2, #12]
 8001676:	4311      	orrs	r1, r2
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	6812      	ldr	r2, [r2, #0]
 800167c:	430b      	orrs	r3, r1
 800167e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	695a      	ldr	r2, [r3, #20]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	431a      	orrs	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	430a      	orrs	r2, r1
 800169a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f042 0201 	orr.w	r2, r2, #1
 80016aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2220      	movs	r2, #32
 80016b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	000186a0 	.word	0x000186a0
 80016d8:	001e847f 	.word	0x001e847f
 80016dc:	003d08ff 	.word	0x003d08ff
 80016e0:	431bde83 	.word	0x431bde83
 80016e4:	10624dd3 	.word	0x10624dd3

080016e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d101      	bne.n	80016fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e272      	b.n	8001be0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	2b00      	cmp	r3, #0
 8001704:	f000 8087 	beq.w	8001816 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001708:	4b92      	ldr	r3, [pc, #584]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f003 030c 	and.w	r3, r3, #12
 8001710:	2b04      	cmp	r3, #4
 8001712:	d00c      	beq.n	800172e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001714:	4b8f      	ldr	r3, [pc, #572]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f003 030c 	and.w	r3, r3, #12
 800171c:	2b08      	cmp	r3, #8
 800171e:	d112      	bne.n	8001746 <HAL_RCC_OscConfig+0x5e>
 8001720:	4b8c      	ldr	r3, [pc, #560]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800172c:	d10b      	bne.n	8001746 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800172e:	4b89      	ldr	r3, [pc, #548]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d06c      	beq.n	8001814 <HAL_RCC_OscConfig+0x12c>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d168      	bne.n	8001814 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e24c      	b.n	8001be0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800174e:	d106      	bne.n	800175e <HAL_RCC_OscConfig+0x76>
 8001750:	4b80      	ldr	r3, [pc, #512]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a7f      	ldr	r2, [pc, #508]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 8001756:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800175a:	6013      	str	r3, [r2, #0]
 800175c:	e02e      	b.n	80017bc <HAL_RCC_OscConfig+0xd4>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d10c      	bne.n	8001780 <HAL_RCC_OscConfig+0x98>
 8001766:	4b7b      	ldr	r3, [pc, #492]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a7a      	ldr	r2, [pc, #488]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 800176c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001770:	6013      	str	r3, [r2, #0]
 8001772:	4b78      	ldr	r3, [pc, #480]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a77      	ldr	r2, [pc, #476]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 8001778:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800177c:	6013      	str	r3, [r2, #0]
 800177e:	e01d      	b.n	80017bc <HAL_RCC_OscConfig+0xd4>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001788:	d10c      	bne.n	80017a4 <HAL_RCC_OscConfig+0xbc>
 800178a:	4b72      	ldr	r3, [pc, #456]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a71      	ldr	r2, [pc, #452]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 8001790:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001794:	6013      	str	r3, [r2, #0]
 8001796:	4b6f      	ldr	r3, [pc, #444]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a6e      	ldr	r2, [pc, #440]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 800179c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017a0:	6013      	str	r3, [r2, #0]
 80017a2:	e00b      	b.n	80017bc <HAL_RCC_OscConfig+0xd4>
 80017a4:	4b6b      	ldr	r3, [pc, #428]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a6a      	ldr	r2, [pc, #424]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 80017aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ae:	6013      	str	r3, [r2, #0]
 80017b0:	4b68      	ldr	r3, [pc, #416]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a67      	ldr	r2, [pc, #412]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 80017b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d013      	beq.n	80017ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c4:	f7ff fb46 	bl	8000e54 <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017cc:	f7ff fb42 	bl	8000e54 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b64      	cmp	r3, #100	; 0x64
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e200      	b.n	8001be0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017de:	4b5d      	ldr	r3, [pc, #372]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d0f0      	beq.n	80017cc <HAL_RCC_OscConfig+0xe4>
 80017ea:	e014      	b.n	8001816 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ec:	f7ff fb32 	bl	8000e54 <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017f4:	f7ff fb2e 	bl	8000e54 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b64      	cmp	r3, #100	; 0x64
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e1ec      	b.n	8001be0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001806:	4b53      	ldr	r3, [pc, #332]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1f0      	bne.n	80017f4 <HAL_RCC_OscConfig+0x10c>
 8001812:	e000      	b.n	8001816 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001814:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d063      	beq.n	80018ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001822:	4b4c      	ldr	r3, [pc, #304]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f003 030c 	and.w	r3, r3, #12
 800182a:	2b00      	cmp	r3, #0
 800182c:	d00b      	beq.n	8001846 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800182e:	4b49      	ldr	r3, [pc, #292]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f003 030c 	and.w	r3, r3, #12
 8001836:	2b08      	cmp	r3, #8
 8001838:	d11c      	bne.n	8001874 <HAL_RCC_OscConfig+0x18c>
 800183a:	4b46      	ldr	r3, [pc, #280]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d116      	bne.n	8001874 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001846:	4b43      	ldr	r3, [pc, #268]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d005      	beq.n	800185e <HAL_RCC_OscConfig+0x176>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d001      	beq.n	800185e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e1c0      	b.n	8001be0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800185e:	4b3d      	ldr	r3, [pc, #244]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	695b      	ldr	r3, [r3, #20]
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	4939      	ldr	r1, [pc, #228]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 800186e:	4313      	orrs	r3, r2
 8001870:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001872:	e03a      	b.n	80018ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	691b      	ldr	r3, [r3, #16]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d020      	beq.n	80018be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800187c:	4b36      	ldr	r3, [pc, #216]	; (8001958 <HAL_RCC_OscConfig+0x270>)
 800187e:	2201      	movs	r2, #1
 8001880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001882:	f7ff fae7 	bl	8000e54 <HAL_GetTick>
 8001886:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001888:	e008      	b.n	800189c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800188a:	f7ff fae3 	bl	8000e54 <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e1a1      	b.n	8001be0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800189c:	4b2d      	ldr	r3, [pc, #180]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d0f0      	beq.n	800188a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a8:	4b2a      	ldr	r3, [pc, #168]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	695b      	ldr	r3, [r3, #20]
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	4927      	ldr	r1, [pc, #156]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 80018b8:	4313      	orrs	r3, r2
 80018ba:	600b      	str	r3, [r1, #0]
 80018bc:	e015      	b.n	80018ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018be:	4b26      	ldr	r3, [pc, #152]	; (8001958 <HAL_RCC_OscConfig+0x270>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c4:	f7ff fac6 	bl	8000e54 <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018cc:	f7ff fac2 	bl	8000e54 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e180      	b.n	8001be0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018de:	4b1d      	ldr	r3, [pc, #116]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1f0      	bne.n	80018cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0308 	and.w	r3, r3, #8
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d03a      	beq.n	800196c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d019      	beq.n	8001932 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018fe:	4b17      	ldr	r3, [pc, #92]	; (800195c <HAL_RCC_OscConfig+0x274>)
 8001900:	2201      	movs	r2, #1
 8001902:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001904:	f7ff faa6 	bl	8000e54 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800190c:	f7ff faa2 	bl	8000e54 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e160      	b.n	8001be0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800191e:	4b0d      	ldr	r3, [pc, #52]	; (8001954 <HAL_RCC_OscConfig+0x26c>)
 8001920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d0f0      	beq.n	800190c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800192a:	2001      	movs	r0, #1
 800192c:	f000 face 	bl	8001ecc <RCC_Delay>
 8001930:	e01c      	b.n	800196c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001932:	4b0a      	ldr	r3, [pc, #40]	; (800195c <HAL_RCC_OscConfig+0x274>)
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001938:	f7ff fa8c 	bl	8000e54 <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800193e:	e00f      	b.n	8001960 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001940:	f7ff fa88 	bl	8000e54 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d908      	bls.n	8001960 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e146      	b.n	8001be0 <HAL_RCC_OscConfig+0x4f8>
 8001952:	bf00      	nop
 8001954:	40021000 	.word	0x40021000
 8001958:	42420000 	.word	0x42420000
 800195c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001960:	4b92      	ldr	r3, [pc, #584]	; (8001bac <HAL_RCC_OscConfig+0x4c4>)
 8001962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1e9      	bne.n	8001940 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	2b00      	cmp	r3, #0
 8001976:	f000 80a6 	beq.w	8001ac6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800197a:	2300      	movs	r3, #0
 800197c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800197e:	4b8b      	ldr	r3, [pc, #556]	; (8001bac <HAL_RCC_OscConfig+0x4c4>)
 8001980:	69db      	ldr	r3, [r3, #28]
 8001982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d10d      	bne.n	80019a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800198a:	4b88      	ldr	r3, [pc, #544]	; (8001bac <HAL_RCC_OscConfig+0x4c4>)
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	4a87      	ldr	r2, [pc, #540]	; (8001bac <HAL_RCC_OscConfig+0x4c4>)
 8001990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001994:	61d3      	str	r3, [r2, #28]
 8001996:	4b85      	ldr	r3, [pc, #532]	; (8001bac <HAL_RCC_OscConfig+0x4c4>)
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199e:	60bb      	str	r3, [r7, #8]
 80019a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019a2:	2301      	movs	r3, #1
 80019a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a6:	4b82      	ldr	r3, [pc, #520]	; (8001bb0 <HAL_RCC_OscConfig+0x4c8>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d118      	bne.n	80019e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019b2:	4b7f      	ldr	r3, [pc, #508]	; (8001bb0 <HAL_RCC_OscConfig+0x4c8>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a7e      	ldr	r2, [pc, #504]	; (8001bb0 <HAL_RCC_OscConfig+0x4c8>)
 80019b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019be:	f7ff fa49 	bl	8000e54 <HAL_GetTick>
 80019c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c4:	e008      	b.n	80019d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019c6:	f7ff fa45 	bl	8000e54 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b64      	cmp	r3, #100	; 0x64
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e103      	b.n	8001be0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d8:	4b75      	ldr	r3, [pc, #468]	; (8001bb0 <HAL_RCC_OscConfig+0x4c8>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d0f0      	beq.n	80019c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d106      	bne.n	80019fa <HAL_RCC_OscConfig+0x312>
 80019ec:	4b6f      	ldr	r3, [pc, #444]	; (8001bac <HAL_RCC_OscConfig+0x4c4>)
 80019ee:	6a1b      	ldr	r3, [r3, #32]
 80019f0:	4a6e      	ldr	r2, [pc, #440]	; (8001bac <HAL_RCC_OscConfig+0x4c4>)
 80019f2:	f043 0301 	orr.w	r3, r3, #1
 80019f6:	6213      	str	r3, [r2, #32]
 80019f8:	e02d      	b.n	8001a56 <HAL_RCC_OscConfig+0x36e>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d10c      	bne.n	8001a1c <HAL_RCC_OscConfig+0x334>
 8001a02:	4b6a      	ldr	r3, [pc, #424]	; (8001bac <HAL_RCC_OscConfig+0x4c4>)
 8001a04:	6a1b      	ldr	r3, [r3, #32]
 8001a06:	4a69      	ldr	r2, [pc, #420]	; (8001bac <HAL_RCC_OscConfig+0x4c4>)
 8001a08:	f023 0301 	bic.w	r3, r3, #1
 8001a0c:	6213      	str	r3, [r2, #32]
 8001a0e:	4b67      	ldr	r3, [pc, #412]	; (8001bac <HAL_RCC_OscConfig+0x4c4>)
 8001a10:	6a1b      	ldr	r3, [r3, #32]
 8001a12:	4a66      	ldr	r2, [pc, #408]	; (8001bac <HAL_RCC_OscConfig+0x4c4>)
 8001a14:	f023 0304 	bic.w	r3, r3, #4
 8001a18:	6213      	str	r3, [r2, #32]
 8001a1a:	e01c      	b.n	8001a56 <HAL_RCC_OscConfig+0x36e>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	2b05      	cmp	r3, #5
 8001a22:	d10c      	bne.n	8001a3e <HAL_RCC_OscConfig+0x356>
 8001a24:	4b61      	ldr	r3, [pc, #388]	; (8001bac <HAL_RCC_OscConfig+0x4c4>)
 8001a26:	6a1b      	ldr	r3, [r3, #32]
 8001a28:	4a60      	ldr	r2, [pc, #384]	; (8001bac <HAL_RCC_OscConfig+0x4c4>)
 8001a2a:	f043 0304 	orr.w	r3, r3, #4
 8001a2e:	6213      	str	r3, [r2, #32]
 8001a30:	4b5e      	ldr	r3, [pc, #376]	; (8001bac <HAL_RCC_OscConfig+0x4c4>)
 8001a32:	6a1b      	ldr	r3, [r3, #32]
 8001a34:	4a5d      	ldr	r2, [pc, #372]	; (8001bac <HAL_RCC_OscConfig+0x4c4>)
 8001a36:	f043 0301 	orr.w	r3, r3, #1
 8001a3a:	6213      	str	r3, [r2, #32]
 8001a3c:	e00b      	b.n	8001a56 <HAL_RCC_OscConfig+0x36e>
 8001a3e:	4b5b      	ldr	r3, [pc, #364]	; (8001bac <HAL_RCC_OscConfig+0x4c4>)
 8001a40:	6a1b      	ldr	r3, [r3, #32]
 8001a42:	4a5a      	ldr	r2, [pc, #360]	; (8001bac <HAL_RCC_OscConfig+0x4c4>)
 8001a44:	f023 0301 	bic.w	r3, r3, #1
 8001a48:	6213      	str	r3, [r2, #32]
 8001a4a:	4b58      	ldr	r3, [pc, #352]	; (8001bac <HAL_RCC_OscConfig+0x4c4>)
 8001a4c:	6a1b      	ldr	r3, [r3, #32]
 8001a4e:	4a57      	ldr	r2, [pc, #348]	; (8001bac <HAL_RCC_OscConfig+0x4c4>)
 8001a50:	f023 0304 	bic.w	r3, r3, #4
 8001a54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d015      	beq.n	8001a8a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a5e:	f7ff f9f9 	bl	8000e54 <HAL_GetTick>
 8001a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a64:	e00a      	b.n	8001a7c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a66:	f7ff f9f5 	bl	8000e54 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e0b1      	b.n	8001be0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a7c:	4b4b      	ldr	r3, [pc, #300]	; (8001bac <HAL_RCC_OscConfig+0x4c4>)
 8001a7e:	6a1b      	ldr	r3, [r3, #32]
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d0ee      	beq.n	8001a66 <HAL_RCC_OscConfig+0x37e>
 8001a88:	e014      	b.n	8001ab4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a8a:	f7ff f9e3 	bl	8000e54 <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a90:	e00a      	b.n	8001aa8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a92:	f7ff f9df 	bl	8000e54 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e09b      	b.n	8001be0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aa8:	4b40      	ldr	r3, [pc, #256]	; (8001bac <HAL_RCC_OscConfig+0x4c4>)
 8001aaa:	6a1b      	ldr	r3, [r3, #32]
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1ee      	bne.n	8001a92 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ab4:	7dfb      	ldrb	r3, [r7, #23]
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d105      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aba:	4b3c      	ldr	r3, [pc, #240]	; (8001bac <HAL_RCC_OscConfig+0x4c4>)
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	4a3b      	ldr	r2, [pc, #236]	; (8001bac <HAL_RCC_OscConfig+0x4c4>)
 8001ac0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ac4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	f000 8087 	beq.w	8001bde <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ad0:	4b36      	ldr	r3, [pc, #216]	; (8001bac <HAL_RCC_OscConfig+0x4c4>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f003 030c 	and.w	r3, r3, #12
 8001ad8:	2b08      	cmp	r3, #8
 8001ada:	d061      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	69db      	ldr	r3, [r3, #28]
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d146      	bne.n	8001b72 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae4:	4b33      	ldr	r3, [pc, #204]	; (8001bb4 <HAL_RCC_OscConfig+0x4cc>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aea:	f7ff f9b3 	bl	8000e54 <HAL_GetTick>
 8001aee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001af0:	e008      	b.n	8001b04 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af2:	f7ff f9af 	bl	8000e54 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e06d      	b.n	8001be0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b04:	4b29      	ldr	r3, [pc, #164]	; (8001bac <HAL_RCC_OscConfig+0x4c4>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1f0      	bne.n	8001af2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a1b      	ldr	r3, [r3, #32]
 8001b14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b18:	d108      	bne.n	8001b2c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b1a:	4b24      	ldr	r3, [pc, #144]	; (8001bac <HAL_RCC_OscConfig+0x4c4>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	4921      	ldr	r1, [pc, #132]	; (8001bac <HAL_RCC_OscConfig+0x4c4>)
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b2c:	4b1f      	ldr	r3, [pc, #124]	; (8001bac <HAL_RCC_OscConfig+0x4c4>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a19      	ldr	r1, [r3, #32]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3c:	430b      	orrs	r3, r1
 8001b3e:	491b      	ldr	r1, [pc, #108]	; (8001bac <HAL_RCC_OscConfig+0x4c4>)
 8001b40:	4313      	orrs	r3, r2
 8001b42:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b44:	4b1b      	ldr	r3, [pc, #108]	; (8001bb4 <HAL_RCC_OscConfig+0x4cc>)
 8001b46:	2201      	movs	r2, #1
 8001b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4a:	f7ff f983 	bl	8000e54 <HAL_GetTick>
 8001b4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b50:	e008      	b.n	8001b64 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b52:	f7ff f97f 	bl	8000e54 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d901      	bls.n	8001b64 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e03d      	b.n	8001be0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b64:	4b11      	ldr	r3, [pc, #68]	; (8001bac <HAL_RCC_OscConfig+0x4c4>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d0f0      	beq.n	8001b52 <HAL_RCC_OscConfig+0x46a>
 8001b70:	e035      	b.n	8001bde <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b72:	4b10      	ldr	r3, [pc, #64]	; (8001bb4 <HAL_RCC_OscConfig+0x4cc>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b78:	f7ff f96c 	bl	8000e54 <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b80:	f7ff f968 	bl	8000e54 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e026      	b.n	8001be0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b92:	4b06      	ldr	r3, [pc, #24]	; (8001bac <HAL_RCC_OscConfig+0x4c4>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d1f0      	bne.n	8001b80 <HAL_RCC_OscConfig+0x498>
 8001b9e:	e01e      	b.n	8001bde <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	69db      	ldr	r3, [r3, #28]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d107      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e019      	b.n	8001be0 <HAL_RCC_OscConfig+0x4f8>
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	40007000 	.word	0x40007000
 8001bb4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <HAL_RCC_OscConfig+0x500>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a1b      	ldr	r3, [r3, #32]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d106      	bne.n	8001bda <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d001      	beq.n	8001bde <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e000      	b.n	8001be0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3718      	adds	r7, #24
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40021000 	.word	0x40021000

08001bec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d101      	bne.n	8001c00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e0d0      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c00:	4b6a      	ldr	r3, [pc, #424]	; (8001dac <HAL_RCC_ClockConfig+0x1c0>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0307 	and.w	r3, r3, #7
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d910      	bls.n	8001c30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0e:	4b67      	ldr	r3, [pc, #412]	; (8001dac <HAL_RCC_ClockConfig+0x1c0>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f023 0207 	bic.w	r2, r3, #7
 8001c16:	4965      	ldr	r1, [pc, #404]	; (8001dac <HAL_RCC_ClockConfig+0x1c0>)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1e:	4b63      	ldr	r3, [pc, #396]	; (8001dac <HAL_RCC_ClockConfig+0x1c0>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d001      	beq.n	8001c30 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e0b8      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d020      	beq.n	8001c7e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d005      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c48:	4b59      	ldr	r3, [pc, #356]	; (8001db0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	4a58      	ldr	r2, [pc, #352]	; (8001db0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c52:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0308 	and.w	r3, r3, #8
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d005      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c60:	4b53      	ldr	r3, [pc, #332]	; (8001db0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	4a52      	ldr	r2, [pc, #328]	; (8001db0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c66:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c6a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c6c:	4b50      	ldr	r3, [pc, #320]	; (8001db0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	494d      	ldr	r1, [pc, #308]	; (8001db0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d040      	beq.n	8001d0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d107      	bne.n	8001ca2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c92:	4b47      	ldr	r3, [pc, #284]	; (8001db0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d115      	bne.n	8001cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e07f      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d107      	bne.n	8001cba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001caa:	4b41      	ldr	r3, [pc, #260]	; (8001db0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d109      	bne.n	8001cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e073      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cba:	4b3d      	ldr	r3, [pc, #244]	; (8001db0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e06b      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cca:	4b39      	ldr	r3, [pc, #228]	; (8001db0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f023 0203 	bic.w	r2, r3, #3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	4936      	ldr	r1, [pc, #216]	; (8001db0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cdc:	f7ff f8ba 	bl	8000e54 <HAL_GetTick>
 8001ce0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ce2:	e00a      	b.n	8001cfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ce4:	f7ff f8b6 	bl	8000e54 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e053      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cfa:	4b2d      	ldr	r3, [pc, #180]	; (8001db0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f003 020c 	and.w	r2, r3, #12
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d1eb      	bne.n	8001ce4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d0c:	4b27      	ldr	r3, [pc, #156]	; (8001dac <HAL_RCC_ClockConfig+0x1c0>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0307 	and.w	r3, r3, #7
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d210      	bcs.n	8001d3c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d1a:	4b24      	ldr	r3, [pc, #144]	; (8001dac <HAL_RCC_ClockConfig+0x1c0>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f023 0207 	bic.w	r2, r3, #7
 8001d22:	4922      	ldr	r1, [pc, #136]	; (8001dac <HAL_RCC_ClockConfig+0x1c0>)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2a:	4b20      	ldr	r3, [pc, #128]	; (8001dac <HAL_RCC_ClockConfig+0x1c0>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d001      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e032      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d008      	beq.n	8001d5a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d48:	4b19      	ldr	r3, [pc, #100]	; (8001db0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	4916      	ldr	r1, [pc, #88]	; (8001db0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0308 	and.w	r3, r3, #8
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d009      	beq.n	8001d7a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d66:	4b12      	ldr	r3, [pc, #72]	; (8001db0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	490e      	ldr	r1, [pc, #56]	; (8001db0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d7a:	f000 f821 	bl	8001dc0 <HAL_RCC_GetSysClockFreq>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	4b0b      	ldr	r3, [pc, #44]	; (8001db0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	091b      	lsrs	r3, r3, #4
 8001d86:	f003 030f 	and.w	r3, r3, #15
 8001d8a:	490a      	ldr	r1, [pc, #40]	; (8001db4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d8c:	5ccb      	ldrb	r3, [r1, r3]
 8001d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d92:	4a09      	ldr	r2, [pc, #36]	; (8001db8 <HAL_RCC_ClockConfig+0x1cc>)
 8001d94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d96:	4b09      	ldr	r3, [pc, #36]	; (8001dbc <HAL_RCC_ClockConfig+0x1d0>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff f818 	bl	8000dd0 <HAL_InitTick>

  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40022000 	.word	0x40022000
 8001db0:	40021000 	.word	0x40021000
 8001db4:	080032e8 	.word	0x080032e8
 8001db8:	20000000 	.word	0x20000000
 8001dbc:	2000000c 	.word	0x2000000c

08001dc0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b087      	sub	sp, #28
 8001dc4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60bb      	str	r3, [r7, #8]
 8001dce:	2300      	movs	r3, #0
 8001dd0:	617b      	str	r3, [r7, #20]
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001dda:	4b1e      	ldr	r3, [pc, #120]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f003 030c 	and.w	r3, r3, #12
 8001de6:	2b04      	cmp	r3, #4
 8001de8:	d002      	beq.n	8001df0 <HAL_RCC_GetSysClockFreq+0x30>
 8001dea:	2b08      	cmp	r3, #8
 8001dec:	d003      	beq.n	8001df6 <HAL_RCC_GetSysClockFreq+0x36>
 8001dee:	e027      	b.n	8001e40 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001df0:	4b19      	ldr	r3, [pc, #100]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x98>)
 8001df2:	613b      	str	r3, [r7, #16]
      break;
 8001df4:	e027      	b.n	8001e46 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	0c9b      	lsrs	r3, r3, #18
 8001dfa:	f003 030f 	and.w	r3, r3, #15
 8001dfe:	4a17      	ldr	r2, [pc, #92]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e00:	5cd3      	ldrb	r3, [r2, r3]
 8001e02:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d010      	beq.n	8001e30 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e0e:	4b11      	ldr	r3, [pc, #68]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	0c5b      	lsrs	r3, r3, #17
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	4a11      	ldr	r2, [pc, #68]	; (8001e60 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e1a:	5cd3      	ldrb	r3, [r2, r3]
 8001e1c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a0d      	ldr	r2, [pc, #52]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e22:	fb03 f202 	mul.w	r2, r3, r2
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e2c:	617b      	str	r3, [r7, #20]
 8001e2e:	e004      	b.n	8001e3a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4a0c      	ldr	r2, [pc, #48]	; (8001e64 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e34:	fb02 f303 	mul.w	r3, r2, r3
 8001e38:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	613b      	str	r3, [r7, #16]
      break;
 8001e3e:	e002      	b.n	8001e46 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e40:	4b05      	ldr	r3, [pc, #20]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e42:	613b      	str	r3, [r7, #16]
      break;
 8001e44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e46:	693b      	ldr	r3, [r7, #16]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	371c      	adds	r7, #28
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bc80      	pop	{r7}
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	40021000 	.word	0x40021000
 8001e58:	007a1200 	.word	0x007a1200
 8001e5c:	08003300 	.word	0x08003300
 8001e60:	08003310 	.word	0x08003310
 8001e64:	003d0900 	.word	0x003d0900

08001e68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e6c:	4b02      	ldr	r3, [pc, #8]	; (8001e78 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr
 8001e78:	20000000 	.word	0x20000000

08001e7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e80:	f7ff fff2 	bl	8001e68 <HAL_RCC_GetHCLKFreq>
 8001e84:	4602      	mov	r2, r0
 8001e86:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	0a1b      	lsrs	r3, r3, #8
 8001e8c:	f003 0307 	and.w	r3, r3, #7
 8001e90:	4903      	ldr	r1, [pc, #12]	; (8001ea0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e92:	5ccb      	ldrb	r3, [r1, r3]
 8001e94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	080032f8 	.word	0x080032f8

08001ea4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ea8:	f7ff ffde 	bl	8001e68 <HAL_RCC_GetHCLKFreq>
 8001eac:	4602      	mov	r2, r0
 8001eae:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	0adb      	lsrs	r3, r3, #11
 8001eb4:	f003 0307 	and.w	r3, r3, #7
 8001eb8:	4903      	ldr	r1, [pc, #12]	; (8001ec8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001eba:	5ccb      	ldrb	r3, [r1, r3]
 8001ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	080032f8 	.word	0x080032f8

08001ecc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ed4:	4b0a      	ldr	r3, [pc, #40]	; (8001f00 <RCC_Delay+0x34>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a0a      	ldr	r2, [pc, #40]	; (8001f04 <RCC_Delay+0x38>)
 8001eda:	fba2 2303 	umull	r2, r3, r2, r3
 8001ede:	0a5b      	lsrs	r3, r3, #9
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	fb02 f303 	mul.w	r3, r2, r3
 8001ee6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ee8:	bf00      	nop
  }
  while (Delay --);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	1e5a      	subs	r2, r3, #1
 8001eee:	60fa      	str	r2, [r7, #12]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1f9      	bne.n	8001ee8 <RCC_Delay+0x1c>
}
 8001ef4:	bf00      	nop
 8001ef6:	bf00      	nop
 8001ef8:	3714      	adds	r7, #20
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr
 8001f00:	20000000 	.word	0x20000000
 8001f04:	10624dd3 	.word	0x10624dd3

08001f08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e042      	b.n	8001fa0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d106      	bne.n	8001f34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7fe fa78 	bl	8000424 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2224      	movs	r2, #36	; 0x24
 8001f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68da      	ldr	r2, [r3, #12]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 f9af 	bl	80022b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	691a      	ldr	r2, [r3, #16]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	695a      	ldr	r2, [r3, #20]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68da      	ldr	r2, [r3, #12]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2220      	movs	r2, #32
 8001f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2220      	movs	r2, #32
 8001f94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08a      	sub	sp, #40	; 0x28
 8001fac:	af02      	add	r7, sp, #8
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	603b      	str	r3, [r7, #0]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b20      	cmp	r3, #32
 8001fc6:	d16d      	bne.n	80020a4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d002      	beq.n	8001fd4 <HAL_UART_Transmit+0x2c>
 8001fce:	88fb      	ldrh	r3, [r7, #6]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d101      	bne.n	8001fd8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e066      	b.n	80020a6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2221      	movs	r2, #33	; 0x21
 8001fe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001fe6:	f7fe ff35 	bl	8000e54 <HAL_GetTick>
 8001fea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	88fa      	ldrh	r2, [r7, #6]
 8001ff0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	88fa      	ldrh	r2, [r7, #6]
 8001ff6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002000:	d108      	bne.n	8002014 <HAL_UART_Transmit+0x6c>
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d104      	bne.n	8002014 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800200a:	2300      	movs	r3, #0
 800200c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	61bb      	str	r3, [r7, #24]
 8002012:	e003      	b.n	800201c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002018:	2300      	movs	r3, #0
 800201a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800201c:	e02a      	b.n	8002074 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	9300      	str	r3, [sp, #0]
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	2200      	movs	r2, #0
 8002026:	2180      	movs	r1, #128	; 0x80
 8002028:	68f8      	ldr	r0, [r7, #12]
 800202a:	f000 f8d2 	bl	80021d2 <UART_WaitOnFlagUntilTimeout>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e036      	b.n	80020a6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d10b      	bne.n	8002056 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	881b      	ldrh	r3, [r3, #0]
 8002042:	461a      	mov	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800204c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	3302      	adds	r3, #2
 8002052:	61bb      	str	r3, [r7, #24]
 8002054:	e007      	b.n	8002066 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	781a      	ldrb	r2, [r3, #0]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	3301      	adds	r3, #1
 8002064:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800206a:	b29b      	uxth	r3, r3
 800206c:	3b01      	subs	r3, #1
 800206e:	b29a      	uxth	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002078:	b29b      	uxth	r3, r3
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1cf      	bne.n	800201e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	9300      	str	r3, [sp, #0]
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	2200      	movs	r2, #0
 8002086:	2140      	movs	r1, #64	; 0x40
 8002088:	68f8      	ldr	r0, [r7, #12]
 800208a:	f000 f8a2 	bl	80021d2 <UART_WaitOnFlagUntilTimeout>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e006      	b.n	80020a6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2220      	movs	r2, #32
 800209c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80020a0:	2300      	movs	r3, #0
 80020a2:	e000      	b.n	80020a6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80020a4:	2302      	movs	r3, #2
  }
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3720      	adds	r7, #32
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b08a      	sub	sp, #40	; 0x28
 80020b2:	af02      	add	r7, sp, #8
 80020b4:	60f8      	str	r0, [r7, #12]
 80020b6:	60b9      	str	r1, [r7, #8]
 80020b8:	603b      	str	r3, [r7, #0]
 80020ba:	4613      	mov	r3, r2
 80020bc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80020be:	2300      	movs	r3, #0
 80020c0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b20      	cmp	r3, #32
 80020cc:	d17c      	bne.n	80021c8 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d002      	beq.n	80020da <HAL_UART_Receive+0x2c>
 80020d4:	88fb      	ldrh	r3, [r7, #6]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e075      	b.n	80021ca <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2200      	movs	r2, #0
 80020e2:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2222      	movs	r2, #34	; 0x22
 80020e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2200      	movs	r2, #0
 80020f0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80020f2:	f7fe feaf 	bl	8000e54 <HAL_GetTick>
 80020f6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	88fa      	ldrh	r2, [r7, #6]
 80020fc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	88fa      	ldrh	r2, [r7, #6]
 8002102:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800210c:	d108      	bne.n	8002120 <HAL_UART_Receive+0x72>
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d104      	bne.n	8002120 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8002116:	2300      	movs	r3, #0
 8002118:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	61bb      	str	r3, [r7, #24]
 800211e:	e003      	b.n	8002128 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002124:	2300      	movs	r3, #0
 8002126:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002128:	e043      	b.n	80021b2 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	9300      	str	r3, [sp, #0]
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	2200      	movs	r2, #0
 8002132:	2120      	movs	r1, #32
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	f000 f84c 	bl	80021d2 <UART_WaitOnFlagUntilTimeout>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e042      	b.n	80021ca <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d10c      	bne.n	8002164 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	b29b      	uxth	r3, r3
 8002152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002156:	b29a      	uxth	r2, r3
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	3302      	adds	r3, #2
 8002160:	61bb      	str	r3, [r7, #24]
 8002162:	e01f      	b.n	80021a4 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800216c:	d007      	beq.n	800217e <HAL_UART_Receive+0xd0>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d10a      	bne.n	800218c <HAL_UART_Receive+0xde>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d106      	bne.n	800218c <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	b2da      	uxtb	r2, r3
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	701a      	strb	r2, [r3, #0]
 800218a:	e008      	b.n	800219e <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	b2db      	uxtb	r3, r3
 8002194:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002198:	b2da      	uxtb	r2, r3
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	3301      	adds	r3, #1
 80021a2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	3b01      	subs	r3, #1
 80021ac:	b29a      	uxth	r2, r3
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d1b6      	bne.n	800212a <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2220      	movs	r2, #32
 80021c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 80021c4:	2300      	movs	r3, #0
 80021c6:	e000      	b.n	80021ca <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80021c8:	2302      	movs	r3, #2
  }
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3720      	adds	r7, #32
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b090      	sub	sp, #64	; 0x40
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	60f8      	str	r0, [r7, #12]
 80021da:	60b9      	str	r1, [r7, #8]
 80021dc:	603b      	str	r3, [r7, #0]
 80021de:	4613      	mov	r3, r2
 80021e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021e2:	e050      	b.n	8002286 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ea:	d04c      	beq.n	8002286 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80021ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d007      	beq.n	8002202 <UART_WaitOnFlagUntilTimeout+0x30>
 80021f2:	f7fe fe2f 	bl	8000e54 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80021fe:	429a      	cmp	r2, r3
 8002200:	d241      	bcs.n	8002286 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	330c      	adds	r3, #12
 8002208:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800220a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800220c:	e853 3f00 	ldrex	r3, [r3]
 8002210:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002214:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002218:	63fb      	str	r3, [r7, #60]	; 0x3c
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	330c      	adds	r3, #12
 8002220:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002222:	637a      	str	r2, [r7, #52]	; 0x34
 8002224:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002226:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002228:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800222a:	e841 2300 	strex	r3, r2, [r1]
 800222e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1e5      	bne.n	8002202 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	3314      	adds	r3, #20
 800223c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	e853 3f00 	ldrex	r3, [r3]
 8002244:	613b      	str	r3, [r7, #16]
   return(result);
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	f023 0301 	bic.w	r3, r3, #1
 800224c:	63bb      	str	r3, [r7, #56]	; 0x38
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	3314      	adds	r3, #20
 8002254:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002256:	623a      	str	r2, [r7, #32]
 8002258:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800225a:	69f9      	ldr	r1, [r7, #28]
 800225c:	6a3a      	ldr	r2, [r7, #32]
 800225e:	e841 2300 	strex	r3, r2, [r1]
 8002262:	61bb      	str	r3, [r7, #24]
   return(result);
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1e5      	bne.n	8002236 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2220      	movs	r2, #32
 800226e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2220      	movs	r2, #32
 8002276:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e00f      	b.n	80022a6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	4013      	ands	r3, r2
 8002290:	68ba      	ldr	r2, [r7, #8]
 8002292:	429a      	cmp	r2, r3
 8002294:	bf0c      	ite	eq
 8002296:	2301      	moveq	r3, #1
 8002298:	2300      	movne	r3, #0
 800229a:	b2db      	uxtb	r3, r3
 800229c:	461a      	mov	r2, r3
 800229e:	79fb      	ldrb	r3, [r7, #7]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d09f      	beq.n	80021e4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3740      	adds	r7, #64	; 0x40
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
	...

080022b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68da      	ldr	r2, [r3, #12]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	430a      	orrs	r2, r1
 80022cc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	689a      	ldr	r2, [r3, #8]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	431a      	orrs	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	695b      	ldr	r3, [r3, #20]
 80022dc:	4313      	orrs	r3, r2
 80022de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80022ea:	f023 030c 	bic.w	r3, r3, #12
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	6812      	ldr	r2, [r2, #0]
 80022f2:	68b9      	ldr	r1, [r7, #8]
 80022f4:	430b      	orrs	r3, r1
 80022f6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	699a      	ldr	r2, [r3, #24]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	430a      	orrs	r2, r1
 800230c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a2c      	ldr	r2, [pc, #176]	; (80023c4 <UART_SetConfig+0x114>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d103      	bne.n	8002320 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002318:	f7ff fdc4 	bl	8001ea4 <HAL_RCC_GetPCLK2Freq>
 800231c:	60f8      	str	r0, [r7, #12]
 800231e:	e002      	b.n	8002326 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002320:	f7ff fdac 	bl	8001e7c <HAL_RCC_GetPCLK1Freq>
 8002324:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	4613      	mov	r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4413      	add	r3, r2
 800232e:	009a      	lsls	r2, r3, #2
 8002330:	441a      	add	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	fbb2 f3f3 	udiv	r3, r2, r3
 800233c:	4a22      	ldr	r2, [pc, #136]	; (80023c8 <UART_SetConfig+0x118>)
 800233e:	fba2 2303 	umull	r2, r3, r2, r3
 8002342:	095b      	lsrs	r3, r3, #5
 8002344:	0119      	lsls	r1, r3, #4
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	4613      	mov	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4413      	add	r3, r2
 800234e:	009a      	lsls	r2, r3, #2
 8002350:	441a      	add	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	fbb2 f2f3 	udiv	r2, r2, r3
 800235c:	4b1a      	ldr	r3, [pc, #104]	; (80023c8 <UART_SetConfig+0x118>)
 800235e:	fba3 0302 	umull	r0, r3, r3, r2
 8002362:	095b      	lsrs	r3, r3, #5
 8002364:	2064      	movs	r0, #100	; 0x64
 8002366:	fb00 f303 	mul.w	r3, r0, r3
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	011b      	lsls	r3, r3, #4
 800236e:	3332      	adds	r3, #50	; 0x32
 8002370:	4a15      	ldr	r2, [pc, #84]	; (80023c8 <UART_SetConfig+0x118>)
 8002372:	fba2 2303 	umull	r2, r3, r2, r3
 8002376:	095b      	lsrs	r3, r3, #5
 8002378:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800237c:	4419      	add	r1, r3
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	4613      	mov	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	4413      	add	r3, r2
 8002386:	009a      	lsls	r2, r3, #2
 8002388:	441a      	add	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	fbb2 f2f3 	udiv	r2, r2, r3
 8002394:	4b0c      	ldr	r3, [pc, #48]	; (80023c8 <UART_SetConfig+0x118>)
 8002396:	fba3 0302 	umull	r0, r3, r3, r2
 800239a:	095b      	lsrs	r3, r3, #5
 800239c:	2064      	movs	r0, #100	; 0x64
 800239e:	fb00 f303 	mul.w	r3, r0, r3
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	011b      	lsls	r3, r3, #4
 80023a6:	3332      	adds	r3, #50	; 0x32
 80023a8:	4a07      	ldr	r2, [pc, #28]	; (80023c8 <UART_SetConfig+0x118>)
 80023aa:	fba2 2303 	umull	r2, r3, r2, r3
 80023ae:	095b      	lsrs	r3, r3, #5
 80023b0:	f003 020f 	and.w	r2, r3, #15
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	440a      	add	r2, r1
 80023ba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80023bc:	bf00      	nop
 80023be:	3710      	adds	r7, #16
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40013800 	.word	0x40013800
 80023c8:	51eb851f 	.word	0x51eb851f

080023cc <atoi>:
 80023cc:	220a      	movs	r2, #10
 80023ce:	2100      	movs	r1, #0
 80023d0:	f000 b87e 	b.w	80024d0 <strtol>

080023d4 <_strtol_l.constprop.0>:
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023da:	4686      	mov	lr, r0
 80023dc:	4690      	mov	r8, r2
 80023de:	d001      	beq.n	80023e4 <_strtol_l.constprop.0+0x10>
 80023e0:	2b24      	cmp	r3, #36	; 0x24
 80023e2:	d906      	bls.n	80023f2 <_strtol_l.constprop.0+0x1e>
 80023e4:	f000 f8a6 	bl	8002534 <__errno>
 80023e8:	2316      	movs	r3, #22
 80023ea:	6003      	str	r3, [r0, #0]
 80023ec:	2000      	movs	r0, #0
 80023ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023f2:	460d      	mov	r5, r1
 80023f4:	4835      	ldr	r0, [pc, #212]	; (80024cc <_strtol_l.constprop.0+0xf8>)
 80023f6:	462a      	mov	r2, r5
 80023f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80023fc:	5d06      	ldrb	r6, [r0, r4]
 80023fe:	f016 0608 	ands.w	r6, r6, #8
 8002402:	d1f8      	bne.n	80023f6 <_strtol_l.constprop.0+0x22>
 8002404:	2c2d      	cmp	r4, #45	; 0x2d
 8002406:	d12e      	bne.n	8002466 <_strtol_l.constprop.0+0x92>
 8002408:	2601      	movs	r6, #1
 800240a:	782c      	ldrb	r4, [r5, #0]
 800240c:	1c95      	adds	r5, r2, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d057      	beq.n	80024c2 <_strtol_l.constprop.0+0xee>
 8002412:	2b10      	cmp	r3, #16
 8002414:	d109      	bne.n	800242a <_strtol_l.constprop.0+0x56>
 8002416:	2c30      	cmp	r4, #48	; 0x30
 8002418:	d107      	bne.n	800242a <_strtol_l.constprop.0+0x56>
 800241a:	782a      	ldrb	r2, [r5, #0]
 800241c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8002420:	2a58      	cmp	r2, #88	; 0x58
 8002422:	d149      	bne.n	80024b8 <_strtol_l.constprop.0+0xe4>
 8002424:	2310      	movs	r3, #16
 8002426:	786c      	ldrb	r4, [r5, #1]
 8002428:	3502      	adds	r5, #2
 800242a:	2200      	movs	r2, #0
 800242c:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8002430:	f10c 3cff 	add.w	ip, ip, #4294967295
 8002434:	fbbc f9f3 	udiv	r9, ip, r3
 8002438:	4610      	mov	r0, r2
 800243a:	fb03 ca19 	mls	sl, r3, r9, ip
 800243e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8002442:	2f09      	cmp	r7, #9
 8002444:	d814      	bhi.n	8002470 <_strtol_l.constprop.0+0x9c>
 8002446:	463c      	mov	r4, r7
 8002448:	42a3      	cmp	r3, r4
 800244a:	dd20      	ble.n	800248e <_strtol_l.constprop.0+0xba>
 800244c:	1c57      	adds	r7, r2, #1
 800244e:	d007      	beq.n	8002460 <_strtol_l.constprop.0+0x8c>
 8002450:	4581      	cmp	r9, r0
 8002452:	d319      	bcc.n	8002488 <_strtol_l.constprop.0+0xb4>
 8002454:	d101      	bne.n	800245a <_strtol_l.constprop.0+0x86>
 8002456:	45a2      	cmp	sl, r4
 8002458:	db16      	blt.n	8002488 <_strtol_l.constprop.0+0xb4>
 800245a:	2201      	movs	r2, #1
 800245c:	fb00 4003 	mla	r0, r0, r3, r4
 8002460:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002464:	e7eb      	b.n	800243e <_strtol_l.constprop.0+0x6a>
 8002466:	2c2b      	cmp	r4, #43	; 0x2b
 8002468:	bf04      	itt	eq
 800246a:	782c      	ldrbeq	r4, [r5, #0]
 800246c:	1c95      	addeq	r5, r2, #2
 800246e:	e7ce      	b.n	800240e <_strtol_l.constprop.0+0x3a>
 8002470:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8002474:	2f19      	cmp	r7, #25
 8002476:	d801      	bhi.n	800247c <_strtol_l.constprop.0+0xa8>
 8002478:	3c37      	subs	r4, #55	; 0x37
 800247a:	e7e5      	b.n	8002448 <_strtol_l.constprop.0+0x74>
 800247c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8002480:	2f19      	cmp	r7, #25
 8002482:	d804      	bhi.n	800248e <_strtol_l.constprop.0+0xba>
 8002484:	3c57      	subs	r4, #87	; 0x57
 8002486:	e7df      	b.n	8002448 <_strtol_l.constprop.0+0x74>
 8002488:	f04f 32ff 	mov.w	r2, #4294967295
 800248c:	e7e8      	b.n	8002460 <_strtol_l.constprop.0+0x8c>
 800248e:	1c53      	adds	r3, r2, #1
 8002490:	d108      	bne.n	80024a4 <_strtol_l.constprop.0+0xd0>
 8002492:	2322      	movs	r3, #34	; 0x22
 8002494:	4660      	mov	r0, ip
 8002496:	f8ce 3000 	str.w	r3, [lr]
 800249a:	f1b8 0f00 	cmp.w	r8, #0
 800249e:	d0a6      	beq.n	80023ee <_strtol_l.constprop.0+0x1a>
 80024a0:	1e69      	subs	r1, r5, #1
 80024a2:	e006      	b.n	80024b2 <_strtol_l.constprop.0+0xde>
 80024a4:	b106      	cbz	r6, 80024a8 <_strtol_l.constprop.0+0xd4>
 80024a6:	4240      	negs	r0, r0
 80024a8:	f1b8 0f00 	cmp.w	r8, #0
 80024ac:	d09f      	beq.n	80023ee <_strtol_l.constprop.0+0x1a>
 80024ae:	2a00      	cmp	r2, #0
 80024b0:	d1f6      	bne.n	80024a0 <_strtol_l.constprop.0+0xcc>
 80024b2:	f8c8 1000 	str.w	r1, [r8]
 80024b6:	e79a      	b.n	80023ee <_strtol_l.constprop.0+0x1a>
 80024b8:	2430      	movs	r4, #48	; 0x30
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1b5      	bne.n	800242a <_strtol_l.constprop.0+0x56>
 80024be:	2308      	movs	r3, #8
 80024c0:	e7b3      	b.n	800242a <_strtol_l.constprop.0+0x56>
 80024c2:	2c30      	cmp	r4, #48	; 0x30
 80024c4:	d0a9      	beq.n	800241a <_strtol_l.constprop.0+0x46>
 80024c6:	230a      	movs	r3, #10
 80024c8:	e7af      	b.n	800242a <_strtol_l.constprop.0+0x56>
 80024ca:	bf00      	nop
 80024cc:	08003313 	.word	0x08003313

080024d0 <strtol>:
 80024d0:	4613      	mov	r3, r2
 80024d2:	460a      	mov	r2, r1
 80024d4:	4601      	mov	r1, r0
 80024d6:	4802      	ldr	r0, [pc, #8]	; (80024e0 <strtol+0x10>)
 80024d8:	6800      	ldr	r0, [r0, #0]
 80024da:	f7ff bf7b 	b.w	80023d4 <_strtol_l.constprop.0>
 80024de:	bf00      	nop
 80024e0:	20000060 	.word	0x20000060

080024e4 <siprintf>:
 80024e4:	b40e      	push	{r1, r2, r3}
 80024e6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80024ea:	b500      	push	{lr}
 80024ec:	b09c      	sub	sp, #112	; 0x70
 80024ee:	ab1d      	add	r3, sp, #116	; 0x74
 80024f0:	9002      	str	r0, [sp, #8]
 80024f2:	9006      	str	r0, [sp, #24]
 80024f4:	9107      	str	r1, [sp, #28]
 80024f6:	9104      	str	r1, [sp, #16]
 80024f8:	4808      	ldr	r0, [pc, #32]	; (800251c <siprintf+0x38>)
 80024fa:	4909      	ldr	r1, [pc, #36]	; (8002520 <siprintf+0x3c>)
 80024fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8002500:	9105      	str	r1, [sp, #20]
 8002502:	6800      	ldr	r0, [r0, #0]
 8002504:	a902      	add	r1, sp, #8
 8002506:	9301      	str	r3, [sp, #4]
 8002508:	f000 f99c 	bl	8002844 <_svfiprintf_r>
 800250c:	2200      	movs	r2, #0
 800250e:	9b02      	ldr	r3, [sp, #8]
 8002510:	701a      	strb	r2, [r3, #0]
 8002512:	b01c      	add	sp, #112	; 0x70
 8002514:	f85d eb04 	ldr.w	lr, [sp], #4
 8002518:	b003      	add	sp, #12
 800251a:	4770      	bx	lr
 800251c:	20000060 	.word	0x20000060
 8002520:	ffff0208 	.word	0xffff0208

08002524 <memset>:
 8002524:	4603      	mov	r3, r0
 8002526:	4402      	add	r2, r0
 8002528:	4293      	cmp	r3, r2
 800252a:	d100      	bne.n	800252e <memset+0xa>
 800252c:	4770      	bx	lr
 800252e:	f803 1b01 	strb.w	r1, [r3], #1
 8002532:	e7f9      	b.n	8002528 <memset+0x4>

08002534 <__errno>:
 8002534:	4b01      	ldr	r3, [pc, #4]	; (800253c <__errno+0x8>)
 8002536:	6818      	ldr	r0, [r3, #0]
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	20000060 	.word	0x20000060

08002540 <__libc_init_array>:
 8002540:	b570      	push	{r4, r5, r6, lr}
 8002542:	2600      	movs	r6, #0
 8002544:	4d0c      	ldr	r5, [pc, #48]	; (8002578 <__libc_init_array+0x38>)
 8002546:	4c0d      	ldr	r4, [pc, #52]	; (800257c <__libc_init_array+0x3c>)
 8002548:	1b64      	subs	r4, r4, r5
 800254a:	10a4      	asrs	r4, r4, #2
 800254c:	42a6      	cmp	r6, r4
 800254e:	d109      	bne.n	8002564 <__libc_init_array+0x24>
 8002550:	f000 fc7a 	bl	8002e48 <_init>
 8002554:	2600      	movs	r6, #0
 8002556:	4d0a      	ldr	r5, [pc, #40]	; (8002580 <__libc_init_array+0x40>)
 8002558:	4c0a      	ldr	r4, [pc, #40]	; (8002584 <__libc_init_array+0x44>)
 800255a:	1b64      	subs	r4, r4, r5
 800255c:	10a4      	asrs	r4, r4, #2
 800255e:	42a6      	cmp	r6, r4
 8002560:	d105      	bne.n	800256e <__libc_init_array+0x2e>
 8002562:	bd70      	pop	{r4, r5, r6, pc}
 8002564:	f855 3b04 	ldr.w	r3, [r5], #4
 8002568:	4798      	blx	r3
 800256a:	3601      	adds	r6, #1
 800256c:	e7ee      	b.n	800254c <__libc_init_array+0xc>
 800256e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002572:	4798      	blx	r3
 8002574:	3601      	adds	r6, #1
 8002576:	e7f2      	b.n	800255e <__libc_init_array+0x1e>
 8002578:	08003448 	.word	0x08003448
 800257c:	08003448 	.word	0x08003448
 8002580:	08003448 	.word	0x08003448
 8002584:	0800344c 	.word	0x0800344c

08002588 <__retarget_lock_acquire_recursive>:
 8002588:	4770      	bx	lr

0800258a <__retarget_lock_release_recursive>:
 800258a:	4770      	bx	lr

0800258c <memcpy>:
 800258c:	440a      	add	r2, r1
 800258e:	4291      	cmp	r1, r2
 8002590:	f100 33ff 	add.w	r3, r0, #4294967295
 8002594:	d100      	bne.n	8002598 <memcpy+0xc>
 8002596:	4770      	bx	lr
 8002598:	b510      	push	{r4, lr}
 800259a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800259e:	4291      	cmp	r1, r2
 80025a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80025a4:	d1f9      	bne.n	800259a <memcpy+0xe>
 80025a6:	bd10      	pop	{r4, pc}

080025a8 <_free_r>:
 80025a8:	b538      	push	{r3, r4, r5, lr}
 80025aa:	4605      	mov	r5, r0
 80025ac:	2900      	cmp	r1, #0
 80025ae:	d040      	beq.n	8002632 <_free_r+0x8a>
 80025b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80025b4:	1f0c      	subs	r4, r1, #4
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	bfb8      	it	lt
 80025ba:	18e4      	addlt	r4, r4, r3
 80025bc:	f000 f8dc 	bl	8002778 <__malloc_lock>
 80025c0:	4a1c      	ldr	r2, [pc, #112]	; (8002634 <_free_r+0x8c>)
 80025c2:	6813      	ldr	r3, [r2, #0]
 80025c4:	b933      	cbnz	r3, 80025d4 <_free_r+0x2c>
 80025c6:	6063      	str	r3, [r4, #4]
 80025c8:	6014      	str	r4, [r2, #0]
 80025ca:	4628      	mov	r0, r5
 80025cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80025d0:	f000 b8d8 	b.w	8002784 <__malloc_unlock>
 80025d4:	42a3      	cmp	r3, r4
 80025d6:	d908      	bls.n	80025ea <_free_r+0x42>
 80025d8:	6820      	ldr	r0, [r4, #0]
 80025da:	1821      	adds	r1, r4, r0
 80025dc:	428b      	cmp	r3, r1
 80025de:	bf01      	itttt	eq
 80025e0:	6819      	ldreq	r1, [r3, #0]
 80025e2:	685b      	ldreq	r3, [r3, #4]
 80025e4:	1809      	addeq	r1, r1, r0
 80025e6:	6021      	streq	r1, [r4, #0]
 80025e8:	e7ed      	b.n	80025c6 <_free_r+0x1e>
 80025ea:	461a      	mov	r2, r3
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	b10b      	cbz	r3, 80025f4 <_free_r+0x4c>
 80025f0:	42a3      	cmp	r3, r4
 80025f2:	d9fa      	bls.n	80025ea <_free_r+0x42>
 80025f4:	6811      	ldr	r1, [r2, #0]
 80025f6:	1850      	adds	r0, r2, r1
 80025f8:	42a0      	cmp	r0, r4
 80025fa:	d10b      	bne.n	8002614 <_free_r+0x6c>
 80025fc:	6820      	ldr	r0, [r4, #0]
 80025fe:	4401      	add	r1, r0
 8002600:	1850      	adds	r0, r2, r1
 8002602:	4283      	cmp	r3, r0
 8002604:	6011      	str	r1, [r2, #0]
 8002606:	d1e0      	bne.n	80025ca <_free_r+0x22>
 8002608:	6818      	ldr	r0, [r3, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	4408      	add	r0, r1
 800260e:	6010      	str	r0, [r2, #0]
 8002610:	6053      	str	r3, [r2, #4]
 8002612:	e7da      	b.n	80025ca <_free_r+0x22>
 8002614:	d902      	bls.n	800261c <_free_r+0x74>
 8002616:	230c      	movs	r3, #12
 8002618:	602b      	str	r3, [r5, #0]
 800261a:	e7d6      	b.n	80025ca <_free_r+0x22>
 800261c:	6820      	ldr	r0, [r4, #0]
 800261e:	1821      	adds	r1, r4, r0
 8002620:	428b      	cmp	r3, r1
 8002622:	bf01      	itttt	eq
 8002624:	6819      	ldreq	r1, [r3, #0]
 8002626:	685b      	ldreq	r3, [r3, #4]
 8002628:	1809      	addeq	r1, r1, r0
 800262a:	6021      	streq	r1, [r4, #0]
 800262c:	6063      	str	r3, [r4, #4]
 800262e:	6054      	str	r4, [r2, #4]
 8002630:	e7cb      	b.n	80025ca <_free_r+0x22>
 8002632:	bd38      	pop	{r3, r4, r5, pc}
 8002634:	20000298 	.word	0x20000298

08002638 <sbrk_aligned>:
 8002638:	b570      	push	{r4, r5, r6, lr}
 800263a:	4e0e      	ldr	r6, [pc, #56]	; (8002674 <sbrk_aligned+0x3c>)
 800263c:	460c      	mov	r4, r1
 800263e:	6831      	ldr	r1, [r6, #0]
 8002640:	4605      	mov	r5, r0
 8002642:	b911      	cbnz	r1, 800264a <sbrk_aligned+0x12>
 8002644:	f000 fbaa 	bl	8002d9c <_sbrk_r>
 8002648:	6030      	str	r0, [r6, #0]
 800264a:	4621      	mov	r1, r4
 800264c:	4628      	mov	r0, r5
 800264e:	f000 fba5 	bl	8002d9c <_sbrk_r>
 8002652:	1c43      	adds	r3, r0, #1
 8002654:	d00a      	beq.n	800266c <sbrk_aligned+0x34>
 8002656:	1cc4      	adds	r4, r0, #3
 8002658:	f024 0403 	bic.w	r4, r4, #3
 800265c:	42a0      	cmp	r0, r4
 800265e:	d007      	beq.n	8002670 <sbrk_aligned+0x38>
 8002660:	1a21      	subs	r1, r4, r0
 8002662:	4628      	mov	r0, r5
 8002664:	f000 fb9a 	bl	8002d9c <_sbrk_r>
 8002668:	3001      	adds	r0, #1
 800266a:	d101      	bne.n	8002670 <sbrk_aligned+0x38>
 800266c:	f04f 34ff 	mov.w	r4, #4294967295
 8002670:	4620      	mov	r0, r4
 8002672:	bd70      	pop	{r4, r5, r6, pc}
 8002674:	2000029c 	.word	0x2000029c

08002678 <_malloc_r>:
 8002678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800267c:	1ccd      	adds	r5, r1, #3
 800267e:	f025 0503 	bic.w	r5, r5, #3
 8002682:	3508      	adds	r5, #8
 8002684:	2d0c      	cmp	r5, #12
 8002686:	bf38      	it	cc
 8002688:	250c      	movcc	r5, #12
 800268a:	2d00      	cmp	r5, #0
 800268c:	4607      	mov	r7, r0
 800268e:	db01      	blt.n	8002694 <_malloc_r+0x1c>
 8002690:	42a9      	cmp	r1, r5
 8002692:	d905      	bls.n	80026a0 <_malloc_r+0x28>
 8002694:	230c      	movs	r3, #12
 8002696:	2600      	movs	r6, #0
 8002698:	603b      	str	r3, [r7, #0]
 800269a:	4630      	mov	r0, r6
 800269c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80026a0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002774 <_malloc_r+0xfc>
 80026a4:	f000 f868 	bl	8002778 <__malloc_lock>
 80026a8:	f8d8 3000 	ldr.w	r3, [r8]
 80026ac:	461c      	mov	r4, r3
 80026ae:	bb5c      	cbnz	r4, 8002708 <_malloc_r+0x90>
 80026b0:	4629      	mov	r1, r5
 80026b2:	4638      	mov	r0, r7
 80026b4:	f7ff ffc0 	bl	8002638 <sbrk_aligned>
 80026b8:	1c43      	adds	r3, r0, #1
 80026ba:	4604      	mov	r4, r0
 80026bc:	d155      	bne.n	800276a <_malloc_r+0xf2>
 80026be:	f8d8 4000 	ldr.w	r4, [r8]
 80026c2:	4626      	mov	r6, r4
 80026c4:	2e00      	cmp	r6, #0
 80026c6:	d145      	bne.n	8002754 <_malloc_r+0xdc>
 80026c8:	2c00      	cmp	r4, #0
 80026ca:	d048      	beq.n	800275e <_malloc_r+0xe6>
 80026cc:	6823      	ldr	r3, [r4, #0]
 80026ce:	4631      	mov	r1, r6
 80026d0:	4638      	mov	r0, r7
 80026d2:	eb04 0903 	add.w	r9, r4, r3
 80026d6:	f000 fb61 	bl	8002d9c <_sbrk_r>
 80026da:	4581      	cmp	r9, r0
 80026dc:	d13f      	bne.n	800275e <_malloc_r+0xe6>
 80026de:	6821      	ldr	r1, [r4, #0]
 80026e0:	4638      	mov	r0, r7
 80026e2:	1a6d      	subs	r5, r5, r1
 80026e4:	4629      	mov	r1, r5
 80026e6:	f7ff ffa7 	bl	8002638 <sbrk_aligned>
 80026ea:	3001      	adds	r0, #1
 80026ec:	d037      	beq.n	800275e <_malloc_r+0xe6>
 80026ee:	6823      	ldr	r3, [r4, #0]
 80026f0:	442b      	add	r3, r5
 80026f2:	6023      	str	r3, [r4, #0]
 80026f4:	f8d8 3000 	ldr.w	r3, [r8]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d038      	beq.n	800276e <_malloc_r+0xf6>
 80026fc:	685a      	ldr	r2, [r3, #4]
 80026fe:	42a2      	cmp	r2, r4
 8002700:	d12b      	bne.n	800275a <_malloc_r+0xe2>
 8002702:	2200      	movs	r2, #0
 8002704:	605a      	str	r2, [r3, #4]
 8002706:	e00f      	b.n	8002728 <_malloc_r+0xb0>
 8002708:	6822      	ldr	r2, [r4, #0]
 800270a:	1b52      	subs	r2, r2, r5
 800270c:	d41f      	bmi.n	800274e <_malloc_r+0xd6>
 800270e:	2a0b      	cmp	r2, #11
 8002710:	d917      	bls.n	8002742 <_malloc_r+0xca>
 8002712:	1961      	adds	r1, r4, r5
 8002714:	42a3      	cmp	r3, r4
 8002716:	6025      	str	r5, [r4, #0]
 8002718:	bf18      	it	ne
 800271a:	6059      	strne	r1, [r3, #4]
 800271c:	6863      	ldr	r3, [r4, #4]
 800271e:	bf08      	it	eq
 8002720:	f8c8 1000 	streq.w	r1, [r8]
 8002724:	5162      	str	r2, [r4, r5]
 8002726:	604b      	str	r3, [r1, #4]
 8002728:	4638      	mov	r0, r7
 800272a:	f104 060b 	add.w	r6, r4, #11
 800272e:	f000 f829 	bl	8002784 <__malloc_unlock>
 8002732:	f026 0607 	bic.w	r6, r6, #7
 8002736:	1d23      	adds	r3, r4, #4
 8002738:	1af2      	subs	r2, r6, r3
 800273a:	d0ae      	beq.n	800269a <_malloc_r+0x22>
 800273c:	1b9b      	subs	r3, r3, r6
 800273e:	50a3      	str	r3, [r4, r2]
 8002740:	e7ab      	b.n	800269a <_malloc_r+0x22>
 8002742:	42a3      	cmp	r3, r4
 8002744:	6862      	ldr	r2, [r4, #4]
 8002746:	d1dd      	bne.n	8002704 <_malloc_r+0x8c>
 8002748:	f8c8 2000 	str.w	r2, [r8]
 800274c:	e7ec      	b.n	8002728 <_malloc_r+0xb0>
 800274e:	4623      	mov	r3, r4
 8002750:	6864      	ldr	r4, [r4, #4]
 8002752:	e7ac      	b.n	80026ae <_malloc_r+0x36>
 8002754:	4634      	mov	r4, r6
 8002756:	6876      	ldr	r6, [r6, #4]
 8002758:	e7b4      	b.n	80026c4 <_malloc_r+0x4c>
 800275a:	4613      	mov	r3, r2
 800275c:	e7cc      	b.n	80026f8 <_malloc_r+0x80>
 800275e:	230c      	movs	r3, #12
 8002760:	4638      	mov	r0, r7
 8002762:	603b      	str	r3, [r7, #0]
 8002764:	f000 f80e 	bl	8002784 <__malloc_unlock>
 8002768:	e797      	b.n	800269a <_malloc_r+0x22>
 800276a:	6025      	str	r5, [r4, #0]
 800276c:	e7dc      	b.n	8002728 <_malloc_r+0xb0>
 800276e:	605b      	str	r3, [r3, #4]
 8002770:	deff      	udf	#255	; 0xff
 8002772:	bf00      	nop
 8002774:	20000298 	.word	0x20000298

08002778 <__malloc_lock>:
 8002778:	4801      	ldr	r0, [pc, #4]	; (8002780 <__malloc_lock+0x8>)
 800277a:	f7ff bf05 	b.w	8002588 <__retarget_lock_acquire_recursive>
 800277e:	bf00      	nop
 8002780:	20000294 	.word	0x20000294

08002784 <__malloc_unlock>:
 8002784:	4801      	ldr	r0, [pc, #4]	; (800278c <__malloc_unlock+0x8>)
 8002786:	f7ff bf00 	b.w	800258a <__retarget_lock_release_recursive>
 800278a:	bf00      	nop
 800278c:	20000294 	.word	0x20000294

08002790 <__ssputs_r>:
 8002790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002794:	461f      	mov	r7, r3
 8002796:	688e      	ldr	r6, [r1, #8]
 8002798:	4682      	mov	sl, r0
 800279a:	42be      	cmp	r6, r7
 800279c:	460c      	mov	r4, r1
 800279e:	4690      	mov	r8, r2
 80027a0:	680b      	ldr	r3, [r1, #0]
 80027a2:	d82c      	bhi.n	80027fe <__ssputs_r+0x6e>
 80027a4:	898a      	ldrh	r2, [r1, #12]
 80027a6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80027aa:	d026      	beq.n	80027fa <__ssputs_r+0x6a>
 80027ac:	6965      	ldr	r5, [r4, #20]
 80027ae:	6909      	ldr	r1, [r1, #16]
 80027b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80027b4:	eba3 0901 	sub.w	r9, r3, r1
 80027b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80027bc:	1c7b      	adds	r3, r7, #1
 80027be:	444b      	add	r3, r9
 80027c0:	106d      	asrs	r5, r5, #1
 80027c2:	429d      	cmp	r5, r3
 80027c4:	bf38      	it	cc
 80027c6:	461d      	movcc	r5, r3
 80027c8:	0553      	lsls	r3, r2, #21
 80027ca:	d527      	bpl.n	800281c <__ssputs_r+0x8c>
 80027cc:	4629      	mov	r1, r5
 80027ce:	f7ff ff53 	bl	8002678 <_malloc_r>
 80027d2:	4606      	mov	r6, r0
 80027d4:	b360      	cbz	r0, 8002830 <__ssputs_r+0xa0>
 80027d6:	464a      	mov	r2, r9
 80027d8:	6921      	ldr	r1, [r4, #16]
 80027da:	f7ff fed7 	bl	800258c <memcpy>
 80027de:	89a3      	ldrh	r3, [r4, #12]
 80027e0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80027e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027e8:	81a3      	strh	r3, [r4, #12]
 80027ea:	6126      	str	r6, [r4, #16]
 80027ec:	444e      	add	r6, r9
 80027ee:	6026      	str	r6, [r4, #0]
 80027f0:	463e      	mov	r6, r7
 80027f2:	6165      	str	r5, [r4, #20]
 80027f4:	eba5 0509 	sub.w	r5, r5, r9
 80027f8:	60a5      	str	r5, [r4, #8]
 80027fa:	42be      	cmp	r6, r7
 80027fc:	d900      	bls.n	8002800 <__ssputs_r+0x70>
 80027fe:	463e      	mov	r6, r7
 8002800:	4632      	mov	r2, r6
 8002802:	4641      	mov	r1, r8
 8002804:	6820      	ldr	r0, [r4, #0]
 8002806:	f000 faaf 	bl	8002d68 <memmove>
 800280a:	2000      	movs	r0, #0
 800280c:	68a3      	ldr	r3, [r4, #8]
 800280e:	1b9b      	subs	r3, r3, r6
 8002810:	60a3      	str	r3, [r4, #8]
 8002812:	6823      	ldr	r3, [r4, #0]
 8002814:	4433      	add	r3, r6
 8002816:	6023      	str	r3, [r4, #0]
 8002818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800281c:	462a      	mov	r2, r5
 800281e:	f000 fadb 	bl	8002dd8 <_realloc_r>
 8002822:	4606      	mov	r6, r0
 8002824:	2800      	cmp	r0, #0
 8002826:	d1e0      	bne.n	80027ea <__ssputs_r+0x5a>
 8002828:	4650      	mov	r0, sl
 800282a:	6921      	ldr	r1, [r4, #16]
 800282c:	f7ff febc 	bl	80025a8 <_free_r>
 8002830:	230c      	movs	r3, #12
 8002832:	f8ca 3000 	str.w	r3, [sl]
 8002836:	89a3      	ldrh	r3, [r4, #12]
 8002838:	f04f 30ff 	mov.w	r0, #4294967295
 800283c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002840:	81a3      	strh	r3, [r4, #12]
 8002842:	e7e9      	b.n	8002818 <__ssputs_r+0x88>

08002844 <_svfiprintf_r>:
 8002844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002848:	4698      	mov	r8, r3
 800284a:	898b      	ldrh	r3, [r1, #12]
 800284c:	4607      	mov	r7, r0
 800284e:	061b      	lsls	r3, r3, #24
 8002850:	460d      	mov	r5, r1
 8002852:	4614      	mov	r4, r2
 8002854:	b09d      	sub	sp, #116	; 0x74
 8002856:	d50e      	bpl.n	8002876 <_svfiprintf_r+0x32>
 8002858:	690b      	ldr	r3, [r1, #16]
 800285a:	b963      	cbnz	r3, 8002876 <_svfiprintf_r+0x32>
 800285c:	2140      	movs	r1, #64	; 0x40
 800285e:	f7ff ff0b 	bl	8002678 <_malloc_r>
 8002862:	6028      	str	r0, [r5, #0]
 8002864:	6128      	str	r0, [r5, #16]
 8002866:	b920      	cbnz	r0, 8002872 <_svfiprintf_r+0x2e>
 8002868:	230c      	movs	r3, #12
 800286a:	603b      	str	r3, [r7, #0]
 800286c:	f04f 30ff 	mov.w	r0, #4294967295
 8002870:	e0d0      	b.n	8002a14 <_svfiprintf_r+0x1d0>
 8002872:	2340      	movs	r3, #64	; 0x40
 8002874:	616b      	str	r3, [r5, #20]
 8002876:	2300      	movs	r3, #0
 8002878:	9309      	str	r3, [sp, #36]	; 0x24
 800287a:	2320      	movs	r3, #32
 800287c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002880:	2330      	movs	r3, #48	; 0x30
 8002882:	f04f 0901 	mov.w	r9, #1
 8002886:	f8cd 800c 	str.w	r8, [sp, #12]
 800288a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8002a2c <_svfiprintf_r+0x1e8>
 800288e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002892:	4623      	mov	r3, r4
 8002894:	469a      	mov	sl, r3
 8002896:	f813 2b01 	ldrb.w	r2, [r3], #1
 800289a:	b10a      	cbz	r2, 80028a0 <_svfiprintf_r+0x5c>
 800289c:	2a25      	cmp	r2, #37	; 0x25
 800289e:	d1f9      	bne.n	8002894 <_svfiprintf_r+0x50>
 80028a0:	ebba 0b04 	subs.w	fp, sl, r4
 80028a4:	d00b      	beq.n	80028be <_svfiprintf_r+0x7a>
 80028a6:	465b      	mov	r3, fp
 80028a8:	4622      	mov	r2, r4
 80028aa:	4629      	mov	r1, r5
 80028ac:	4638      	mov	r0, r7
 80028ae:	f7ff ff6f 	bl	8002790 <__ssputs_r>
 80028b2:	3001      	adds	r0, #1
 80028b4:	f000 80a9 	beq.w	8002a0a <_svfiprintf_r+0x1c6>
 80028b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80028ba:	445a      	add	r2, fp
 80028bc:	9209      	str	r2, [sp, #36]	; 0x24
 80028be:	f89a 3000 	ldrb.w	r3, [sl]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f000 80a1 	beq.w	8002a0a <_svfiprintf_r+0x1c6>
 80028c8:	2300      	movs	r3, #0
 80028ca:	f04f 32ff 	mov.w	r2, #4294967295
 80028ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80028d2:	f10a 0a01 	add.w	sl, sl, #1
 80028d6:	9304      	str	r3, [sp, #16]
 80028d8:	9307      	str	r3, [sp, #28]
 80028da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80028de:	931a      	str	r3, [sp, #104]	; 0x68
 80028e0:	4654      	mov	r4, sl
 80028e2:	2205      	movs	r2, #5
 80028e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028e8:	4850      	ldr	r0, [pc, #320]	; (8002a2c <_svfiprintf_r+0x1e8>)
 80028ea:	f000 fa67 	bl	8002dbc <memchr>
 80028ee:	9a04      	ldr	r2, [sp, #16]
 80028f0:	b9d8      	cbnz	r0, 800292a <_svfiprintf_r+0xe6>
 80028f2:	06d0      	lsls	r0, r2, #27
 80028f4:	bf44      	itt	mi
 80028f6:	2320      	movmi	r3, #32
 80028f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80028fc:	0711      	lsls	r1, r2, #28
 80028fe:	bf44      	itt	mi
 8002900:	232b      	movmi	r3, #43	; 0x2b
 8002902:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002906:	f89a 3000 	ldrb.w	r3, [sl]
 800290a:	2b2a      	cmp	r3, #42	; 0x2a
 800290c:	d015      	beq.n	800293a <_svfiprintf_r+0xf6>
 800290e:	4654      	mov	r4, sl
 8002910:	2000      	movs	r0, #0
 8002912:	f04f 0c0a 	mov.w	ip, #10
 8002916:	9a07      	ldr	r2, [sp, #28]
 8002918:	4621      	mov	r1, r4
 800291a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800291e:	3b30      	subs	r3, #48	; 0x30
 8002920:	2b09      	cmp	r3, #9
 8002922:	d94d      	bls.n	80029c0 <_svfiprintf_r+0x17c>
 8002924:	b1b0      	cbz	r0, 8002954 <_svfiprintf_r+0x110>
 8002926:	9207      	str	r2, [sp, #28]
 8002928:	e014      	b.n	8002954 <_svfiprintf_r+0x110>
 800292a:	eba0 0308 	sub.w	r3, r0, r8
 800292e:	fa09 f303 	lsl.w	r3, r9, r3
 8002932:	4313      	orrs	r3, r2
 8002934:	46a2      	mov	sl, r4
 8002936:	9304      	str	r3, [sp, #16]
 8002938:	e7d2      	b.n	80028e0 <_svfiprintf_r+0x9c>
 800293a:	9b03      	ldr	r3, [sp, #12]
 800293c:	1d19      	adds	r1, r3, #4
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	9103      	str	r1, [sp, #12]
 8002942:	2b00      	cmp	r3, #0
 8002944:	bfbb      	ittet	lt
 8002946:	425b      	neglt	r3, r3
 8002948:	f042 0202 	orrlt.w	r2, r2, #2
 800294c:	9307      	strge	r3, [sp, #28]
 800294e:	9307      	strlt	r3, [sp, #28]
 8002950:	bfb8      	it	lt
 8002952:	9204      	strlt	r2, [sp, #16]
 8002954:	7823      	ldrb	r3, [r4, #0]
 8002956:	2b2e      	cmp	r3, #46	; 0x2e
 8002958:	d10c      	bne.n	8002974 <_svfiprintf_r+0x130>
 800295a:	7863      	ldrb	r3, [r4, #1]
 800295c:	2b2a      	cmp	r3, #42	; 0x2a
 800295e:	d134      	bne.n	80029ca <_svfiprintf_r+0x186>
 8002960:	9b03      	ldr	r3, [sp, #12]
 8002962:	3402      	adds	r4, #2
 8002964:	1d1a      	adds	r2, r3, #4
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	9203      	str	r2, [sp, #12]
 800296a:	2b00      	cmp	r3, #0
 800296c:	bfb8      	it	lt
 800296e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002972:	9305      	str	r3, [sp, #20]
 8002974:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8002a30 <_svfiprintf_r+0x1ec>
 8002978:	2203      	movs	r2, #3
 800297a:	4650      	mov	r0, sl
 800297c:	7821      	ldrb	r1, [r4, #0]
 800297e:	f000 fa1d 	bl	8002dbc <memchr>
 8002982:	b138      	cbz	r0, 8002994 <_svfiprintf_r+0x150>
 8002984:	2240      	movs	r2, #64	; 0x40
 8002986:	9b04      	ldr	r3, [sp, #16]
 8002988:	eba0 000a 	sub.w	r0, r0, sl
 800298c:	4082      	lsls	r2, r0
 800298e:	4313      	orrs	r3, r2
 8002990:	3401      	adds	r4, #1
 8002992:	9304      	str	r3, [sp, #16]
 8002994:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002998:	2206      	movs	r2, #6
 800299a:	4826      	ldr	r0, [pc, #152]	; (8002a34 <_svfiprintf_r+0x1f0>)
 800299c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80029a0:	f000 fa0c 	bl	8002dbc <memchr>
 80029a4:	2800      	cmp	r0, #0
 80029a6:	d038      	beq.n	8002a1a <_svfiprintf_r+0x1d6>
 80029a8:	4b23      	ldr	r3, [pc, #140]	; (8002a38 <_svfiprintf_r+0x1f4>)
 80029aa:	bb1b      	cbnz	r3, 80029f4 <_svfiprintf_r+0x1b0>
 80029ac:	9b03      	ldr	r3, [sp, #12]
 80029ae:	3307      	adds	r3, #7
 80029b0:	f023 0307 	bic.w	r3, r3, #7
 80029b4:	3308      	adds	r3, #8
 80029b6:	9303      	str	r3, [sp, #12]
 80029b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80029ba:	4433      	add	r3, r6
 80029bc:	9309      	str	r3, [sp, #36]	; 0x24
 80029be:	e768      	b.n	8002892 <_svfiprintf_r+0x4e>
 80029c0:	460c      	mov	r4, r1
 80029c2:	2001      	movs	r0, #1
 80029c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80029c8:	e7a6      	b.n	8002918 <_svfiprintf_r+0xd4>
 80029ca:	2300      	movs	r3, #0
 80029cc:	f04f 0c0a 	mov.w	ip, #10
 80029d0:	4619      	mov	r1, r3
 80029d2:	3401      	adds	r4, #1
 80029d4:	9305      	str	r3, [sp, #20]
 80029d6:	4620      	mov	r0, r4
 80029d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80029dc:	3a30      	subs	r2, #48	; 0x30
 80029de:	2a09      	cmp	r2, #9
 80029e0:	d903      	bls.n	80029ea <_svfiprintf_r+0x1a6>
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0c6      	beq.n	8002974 <_svfiprintf_r+0x130>
 80029e6:	9105      	str	r1, [sp, #20]
 80029e8:	e7c4      	b.n	8002974 <_svfiprintf_r+0x130>
 80029ea:	4604      	mov	r4, r0
 80029ec:	2301      	movs	r3, #1
 80029ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80029f2:	e7f0      	b.n	80029d6 <_svfiprintf_r+0x192>
 80029f4:	ab03      	add	r3, sp, #12
 80029f6:	9300      	str	r3, [sp, #0]
 80029f8:	462a      	mov	r2, r5
 80029fa:	4638      	mov	r0, r7
 80029fc:	4b0f      	ldr	r3, [pc, #60]	; (8002a3c <_svfiprintf_r+0x1f8>)
 80029fe:	a904      	add	r1, sp, #16
 8002a00:	f3af 8000 	nop.w
 8002a04:	1c42      	adds	r2, r0, #1
 8002a06:	4606      	mov	r6, r0
 8002a08:	d1d6      	bne.n	80029b8 <_svfiprintf_r+0x174>
 8002a0a:	89ab      	ldrh	r3, [r5, #12]
 8002a0c:	065b      	lsls	r3, r3, #25
 8002a0e:	f53f af2d 	bmi.w	800286c <_svfiprintf_r+0x28>
 8002a12:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002a14:	b01d      	add	sp, #116	; 0x74
 8002a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a1a:	ab03      	add	r3, sp, #12
 8002a1c:	9300      	str	r3, [sp, #0]
 8002a1e:	462a      	mov	r2, r5
 8002a20:	4638      	mov	r0, r7
 8002a22:	4b06      	ldr	r3, [pc, #24]	; (8002a3c <_svfiprintf_r+0x1f8>)
 8002a24:	a904      	add	r1, sp, #16
 8002a26:	f000 f87d 	bl	8002b24 <_printf_i>
 8002a2a:	e7eb      	b.n	8002a04 <_svfiprintf_r+0x1c0>
 8002a2c:	08003413 	.word	0x08003413
 8002a30:	08003419 	.word	0x08003419
 8002a34:	0800341d 	.word	0x0800341d
 8002a38:	00000000 	.word	0x00000000
 8002a3c:	08002791 	.word	0x08002791

08002a40 <_printf_common>:
 8002a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a44:	4616      	mov	r6, r2
 8002a46:	4699      	mov	r9, r3
 8002a48:	688a      	ldr	r2, [r1, #8]
 8002a4a:	690b      	ldr	r3, [r1, #16]
 8002a4c:	4607      	mov	r7, r0
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	bfb8      	it	lt
 8002a52:	4613      	movlt	r3, r2
 8002a54:	6033      	str	r3, [r6, #0]
 8002a56:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002a5a:	460c      	mov	r4, r1
 8002a5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002a60:	b10a      	cbz	r2, 8002a66 <_printf_common+0x26>
 8002a62:	3301      	adds	r3, #1
 8002a64:	6033      	str	r3, [r6, #0]
 8002a66:	6823      	ldr	r3, [r4, #0]
 8002a68:	0699      	lsls	r1, r3, #26
 8002a6a:	bf42      	ittt	mi
 8002a6c:	6833      	ldrmi	r3, [r6, #0]
 8002a6e:	3302      	addmi	r3, #2
 8002a70:	6033      	strmi	r3, [r6, #0]
 8002a72:	6825      	ldr	r5, [r4, #0]
 8002a74:	f015 0506 	ands.w	r5, r5, #6
 8002a78:	d106      	bne.n	8002a88 <_printf_common+0x48>
 8002a7a:	f104 0a19 	add.w	sl, r4, #25
 8002a7e:	68e3      	ldr	r3, [r4, #12]
 8002a80:	6832      	ldr	r2, [r6, #0]
 8002a82:	1a9b      	subs	r3, r3, r2
 8002a84:	42ab      	cmp	r3, r5
 8002a86:	dc2b      	bgt.n	8002ae0 <_printf_common+0xa0>
 8002a88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002a8c:	1e13      	subs	r3, r2, #0
 8002a8e:	6822      	ldr	r2, [r4, #0]
 8002a90:	bf18      	it	ne
 8002a92:	2301      	movne	r3, #1
 8002a94:	0692      	lsls	r2, r2, #26
 8002a96:	d430      	bmi.n	8002afa <_printf_common+0xba>
 8002a98:	4649      	mov	r1, r9
 8002a9a:	4638      	mov	r0, r7
 8002a9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002aa0:	47c0      	blx	r8
 8002aa2:	3001      	adds	r0, #1
 8002aa4:	d023      	beq.n	8002aee <_printf_common+0xae>
 8002aa6:	6823      	ldr	r3, [r4, #0]
 8002aa8:	6922      	ldr	r2, [r4, #16]
 8002aaa:	f003 0306 	and.w	r3, r3, #6
 8002aae:	2b04      	cmp	r3, #4
 8002ab0:	bf14      	ite	ne
 8002ab2:	2500      	movne	r5, #0
 8002ab4:	6833      	ldreq	r3, [r6, #0]
 8002ab6:	f04f 0600 	mov.w	r6, #0
 8002aba:	bf08      	it	eq
 8002abc:	68e5      	ldreq	r5, [r4, #12]
 8002abe:	f104 041a 	add.w	r4, r4, #26
 8002ac2:	bf08      	it	eq
 8002ac4:	1aed      	subeq	r5, r5, r3
 8002ac6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002aca:	bf08      	it	eq
 8002acc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	bfc4      	itt	gt
 8002ad4:	1a9b      	subgt	r3, r3, r2
 8002ad6:	18ed      	addgt	r5, r5, r3
 8002ad8:	42b5      	cmp	r5, r6
 8002ada:	d11a      	bne.n	8002b12 <_printf_common+0xd2>
 8002adc:	2000      	movs	r0, #0
 8002ade:	e008      	b.n	8002af2 <_printf_common+0xb2>
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	4652      	mov	r2, sl
 8002ae4:	4649      	mov	r1, r9
 8002ae6:	4638      	mov	r0, r7
 8002ae8:	47c0      	blx	r8
 8002aea:	3001      	adds	r0, #1
 8002aec:	d103      	bne.n	8002af6 <_printf_common+0xb6>
 8002aee:	f04f 30ff 	mov.w	r0, #4294967295
 8002af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002af6:	3501      	adds	r5, #1
 8002af8:	e7c1      	b.n	8002a7e <_printf_common+0x3e>
 8002afa:	2030      	movs	r0, #48	; 0x30
 8002afc:	18e1      	adds	r1, r4, r3
 8002afe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002b02:	1c5a      	adds	r2, r3, #1
 8002b04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002b08:	4422      	add	r2, r4
 8002b0a:	3302      	adds	r3, #2
 8002b0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002b10:	e7c2      	b.n	8002a98 <_printf_common+0x58>
 8002b12:	2301      	movs	r3, #1
 8002b14:	4622      	mov	r2, r4
 8002b16:	4649      	mov	r1, r9
 8002b18:	4638      	mov	r0, r7
 8002b1a:	47c0      	blx	r8
 8002b1c:	3001      	adds	r0, #1
 8002b1e:	d0e6      	beq.n	8002aee <_printf_common+0xae>
 8002b20:	3601      	adds	r6, #1
 8002b22:	e7d9      	b.n	8002ad8 <_printf_common+0x98>

08002b24 <_printf_i>:
 8002b24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002b28:	7e0f      	ldrb	r7, [r1, #24]
 8002b2a:	4691      	mov	r9, r2
 8002b2c:	2f78      	cmp	r7, #120	; 0x78
 8002b2e:	4680      	mov	r8, r0
 8002b30:	460c      	mov	r4, r1
 8002b32:	469a      	mov	sl, r3
 8002b34:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002b36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002b3a:	d807      	bhi.n	8002b4c <_printf_i+0x28>
 8002b3c:	2f62      	cmp	r7, #98	; 0x62
 8002b3e:	d80a      	bhi.n	8002b56 <_printf_i+0x32>
 8002b40:	2f00      	cmp	r7, #0
 8002b42:	f000 80d5 	beq.w	8002cf0 <_printf_i+0x1cc>
 8002b46:	2f58      	cmp	r7, #88	; 0x58
 8002b48:	f000 80c1 	beq.w	8002cce <_printf_i+0x1aa>
 8002b4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002b54:	e03a      	b.n	8002bcc <_printf_i+0xa8>
 8002b56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002b5a:	2b15      	cmp	r3, #21
 8002b5c:	d8f6      	bhi.n	8002b4c <_printf_i+0x28>
 8002b5e:	a101      	add	r1, pc, #4	; (adr r1, 8002b64 <_printf_i+0x40>)
 8002b60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002b64:	08002bbd 	.word	0x08002bbd
 8002b68:	08002bd1 	.word	0x08002bd1
 8002b6c:	08002b4d 	.word	0x08002b4d
 8002b70:	08002b4d 	.word	0x08002b4d
 8002b74:	08002b4d 	.word	0x08002b4d
 8002b78:	08002b4d 	.word	0x08002b4d
 8002b7c:	08002bd1 	.word	0x08002bd1
 8002b80:	08002b4d 	.word	0x08002b4d
 8002b84:	08002b4d 	.word	0x08002b4d
 8002b88:	08002b4d 	.word	0x08002b4d
 8002b8c:	08002b4d 	.word	0x08002b4d
 8002b90:	08002cd7 	.word	0x08002cd7
 8002b94:	08002bfd 	.word	0x08002bfd
 8002b98:	08002c91 	.word	0x08002c91
 8002b9c:	08002b4d 	.word	0x08002b4d
 8002ba0:	08002b4d 	.word	0x08002b4d
 8002ba4:	08002cf9 	.word	0x08002cf9
 8002ba8:	08002b4d 	.word	0x08002b4d
 8002bac:	08002bfd 	.word	0x08002bfd
 8002bb0:	08002b4d 	.word	0x08002b4d
 8002bb4:	08002b4d 	.word	0x08002b4d
 8002bb8:	08002c99 	.word	0x08002c99
 8002bbc:	682b      	ldr	r3, [r5, #0]
 8002bbe:	1d1a      	adds	r2, r3, #4
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	602a      	str	r2, [r5, #0]
 8002bc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002bc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e0a0      	b.n	8002d12 <_printf_i+0x1ee>
 8002bd0:	6820      	ldr	r0, [r4, #0]
 8002bd2:	682b      	ldr	r3, [r5, #0]
 8002bd4:	0607      	lsls	r7, r0, #24
 8002bd6:	f103 0104 	add.w	r1, r3, #4
 8002bda:	6029      	str	r1, [r5, #0]
 8002bdc:	d501      	bpl.n	8002be2 <_printf_i+0xbe>
 8002bde:	681e      	ldr	r6, [r3, #0]
 8002be0:	e003      	b.n	8002bea <_printf_i+0xc6>
 8002be2:	0646      	lsls	r6, r0, #25
 8002be4:	d5fb      	bpl.n	8002bde <_printf_i+0xba>
 8002be6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002bea:	2e00      	cmp	r6, #0
 8002bec:	da03      	bge.n	8002bf6 <_printf_i+0xd2>
 8002bee:	232d      	movs	r3, #45	; 0x2d
 8002bf0:	4276      	negs	r6, r6
 8002bf2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002bf6:	230a      	movs	r3, #10
 8002bf8:	4859      	ldr	r0, [pc, #356]	; (8002d60 <_printf_i+0x23c>)
 8002bfa:	e012      	b.n	8002c22 <_printf_i+0xfe>
 8002bfc:	682b      	ldr	r3, [r5, #0]
 8002bfe:	6820      	ldr	r0, [r4, #0]
 8002c00:	1d19      	adds	r1, r3, #4
 8002c02:	6029      	str	r1, [r5, #0]
 8002c04:	0605      	lsls	r5, r0, #24
 8002c06:	d501      	bpl.n	8002c0c <_printf_i+0xe8>
 8002c08:	681e      	ldr	r6, [r3, #0]
 8002c0a:	e002      	b.n	8002c12 <_printf_i+0xee>
 8002c0c:	0641      	lsls	r1, r0, #25
 8002c0e:	d5fb      	bpl.n	8002c08 <_printf_i+0xe4>
 8002c10:	881e      	ldrh	r6, [r3, #0]
 8002c12:	2f6f      	cmp	r7, #111	; 0x6f
 8002c14:	bf0c      	ite	eq
 8002c16:	2308      	moveq	r3, #8
 8002c18:	230a      	movne	r3, #10
 8002c1a:	4851      	ldr	r0, [pc, #324]	; (8002d60 <_printf_i+0x23c>)
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002c22:	6865      	ldr	r5, [r4, #4]
 8002c24:	2d00      	cmp	r5, #0
 8002c26:	bfa8      	it	ge
 8002c28:	6821      	ldrge	r1, [r4, #0]
 8002c2a:	60a5      	str	r5, [r4, #8]
 8002c2c:	bfa4      	itt	ge
 8002c2e:	f021 0104 	bicge.w	r1, r1, #4
 8002c32:	6021      	strge	r1, [r4, #0]
 8002c34:	b90e      	cbnz	r6, 8002c3a <_printf_i+0x116>
 8002c36:	2d00      	cmp	r5, #0
 8002c38:	d04b      	beq.n	8002cd2 <_printf_i+0x1ae>
 8002c3a:	4615      	mov	r5, r2
 8002c3c:	fbb6 f1f3 	udiv	r1, r6, r3
 8002c40:	fb03 6711 	mls	r7, r3, r1, r6
 8002c44:	5dc7      	ldrb	r7, [r0, r7]
 8002c46:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002c4a:	4637      	mov	r7, r6
 8002c4c:	42bb      	cmp	r3, r7
 8002c4e:	460e      	mov	r6, r1
 8002c50:	d9f4      	bls.n	8002c3c <_printf_i+0x118>
 8002c52:	2b08      	cmp	r3, #8
 8002c54:	d10b      	bne.n	8002c6e <_printf_i+0x14a>
 8002c56:	6823      	ldr	r3, [r4, #0]
 8002c58:	07de      	lsls	r6, r3, #31
 8002c5a:	d508      	bpl.n	8002c6e <_printf_i+0x14a>
 8002c5c:	6923      	ldr	r3, [r4, #16]
 8002c5e:	6861      	ldr	r1, [r4, #4]
 8002c60:	4299      	cmp	r1, r3
 8002c62:	bfde      	ittt	le
 8002c64:	2330      	movle	r3, #48	; 0x30
 8002c66:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002c6a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002c6e:	1b52      	subs	r2, r2, r5
 8002c70:	6122      	str	r2, [r4, #16]
 8002c72:	464b      	mov	r3, r9
 8002c74:	4621      	mov	r1, r4
 8002c76:	4640      	mov	r0, r8
 8002c78:	f8cd a000 	str.w	sl, [sp]
 8002c7c:	aa03      	add	r2, sp, #12
 8002c7e:	f7ff fedf 	bl	8002a40 <_printf_common>
 8002c82:	3001      	adds	r0, #1
 8002c84:	d14a      	bne.n	8002d1c <_printf_i+0x1f8>
 8002c86:	f04f 30ff 	mov.w	r0, #4294967295
 8002c8a:	b004      	add	sp, #16
 8002c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c90:	6823      	ldr	r3, [r4, #0]
 8002c92:	f043 0320 	orr.w	r3, r3, #32
 8002c96:	6023      	str	r3, [r4, #0]
 8002c98:	2778      	movs	r7, #120	; 0x78
 8002c9a:	4832      	ldr	r0, [pc, #200]	; (8002d64 <_printf_i+0x240>)
 8002c9c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002ca0:	6823      	ldr	r3, [r4, #0]
 8002ca2:	6829      	ldr	r1, [r5, #0]
 8002ca4:	061f      	lsls	r7, r3, #24
 8002ca6:	f851 6b04 	ldr.w	r6, [r1], #4
 8002caa:	d402      	bmi.n	8002cb2 <_printf_i+0x18e>
 8002cac:	065f      	lsls	r7, r3, #25
 8002cae:	bf48      	it	mi
 8002cb0:	b2b6      	uxthmi	r6, r6
 8002cb2:	07df      	lsls	r7, r3, #31
 8002cb4:	bf48      	it	mi
 8002cb6:	f043 0320 	orrmi.w	r3, r3, #32
 8002cba:	6029      	str	r1, [r5, #0]
 8002cbc:	bf48      	it	mi
 8002cbe:	6023      	strmi	r3, [r4, #0]
 8002cc0:	b91e      	cbnz	r6, 8002cca <_printf_i+0x1a6>
 8002cc2:	6823      	ldr	r3, [r4, #0]
 8002cc4:	f023 0320 	bic.w	r3, r3, #32
 8002cc8:	6023      	str	r3, [r4, #0]
 8002cca:	2310      	movs	r3, #16
 8002ccc:	e7a6      	b.n	8002c1c <_printf_i+0xf8>
 8002cce:	4824      	ldr	r0, [pc, #144]	; (8002d60 <_printf_i+0x23c>)
 8002cd0:	e7e4      	b.n	8002c9c <_printf_i+0x178>
 8002cd2:	4615      	mov	r5, r2
 8002cd4:	e7bd      	b.n	8002c52 <_printf_i+0x12e>
 8002cd6:	682b      	ldr	r3, [r5, #0]
 8002cd8:	6826      	ldr	r6, [r4, #0]
 8002cda:	1d18      	adds	r0, r3, #4
 8002cdc:	6961      	ldr	r1, [r4, #20]
 8002cde:	6028      	str	r0, [r5, #0]
 8002ce0:	0635      	lsls	r5, r6, #24
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	d501      	bpl.n	8002cea <_printf_i+0x1c6>
 8002ce6:	6019      	str	r1, [r3, #0]
 8002ce8:	e002      	b.n	8002cf0 <_printf_i+0x1cc>
 8002cea:	0670      	lsls	r0, r6, #25
 8002cec:	d5fb      	bpl.n	8002ce6 <_printf_i+0x1c2>
 8002cee:	8019      	strh	r1, [r3, #0]
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	4615      	mov	r5, r2
 8002cf4:	6123      	str	r3, [r4, #16]
 8002cf6:	e7bc      	b.n	8002c72 <_printf_i+0x14e>
 8002cf8:	682b      	ldr	r3, [r5, #0]
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	1d1a      	adds	r2, r3, #4
 8002cfe:	602a      	str	r2, [r5, #0]
 8002d00:	681d      	ldr	r5, [r3, #0]
 8002d02:	6862      	ldr	r2, [r4, #4]
 8002d04:	4628      	mov	r0, r5
 8002d06:	f000 f859 	bl	8002dbc <memchr>
 8002d0a:	b108      	cbz	r0, 8002d10 <_printf_i+0x1ec>
 8002d0c:	1b40      	subs	r0, r0, r5
 8002d0e:	6060      	str	r0, [r4, #4]
 8002d10:	6863      	ldr	r3, [r4, #4]
 8002d12:	6123      	str	r3, [r4, #16]
 8002d14:	2300      	movs	r3, #0
 8002d16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d1a:	e7aa      	b.n	8002c72 <_printf_i+0x14e>
 8002d1c:	462a      	mov	r2, r5
 8002d1e:	4649      	mov	r1, r9
 8002d20:	4640      	mov	r0, r8
 8002d22:	6923      	ldr	r3, [r4, #16]
 8002d24:	47d0      	blx	sl
 8002d26:	3001      	adds	r0, #1
 8002d28:	d0ad      	beq.n	8002c86 <_printf_i+0x162>
 8002d2a:	6823      	ldr	r3, [r4, #0]
 8002d2c:	079b      	lsls	r3, r3, #30
 8002d2e:	d413      	bmi.n	8002d58 <_printf_i+0x234>
 8002d30:	68e0      	ldr	r0, [r4, #12]
 8002d32:	9b03      	ldr	r3, [sp, #12]
 8002d34:	4298      	cmp	r0, r3
 8002d36:	bfb8      	it	lt
 8002d38:	4618      	movlt	r0, r3
 8002d3a:	e7a6      	b.n	8002c8a <_printf_i+0x166>
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	4632      	mov	r2, r6
 8002d40:	4649      	mov	r1, r9
 8002d42:	4640      	mov	r0, r8
 8002d44:	47d0      	blx	sl
 8002d46:	3001      	adds	r0, #1
 8002d48:	d09d      	beq.n	8002c86 <_printf_i+0x162>
 8002d4a:	3501      	adds	r5, #1
 8002d4c:	68e3      	ldr	r3, [r4, #12]
 8002d4e:	9903      	ldr	r1, [sp, #12]
 8002d50:	1a5b      	subs	r3, r3, r1
 8002d52:	42ab      	cmp	r3, r5
 8002d54:	dcf2      	bgt.n	8002d3c <_printf_i+0x218>
 8002d56:	e7eb      	b.n	8002d30 <_printf_i+0x20c>
 8002d58:	2500      	movs	r5, #0
 8002d5a:	f104 0619 	add.w	r6, r4, #25
 8002d5e:	e7f5      	b.n	8002d4c <_printf_i+0x228>
 8002d60:	08003424 	.word	0x08003424
 8002d64:	08003435 	.word	0x08003435

08002d68 <memmove>:
 8002d68:	4288      	cmp	r0, r1
 8002d6a:	b510      	push	{r4, lr}
 8002d6c:	eb01 0402 	add.w	r4, r1, r2
 8002d70:	d902      	bls.n	8002d78 <memmove+0x10>
 8002d72:	4284      	cmp	r4, r0
 8002d74:	4623      	mov	r3, r4
 8002d76:	d807      	bhi.n	8002d88 <memmove+0x20>
 8002d78:	1e43      	subs	r3, r0, #1
 8002d7a:	42a1      	cmp	r1, r4
 8002d7c:	d008      	beq.n	8002d90 <memmove+0x28>
 8002d7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002d82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002d86:	e7f8      	b.n	8002d7a <memmove+0x12>
 8002d88:	4601      	mov	r1, r0
 8002d8a:	4402      	add	r2, r0
 8002d8c:	428a      	cmp	r2, r1
 8002d8e:	d100      	bne.n	8002d92 <memmove+0x2a>
 8002d90:	bd10      	pop	{r4, pc}
 8002d92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002d96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002d9a:	e7f7      	b.n	8002d8c <memmove+0x24>

08002d9c <_sbrk_r>:
 8002d9c:	b538      	push	{r3, r4, r5, lr}
 8002d9e:	2300      	movs	r3, #0
 8002da0:	4d05      	ldr	r5, [pc, #20]	; (8002db8 <_sbrk_r+0x1c>)
 8002da2:	4604      	mov	r4, r0
 8002da4:	4608      	mov	r0, r1
 8002da6:	602b      	str	r3, [r5, #0]
 8002da8:	f7fd fbaa 	bl	8000500 <_sbrk>
 8002dac:	1c43      	adds	r3, r0, #1
 8002dae:	d102      	bne.n	8002db6 <_sbrk_r+0x1a>
 8002db0:	682b      	ldr	r3, [r5, #0]
 8002db2:	b103      	cbz	r3, 8002db6 <_sbrk_r+0x1a>
 8002db4:	6023      	str	r3, [r4, #0]
 8002db6:	bd38      	pop	{r3, r4, r5, pc}
 8002db8:	20000290 	.word	0x20000290

08002dbc <memchr>:
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	b510      	push	{r4, lr}
 8002dc0:	b2c9      	uxtb	r1, r1
 8002dc2:	4402      	add	r2, r0
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	d101      	bne.n	8002dce <memchr+0x12>
 8002dca:	2000      	movs	r0, #0
 8002dcc:	e003      	b.n	8002dd6 <memchr+0x1a>
 8002dce:	7804      	ldrb	r4, [r0, #0]
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	428c      	cmp	r4, r1
 8002dd4:	d1f6      	bne.n	8002dc4 <memchr+0x8>
 8002dd6:	bd10      	pop	{r4, pc}

08002dd8 <_realloc_r>:
 8002dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ddc:	4680      	mov	r8, r0
 8002dde:	4614      	mov	r4, r2
 8002de0:	460e      	mov	r6, r1
 8002de2:	b921      	cbnz	r1, 8002dee <_realloc_r+0x16>
 8002de4:	4611      	mov	r1, r2
 8002de6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002dea:	f7ff bc45 	b.w	8002678 <_malloc_r>
 8002dee:	b92a      	cbnz	r2, 8002dfc <_realloc_r+0x24>
 8002df0:	f7ff fbda 	bl	80025a8 <_free_r>
 8002df4:	4625      	mov	r5, r4
 8002df6:	4628      	mov	r0, r5
 8002df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002dfc:	f000 f81b 	bl	8002e36 <_malloc_usable_size_r>
 8002e00:	4284      	cmp	r4, r0
 8002e02:	4607      	mov	r7, r0
 8002e04:	d802      	bhi.n	8002e0c <_realloc_r+0x34>
 8002e06:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002e0a:	d812      	bhi.n	8002e32 <_realloc_r+0x5a>
 8002e0c:	4621      	mov	r1, r4
 8002e0e:	4640      	mov	r0, r8
 8002e10:	f7ff fc32 	bl	8002678 <_malloc_r>
 8002e14:	4605      	mov	r5, r0
 8002e16:	2800      	cmp	r0, #0
 8002e18:	d0ed      	beq.n	8002df6 <_realloc_r+0x1e>
 8002e1a:	42bc      	cmp	r4, r7
 8002e1c:	4622      	mov	r2, r4
 8002e1e:	4631      	mov	r1, r6
 8002e20:	bf28      	it	cs
 8002e22:	463a      	movcs	r2, r7
 8002e24:	f7ff fbb2 	bl	800258c <memcpy>
 8002e28:	4631      	mov	r1, r6
 8002e2a:	4640      	mov	r0, r8
 8002e2c:	f7ff fbbc 	bl	80025a8 <_free_r>
 8002e30:	e7e1      	b.n	8002df6 <_realloc_r+0x1e>
 8002e32:	4635      	mov	r5, r6
 8002e34:	e7df      	b.n	8002df6 <_realloc_r+0x1e>

08002e36 <_malloc_usable_size_r>:
 8002e36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e3a:	1f18      	subs	r0, r3, #4
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	bfbc      	itt	lt
 8002e40:	580b      	ldrlt	r3, [r1, r0]
 8002e42:	18c0      	addlt	r0, r0, r3
 8002e44:	4770      	bx	lr
	...

08002e48 <_init>:
 8002e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e4a:	bf00      	nop
 8002e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e4e:	bc08      	pop	{r3}
 8002e50:	469e      	mov	lr, r3
 8002e52:	4770      	bx	lr

08002e54 <_fini>:
 8002e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e56:	bf00      	nop
 8002e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e5a:	bc08      	pop	{r3}
 8002e5c:	469e      	mov	lr, r3
 8002e5e:	4770      	bx	lr
