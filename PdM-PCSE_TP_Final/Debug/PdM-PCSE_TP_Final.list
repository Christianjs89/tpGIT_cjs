
PdM-PCSE_TP_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046d0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  080047dc  080047dc  000147dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b9c  08004b9c  00020130  2**0
                  CONTENTS
  4 .ARM          00000000  08004b9c  08004b9c  00020130  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b9c  08004b9c  00020130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b9c  08004b9c  00014b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ba0  08004ba0  00014ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000130  20000000  08004ba4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  20000130  08004cd4  00020130  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c0  08004cd4  000203c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020159  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f55b  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002651  00000000  00000000  0002f6f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001010  00000000  00000000  00031d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ca9  00000000  00000000  00032d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018d04  00000000  00000000  00033a01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013d76  00000000  00000000  0004c705  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d5d6  00000000  00000000  0006047b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000048c0  00000000  00000000  000eda54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000f2314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000130 	.word	0x20000130
 8000128:	00000000 	.word	0x00000000
 800012c:	080047c4 	.word	0x080047c4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000134 	.word	0x20000134
 8000148:	080047c4 	.word	0x080047c4

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f001 f995 	bl	8001480 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f81b 	bl	8000190 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f855 	bl	8000208 <MX_GPIO_Init>
  //MX_USART2_UART_Init();
  //MX_I2C1_Init();
  //MX_TIM2_Init();
  /* USER CODE BEGIN 2 */
  uartInit();
 800015e:	f001 f901 	bl	8001364 <uartInit>
  i2c_init();
 8000162:	f000 fdc9 	bl	8000cf8 <i2c_init>
  timer_init();
 8000166:	f000 fc27 	bl	80009b8 <timer_init>

  debounceFSM_init();
 800016a:	f000 fa5f 	bl	800062c <debounceFSM_init>
  menuMEF_init();
 800016e:	f000 fded 	bl	8000d4c <menuMEF_init>
  motor_init();
 8000172:	f000 fb61 	bl	8000838 <motor_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  action_t menuAction = NONE;
 8000176:	2300      	movs	r3, #0
 8000178:	71fb      	strb	r3, [r7, #7]



  while(1){

	  debounceFSM_update(); // checkear el estado del pulsador y actualizar su valor
 800017a:	f000 fa67 	bl	800064c <debounceFSM_update>
	  menuAction = menuMEF_update(); // obtener la accion del pulsador (NONE, EXECUTE, NEXT)
 800017e:	f000 fe31 	bl	8000de4 <menuMEF_update>
 8000182:	4603      	mov	r3, r0
 8000184:	71fb      	strb	r3, [r7, #7]
	  menuMEF_set_state(menuAction); // ejecutar la accion correspondiente al estado y a la accion del pulsador
 8000186:	79fb      	ldrb	r3, [r7, #7]
 8000188:	4618      	mov	r0, r3
 800018a:	f000 fe81 	bl	8000e90 <menuMEF_set_state>
	  debounceFSM_update(); // checkear el estado del pulsador y actualizar su valor
 800018e:	e7f4      	b.n	800017a <main+0x2e>

08000190 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b090      	sub	sp, #64	; 0x40
 8000194:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000196:	f107 0318 	add.w	r3, r7, #24
 800019a:	2228      	movs	r2, #40	; 0x28
 800019c:	2100      	movs	r1, #0
 800019e:	4618      	mov	r0, r3
 80001a0:	f003 fe7e 	bl	8003ea0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	2200      	movs	r2, #0
 80001a8:	601a      	str	r2, [r3, #0]
 80001aa:	605a      	str	r2, [r3, #4]
 80001ac:	609a      	str	r2, [r3, #8]
 80001ae:	60da      	str	r2, [r3, #12]
 80001b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001b2:	2301      	movs	r3, #1
 80001b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80001b6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80001ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001bc:	2300      	movs	r3, #0
 80001be:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001c0:	f107 0318 	add.w	r3, r7, #24
 80001c4:	4618      	mov	r0, r3
 80001c6:	f002 f979 	bl	80024bc <HAL_RCC_OscConfig>
 80001ca:	4603      	mov	r3, r0
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d001      	beq.n	80001d4 <SystemClock_Config+0x44>
  {
    Error_Handler();
 80001d0:	f000 f888 	bl	80002e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001d4:	230f      	movs	r3, #15
 80001d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80001d8:	2301      	movs	r3, #1
 80001da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001dc:	2300      	movs	r3, #0
 80001de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001e6:	2300      	movs	r3, #0
 80001e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001ea:	1d3b      	adds	r3, r7, #4
 80001ec:	2100      	movs	r1, #0
 80001ee:	4618      	mov	r0, r3
 80001f0:	f002 fbe6 	bl	80029c0 <HAL_RCC_ClockConfig>
 80001f4:	4603      	mov	r3, r0
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d001      	beq.n	80001fe <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80001fa:	f000 f873 	bl	80002e4 <Error_Handler>
  }
}
 80001fe:	bf00      	nop
 8000200:	3740      	adds	r7, #64	; 0x40
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
	...

08000208 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b088      	sub	sp, #32
 800020c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800020e:	f107 0310 	add.w	r3, r7, #16
 8000212:	2200      	movs	r2, #0
 8000214:	601a      	str	r2, [r3, #0]
 8000216:	605a      	str	r2, [r3, #4]
 8000218:	609a      	str	r2, [r3, #8]
 800021a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800021c:	4b2d      	ldr	r3, [pc, #180]	; (80002d4 <MX_GPIO_Init+0xcc>)
 800021e:	699b      	ldr	r3, [r3, #24]
 8000220:	4a2c      	ldr	r2, [pc, #176]	; (80002d4 <MX_GPIO_Init+0xcc>)
 8000222:	f043 0310 	orr.w	r3, r3, #16
 8000226:	6193      	str	r3, [r2, #24]
 8000228:	4b2a      	ldr	r3, [pc, #168]	; (80002d4 <MX_GPIO_Init+0xcc>)
 800022a:	699b      	ldr	r3, [r3, #24]
 800022c:	f003 0310 	and.w	r3, r3, #16
 8000230:	60fb      	str	r3, [r7, #12]
 8000232:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000234:	4b27      	ldr	r3, [pc, #156]	; (80002d4 <MX_GPIO_Init+0xcc>)
 8000236:	699b      	ldr	r3, [r3, #24]
 8000238:	4a26      	ldr	r2, [pc, #152]	; (80002d4 <MX_GPIO_Init+0xcc>)
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	6193      	str	r3, [r2, #24]
 8000240:	4b24      	ldr	r3, [pc, #144]	; (80002d4 <MX_GPIO_Init+0xcc>)
 8000242:	699b      	ldr	r3, [r3, #24]
 8000244:	f003 0320 	and.w	r3, r3, #32
 8000248:	60bb      	str	r3, [r7, #8]
 800024a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800024c:	4b21      	ldr	r3, [pc, #132]	; (80002d4 <MX_GPIO_Init+0xcc>)
 800024e:	699b      	ldr	r3, [r3, #24]
 8000250:	4a20      	ldr	r2, [pc, #128]	; (80002d4 <MX_GPIO_Init+0xcc>)
 8000252:	f043 0304 	orr.w	r3, r3, #4
 8000256:	6193      	str	r3, [r2, #24]
 8000258:	4b1e      	ldr	r3, [pc, #120]	; (80002d4 <MX_GPIO_Init+0xcc>)
 800025a:	699b      	ldr	r3, [r3, #24]
 800025c:	f003 0304 	and.w	r3, r3, #4
 8000260:	607b      	str	r3, [r7, #4]
 8000262:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000264:	4b1b      	ldr	r3, [pc, #108]	; (80002d4 <MX_GPIO_Init+0xcc>)
 8000266:	699b      	ldr	r3, [r3, #24]
 8000268:	4a1a      	ldr	r2, [pc, #104]	; (80002d4 <MX_GPIO_Init+0xcc>)
 800026a:	f043 0308 	orr.w	r3, r3, #8
 800026e:	6193      	str	r3, [r2, #24]
 8000270:	4b18      	ldr	r3, [pc, #96]	; (80002d4 <MX_GPIO_Init+0xcc>)
 8000272:	699b      	ldr	r3, [r3, #24]
 8000274:	f003 0308 	and.w	r3, r3, #8
 8000278:	603b      	str	r3, [r7, #0]
 800027a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIRECTION_Pin|ENABLE_Pin|LD2_Pin, GPIO_PIN_RESET);
 800027c:	2200      	movs	r2, #0
 800027e:	2132      	movs	r1, #50	; 0x32
 8000280:	4815      	ldr	r0, [pc, #84]	; (80002d8 <MX_GPIO_Init+0xd0>)
 8000282:	f001 fc2c 	bl	8001ade <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000286:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800028a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800028c:	4b13      	ldr	r3, [pc, #76]	; (80002dc <MX_GPIO_Init+0xd4>)
 800028e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000290:	2300      	movs	r3, #0
 8000292:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000294:	f107 0310 	add.w	r3, r7, #16
 8000298:	4619      	mov	r1, r3
 800029a:	4811      	ldr	r0, [pc, #68]	; (80002e0 <MX_GPIO_Init+0xd8>)
 800029c:	f001 fa84 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIRECTION_Pin ENABLE_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DIRECTION_Pin|ENABLE_Pin|LD2_Pin;
 80002a0:	2332      	movs	r3, #50	; 0x32
 80002a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002a4:	2301      	movs	r3, #1
 80002a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002a8:	2300      	movs	r3, #0
 80002aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002ac:	2302      	movs	r3, #2
 80002ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002b0:	f107 0310 	add.w	r3, r7, #16
 80002b4:	4619      	mov	r1, r3
 80002b6:	4808      	ldr	r0, [pc, #32]	; (80002d8 <MX_GPIO_Init+0xd0>)
 80002b8:	f001 fa76 	bl	80017a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80002bc:	2200      	movs	r2, #0
 80002be:	2100      	movs	r1, #0
 80002c0:	2028      	movs	r0, #40	; 0x28
 80002c2:	f001 fa3a 	bl	800173a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80002c6:	2028      	movs	r0, #40	; 0x28
 80002c8:	f001 fa53 	bl	8001772 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80002cc:	bf00      	nop
 80002ce:	3720      	adds	r7, #32
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	40021000 	.word	0x40021000
 80002d8:	40010800 	.word	0x40010800
 80002dc:	10110000 	.word	0x10110000
 80002e0:	40011000 	.word	0x40011000

080002e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002e8:	b672      	cpsid	i
}
 80002ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002ec:	e7fe      	b.n	80002ec <Error_Handler+0x8>
	...

080002f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b085      	sub	sp, #20
 80002f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002f6:	4b15      	ldr	r3, [pc, #84]	; (800034c <HAL_MspInit+0x5c>)
 80002f8:	699b      	ldr	r3, [r3, #24]
 80002fa:	4a14      	ldr	r2, [pc, #80]	; (800034c <HAL_MspInit+0x5c>)
 80002fc:	f043 0301 	orr.w	r3, r3, #1
 8000300:	6193      	str	r3, [r2, #24]
 8000302:	4b12      	ldr	r3, [pc, #72]	; (800034c <HAL_MspInit+0x5c>)
 8000304:	699b      	ldr	r3, [r3, #24]
 8000306:	f003 0301 	and.w	r3, r3, #1
 800030a:	60bb      	str	r3, [r7, #8]
 800030c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800030e:	4b0f      	ldr	r3, [pc, #60]	; (800034c <HAL_MspInit+0x5c>)
 8000310:	69db      	ldr	r3, [r3, #28]
 8000312:	4a0e      	ldr	r2, [pc, #56]	; (800034c <HAL_MspInit+0x5c>)
 8000314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000318:	61d3      	str	r3, [r2, #28]
 800031a:	4b0c      	ldr	r3, [pc, #48]	; (800034c <HAL_MspInit+0x5c>)
 800031c:	69db      	ldr	r3, [r3, #28]
 800031e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000322:	607b      	str	r3, [r7, #4]
 8000324:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000326:	4b0a      	ldr	r3, [pc, #40]	; (8000350 <HAL_MspInit+0x60>)
 8000328:	685b      	ldr	r3, [r3, #4]
 800032a:	60fb      	str	r3, [r7, #12]
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000332:	60fb      	str	r3, [r7, #12]
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800033a:	60fb      	str	r3, [r7, #12]
 800033c:	4a04      	ldr	r2, [pc, #16]	; (8000350 <HAL_MspInit+0x60>)
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000342:	bf00      	nop
 8000344:	3714      	adds	r7, #20
 8000346:	46bd      	mov	sp, r7
 8000348:	bc80      	pop	{r7}
 800034a:	4770      	bx	lr
 800034c:	40021000 	.word	0x40021000
 8000350:	40010000 	.word	0x40010000

08000354 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b08a      	sub	sp, #40	; 0x28
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800035c:	f107 0314 	add.w	r3, r7, #20
 8000360:	2200      	movs	r2, #0
 8000362:	601a      	str	r2, [r3, #0]
 8000364:	605a      	str	r2, [r3, #4]
 8000366:	609a      	str	r2, [r3, #8]
 8000368:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	4a1d      	ldr	r2, [pc, #116]	; (80003e4 <HAL_I2C_MspInit+0x90>)
 8000370:	4293      	cmp	r3, r2
 8000372:	d132      	bne.n	80003da <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000374:	4b1c      	ldr	r3, [pc, #112]	; (80003e8 <HAL_I2C_MspInit+0x94>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	4a1b      	ldr	r2, [pc, #108]	; (80003e8 <HAL_I2C_MspInit+0x94>)
 800037a:	f043 0308 	orr.w	r3, r3, #8
 800037e:	6193      	str	r3, [r2, #24]
 8000380:	4b19      	ldr	r3, [pc, #100]	; (80003e8 <HAL_I2C_MspInit+0x94>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	f003 0308 	and.w	r3, r3, #8
 8000388:	613b      	str	r3, [r7, #16]
 800038a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800038c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000390:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000392:	2312      	movs	r3, #18
 8000394:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000396:	2303      	movs	r3, #3
 8000398:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800039a:	f107 0314 	add.w	r3, r7, #20
 800039e:	4619      	mov	r1, r3
 80003a0:	4812      	ldr	r0, [pc, #72]	; (80003ec <HAL_I2C_MspInit+0x98>)
 80003a2:	f001 fa01 	bl	80017a8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80003a6:	4b12      	ldr	r3, [pc, #72]	; (80003f0 <HAL_I2C_MspInit+0x9c>)
 80003a8:	685b      	ldr	r3, [r3, #4]
 80003aa:	627b      	str	r3, [r7, #36]	; 0x24
 80003ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003ae:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80003b2:	627b      	str	r3, [r7, #36]	; 0x24
 80003b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003b6:	f043 0302 	orr.w	r3, r3, #2
 80003ba:	627b      	str	r3, [r7, #36]	; 0x24
 80003bc:	4a0c      	ldr	r2, [pc, #48]	; (80003f0 <HAL_I2C_MspInit+0x9c>)
 80003be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003c0:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80003c2:	4b09      	ldr	r3, [pc, #36]	; (80003e8 <HAL_I2C_MspInit+0x94>)
 80003c4:	69db      	ldr	r3, [r3, #28]
 80003c6:	4a08      	ldr	r2, [pc, #32]	; (80003e8 <HAL_I2C_MspInit+0x94>)
 80003c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80003cc:	61d3      	str	r3, [r2, #28]
 80003ce:	4b06      	ldr	r3, [pc, #24]	; (80003e8 <HAL_I2C_MspInit+0x94>)
 80003d0:	69db      	ldr	r3, [r3, #28]
 80003d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80003d6:	60fb      	str	r3, [r7, #12]
 80003d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80003da:	bf00      	nop
 80003dc:	3728      	adds	r7, #40	; 0x28
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	40005400 	.word	0x40005400
 80003e8:	40021000 	.word	0x40021000
 80003ec:	40010c00 	.word	0x40010c00
 80003f0:	40010000 	.word	0x40010000

080003f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b085      	sub	sp, #20
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000404:	d10b      	bne.n	800041e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000406:	4b08      	ldr	r3, [pc, #32]	; (8000428 <HAL_TIM_Base_MspInit+0x34>)
 8000408:	69db      	ldr	r3, [r3, #28]
 800040a:	4a07      	ldr	r2, [pc, #28]	; (8000428 <HAL_TIM_Base_MspInit+0x34>)
 800040c:	f043 0301 	orr.w	r3, r3, #1
 8000410:	61d3      	str	r3, [r2, #28]
 8000412:	4b05      	ldr	r3, [pc, #20]	; (8000428 <HAL_TIM_Base_MspInit+0x34>)
 8000414:	69db      	ldr	r3, [r3, #28]
 8000416:	f003 0301 	and.w	r3, r3, #1
 800041a:	60fb      	str	r3, [r7, #12]
 800041c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800041e:	bf00      	nop
 8000420:	3714      	adds	r7, #20
 8000422:	46bd      	mov	sp, r7
 8000424:	bc80      	pop	{r7}
 8000426:	4770      	bx	lr
 8000428:	40021000 	.word	0x40021000

0800042c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b088      	sub	sp, #32
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000434:	f107 0310 	add.w	r3, r7, #16
 8000438:	2200      	movs	r2, #0
 800043a:	601a      	str	r2, [r3, #0]
 800043c:	605a      	str	r2, [r3, #4]
 800043e:	609a      	str	r2, [r3, #8]
 8000440:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800044a:	d117      	bne.n	800047c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800044c:	4b0d      	ldr	r3, [pc, #52]	; (8000484 <HAL_TIM_MspPostInit+0x58>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	4a0c      	ldr	r2, [pc, #48]	; (8000484 <HAL_TIM_MspPostInit+0x58>)
 8000452:	f043 0304 	orr.w	r3, r3, #4
 8000456:	6193      	str	r3, [r2, #24]
 8000458:	4b0a      	ldr	r3, [pc, #40]	; (8000484 <HAL_TIM_MspPostInit+0x58>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	f003 0304 	and.w	r3, r3, #4
 8000460:	60fb      	str	r3, [r7, #12]
 8000462:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = STEP_Pin;
 8000464:	2301      	movs	r3, #1
 8000466:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000468:	2302      	movs	r3, #2
 800046a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800046c:	2302      	movs	r3, #2
 800046e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(STEP_GPIO_Port, &GPIO_InitStruct);
 8000470:	f107 0310 	add.w	r3, r7, #16
 8000474:	4619      	mov	r1, r3
 8000476:	4804      	ldr	r0, [pc, #16]	; (8000488 <HAL_TIM_MspPostInit+0x5c>)
 8000478:	f001 f996 	bl	80017a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800047c:	bf00      	nop
 800047e:	3720      	adds	r7, #32
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	40021000 	.word	0x40021000
 8000488:	40010800 	.word	0x40010800

0800048c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b088      	sub	sp, #32
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000494:	f107 0310 	add.w	r3, r7, #16
 8000498:	2200      	movs	r2, #0
 800049a:	601a      	str	r2, [r3, #0]
 800049c:	605a      	str	r2, [r3, #4]
 800049e:	609a      	str	r2, [r3, #8]
 80004a0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	4a15      	ldr	r2, [pc, #84]	; (80004fc <HAL_UART_MspInit+0x70>)
 80004a8:	4293      	cmp	r3, r2
 80004aa:	d123      	bne.n	80004f4 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80004ac:	4b14      	ldr	r3, [pc, #80]	; (8000500 <HAL_UART_MspInit+0x74>)
 80004ae:	69db      	ldr	r3, [r3, #28]
 80004b0:	4a13      	ldr	r2, [pc, #76]	; (8000500 <HAL_UART_MspInit+0x74>)
 80004b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004b6:	61d3      	str	r3, [r2, #28]
 80004b8:	4b11      	ldr	r3, [pc, #68]	; (8000500 <HAL_UART_MspInit+0x74>)
 80004ba:	69db      	ldr	r3, [r3, #28]
 80004bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004c0:	60fb      	str	r3, [r7, #12]
 80004c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c4:	4b0e      	ldr	r3, [pc, #56]	; (8000500 <HAL_UART_MspInit+0x74>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	4a0d      	ldr	r2, [pc, #52]	; (8000500 <HAL_UART_MspInit+0x74>)
 80004ca:	f043 0304 	orr.w	r3, r3, #4
 80004ce:	6193      	str	r3, [r2, #24]
 80004d0:	4b0b      	ldr	r3, [pc, #44]	; (8000500 <HAL_UART_MspInit+0x74>)
 80004d2:	699b      	ldr	r3, [r3, #24]
 80004d4:	f003 0304 	and.w	r3, r3, #4
 80004d8:	60bb      	str	r3, [r7, #8]
 80004da:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80004dc:	230c      	movs	r3, #12
 80004de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004e0:	2302      	movs	r3, #2
 80004e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e4:	2302      	movs	r3, #2
 80004e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e8:	f107 0310 	add.w	r3, r7, #16
 80004ec:	4619      	mov	r1, r3
 80004ee:	4805      	ldr	r0, [pc, #20]	; (8000504 <HAL_UART_MspInit+0x78>)
 80004f0:	f001 f95a 	bl	80017a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80004f4:	bf00      	nop
 80004f6:	3720      	adds	r7, #32
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	40004400 	.word	0x40004400
 8000500:	40021000 	.word	0x40021000
 8000504:	40010800 	.word	0x40010800

08000508 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800050c:	e7fe      	b.n	800050c <NMI_Handler+0x4>

0800050e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800050e:	b480      	push	{r7}
 8000510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000512:	e7fe      	b.n	8000512 <HardFault_Handler+0x4>

08000514 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000518:	e7fe      	b.n	8000518 <MemManage_Handler+0x4>

0800051a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800051a:	b480      	push	{r7}
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800051e:	e7fe      	b.n	800051e <BusFault_Handler+0x4>

08000520 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000524:	e7fe      	b.n	8000524 <UsageFault_Handler+0x4>

08000526 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000526:	b480      	push	{r7}
 8000528:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800052a:	bf00      	nop
 800052c:	46bd      	mov	sp, r7
 800052e:	bc80      	pop	{r7}
 8000530:	4770      	bx	lr

08000532 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000532:	b480      	push	{r7}
 8000534:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000536:	bf00      	nop
 8000538:	46bd      	mov	sp, r7
 800053a:	bc80      	pop	{r7}
 800053c:	4770      	bx	lr

0800053e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800053e:	b480      	push	{r7}
 8000540:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000542:	bf00      	nop
 8000544:	46bd      	mov	sp, r7
 8000546:	bc80      	pop	{r7}
 8000548:	4770      	bx	lr

0800054a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800054a:	b580      	push	{r7, lr}
 800054c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800054e:	f000 ffdd 	bl	800150c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}

08000556 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000556:	b580      	push	{r7, lr}
 8000558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800055a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800055e:	f001 faef 	bl	8001b40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000562:	bf00      	nop
 8000564:	bd80      	pop	{r7, pc}
	...

08000568 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000570:	4a14      	ldr	r2, [pc, #80]	; (80005c4 <_sbrk+0x5c>)
 8000572:	4b15      	ldr	r3, [pc, #84]	; (80005c8 <_sbrk+0x60>)
 8000574:	1ad3      	subs	r3, r2, r3
 8000576:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000578:	697b      	ldr	r3, [r7, #20]
 800057a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800057c:	4b13      	ldr	r3, [pc, #76]	; (80005cc <_sbrk+0x64>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d102      	bne.n	800058a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000584:	4b11      	ldr	r3, [pc, #68]	; (80005cc <_sbrk+0x64>)
 8000586:	4a12      	ldr	r2, [pc, #72]	; (80005d0 <_sbrk+0x68>)
 8000588:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800058a:	4b10      	ldr	r3, [pc, #64]	; (80005cc <_sbrk+0x64>)
 800058c:	681a      	ldr	r2, [r3, #0]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	4413      	add	r3, r2
 8000592:	693a      	ldr	r2, [r7, #16]
 8000594:	429a      	cmp	r2, r3
 8000596:	d207      	bcs.n	80005a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000598:	f003 fc8a 	bl	8003eb0 <__errno>
 800059c:	4603      	mov	r3, r0
 800059e:	220c      	movs	r2, #12
 80005a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005a2:	f04f 33ff 	mov.w	r3, #4294967295
 80005a6:	e009      	b.n	80005bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005a8:	4b08      	ldr	r3, [pc, #32]	; (80005cc <_sbrk+0x64>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005ae:	4b07      	ldr	r3, [pc, #28]	; (80005cc <_sbrk+0x64>)
 80005b0:	681a      	ldr	r2, [r3, #0]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4413      	add	r3, r2
 80005b6:	4a05      	ldr	r2, [pc, #20]	; (80005cc <_sbrk+0x64>)
 80005b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005ba:	68fb      	ldr	r3, [r7, #12]
}
 80005bc:	4618      	mov	r0, r3
 80005be:	3718      	adds	r7, #24
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20005000 	.word	0x20005000
 80005c8:	00000400 	.word	0x00000400
 80005cc:	2000014c 	.word	0x2000014c
 80005d0:	200003c0 	.word	0x200003c0

080005d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	bc80      	pop	{r7}
 80005de:	4770      	bx	lr

080005e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005e0:	f7ff fff8 	bl	80005d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005e4:	480b      	ldr	r0, [pc, #44]	; (8000614 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005e6:	490c      	ldr	r1, [pc, #48]	; (8000618 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005e8:	4a0c      	ldr	r2, [pc, #48]	; (800061c <LoopFillZerobss+0x16>)
  movs r3, #0
 80005ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005ec:	e002      	b.n	80005f4 <LoopCopyDataInit>

080005ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005f2:	3304      	adds	r3, #4

080005f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005f8:	d3f9      	bcc.n	80005ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005fa:	4a09      	ldr	r2, [pc, #36]	; (8000620 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80005fc:	4c09      	ldr	r4, [pc, #36]	; (8000624 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000600:	e001      	b.n	8000606 <LoopFillZerobss>

08000602 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000602:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000604:	3204      	adds	r2, #4

08000606 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000606:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000608:	d3fb      	bcc.n	8000602 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800060a:	f003 fc57 	bl	8003ebc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800060e:	f7ff fd9d 	bl	800014c <main>
  bx lr
 8000612:	4770      	bx	lr
  ldr r0, =_sdata
 8000614:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000618:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 800061c:	08004ba4 	.word	0x08004ba4
  ldr r2, =_sbss
 8000620:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 8000624:	200003c0 	.word	0x200003c0

08000628 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000628:	e7fe      	b.n	8000628 <ADC1_2_IRQHandler>
	...

0800062c <debounceFSM_init>:


/* DEFINICION DE FUNCIONES */

// Definicion de inicializacion del anti rebote
void debounceFSM_init(){
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	estado = BUTTON_UP;
 8000630:	4b04      	ldr	r3, [pc, #16]	; (8000644 <debounceFSM_init+0x18>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, RESET); // iniciar con led apagado (salida)
	delayInit(&delayHandle, DEBOUNCE_DELAY);
 8000636:	2128      	movs	r1, #40	; 0x28
 8000638:	4803      	ldr	r0, [pc, #12]	; (8000648 <debounceFSM_init+0x1c>)
 800063a:	f000 f8b5 	bl	80007a8 <delayInit>
}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20000150 	.word	0x20000150
 8000648:	20000154 	.word	0x20000154

0800064c <debounceFSM_update>:

// Definicion de actualizacion del valor del pulsador con anti rebote por software
void debounceFSM_update(){
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
	switch(estado){
 8000650:	4b34      	ldr	r3, [pc, #208]	; (8000724 <debounceFSM_update+0xd8>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b03      	cmp	r3, #3
 8000656:	d859      	bhi.n	800070c <debounceFSM_update+0xc0>
 8000658:	a201      	add	r2, pc, #4	; (adr r2, 8000660 <debounceFSM_update+0x14>)
 800065a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800065e:	bf00      	nop
 8000660:	08000671 	.word	0x08000671
 8000664:	08000689 	.word	0x08000689
 8000668:	080006bf 	.word	0x080006bf
 800066c:	080006d7 	.word	0x080006d7
	case BUTTON_UP:
		// si el pin esta low pasar al estado BUTTON_FALLING
		if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 0){
 8000670:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000674:	482c      	ldr	r0, [pc, #176]	; (8000728 <debounceFSM_update+0xdc>)
 8000676:	f001 fa1b 	bl	8001ab0 <HAL_GPIO_ReadPin>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d148      	bne.n	8000712 <debounceFSM_update+0xc6>
			estado = BUTTON_FALLING;
 8000680:	4b28      	ldr	r3, [pc, #160]	; (8000724 <debounceFSM_update+0xd8>)
 8000682:	2201      	movs	r2, #1
 8000684:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000686:	e044      	b.n	8000712 <debounceFSM_update+0xc6>
	case BUTTON_FALLING:
		// si el pin esta high luego de 40 ms, volver a BUTTON_UP
		// si el pin esta low luego de 40 ms, cambiar a BUTTON_DOWN
		if(delayRead(&delayHandle) == true){ // si transcurrio el debounceDelay, muestrear pulsador nuevamente. Iniciar delay si es llamado por 1ra vez
 8000688:	4828      	ldr	r0, [pc, #160]	; (800072c <debounceFSM_update+0xe0>)
 800068a:	f000 f8aa 	bl	80007e2 <delayRead>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d040      	beq.n	8000716 <debounceFSM_update+0xca>
			if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 1){ // pulsador no presionado >> 1
 8000694:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000698:	4823      	ldr	r0, [pc, #140]	; (8000728 <debounceFSM_update+0xdc>)
 800069a:	f001 fa09 	bl	8001ab0 <HAL_GPIO_ReadPin>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b01      	cmp	r3, #1
 80006a2:	d103      	bne.n	80006ac <debounceFSM_update+0x60>
				estado = BUTTON_UP; // si sigue high, el estado vuelve a BUTTON_UP
 80006a4:	4b1f      	ldr	r3, [pc, #124]	; (8000724 <debounceFSM_update+0xd8>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	701a      	strb	r2, [r3, #0]
				buttonPressed();
				// Reemplazo del encendido del led por la deteccion unica del flanco descendente
				fallingState = true;
			}
		}
		break;
 80006aa:	e034      	b.n	8000716 <debounceFSM_update+0xca>
				estado = BUTTON_DOWN;
 80006ac:	4b1d      	ldr	r3, [pc, #116]	; (8000724 <debounceFSM_update+0xd8>)
 80006ae:	2202      	movs	r2, #2
 80006b0:	701a      	strb	r2, [r3, #0]
				buttonPressed();
 80006b2:	f000 f86d 	bl	8000790 <buttonPressed>
				fallingState = true;
 80006b6:	4b1e      	ldr	r3, [pc, #120]	; (8000730 <debounceFSM_update+0xe4>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	701a      	strb	r2, [r3, #0]
		break;
 80006bc:	e02b      	b.n	8000716 <debounceFSM_update+0xca>
	case BUTTON_DOWN:
		// si el pin esta high, pasar al estado BUTTON_RAISING
		if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 1){
 80006be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006c2:	4819      	ldr	r0, [pc, #100]	; (8000728 <debounceFSM_update+0xdc>)
 80006c4:	f001 f9f4 	bl	8001ab0 <HAL_GPIO_ReadPin>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d125      	bne.n	800071a <debounceFSM_update+0xce>
			estado = BUTTON_RAISING;
 80006ce:	4b15      	ldr	r3, [pc, #84]	; (8000724 <debounceFSM_update+0xd8>)
 80006d0:	2203      	movs	r2, #3
 80006d2:	701a      	strb	r2, [r3, #0]
		}
		break;
 80006d4:	e021      	b.n	800071a <debounceFSM_update+0xce>
	case BUTTON_RAISING:
		// si el pin esta low luego de 40 ms, volver a BUTTON_DOWN
		// si el pin esta high luego de 40 ms, cambiar a BUTTON_UP
		if(delayRead(&delayHandle) == true){ // si transcurrio el debounceDelay, muestrear pulsador nuevamente
 80006d6:	4815      	ldr	r0, [pc, #84]	; (800072c <debounceFSM_update+0xe0>)
 80006d8:	f000 f883 	bl	80007e2 <delayRead>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d01d      	beq.n	800071e <debounceFSM_update+0xd2>
			if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 0){ // pulsador presionado >> 0
 80006e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006e6:	4810      	ldr	r0, [pc, #64]	; (8000728 <debounceFSM_update+0xdc>)
 80006e8:	f001 f9e2 	bl	8001ab0 <HAL_GPIO_ReadPin>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d103      	bne.n	80006fa <debounceFSM_update+0xae>
				estado = BUTTON_DOWN; // si sigue low, el estado vuelve a BUTTON_DOWN
 80006f2:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <debounceFSM_update+0xd8>)
 80006f4:	2202      	movs	r2, #2
 80006f6:	701a      	strb	r2, [r3, #0]
				buttonReleased();
				risingState = true;
			}
		}

		break;
 80006f8:	e011      	b.n	800071e <debounceFSM_update+0xd2>
				estado = BUTTON_UP;
 80006fa:	4b0a      	ldr	r3, [pc, #40]	; (8000724 <debounceFSM_update+0xd8>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	701a      	strb	r2, [r3, #0]
				buttonReleased();
 8000700:	f000 f84c 	bl	800079c <buttonReleased>
				risingState = true;
 8000704:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <debounceFSM_update+0xe8>)
 8000706:	2201      	movs	r2, #1
 8000708:	701a      	strb	r2, [r3, #0]
		break;
 800070a:	e008      	b.n	800071e <debounceFSM_update+0xd2>
	default:
		// checkear errores
		// reiniciar estado
		debounceFSM_init();
 800070c:	f7ff ff8e 	bl	800062c <debounceFSM_init>
		break;
 8000710:	e006      	b.n	8000720 <debounceFSM_update+0xd4>
		break;
 8000712:	bf00      	nop
 8000714:	e004      	b.n	8000720 <debounceFSM_update+0xd4>
		break;
 8000716:	bf00      	nop
 8000718:	e002      	b.n	8000720 <debounceFSM_update+0xd4>
		break;
 800071a:	bf00      	nop
 800071c:	e000      	b.n	8000720 <debounceFSM_update+0xd4>
		break;
 800071e:	bf00      	nop
	}
}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000150 	.word	0x20000150
 8000728:	40011000 	.word	0x40011000
 800072c:	20000154 	.word	0x20000154
 8000730:	20000151 	.word	0x20000151
 8000734:	20000152 	.word	0x20000152

08000738 <readKey_down>:

// La funcion retorna true al detectar el flanco descendente y se autoresetea
bool_t readKey_down(){
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
	bool_t result = false;
 800073e:	2300      	movs	r3, #0
 8000740:	71fb      	strb	r3, [r7, #7]
	// retornar true solo si se detecta flanco descendente
	if(fallingState == true){
 8000742:	4b07      	ldr	r3, [pc, #28]	; (8000760 <readKey_down+0x28>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d004      	beq.n	8000754 <readKey_down+0x1c>
		fallingState = false; // resetear variable privada
 800074a:	4b05      	ldr	r3, [pc, #20]	; (8000760 <readKey_down+0x28>)
 800074c:	2200      	movs	r2, #0
 800074e:	701a      	strb	r2, [r3, #0]
		result = true;
 8000750:	2301      	movs	r3, #1
 8000752:	71fb      	strb	r3, [r7, #7]
	}
	return result;
 8000754:	79fb      	ldrb	r3, [r7, #7]
}
 8000756:	4618      	mov	r0, r3
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr
 8000760:	20000151 	.word	0x20000151

08000764 <readKey_up>:

// La funcion retorna true al detectar el flanco ascendente y se autoresetea
bool_t readKey_up(){
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
	bool_t result = false;
 800076a:	2300      	movs	r3, #0
 800076c:	71fb      	strb	r3, [r7, #7]
	// retornar true solo si se detecta flanco ascendente
	if(risingState == true){
 800076e:	4b07      	ldr	r3, [pc, #28]	; (800078c <readKey_up+0x28>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d004      	beq.n	8000780 <readKey_up+0x1c>
		risingState = false; // resetear variable privada
 8000776:	4b05      	ldr	r3, [pc, #20]	; (800078c <readKey_up+0x28>)
 8000778:	2200      	movs	r2, #0
 800077a:	701a      	strb	r2, [r3, #0]
		result = true;
 800077c:	2301      	movs	r3, #1
 800077e:	71fb      	strb	r3, [r7, #7]
	}
	return result;
 8000780:	79fb      	ldrb	r3, [r7, #7]
}
 8000782:	4618      	mov	r0, r3
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	bc80      	pop	{r7}
 800078a:	4770      	bx	lr
 800078c:	20000152 	.word	0x20000152

08000790 <buttonPressed>:


// Definicion de funcion para boton presionado
void buttonPressed(){
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, SET);
	// ejecutar la accion deseada al detectar pulsado
	//uartSendString("\r\nFlanco descendente!\r\n");
}
 8000794:	bf00      	nop
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr

0800079c <buttonReleased>:

// Definicion de funcion para boton liberado
void buttonReleased(){
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, RESET);
	// ejecutar la accion deseada al detectar liberacion
	//uartSendString("\r\nFlanco ascendente!\r\n");
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr

080007a8 <delayInit>:
/**
	* @brief Inicializacion del temporizador
	* @param delay struct {startTime, duration, running}
	* @retval Ninguno
	*/
void delayInit( delay_t * delay, tick_t duration ){
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	6039      	str	r1, [r7, #0]
	if(duration > 10000) duration = 10000; // limitar el tiempo a 10 segundos
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	f242 7210 	movw	r2, #10000	; 0x2710
 80007b8:	4293      	cmp	r3, r2
 80007ba:	d902      	bls.n	80007c2 <delayInit+0x1a>
 80007bc:	f242 7310 	movw	r3, #10000	; 0x2710
 80007c0:	603b      	str	r3, [r7, #0]
	if(duration < 5) duration = 5; // limitar el tiempo minimo a 5 ms
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	2b04      	cmp	r3, #4
 80007c6:	d801      	bhi.n	80007cc <delayInit+0x24>
 80007c8:	2305      	movs	r3, #5
 80007ca:	603b      	str	r3, [r7, #0]

	delay->duration = duration;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	683a      	ldr	r2, [r7, #0]
 80007d0:	605a      	str	r2, [r3, #4]
	delay->running = false;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2200      	movs	r2, #0
 80007d6:	721a      	strb	r2, [r3, #8]
}
 80007d8:	bf00      	nop
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	bc80      	pop	{r7}
 80007e0:	4770      	bx	lr

080007e2 <delayRead>:
/**
	* @brief Comparacion de delay vs contador milisegundos. Inicia timer si no esta en func
	* @param delay struct {startTime, duration, running}
	* @retval bool true si se cumplio el tiempo / false si no
	*/
bool_t delayRead( delay_t * delay ){
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b082      	sub	sp, #8
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	6078      	str	r0, [r7, #4]

	if(delay->running == false){ // activar timer
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	7a1b      	ldrb	r3, [r3, #8]
 80007ee:	f083 0301 	eor.w	r3, r3, #1
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d00a      	beq.n	800080e <delayRead+0x2c>
		delay->running = true;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2201      	movs	r2, #1
 80007fc:	721a      	strb	r2, [r3, #8]
		delay->startTime = HAL_GetTick(); // tomar valor de contador en [ms] actual
 80007fe:	f000 fe97 	bl	8001530 <HAL_GetTick>
 8000802:	4603      	mov	r3, r0
 8000804:	461a      	mov	r2, r3
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	601a      	str	r2, [r3, #0]
		return false; // salir de la funcion
 800080a:	2300      	movs	r3, #0
 800080c:	e010      	b.n	8000830 <delayRead+0x4e>
	} else {
		// si running == true ya estaba activo el timer, comparar valor actual con duration
		if(HAL_GetTick() - delay->startTime > delay->duration){ // si es timeout
 800080e:	f000 fe8f 	bl	8001530 <HAL_GetTick>
 8000812:	4603      	mov	r3, r0
 8000814:	461a      	mov	r2, r3
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	1ad2      	subs	r2, r2, r3
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	429a      	cmp	r2, r3
 8000822:	d904      	bls.n	800082e <delayRead+0x4c>
			delay->running = false; // reset el flag
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2200      	movs	r2, #0
 8000828:	721a      	strb	r2, [r3, #8]
			return true;
 800082a:	2301      	movs	r3, #1
 800082c:	e000      	b.n	8000830 <delayRead+0x4e>
		} else {
			// si no es timeout
			return false;
 800082e:	2300      	movs	r3, #0
		}
	}
}
 8000830:	4618      	mov	r0, r3
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <motor_init>:
static bool motorRunning = false;

//#define MOTOR_DURATION (uint16_t)10000 // duracion de accionamiento del motor en ms
//#define MOTOR_FREQ (uint8_t)10 // frecuenca de pulso del controlador DRV8825 (STEP)

void motor_init(){
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
	motorControlHandle.direction = CW;
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <motor_init+0x2c>)
 800083e:	2200      	movs	r2, #0
 8000840:	709a      	strb	r2, [r3, #2]
	motorControlHandle.duration = MOTOR_DURATION;
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <motor_init+0x2c>)
 8000844:	f242 7210 	movw	r2, #10000	; 0x2710
 8000848:	809a      	strh	r2, [r3, #4]
	motorControlHandle.enable = MOTOR_DISABLE;
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <motor_init+0x2c>)
 800084c:	2201      	movs	r2, #1
 800084e:	705a      	strb	r2, [r3, #1]
	motorControlHandle.frequency = MOTOR_FREQ;
 8000850:	4b04      	ldr	r3, [pc, #16]	; (8000864 <motor_init+0x2c>)
 8000852:	220a      	movs	r2, #10
 8000854:	701a      	strb	r2, [r3, #0]
	motorControlHandle.state = MOTOR_STOP;
 8000856:	4b03      	ldr	r3, [pc, #12]	; (8000864 <motor_init+0x2c>)
 8000858:	2200      	movs	r2, #0
 800085a:	719a      	strb	r2, [r3, #6]
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr
 8000864:	200001a8 	.word	0x200001a8

08000868 <motor_send_command>:

void motor_send_command(motorState_t command){ //STOP, RUN_CW, RUN_CCW
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	4603      	mov	r3, r0
 8000870:	71fb      	strb	r3, [r7, #7]
	if(motorRunning == false){
 8000872:	4b4d      	ldr	r3, [pc, #308]	; (80009a8 <motor_send_command+0x140>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	f083 0301 	eor.w	r3, r3, #1
 800087a:	b2db      	uxtb	r3, r3
 800087c:	2b00      	cmp	r3, #0
 800087e:	d005      	beq.n	800088c <motor_send_command+0x24>
		motorTimerHandle.Init.Period = motorControlHandle.frequency-1;
 8000880:	4b4a      	ldr	r3, [pc, #296]	; (80009ac <motor_send_command+0x144>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	3b01      	subs	r3, #1
 8000886:	461a      	mov	r2, r3
 8000888:	4b49      	ldr	r3, [pc, #292]	; (80009b0 <motor_send_command+0x148>)
 800088a:	60da      	str	r2, [r3, #12]
	}

	switch(command){
 800088c:	79fb      	ldrb	r3, [r7, #7]
 800088e:	2b02      	cmp	r3, #2
 8000890:	d04b      	beq.n	800092a <motor_send_command+0xc2>
 8000892:	2b02      	cmp	r3, #2
 8000894:	dc6e      	bgt.n	8000974 <motor_send_command+0x10c>
 8000896:	2b00      	cmp	r3, #0
 8000898:	d002      	beq.n	80008a0 <motor_send_command+0x38>
 800089a:	2b01      	cmp	r3, #1
 800089c:	d012      	beq.n	80008c4 <motor_send_command+0x5c>
 800089e:	e069      	b.n	8000974 <motor_send_command+0x10c>
	case MOTOR_STOP:
		HAL_GPIO_WritePin(LED_PORT, LED_PIN, RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2120      	movs	r1, #32
 80008a4:	4843      	ldr	r0, [pc, #268]	; (80009b4 <motor_send_command+0x14c>)
 80008a6:	f001 f91a 	bl	8001ade <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, SET); // disable driver
 80008aa:	2201      	movs	r2, #1
 80008ac:	2110      	movs	r1, #16
 80008ae:	4841      	ldr	r0, [pc, #260]	; (80009b4 <motor_send_command+0x14c>)
 80008b0:	f001 f915 	bl	8001ade <HAL_GPIO_WritePin>
		HAL_TIM_OC_Stop(&motorTimerHandle, TIM_CHANNEL_1); // stop timer
 80008b4:	2100      	movs	r1, #0
 80008b6:	483e      	ldr	r0, [pc, #248]	; (80009b0 <motor_send_command+0x148>)
 80008b8:	f002 fb5a 	bl	8002f70 <HAL_TIM_OC_Stop>
		motorRunning = false;
 80008bc:	4b3a      	ldr	r3, [pc, #232]	; (80009a8 <motor_send_command+0x140>)
 80008be:	2200      	movs	r2, #0
 80008c0:	701a      	strb	r2, [r3, #0]
		break;
 80008c2:	e06c      	b.n	800099e <motor_send_command+0x136>
	case MOTOR_RUN_CW:
		if(motorRunning == false){
 80008c4:	4b38      	ldr	r3, [pc, #224]	; (80009a8 <motor_send_command+0x140>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	f083 0301 	eor.w	r3, r3, #1
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d062      	beq.n	8000998 <motor_send_command+0x130>
			HAL_GPIO_WritePin(LED_PORT, LED_PIN, SET);
 80008d2:	2201      	movs	r2, #1
 80008d4:	2120      	movs	r1, #32
 80008d6:	4837      	ldr	r0, [pc, #220]	; (80009b4 <motor_send_command+0x14c>)
 80008d8:	f001 f901 	bl	8001ade <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, RESET); // enable driver
 80008dc:	2200      	movs	r2, #0
 80008de:	2110      	movs	r1, #16
 80008e0:	4834      	ldr	r0, [pc, #208]	; (80009b4 <motor_send_command+0x14c>)
 80008e2:	f001 f8fc 	bl	8001ade <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIRECTION_GPIO_Port, DIRECTION_Pin, SET); // direction
 80008e6:	2201      	movs	r2, #1
 80008e8:	2102      	movs	r1, #2
 80008ea:	4832      	ldr	r0, [pc, #200]	; (80009b4 <motor_send_command+0x14c>)
 80008ec:	f001 f8f7 	bl	8001ade <HAL_GPIO_WritePin>
			HAL_TIM_OC_Start(&motorTimerHandle, TIM_CHANNEL_1); // Start STEP signal
 80008f0:	2100      	movs	r1, #0
 80008f2:	482f      	ldr	r0, [pc, #188]	; (80009b0 <motor_send_command+0x148>)
 80008f4:	f002 fa9a 	bl	8002e2c <HAL_TIM_OC_Start>
			motorRunning = true;
 80008f8:	4b2b      	ldr	r3, [pc, #172]	; (80009a8 <motor_send_command+0x140>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	701a      	strb	r2, [r3, #0]
			HAL_Delay(5000);
 80008fe:	f241 3088 	movw	r0, #5000	; 0x1388
 8000902:	f000 fe1f 	bl	8001544 <HAL_Delay>
			motorRunning = false;
 8000906:	4b28      	ldr	r3, [pc, #160]	; (80009a8 <motor_send_command+0x140>)
 8000908:	2200      	movs	r2, #0
 800090a:	701a      	strb	r2, [r3, #0]
			HAL_TIM_OC_Stop(&motorTimerHandle, TIM_CHANNEL_1); // stop timer
 800090c:	2100      	movs	r1, #0
 800090e:	4828      	ldr	r0, [pc, #160]	; (80009b0 <motor_send_command+0x148>)
 8000910:	f002 fb2e 	bl	8002f70 <HAL_TIM_OC_Stop>
			HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, SET); // enable driver
 8000914:	2201      	movs	r2, #1
 8000916:	2110      	movs	r1, #16
 8000918:	4826      	ldr	r0, [pc, #152]	; (80009b4 <motor_send_command+0x14c>)
 800091a:	f001 f8e0 	bl	8001ade <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_PORT, LED_PIN, RESET);
 800091e:	2200      	movs	r2, #0
 8000920:	2120      	movs	r1, #32
 8000922:	4824      	ldr	r0, [pc, #144]	; (80009b4 <motor_send_command+0x14c>)
 8000924:	f001 f8db 	bl	8001ade <HAL_GPIO_WritePin>
		}
		break;
 8000928:	e036      	b.n	8000998 <motor_send_command+0x130>
	case MOTOR_RUN_CCW:
		if(motorRunning == false){
 800092a:	4b1f      	ldr	r3, [pc, #124]	; (80009a8 <motor_send_command+0x140>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	f083 0301 	eor.w	r3, r3, #1
 8000932:	b2db      	uxtb	r3, r3
 8000934:	2b00      	cmp	r3, #0
 8000936:	d031      	beq.n	800099c <motor_send_command+0x134>
			HAL_GPIO_WritePin(LED_PORT, LED_PIN, SET);
 8000938:	2201      	movs	r2, #1
 800093a:	2120      	movs	r1, #32
 800093c:	481d      	ldr	r0, [pc, #116]	; (80009b4 <motor_send_command+0x14c>)
 800093e:	f001 f8ce 	bl	8001ade <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, RESET); // enable driver
 8000942:	2200      	movs	r2, #0
 8000944:	2110      	movs	r1, #16
 8000946:	481b      	ldr	r0, [pc, #108]	; (80009b4 <motor_send_command+0x14c>)
 8000948:	f001 f8c9 	bl	8001ade <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIRECTION_GPIO_Port, DIRECTION_Pin, RESET); // direction
 800094c:	2200      	movs	r2, #0
 800094e:	2102      	movs	r1, #2
 8000950:	4818      	ldr	r0, [pc, #96]	; (80009b4 <motor_send_command+0x14c>)
 8000952:	f001 f8c4 	bl	8001ade <HAL_GPIO_WritePin>
			HAL_TIM_OC_Start(&motorTimerHandle, TIM_CHANNEL_1); // Start STEP signal
 8000956:	2100      	movs	r1, #0
 8000958:	4815      	ldr	r0, [pc, #84]	; (80009b0 <motor_send_command+0x148>)
 800095a:	f002 fa67 	bl	8002e2c <HAL_TIM_OC_Start>
			motorRunning = true;
 800095e:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <motor_send_command+0x140>)
 8000960:	2201      	movs	r2, #1
 8000962:	701a      	strb	r2, [r3, #0]
			HAL_Delay(5000);
 8000964:	f241 3088 	movw	r0, #5000	; 0x1388
 8000968:	f000 fdec 	bl	8001544 <HAL_Delay>
			motorRunning = false;
 800096c:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <motor_send_command+0x140>)
 800096e:	2200      	movs	r2, #0
 8000970:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000972:	e013      	b.n	800099c <motor_send_command+0x134>
	default:
		//error >> stop motor
		HAL_GPIO_WritePin(LED_PORT, LED_PIN, RESET);
 8000974:	2200      	movs	r2, #0
 8000976:	2120      	movs	r1, #32
 8000978:	480e      	ldr	r0, [pc, #56]	; (80009b4 <motor_send_command+0x14c>)
 800097a:	f001 f8b0 	bl	8001ade <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, SET); // disable driver
 800097e:	2201      	movs	r2, #1
 8000980:	2110      	movs	r1, #16
 8000982:	480c      	ldr	r0, [pc, #48]	; (80009b4 <motor_send_command+0x14c>)
 8000984:	f001 f8ab 	bl	8001ade <HAL_GPIO_WritePin>
		HAL_TIM_OC_Stop(&motorTimerHandle, TIM_CHANNEL_1); // stop timer
 8000988:	2100      	movs	r1, #0
 800098a:	4809      	ldr	r0, [pc, #36]	; (80009b0 <motor_send_command+0x148>)
 800098c:	f002 faf0 	bl	8002f70 <HAL_TIM_OC_Stop>
		motorRunning = false;
 8000990:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <motor_send_command+0x140>)
 8000992:	2200      	movs	r2, #0
 8000994:	701a      	strb	r2, [r3, #0]
		break;
 8000996:	e002      	b.n	800099e <motor_send_command+0x136>
		break;
 8000998:	bf00      	nop
 800099a:	e000      	b.n	800099e <motor_send_command+0x136>
		break;
 800099c:	bf00      	nop
//	HAL_TIM_OC_Stop(&motorTimerHandle, TIM_CHANNEL_1); // stop timer
//
//	HAL_GPIO_WritePin(LED_PORT, LED_PIN, RESET);


}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	200001b0 	.word	0x200001b0
 80009ac:	200001a8 	.word	0x200001a8
 80009b0:	20000160 	.word	0x20000160
 80009b4:	40010800 	.word	0x40010800

080009b8 <timer_init>:
void motor_config( uint8_t frequency, uint16_t duration){
	motorControlHandle.duration = duration;
	motorControlHandle.frequency = frequency;
}

void timer_init(void){
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08e      	sub	sp, #56	; 0x38
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009cc:	f107 0320 	add.w	r3, r7, #32
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009d6:	1d3b      	adds	r3, r7, #4
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]
 80009e4:	615a      	str	r2, [r3, #20]
 80009e6:	619a      	str	r2, [r3, #24]

  motorTimerHandle.Instance = TIM2;
 80009e8:	4b2d      	ldr	r3, [pc, #180]	; (8000aa0 <timer_init+0xe8>)
 80009ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009ee:	601a      	str	r2, [r3, #0]
  motorTimerHandle.Init.Prescaler = 1000-1;
 80009f0:	4b2b      	ldr	r3, [pc, #172]	; (8000aa0 <timer_init+0xe8>)
 80009f2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009f6:	605a      	str	r2, [r3, #4]
  motorTimerHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f8:	4b29      	ldr	r3, [pc, #164]	; (8000aa0 <timer_init+0xe8>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
  motorTimerHandle.Init.Period = 100-1;
 80009fe:	4b28      	ldr	r3, [pc, #160]	; (8000aa0 <timer_init+0xe8>)
 8000a00:	2263      	movs	r2, #99	; 0x63
 8000a02:	60da      	str	r2, [r3, #12]
  motorTimerHandle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a04:	4b26      	ldr	r3, [pc, #152]	; (8000aa0 <timer_init+0xe8>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	611a      	str	r2, [r3, #16]
  motorTimerHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a0a:	4b25      	ldr	r3, [pc, #148]	; (8000aa0 <timer_init+0xe8>)
 8000a0c:	2280      	movs	r2, #128	; 0x80
 8000a0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&motorTimerHandle) != HAL_OK)
 8000a10:	4823      	ldr	r0, [pc, #140]	; (8000aa0 <timer_init+0xe8>)
 8000a12:	f002 f963 	bl	8002cdc <HAL_TIM_Base_Init>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <timer_init+0x68>
  {
    Error_Handler();
 8000a1c:	f7ff fc62 	bl	80002e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a24:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&motorTimerHandle, &sClockSourceConfig) != HAL_OK)
 8000a26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	481c      	ldr	r0, [pc, #112]	; (8000aa0 <timer_init+0xe8>)
 8000a2e:	f002 fb5f 	bl	80030f0 <HAL_TIM_ConfigClockSource>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <timer_init+0x84>
  {
    Error_Handler();
 8000a38:	f7ff fc54 	bl	80002e4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&motorTimerHandle) != HAL_OK)
 8000a3c:	4818      	ldr	r0, [pc, #96]	; (8000aa0 <timer_init+0xe8>)
 8000a3e:	f002 f99c 	bl	8002d7a <HAL_TIM_OC_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <timer_init+0x94>
  {
    Error_Handler();
 8000a48:	f7ff fc4c 	bl	80002e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a50:	2300      	movs	r3, #0
 8000a52:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&motorTimerHandle, &sMasterConfig) != HAL_OK)
 8000a54:	f107 0320 	add.w	r3, r7, #32
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4811      	ldr	r0, [pc, #68]	; (8000aa0 <timer_init+0xe8>)
 8000a5c:	f002 feb4 	bl	80037c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <timer_init+0xb2>
  {
    Error_Handler();
 8000a66:	f7ff fc3d 	bl	80002e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000a6a:	2330      	movs	r3, #48	; 0x30
 8000a6c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a72:	2300      	movs	r3, #0
 8000a74:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a76:	2300      	movs	r3, #0
 8000a78:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&motorTimerHandle, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4807      	ldr	r0, [pc, #28]	; (8000aa0 <timer_init+0xe8>)
 8000a82:	f002 fad9 	bl	8003038 <HAL_TIM_OC_ConfigChannel>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <timer_init+0xd8>
  {
    Error_Handler();
 8000a8c:	f7ff fc2a 	bl	80002e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&motorTimerHandle);
 8000a90:	4803      	ldr	r0, [pc, #12]	; (8000aa0 <timer_init+0xe8>)
 8000a92:	f7ff fccb 	bl	800042c <HAL_TIM_MspPostInit>

}
 8000a96:	bf00      	nop
 8000a98:	3738      	adds	r7, #56	; 0x38
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000160 	.word	0x20000160

08000aa4 <lcd_send_byte>:
/**************************** WRITE TO LCD FUNCTIONS ***************************/

/* Serial->Parallel: output Byte Px: D7 D6 D5 D4 BT E RW RS */


void lcd_send_byte(uint8_t byte, bool rs, bool rw){
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	71fb      	strb	r3, [r7, #7]
 8000aae:	460b      	mov	r3, r1
 8000ab0:	71bb      	strb	r3, [r7, #6]
 8000ab2:	4613      	mov	r3, r2
 8000ab4:	717b      	strb	r3, [r7, #5]
	// byte contains 8 bits of information  / byteType can be INSTRUCTION or DATA
	uint8_t upperByte = (byte & HIGH_NIBBLE); // mask with 1111 0000
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	f023 030f 	bic.w	r3, r3, #15
 8000abc:	73fb      	strb	r3, [r7, #15]
	uint8_t lowerByte = (byte << 4); // shift 4 to the left so lower nibble becomes high
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	011b      	lsls	r3, r3, #4
 8000ac2:	73bb      	strb	r3, [r7, #14]

	// add rs and rw bits
	upperByte |= ((rs<<RS_POS) | (rw<<RW_POS) | (BT_ON<<BT_POS));
 8000ac4:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8000ac8:	797b      	ldrb	r3, [r7, #5]
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	b25b      	sxtb	r3, r3
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	b25b      	sxtb	r3, r3
 8000ad2:	b2da      	uxtb	r2, r3
 8000ad4:	7bfb      	ldrb	r3, [r7, #15]
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	f043 0308 	orr.w	r3, r3, #8
 8000ade:	73fb      	strb	r3, [r7, #15]
	lowerByte |= ((rs<<RS_POS) | (rw<<RW_POS) | (BT_ON<<BT_POS));
 8000ae0:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8000ae4:	797b      	ldrb	r3, [r7, #5]
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	b25b      	sxtb	r3, r3
 8000aea:	4313      	orrs	r3, r2
 8000aec:	b25b      	sxtb	r3, r3
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	7bbb      	ldrb	r3, [r7, #14]
 8000af2:	4313      	orrs	r3, r2
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	f043 0308 	orr.w	r3, r3, #8
 8000afa:	73bb      	strb	r3, [r7, #14]
	// E bit 1 0 1 0 to create pulses in LCD controller

	uint8_t byteSequence[4] = {
 8000afc:	7bfb      	ldrb	r3, [r7, #15]
 8000afe:	f043 0304 	orr.w	r3, r3, #4
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	723b      	strb	r3, [r7, #8]
 8000b06:	7bfb      	ldrb	r3, [r7, #15]
 8000b08:	727b      	strb	r3, [r7, #9]
 8000b0a:	7bbb      	ldrb	r3, [r7, #14]
 8000b0c:	f043 0304 	orr.w	r3, r3, #4
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	72bb      	strb	r3, [r7, #10]
 8000b14:	7bbb      	ldrb	r3, [r7, #14]
 8000b16:	72fb      	strb	r3, [r7, #11]
			(upperByte | (E_LOW<<E_POS)),
			(lowerByte | (E_HIGH<<E_POS)),
			(lowerByte | (E_LOW<<E_POS))
	};

	send_bytes_i2c(LCD_ADDRESS, byteSequence, 4, I2C_WRITE);
 8000b18:	f107 0108 	add.w	r1, r7, #8
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	2204      	movs	r2, #4
 8000b20:	2027      	movs	r0, #39	; 0x27
 8000b22:	f000 f807 	bl	8000b34 <send_bytes_i2c>
	HAL_Delay(5);
 8000b26:	2005      	movs	r0, #5
 8000b28:	f000 fd0c 	bl	8001544 <HAL_Delay>

}
 8000b2c:	bf00      	nop
 8000b2e:	3710      	adds	r7, #16
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <send_bytes_i2c>:

void send_bytes_i2c(uint8_t slaveAddress, uint8_t byteSequence[], uint8_t sequenceSize, bool i2c_rw){
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af02      	add	r7, sp, #8
 8000b3a:	6039      	str	r1, [r7, #0]
 8000b3c:	4611      	mov	r1, r2
 8000b3e:	461a      	mov	r2, r3
 8000b40:	4603      	mov	r3, r0
 8000b42:	71fb      	strb	r3, [r7, #7]
 8000b44:	460b      	mov	r3, r1
 8000b46:	71bb      	strb	r3, [r7, #6]
 8000b48:	4613      	mov	r3, r2
 8000b4a:	717b      	strb	r3, [r7, #5]
	slaveAddress = ((slaveAddress<<1) | i2c_rw); // i2c WRITE or READ
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	005b      	lsls	r3, r3, #1
 8000b50:	b25a      	sxtb	r2, r3
 8000b52:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000b56:	4313      	orrs	r3, r2
 8000b58:	b25b      	sxtb	r3, r3
 8000b5a:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&i2cHandle, slaveAddress, byteSequence, sequenceSize, 100);
 8000b5c:	79fb      	ldrb	r3, [r7, #7]
 8000b5e:	b299      	uxth	r1, r3
 8000b60:	79bb      	ldrb	r3, [r7, #6]
 8000b62:	b29b      	uxth	r3, r3
 8000b64:	2264      	movs	r2, #100	; 0x64
 8000b66:	9200      	str	r2, [sp, #0]
 8000b68:	683a      	ldr	r2, [r7, #0]
 8000b6a:	4803      	ldr	r0, [pc, #12]	; (8000b78 <send_bytes_i2c+0x44>)
 8000b6c:	f001 f94e 	bl	8001e0c <HAL_I2C_Master_Transmit>
}
 8000b70:	bf00      	nop
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	200001b4 	.word	0x200001b4

08000b7c <lcd_clear>:

void lcd_clear(){
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
	lcd_send_byte(0x01, RS_INSTRUCTION, RW_WRITE);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2100      	movs	r1, #0
 8000b84:	2001      	movs	r0, #1
 8000b86:	f7ff ff8d 	bl	8000aa4 <lcd_send_byte>
}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <return_home>:

void return_home(){
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	af00      	add	r7, sp, #0
	lcd_send_byte(0x02, RS_INSTRUCTION, RW_WRITE);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2100      	movs	r1, #0
 8000b96:	2002      	movs	r0, #2
 8000b98:	f7ff ff84 	bl	8000aa4 <lcd_send_byte>
}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <lcd_set_position>:

void lcd_set_position(uint8_t row, uint8_t column){
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	460a      	mov	r2, r1
 8000baa:	71fb      	strb	r3, [r7, #7]
 8000bac:	4613      	mov	r3, r2
 8000bae:	71bb      	strb	r3, [r7, #6]
	// for LCD 16x2 check ranges
	if(row>2) row = 2;
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	2b02      	cmp	r3, #2
 8000bb4:	d901      	bls.n	8000bba <lcd_set_position+0x1a>
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	71fb      	strb	r3, [r7, #7]
	if(row<1) row = 1;
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d101      	bne.n	8000bc4 <lcd_set_position+0x24>
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	71fb      	strb	r3, [r7, #7]
	if(column>16) column = 16;
 8000bc4:	79bb      	ldrb	r3, [r7, #6]
 8000bc6:	2b10      	cmp	r3, #16
 8000bc8:	d901      	bls.n	8000bce <lcd_set_position+0x2e>
 8000bca:	2310      	movs	r3, #16
 8000bcc:	71bb      	strb	r3, [r7, #6]
	if(column<1) column = 1;
 8000bce:	79bb      	ldrb	r3, [r7, #6]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d101      	bne.n	8000bd8 <lcd_set_position+0x38>
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	71bb      	strb	r3, [r7, #6]

	uint8_t ddram = ddram_address_16x2[row-1][column-1];
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	1e5a      	subs	r2, r3, #1
 8000bdc:	79bb      	ldrb	r3, [r7, #6]
 8000bde:	3b01      	subs	r3, #1
 8000be0:	4909      	ldr	r1, [pc, #36]	; (8000c08 <lcd_set_position+0x68>)
 8000be2:	0112      	lsls	r2, r2, #4
 8000be4:	440a      	add	r2, r1
 8000be6:	4413      	add	r3, r2
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	73fb      	strb	r3, [r7, #15]
	uint8_t ddram_cmd = ddram | (1<<7); // add a 1 in DB7 for DDRAM command
 8000bec:	7bfb      	ldrb	r3, [r7, #15]
 8000bee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000bf2:	73bb      	strb	r3, [r7, #14]

	lcd_send_byte(ddram_cmd, RS_INSTRUCTION, RW_WRITE); // send address as instruction, not data
 8000bf4:	7bbb      	ldrb	r3, [r7, #14]
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff ff52 	bl	8000aa4 <lcd_send_byte>
}
 8000c00:	bf00      	nop
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	08004a34 	.word	0x08004a34

08000c0c <lcd_print_text>:

void lcd_print_text(uint8_t text[], uint8_t size){
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	460b      	mov	r3, r1
 8000c16:	70fb      	strb	r3, [r7, #3]

	for(uint8_t i = 0; i < size-1; i++){ // -1 to exclude the '/0' char
 8000c18:	2300      	movs	r3, #0
 8000c1a:	73fb      	strb	r3, [r7, #15]
 8000c1c:	e00e      	b.n	8000c3c <lcd_print_text+0x30>
		HAL_Delay(1); // without this some chars go missing
 8000c1e:	2001      	movs	r0, #1
 8000c20:	f000 fc90 	bl	8001544 <HAL_Delay>
		lcd_send_byte(text[i], RS_DATA, RW_WRITE);
 8000c24:	7bfb      	ldrb	r3, [r7, #15]
 8000c26:	687a      	ldr	r2, [r7, #4]
 8000c28:	4413      	add	r3, r2
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2101      	movs	r1, #1
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff ff37 	bl	8000aa4 <lcd_send_byte>
	for(uint8_t i = 0; i < size-1; i++){ // -1 to exclude the '/0' char
 8000c36:	7bfb      	ldrb	r3, [r7, #15]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	73fb      	strb	r3, [r7, #15]
 8000c3c:	7bfa      	ldrb	r2, [r7, #15]
 8000c3e:	78fb      	ldrb	r3, [r7, #3]
 8000c40:	3b01      	subs	r3, #1
 8000c42:	429a      	cmp	r2, r3
 8000c44:	dbeb      	blt.n	8000c1e <lcd_print_text+0x12>
	}
}
 8000c46:	bf00      	nop
 8000c48:	bf00      	nop
 8000c4a:	3710      	adds	r7, #16
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <lcd_init>:
void lcd_print_custom_character(uint8_t customCharArray[], uint8_t index){
	create_character(index, customCharArray);
	lcd_send_byte(index, RS_DATA, RW_WRITE);
}

void lcd_init(){
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
	// initialization sequence p46 HD44780 datasheet
	HAL_Delay(60); // wait >40 ms
 8000c54:	203c      	movs	r0, #60	; 0x3c
 8000c56:	f000 fc75 	bl	8001544 <HAL_Delay>
	lcd_send_byte(0x30, RS_INSTRUCTION, RW_WRITE); // 0 0 1 1 x x x x -> 0x30
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	2030      	movs	r0, #48	; 0x30
 8000c60:	f7ff ff20 	bl	8000aa4 <lcd_send_byte>
	HAL_Delay(10); // wait > 4 ms
 8000c64:	200a      	movs	r0, #10
 8000c66:	f000 fc6d 	bl	8001544 <HAL_Delay>
	lcd_send_byte(0x30, RS_INSTRUCTION, RW_WRITE);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	2030      	movs	r0, #48	; 0x30
 8000c70:	f7ff ff18 	bl	8000aa4 <lcd_send_byte>
	HAL_Delay(10); // wait > 0.1 ms
 8000c74:	200a      	movs	r0, #10
 8000c76:	f000 fc65 	bl	8001544 <HAL_Delay>
	lcd_send_byte(0x30, RS_INSTRUCTION, RW_WRITE);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	2030      	movs	r0, #48	; 0x30
 8000c80:	f7ff ff10 	bl	8000aa4 <lcd_send_byte>
	HAL_Delay(10);
 8000c84:	200a      	movs	r0, #10
 8000c86:	f000 fc5d 	bl	8001544 <HAL_Delay>
	lcd_send_byte(0x20, RS_INSTRUCTION, RW_WRITE); // 0 0 1 DL=0 x x x x -> 0x20 / Function set: DL=4-bit mode
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	2020      	movs	r0, #32
 8000c90:	f7ff ff08 	bl	8000aa4 <lcd_send_byte>
	// start in 4 bit mode
	lcd_send_byte(0x28, RS_INSTRUCTION, RW_WRITE); // 0 0 1 0 N=1 F=0 x x -> 0x28 / Function set: N=2-lines, F=5x8
 8000c94:	2200      	movs	r2, #0
 8000c96:	2100      	movs	r1, #0
 8000c98:	2028      	movs	r0, #40	; 0x28
 8000c9a:	f7ff ff03 	bl	8000aa4 <lcd_send_byte>
	HAL_Delay(10);
 8000c9e:	200a      	movs	r0, #10
 8000ca0:	f000 fc50 	bl	8001544 <HAL_Delay>
	lcd_send_byte(0x08, RS_INSTRUCTION, RW_WRITE); // 0 0 0 0 1 D=0 C=0 B=0 -> 0x08 / Display control: D=display off, C=cursor off, B=blink off
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	2008      	movs	r0, #8
 8000caa:	f7ff fefb 	bl	8000aa4 <lcd_send_byte>
	HAL_Delay(10);
 8000cae:	200a      	movs	r0, #10
 8000cb0:	f000 fc48 	bl	8001544 <HAL_Delay>
	lcd_clear();
 8000cb4:	f7ff ff62 	bl	8000b7c <lcd_clear>
	HAL_Delay(10);
 8000cb8:	200a      	movs	r0, #10
 8000cba:	f000 fc43 	bl	8001544 <HAL_Delay>
	lcd_send_byte(0x06, RS_INSTRUCTION, RW_WRITE); // 0 0 0 0 0 1 ID=1 S=0 -> 0x06/ Entry mode: ID=increment, S=no display shift
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	2006      	movs	r0, #6
 8000cc4:	f7ff feee 	bl	8000aa4 <lcd_send_byte>
	HAL_Delay(10);
 8000cc8:	200a      	movs	r0, #10
 8000cca:	f000 fc3b 	bl	8001544 <HAL_Delay>
	lcd_send_byte(0x0C, RS_INSTRUCTION, RW_WRITE); // 0 0 0 0 1 D=1 C=0 B=0 -> 0x0C / Display control:D-display on, C=cursor off, B=blink off
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	200c      	movs	r0, #12
 8000cd4:	f7ff fee6 	bl	8000aa4 <lcd_send_byte>
	HAL_Delay(10);
 8000cd8:	200a      	movs	r0, #10
 8000cda:	f000 fc33 	bl	8001544 <HAL_Delay>
	lcd_clear();
 8000cde:	f7ff ff4d 	bl	8000b7c <lcd_clear>
	HAL_Delay(10);
 8000ce2:	200a      	movs	r0, #10
 8000ce4:	f000 fc2e 	bl	8001544 <HAL_Delay>
	return_home();
 8000ce8:	f7ff ff51 	bl	8000b8e <return_home>
	HAL_Delay(10);
 8000cec:	200a      	movs	r0, #10
 8000cee:	f000 fc29 	bl	8001544 <HAL_Delay>
}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
	...

08000cf8 <i2c_init>:

void i2c_linker(I2C_HandleTypeDef * i2cInstance){
	i2cHandle = *i2cInstance;
}

void i2c_init(void){
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0

	i2cHandle.Instance = I2C1;
 8000cfc:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <i2c_init+0x48>)
 8000cfe:	4a11      	ldr	r2, [pc, #68]	; (8000d44 <i2c_init+0x4c>)
 8000d00:	601a      	str	r2, [r3, #0]
	i2cHandle.Init.ClockSpeed = 100000;
 8000d02:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <i2c_init+0x48>)
 8000d04:	4a10      	ldr	r2, [pc, #64]	; (8000d48 <i2c_init+0x50>)
 8000d06:	605a      	str	r2, [r3, #4]
	i2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d08:	4b0d      	ldr	r3, [pc, #52]	; (8000d40 <i2c_init+0x48>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	609a      	str	r2, [r3, #8]
	i2cHandle.Init.OwnAddress1 = 0;
 8000d0e:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <i2c_init+0x48>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	60da      	str	r2, [r3, #12]
	i2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d14:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <i2c_init+0x48>)
 8000d16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d1a:	611a      	str	r2, [r3, #16]
	i2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d1c:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <i2c_init+0x48>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	615a      	str	r2, [r3, #20]
	i2cHandle.Init.OwnAddress2 = 0;
 8000d22:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <i2c_init+0x48>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	619a      	str	r2, [r3, #24]
	i2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d28:	4b05      	ldr	r3, [pc, #20]	; (8000d40 <i2c_init+0x48>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	61da      	str	r2, [r3, #28]
	i2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d2e:	4b04      	ldr	r3, [pc, #16]	; (8000d40 <i2c_init+0x48>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&i2cHandle) != HAL_OK)
 8000d34:	4802      	ldr	r0, [pc, #8]	; (8000d40 <i2c_init+0x48>)
 8000d36:	f000 ff25 	bl	8001b84 <HAL_I2C_Init>
  {
    //Error_Handler();
  }
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	200001b4 	.word	0x200001b4
 8000d44:	40005400 	.word	0x40005400
 8000d48:	000186a0 	.word	0x000186a0

08000d4c <menuMEF_init>:
static uint16_t blinkRepeat = BLINK_REPEAT_DEFAULT; // almacena el valor de las repeticiones

static uint8_t optionText[13][16] = {"1-LED ON       ", "2-LED OFF      ", "3-BLINK LED    ", "4-MOTOR CW+    ", "5-MOTOR CCW-   ", "6-FREE         ",
				"EJECUTANDO_1   ", "EJECUTANDO_2   ", "EJECUTANDO_3   ", "EJECUTANDO_4   ", "EJECUTANDO_5   ", "EJECUTANDO_6   "};

void menuMEF_init(){
 8000d4c:	b590      	push	{r4, r7, lr}
 8000d4e:	b08d      	sub	sp, #52	; 0x34
 8000d50:	af00      	add	r7, sp, #0
	pulseHandle.nextTime = NEXT_TIME;
 8000d52:	4b1e      	ldr	r3, [pc, #120]	; (8000dcc <menuMEF_init+0x80>)
 8000d54:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000d58:	819a      	strh	r2, [r3, #12]
	pulseHandle.executeTime = EXECUTE_TIME;
 8000d5a:	4b1c      	ldr	r3, [pc, #112]	; (8000dcc <menuMEF_init+0x80>)
 8000d5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d60:	81da      	strh	r2, [r3, #14]
	currentState = OPTION_1;
 8000d62:	4b1b      	ldr	r3, [pc, #108]	; (8000dd0 <menuMEF_init+0x84>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	701a      	strb	r2, [r3, #0]

	// ingreso de parametros por la terminal
	menuMEF_user_input();
 8000d68:	f000 fa46 	bl	80011f8 <menuMEF_user_input>

	// Comienzo del LCD
	lcd_init();
 8000d6c:	f7ff ff70 	bl	8000c50 <lcd_init>
	uint8_t welcomeText[] = "* MENU MEF *";
 8000d70:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <menuMEF_init+0x88>)
 8000d72:	f107 0420 	add.w	r4, r7, #32
 8000d76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d78:	c407      	stmia	r4!, {r0, r1, r2}
 8000d7a:	7023      	strb	r3, [r4, #0]

	lcd_print_text(welcomeText, sizeof(welcomeText)/sizeof(welcomeText[0]));
 8000d7c:	f107 0320 	add.w	r3, r7, #32
 8000d80:	210d      	movs	r1, #13
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff ff42 	bl	8000c0c <lcd_print_text>
//		HAL_Delay(500);
//	}

	// Mostrar comienzo en terminal

	uartSendString("\r\n*************** Comienzo MENU MEF ****************\r\n");
 8000d88:	4813      	ldr	r0, [pc, #76]	; (8000dd8 <menuMEF_init+0x8c>)
 8000d8a:	f000 fb1b 	bl	80013c4 <uartSendString>
	uint8_t buffer[32];
	sprintf(buffer, "%s\r\n", optionText[currentState]);
 8000d8e:	4b10      	ldr	r3, [pc, #64]	; (8000dd0 <menuMEF_init+0x84>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	011b      	lsls	r3, r3, #4
 8000d94:	4a11      	ldr	r2, [pc, #68]	; (8000ddc <menuMEF_init+0x90>)
 8000d96:	441a      	add	r2, r3
 8000d98:	463b      	mov	r3, r7
 8000d9a:	4911      	ldr	r1, [pc, #68]	; (8000de0 <menuMEF_init+0x94>)
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f003 f85f 	bl	8003e60 <siprintf>
	uartSendString(buffer);
 8000da2:	463b      	mov	r3, r7
 8000da4:	4618      	mov	r0, r3
 8000da6:	f000 fb0d 	bl	80013c4 <uartSendString>

	lcd_set_position(2, 1);
 8000daa:	2101      	movs	r1, #1
 8000dac:	2002      	movs	r0, #2
 8000dae:	f7ff fef7 	bl	8000ba0 <lcd_set_position>
	lcd_print_text(optionText[currentState], sizeof(optionText)/sizeof(optionText[0]));
 8000db2:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <menuMEF_init+0x84>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	011b      	lsls	r3, r3, #4
 8000db8:	4a08      	ldr	r2, [pc, #32]	; (8000ddc <menuMEF_init+0x90>)
 8000dba:	4413      	add	r3, r2
 8000dbc:	210d      	movs	r1, #13
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff ff24 	bl	8000c0c <lcd_print_text>

}
 8000dc4:	bf00      	nop
 8000dc6:	3734      	adds	r7, #52	; 0x34
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd90      	pop	{r4, r7, pc}
 8000dcc:	2000020c 	.word	0x2000020c
 8000dd0:	20000208 	.word	0x20000208
 8000dd4:	0800481c 	.word	0x0800481c
 8000dd8:	080047dc 	.word	0x080047dc
 8000ddc:	20000008 	.word	0x20000008
 8000de0:	08004814 	.word	0x08004814

08000de4 <menuMEF_update>:

// actualiza el estado de la MEF en funcion del largo del pulso
// retorna NEXT, EXECUTE o NONE para establecer el estado actual de la MEF en menuMEF_set_state()
action_t menuMEF_update(void){
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
	action_t command = NONE;
 8000dea:	2300      	movs	r3, #0
 8000dec:	71fb      	strb	r3, [r7, #7]
	if(readKey_down() == true){
 8000dee:	f7ff fca3 	bl	8000738 <readKey_down>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d004      	beq.n	8000e02 <menuMEF_update+0x1e>
		// comenzar conteo
		pulseHandle.startTime = HAL_GetTick(); // tiempo desde boton presionado
 8000df8:	f000 fb9a 	bl	8001530 <HAL_GetTick>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	4a1f      	ldr	r2, [pc, #124]	; (8000e7c <menuMEF_update+0x98>)
 8000e00:	6013      	str	r3, [r2, #0]
	}
	if(readKey_up() == true){
 8000e02:	f7ff fcaf 	bl	8000764 <readKey_up>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d032      	beq.n	8000e72 <menuMEF_update+0x8e>
		// terminar conteo y pasar de opcion o ejecutarla
		pulseHandle.stopTime = HAL_GetTick(); // tiempo desde boton presionado
 8000e0c:	f000 fb90 	bl	8001530 <HAL_GetTick>
 8000e10:	4603      	mov	r3, r0
 8000e12:	4a1a      	ldr	r2, [pc, #104]	; (8000e7c <menuMEF_update+0x98>)
 8000e14:	6053      	str	r3, [r2, #4]
		pulseHandle.deltaTime = pulseHandle.stopTime - pulseHandle.startTime; // if stop>start
 8000e16:	4b19      	ldr	r3, [pc, #100]	; (8000e7c <menuMEF_update+0x98>)
 8000e18:	685a      	ldr	r2, [r3, #4]
 8000e1a:	4b18      	ldr	r3, [pc, #96]	; (8000e7c <menuMEF_update+0x98>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	1ad3      	subs	r3, r2, r3
 8000e20:	4a16      	ldr	r2, [pc, #88]	; (8000e7c <menuMEF_update+0x98>)
 8000e22:	6093      	str	r3, [r2, #8]

		if( executingRoutine == false){
 8000e24:	4b16      	ldr	r3, [pc, #88]	; (8000e80 <menuMEF_update+0x9c>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	f083 0301 	eor.w	r3, r3, #1
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d01a      	beq.n	8000e68 <menuMEF_update+0x84>
			if(pulseHandle.deltaTime < pulseHandle.nextTime){
 8000e32:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <menuMEF_update+0x98>)
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	4a11      	ldr	r2, [pc, #68]	; (8000e7c <menuMEF_update+0x98>)
 8000e38:	8992      	ldrh	r2, [r2, #12]
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d205      	bcs.n	8000e4a <menuMEF_update+0x66>
				command = NEXT;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	71fb      	strb	r3, [r7, #7]
				uartSendString("NEXT\r\n");
 8000e42:	4810      	ldr	r0, [pc, #64]	; (8000e84 <menuMEF_update+0xa0>)
 8000e44:	f000 fabe 	bl	80013c4 <uartSendString>
 8000e48:	e013      	b.n	8000e72 <menuMEF_update+0x8e>
			} else if (pulseHandle.deltaTime > pulseHandle.executeTime){
 8000e4a:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <menuMEF_update+0x98>)
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	4a0b      	ldr	r2, [pc, #44]	; (8000e7c <menuMEF_update+0x98>)
 8000e50:	89d2      	ldrh	r2, [r2, #14]
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d905      	bls.n	8000e62 <menuMEF_update+0x7e>
				command = EXECUTE;
 8000e56:	2303      	movs	r3, #3
 8000e58:	71fb      	strb	r3, [r7, #7]
				uartSendString("EXECUTE\r\n");
 8000e5a:	480b      	ldr	r0, [pc, #44]	; (8000e88 <menuMEF_update+0xa4>)
 8000e5c:	f000 fab2 	bl	80013c4 <uartSendString>
 8000e60:	e007      	b.n	8000e72 <menuMEF_update+0x8e>
			} else{
				command = NONE;
 8000e62:	2300      	movs	r3, #0
 8000e64:	71fb      	strb	r3, [r7, #7]
 8000e66:	e004      	b.n	8000e72 <menuMEF_update+0x8e>
			}
		} else{
			command = STOP;
 8000e68:	2304      	movs	r3, #4
 8000e6a:	71fb      	strb	r3, [r7, #7]
			uartSendString("STOP\r\n");
 8000e6c:	4807      	ldr	r0, [pc, #28]	; (8000e8c <menuMEF_update+0xa8>)
 8000e6e:	f000 faa9 	bl	80013c4 <uartSendString>
		}
	}
	return command;
 8000e72:	79fb      	ldrb	r3, [r7, #7]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	2000020c 	.word	0x2000020c
 8000e80:	2000021c 	.word	0x2000021c
 8000e84:	0800482c 	.word	0x0800482c
 8000e88:	08004834 	.word	0x08004834
 8000e8c:	08004840 	.word	0x08004840

08000e90 <menuMEF_set_state>:

// Actualiza el estado actual del menu (MEF)
void menuMEF_set_state(action_t command){
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]

	if(command == STOP){
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	2b04      	cmp	r3, #4
 8000e9e:	d105      	bne.n	8000eac <menuMEF_set_state+0x1c>
		blink_stop(LED_PORT,LED_PIN);
 8000ea0:	2120      	movs	r1, #32
 8000ea2:	4819      	ldr	r0, [pc, #100]	; (8000f08 <menuMEF_set_state+0x78>)
 8000ea4:	f000 f986 	bl	80011b4 <blink_stop>
		motor_stop();
 8000ea8:	f000 f9a0 	bl	80011ec <motor_stop>
	}

	if(command == NEXT){
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d10d      	bne.n	8000ece <menuMEF_set_state+0x3e>
		if(currentState == OPTION_6){ // volver al inicio
 8000eb2:	4b16      	ldr	r3, [pc, #88]	; (8000f0c <menuMEF_set_state+0x7c>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	2b05      	cmp	r3, #5
 8000eb8:	d103      	bne.n	8000ec2 <menuMEF_set_state+0x32>
			currentState = OPTION_1;
 8000eba:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <menuMEF_set_state+0x7c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	701a      	strb	r2, [r3, #0]
 8000ec0:	e005      	b.n	8000ece <menuMEF_set_state+0x3e>
		} else {
			currentState++; // avanzar a la siguiente opcion
 8000ec2:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <menuMEF_set_state+0x7c>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <menuMEF_set_state+0x7c>)
 8000ecc:	701a      	strb	r2, [r3, #0]
		}
	}

	if(command == EXECUTE){
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	2b03      	cmp	r3, #3
 8000ed2:	d105      	bne.n	8000ee0 <menuMEF_set_state+0x50>
		currentState = currentState + OPTION_OFFSET; // pasar a estado EXECUTE_x
 8000ed4:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <menuMEF_set_state+0x7c>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	3306      	adds	r3, #6
 8000eda:	b2da      	uxtb	r2, r3
 8000edc:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <menuMEF_set_state+0x7c>)
 8000ede:	701a      	strb	r2, [r3, #0]
	}
	// si hubo un pulso indicando NEXT o EXECUTE, actualizar LCD y ejecutar la rutina correspondiente
	// actualizar solo cuando hay un cambio
	if((command == EXECUTE) || (command == NEXT)){
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	2b03      	cmp	r3, #3
 8000ee4:	d002      	beq.n	8000eec <menuMEF_set_state+0x5c>
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d103      	bne.n	8000ef4 <menuMEF_set_state+0x64>
		menuMEF_update_display(command); // actualizar display LCD
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 f80e 	bl	8000f10 <menuMEF_update_display>
	}
	menuMEF_execute(currentState); // iniciar/continuar rutina si corresponde
 8000ef4:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <menuMEF_set_state+0x7c>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f000 f85b 	bl	8000fb4 <menuMEF_execute>
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40010800 	.word	0x40010800
 8000f0c:	20000208 	.word	0x20000208

08000f10 <menuMEF_update_display>:

void menuMEF_update_display( action_t command){
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08a      	sub	sp, #40	; 0x28
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	71fb      	strb	r3, [r7, #7]
	char buffer[32];
	// Escribir al LCD
	if((command == NEXT) || (command == BACK)){
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d002      	beq.n	8000f26 <menuMEF_update_display+0x16>
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d11c      	bne.n	8000f60 <menuMEF_update_display+0x50>
		// enviar estado actual 'Opcion x' al LCD
		//sprintf(buffer, "Opcion %d\r\n", currentState+1);
		sprintf(buffer, "%s\r\n", optionText[currentState]);
 8000f26:	4b20      	ldr	r3, [pc, #128]	; (8000fa8 <menuMEF_update_display+0x98>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	011b      	lsls	r3, r3, #4
 8000f2c:	4a1f      	ldr	r2, [pc, #124]	; (8000fac <menuMEF_update_display+0x9c>)
 8000f2e:	441a      	add	r2, r3
 8000f30:	f107 0308 	add.w	r3, r7, #8
 8000f34:	491e      	ldr	r1, [pc, #120]	; (8000fb0 <menuMEF_update_display+0xa0>)
 8000f36:	4618      	mov	r0, r3
 8000f38:	f002 ff92 	bl	8003e60 <siprintf>
		uartSendString(buffer);
 8000f3c:	f107 0308 	add.w	r3, r7, #8
 8000f40:	4618      	mov	r0, r3
 8000f42:	f000 fa3f 	bl	80013c4 <uartSendString>

		lcd_set_position(2, 1);
 8000f46:	2101      	movs	r1, #1
 8000f48:	2002      	movs	r0, #2
 8000f4a:	f7ff fe29 	bl	8000ba0 <lcd_set_position>
		lcd_print_text(optionText[currentState], sizeof(optionText)/sizeof(optionText[0]));
 8000f4e:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <menuMEF_update_display+0x98>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	011b      	lsls	r3, r3, #4
 8000f54:	4a15      	ldr	r2, [pc, #84]	; (8000fac <menuMEF_update_display+0x9c>)
 8000f56:	4413      	add	r3, r2
 8000f58:	210d      	movs	r1, #13
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff fe56 	bl	8000c0c <lcd_print_text>

	}
	if(command == EXECUTE){
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	2b03      	cmp	r3, #3
 8000f64:	d11c      	bne.n	8000fa0 <menuMEF_update_display+0x90>
		// enviar estado actual 'Ejecutando x' al LCD
		//sprintf(buffer, "Ejecutando %d\r\n", currentState+1);
		sprintf(buffer, "%s\r\n", optionText[currentState]);
 8000f66:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <menuMEF_update_display+0x98>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	011b      	lsls	r3, r3, #4
 8000f6c:	4a0f      	ldr	r2, [pc, #60]	; (8000fac <menuMEF_update_display+0x9c>)
 8000f6e:	441a      	add	r2, r3
 8000f70:	f107 0308 	add.w	r3, r7, #8
 8000f74:	490e      	ldr	r1, [pc, #56]	; (8000fb0 <menuMEF_update_display+0xa0>)
 8000f76:	4618      	mov	r0, r3
 8000f78:	f002 ff72 	bl	8003e60 <siprintf>
		uartSendString(buffer);
 8000f7c:	f107 0308 	add.w	r3, r7, #8
 8000f80:	4618      	mov	r0, r3
 8000f82:	f000 fa1f 	bl	80013c4 <uartSendString>

		lcd_set_position(2, 1);
 8000f86:	2101      	movs	r1, #1
 8000f88:	2002      	movs	r0, #2
 8000f8a:	f7ff fe09 	bl	8000ba0 <lcd_set_position>
		//lcd_print_text(optionText[currentState+OPTION_OFFSET], sizeof(optionText)/sizeof(optionText[0]));
		lcd_print_text(optionText[currentState], sizeof(optionText)/sizeof(optionText[0]));
 8000f8e:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <menuMEF_update_display+0x98>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	011b      	lsls	r3, r3, #4
 8000f94:	4a05      	ldr	r2, [pc, #20]	; (8000fac <menuMEF_update_display+0x9c>)
 8000f96:	4413      	add	r3, r2
 8000f98:	210d      	movs	r1, #13
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff fe36 	bl	8000c0c <lcd_print_text>
	}

}
 8000fa0:	bf00      	nop
 8000fa2:	3728      	adds	r7, #40	; 0x28
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20000208 	.word	0x20000208
 8000fac:	20000008 	.word	0x20000008
 8000fb0:	08004814 	.word	0x08004814

08000fb4 <menuMEF_execute>:

void menuMEF_execute(){
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
	// ejecutar la opcion seleccionada
	//blink_led(LED_PORT, LED_PIN, 500, 10);
	switch (currentState){
 8000fb8:	4b1b      	ldr	r3, [pc, #108]	; (8001028 <menuMEF_execute+0x74>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	3b06      	subs	r3, #6
 8000fbe:	2b05      	cmp	r3, #5
 8000fc0:	d82e      	bhi.n	8001020 <menuMEF_execute+0x6c>
 8000fc2:	a201      	add	r2, pc, #4	; (adr r2, 8000fc8 <menuMEF_execute+0x14>)
 8000fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fc8:	08000fe1 	.word	0x08000fe1
 8000fcc:	08000feb 	.word	0x08000feb
 8000fd0:	08000ff5 	.word	0x08000ff5
 8000fd4:	08001009 	.word	0x08001009
 8000fd8:	08001015 	.word	0x08001015
 8000fdc:	08001021 	.word	0x08001021
	case EXECUTE_1:
		// ejecutar 1
		led_on(LED_PORT, LED_PIN);
 8000fe0:	2120      	movs	r1, #32
 8000fe2:	4812      	ldr	r0, [pc, #72]	; (800102c <menuMEF_execute+0x78>)
 8000fe4:	f000 f856 	bl	8001094 <led_on>
		break;
 8000fe8:	e01b      	b.n	8001022 <menuMEF_execute+0x6e>
	case EXECUTE_2:
		// ejecutar 2
		led_off(LED_PORT, LED_PIN);
 8000fea:	2120      	movs	r1, #32
 8000fec:	480f      	ldr	r0, [pc, #60]	; (800102c <menuMEF_execute+0x78>)
 8000fee:	f000 f86b 	bl	80010c8 <led_off>
		break;
 8000ff2:	e016      	b.n	8001022 <menuMEF_execute+0x6e>
	case EXECUTE_3:
		// ejecutar 3
		blink_led(LED_PORT, LED_PIN, blinkPeriod, blinkRepeat);
 8000ff4:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <menuMEF_execute+0x7c>)
 8000ff6:	881a      	ldrh	r2, [r3, #0]
 8000ff8:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <menuMEF_execute+0x80>)
 8000ffa:	881b      	ldrh	r3, [r3, #0]
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	2120      	movs	r1, #32
 8001000:	480a      	ldr	r0, [pc, #40]	; (800102c <menuMEF_execute+0x78>)
 8001002:	f000 f87b 	bl	80010fc <blink_led>
		break;
 8001006:	e00c      	b.n	8001022 <menuMEF_execute+0x6e>
	case EXECUTE_4:
		// ejecutar 4 motor CW
		motor_send_command(MOTOR_RUN_CW);
 8001008:	2001      	movs	r0, #1
 800100a:	f7ff fc2d 	bl	8000868 <motor_send_command>
		//HAL_Delay(5000);
		menuMEF_reset_state();
 800100e:	f000 f813 	bl	8001038 <menuMEF_reset_state>
		break;
 8001012:	e006      	b.n	8001022 <menuMEF_execute+0x6e>
	case EXECUTE_5:
		// ejecutar 5 motor CCW
		motor_send_command(MOTOR_RUN_CCW);
 8001014:	2002      	movs	r0, #2
 8001016:	f7ff fc27 	bl	8000868 <motor_send_command>
		//HAL_Delay(5000);
		menuMEF_reset_state();
 800101a:	f000 f80d 	bl	8001038 <menuMEF_reset_state>
		break;
 800101e:	e000      	b.n	8001022 <menuMEF_execute+0x6e>
	case EXECUTE_6:
		// ejecutar 6
		break;
	default:
		// error
		break;
 8001020:	bf00      	nop
	}


}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000208 	.word	0x20000208
 800102c:	40010800 	.word	0x40010800
 8001030:	20000004 	.word	0x20000004
 8001034:	20000006 	.word	0x20000006

08001038 <menuMEF_reset_state>:

void menuMEF_reset_state(){
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
	if((currentState >= EXECUTE_1) & (currentState <= EXECUTE_6) & (executingRoutine == false)){
 800103c:	4b13      	ldr	r3, [pc, #76]	; (800108c <menuMEF_reset_state+0x54>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b05      	cmp	r3, #5
 8001042:	bf8c      	ite	hi
 8001044:	2301      	movhi	r3, #1
 8001046:	2300      	movls	r3, #0
 8001048:	b2da      	uxtb	r2, r3
 800104a:	4b10      	ldr	r3, [pc, #64]	; (800108c <menuMEF_reset_state+0x54>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	2b0b      	cmp	r3, #11
 8001050:	bf94      	ite	ls
 8001052:	2301      	movls	r3, #1
 8001054:	2300      	movhi	r3, #0
 8001056:	b2db      	uxtb	r3, r3
 8001058:	4013      	ands	r3, r2
 800105a:	b2db      	uxtb	r3, r3
 800105c:	461a      	mov	r2, r3
 800105e:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <menuMEF_reset_state+0x58>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	f083 0301 	eor.w	r3, r3, #1
 8001066:	b2db      	uxtb	r3, r3
 8001068:	4013      	ands	r3, r2
 800106a:	2b00      	cmp	r3, #0
 800106c:	d005      	beq.n	800107a <menuMEF_reset_state+0x42>
		currentState = currentState - OPTION_OFFSET;
 800106e:	4b07      	ldr	r3, [pc, #28]	; (800108c <menuMEF_reset_state+0x54>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	3b06      	subs	r3, #6
 8001074:	b2da      	uxtb	r2, r3
 8001076:	4b05      	ldr	r3, [pc, #20]	; (800108c <menuMEF_reset_state+0x54>)
 8001078:	701a      	strb	r2, [r3, #0]
	}
	executingRoutine = false;
 800107a:	4b05      	ldr	r3, [pc, #20]	; (8001090 <menuMEF_reset_state+0x58>)
 800107c:	2200      	movs	r2, #0
 800107e:	701a      	strb	r2, [r3, #0]
	menuMEF_update_display(BACK);
 8001080:	2002      	movs	r0, #2
 8001082:	f7ff ff45 	bl	8000f10 <menuMEF_update_display>
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000208 	.word	0x20000208
 8001090:	2000021c 	.word	0x2000021c

08001094 <led_on>:

void led_on(GPIO_TypeDef * port, uint16_t pin ){
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	460b      	mov	r3, r1
 800109e:	807b      	strh	r3, [r7, #2]
	executingRoutine = true;
 80010a0:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <led_on+0x30>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(port, pin, SET);
 80010a6:	887b      	ldrh	r3, [r7, #2]
 80010a8:	2201      	movs	r2, #1
 80010aa:	4619      	mov	r1, r3
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f000 fd16 	bl	8001ade <HAL_GPIO_WritePin>
	executingRoutine = false;
 80010b2:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <led_on+0x30>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	701a      	strb	r2, [r3, #0]
	menuMEF_reset_state();
 80010b8:	f7ff ffbe 	bl	8001038 <menuMEF_reset_state>
}
 80010bc:	bf00      	nop
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	2000021c 	.word	0x2000021c

080010c8 <led_off>:

void led_off(GPIO_TypeDef * port, uint16_t pin ){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	460b      	mov	r3, r1
 80010d2:	807b      	strh	r3, [r7, #2]
	executingRoutine = true;
 80010d4:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <led_off+0x30>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(port, pin, RESET);
 80010da:	887b      	ldrh	r3, [r7, #2]
 80010dc:	2200      	movs	r2, #0
 80010de:	4619      	mov	r1, r3
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f000 fcfc 	bl	8001ade <HAL_GPIO_WritePin>
	executingRoutine = false;
 80010e6:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <led_off+0x30>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	701a      	strb	r2, [r3, #0]
	menuMEF_reset_state();
 80010ec:	f7ff ffa4 	bl	8001038 <menuMEF_reset_state>
}
 80010f0:	bf00      	nop
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	2000021c 	.word	0x2000021c

080010fc <blink_led>:

void blink_led(GPIO_TypeDef * port, uint16_t pin, uint16_t period, uint8_t repeat){
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	4608      	mov	r0, r1
 8001106:	4611      	mov	r1, r2
 8001108:	461a      	mov	r2, r3
 800110a:	4603      	mov	r3, r0
 800110c:	817b      	strh	r3, [r7, #10]
 800110e:	460b      	mov	r3, r1
 8001110:	813b      	strh	r3, [r7, #8]
 8001112:	4613      	mov	r3, r2
 8001114:	71fb      	strb	r3, [r7, #7]

	if((count == 0) & (executingRoutine == false)){
 8001116:	4b24      	ldr	r3, [pc, #144]	; (80011a8 <blink_led+0xac>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	2b00      	cmp	r3, #0
 800111c:	bf0c      	ite	eq
 800111e:	2301      	moveq	r3, #1
 8001120:	2300      	movne	r3, #0
 8001122:	b2db      	uxtb	r3, r3
 8001124:	461a      	mov	r2, r3
 8001126:	4b21      	ldr	r3, [pc, #132]	; (80011ac <blink_led+0xb0>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	f083 0301 	eor.w	r3, r3, #1
 800112e:	b2db      	uxtb	r3, r3
 8001130:	4013      	ands	r3, r2
 8001132:	2b00      	cmp	r3, #0
 8001134:	d00d      	beq.n	8001152 <blink_led+0x56>
		//count = 0;
		executingRoutine = true;
 8001136:	4b1d      	ldr	r3, [pc, #116]	; (80011ac <blink_led+0xb0>)
 8001138:	2201      	movs	r2, #1
 800113a:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(port, pin, SET);
 800113c:	897b      	ldrh	r3, [r7, #10]
 800113e:	2201      	movs	r2, #1
 8001140:	4619      	mov	r1, r3
 8001142:	68f8      	ldr	r0, [r7, #12]
 8001144:	f000 fccb 	bl	8001ade <HAL_GPIO_WritePin>
		delayInit(&delayBlinkHandle, period );
 8001148:	893b      	ldrh	r3, [r7, #8]
 800114a:	4619      	mov	r1, r3
 800114c:	4818      	ldr	r0, [pc, #96]	; (80011b0 <blink_led+0xb4>)
 800114e:	f7ff fb2b 	bl	80007a8 <delayInit>
	}
	// repetir
	if(delayRead(&delayBlinkHandle) == true){
 8001152:	4817      	ldr	r0, [pc, #92]	; (80011b0 <blink_led+0xb4>)
 8001154:	f7ff fb45 	bl	80007e2 <delayRead>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d00a      	beq.n	8001174 <blink_led+0x78>
		HAL_GPIO_TogglePin(port, pin);
 800115e:	897b      	ldrh	r3, [r7, #10]
 8001160:	4619      	mov	r1, r3
 8001162:	68f8      	ldr	r0, [r7, #12]
 8001164:	f000 fcd3 	bl	8001b0e <HAL_GPIO_TogglePin>
		count++;
 8001168:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <blink_led+0xac>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	3301      	adds	r3, #1
 800116e:	b2da      	uxtb	r2, r3
 8001170:	4b0d      	ldr	r3, [pc, #52]	; (80011a8 <blink_led+0xac>)
 8001172:	701a      	strb	r2, [r3, #0]
	}
	// blink stop
	if(count >= repeat*2){
 8001174:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <blink_led+0xac>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	461a      	mov	r2, r3
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	429a      	cmp	r2, r3
 8001180:	db0d      	blt.n	800119e <blink_led+0xa2>
		HAL_GPIO_WritePin(port, pin, RESET);
 8001182:	897b      	ldrh	r3, [r7, #10]
 8001184:	2200      	movs	r2, #0
 8001186:	4619      	mov	r1, r3
 8001188:	68f8      	ldr	r0, [r7, #12]
 800118a:	f000 fca8 	bl	8001ade <HAL_GPIO_WritePin>
		count = 0;
 800118e:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <blink_led+0xac>)
 8001190:	2200      	movs	r2, #0
 8001192:	701a      	strb	r2, [r3, #0]
		executingRoutine = false;
 8001194:	4b05      	ldr	r3, [pc, #20]	; (80011ac <blink_led+0xb0>)
 8001196:	2200      	movs	r2, #0
 8001198:	701a      	strb	r2, [r3, #0]
		menuMEF_reset_state();
 800119a:	f7ff ff4d 	bl	8001038 <menuMEF_reset_state>
//		HAL_GPIO_TogglePin(port, pin);
//		HAL_Delay(period);
//	}
//	executingRoutine = false;
//	menuMEF_reset_state();
}
 800119e:	bf00      	nop
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	2000021d 	.word	0x2000021d
 80011ac:	2000021c 	.word	0x2000021c
 80011b0:	20000220 	.word	0x20000220

080011b4 <blink_stop>:

void blink_stop(GPIO_TypeDef * port, uint16_t pin){
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	460b      	mov	r3, r1
 80011be:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(port, pin, RESET);
 80011c0:	887b      	ldrh	r3, [r7, #2]
 80011c2:	2200      	movs	r2, #0
 80011c4:	4619      	mov	r1, r3
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f000 fc89 	bl	8001ade <HAL_GPIO_WritePin>
	count = 0;
 80011cc:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <blink_stop+0x30>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	701a      	strb	r2, [r3, #0]
	executingRoutine = false;
 80011d2:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <blink_stop+0x34>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	701a      	strb	r2, [r3, #0]
	menuMEF_reset_state();
 80011d8:	f7ff ff2e 	bl	8001038 <menuMEF_reset_state>
}
 80011dc:	bf00      	nop
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	2000021d 	.word	0x2000021d
 80011e8:	2000021c 	.word	0x2000021c

080011ec <motor_stop>:

void motor_stop(){
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0

}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bc80      	pop	{r7}
 80011f6:	4770      	bx	lr

080011f8 <menuMEF_user_input>:

void menuMEF_user_input(){
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b0f8      	sub	sp, #480	; 0x1e0
 80011fc:	af02      	add	r7, sp, #8
	uint8_t intro[] = "######################### COMIENZO DEL PROGRAMA #########################\r\n"
 80011fe:	4a31      	ldr	r2, [pc, #196]	; (80012c4 <menuMEF_user_input+0xcc>)
 8001200:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001204:	4611      	mov	r1, r2
 8001206:	22c5      	movs	r2, #197	; 0xc5
 8001208:	4618      	mov	r0, r3
 800120a:	f002 fe7d 	bl	8003f08 <memcpy>
			      "# Ingrese a continuacion los parametros del parpadeo del led en ms\r\n"
				  "# Presione ENTER para utilizar [valor] por defecto:\r\n";
	uint8_t periodPrompt[64];
	uint8_t repeatPrompt[64];
	sprintf(periodPrompt,"# [%d-%d] Ingrese el Periodo [%d]: ", BLINK_PERIOD_MIN, BLINK_PERIOD_MAX, blinkPeriod);
 800120e:	4b2e      	ldr	r3, [pc, #184]	; (80012c8 <menuMEF_user_input+0xd0>)
 8001210:	881b      	ldrh	r3, [r3, #0]
 8001212:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800121c:	2264      	movs	r2, #100	; 0x64
 800121e:	492b      	ldr	r1, [pc, #172]	; (80012cc <menuMEF_user_input+0xd4>)
 8001220:	f002 fe1e 	bl	8003e60 <siprintf>
	sprintf(repeatPrompt,"# [%d-%d]Ingrese las repeticiones [%d]: ", BLINK_REPEAT_MIN, BLINK_REPEAT_MAX, blinkRepeat);
 8001224:	4b2a      	ldr	r3, [pc, #168]	; (80012d0 <menuMEF_user_input+0xd8>)
 8001226:	881b      	ldrh	r3, [r3, #0]
 8001228:	f107 0090 	add.w	r0, r7, #144	; 0x90
 800122c:	9300      	str	r3, [sp, #0]
 800122e:	2314      	movs	r3, #20
 8001230:	2201      	movs	r2, #1
 8001232:	4928      	ldr	r1, [pc, #160]	; (80012d4 <menuMEF_user_input+0xdc>)
 8001234:	f002 fe14 	bl	8003e60 <siprintf>

	uartSendString(intro);
 8001238:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800123c:	4618      	mov	r0, r3
 800123e:	f000 f8c1 	bl	80013c4 <uartSendString>

	uartSendString(periodPrompt);
 8001242:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001246:	4618      	mov	r0, r3
 8001248:	f000 f8bc 	bl	80013c4 <uartSendString>
	blinkPeriod = get_value(BLINK_PERIOD_MIN, BLINK_PERIOD_MAX, BLINK_PERIOD_DEFAULT);
 800124c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001250:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001254:	2064      	movs	r0, #100	; 0x64
 8001256:	f000 f843 	bl	80012e0 <get_value>
 800125a:	4603      	mov	r3, r0
 800125c:	461a      	mov	r2, r3
 800125e:	4b1a      	ldr	r3, [pc, #104]	; (80012c8 <menuMEF_user_input+0xd0>)
 8001260:	801a      	strh	r2, [r3, #0]

	uartSendString(repeatPrompt);
 8001262:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001266:	4618      	mov	r0, r3
 8001268:	f000 f8ac 	bl	80013c4 <uartSendString>
	blinkRepeat = get_value(BLINK_REPEAT_MIN, BLINK_REPEAT_MAX, BLINK_REPEAT_DEFAULT);
 800126c:	220a      	movs	r2, #10
 800126e:	2114      	movs	r1, #20
 8001270:	2001      	movs	r0, #1
 8001272:	f000 f835 	bl	80012e0 <get_value>
 8001276:	4603      	mov	r3, r0
 8001278:	461a      	mov	r2, r3
 800127a:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <menuMEF_user_input+0xd8>)
 800127c:	801a      	strh	r2, [r3, #0]

	uint8_t parameters[64];
	sprintf(parameters,"# Parametros blinky: periodo [%d], Repecitiones [%d]\r\n", blinkPeriod, blinkRepeat );
 800127e:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <menuMEF_user_input+0xd0>)
 8001280:	881b      	ldrh	r3, [r3, #0]
 8001282:	461a      	mov	r2, r3
 8001284:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <menuMEF_user_input+0xd8>)
 8001286:	881b      	ldrh	r3, [r3, #0]
 8001288:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800128c:	4912      	ldr	r1, [pc, #72]	; (80012d8 <menuMEF_user_input+0xe0>)
 800128e:	f002 fde7 	bl	8003e60 <siprintf>
	uartSendString(parameters);
 8001292:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001296:	4618      	mov	r0, r3
 8001298:	f000 f894 	bl	80013c4 <uartSendString>

	uint8_t end[] = "#########################################################################\r\n";
 800129c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80012a0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80012a4:	4a0d      	ldr	r2, [pc, #52]	; (80012dc <menuMEF_user_input+0xe4>)
 80012a6:	4618      	mov	r0, r3
 80012a8:	4611      	mov	r1, r2
 80012aa:	234c      	movs	r3, #76	; 0x4c
 80012ac:	461a      	mov	r2, r3
 80012ae:	f002 fe2b 	bl	8003f08 <memcpy>
	uartSendString(end);
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	4618      	mov	r0, r3
 80012b6:	f000 f885 	bl	80013c4 <uartSendString>
}
 80012ba:	bf00      	nop
 80012bc:	f507 77ec 	add.w	r7, r7, #472	; 0x1d8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	080048d0 	.word	0x080048d0
 80012c8:	20000004 	.word	0x20000004
 80012cc:	08004848 	.word	0x08004848
 80012d0:	20000006 	.word	0x20000006
 80012d4:	0800486c 	.word	0x0800486c
 80012d8:	08004898 	.word	0x08004898
 80012dc:	08004998 	.word	0x08004998

080012e0 <get_value>:


uint16_t get_value(uint16_t min, uint16_t max, uint16_t defaultValue){
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	80fb      	strh	r3, [r7, #6]
 80012ea:	460b      	mov	r3, r1
 80012ec:	80bb      	strh	r3, [r7, #4]
 80012ee:	4613      	mov	r3, r2
 80012f0:	807b      	strh	r3, [r7, #2]
	uint8_t inputBuffer[10];
	uint16_t value;

	while(1){
		uartReceiveString(inputBuffer, sizeof(inputBuffer)/sizeof(inputBuffer[0]));
 80012f2:	f107 030c 	add.w	r3, r7, #12
 80012f6:	210a      	movs	r1, #10
 80012f8:	4618      	mov	r0, r3
 80012fa:	f000 f885 	bl	8001408 <uartReceiveString>
		if(inputBuffer[0] == '\0'){
 80012fe:	7b3b      	ldrb	r3, [r7, #12]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d105      	bne.n	8001310 <get_value+0x30>
			value = defaultValue;
 8001304:	887b      	ldrh	r3, [r7, #2]
 8001306:	82fb      	strh	r3, [r7, #22]
			uartSendString("\r\n");
 8001308:	4814      	ldr	r0, [pc, #80]	; (800135c <get_value+0x7c>)
 800130a:	f000 f85b 	bl	80013c4 <uartSendString>
			break;
 800130e:	e020      	b.n	8001352 <get_value+0x72>
		}
		//uartSendString(periodBuffer);
		uartSendString("\r\n");
 8001310:	4812      	ldr	r0, [pc, #72]	; (800135c <get_value+0x7c>)
 8001312:	f000 f857 	bl	80013c4 <uartSendString>
		value = (uint16_t) atoi(inputBuffer);
 8001316:	f107 030c 	add.w	r3, r7, #12
 800131a:	4618      	mov	r0, r3
 800131c:	f002 fd14 	bl	8003d48 <atoi>
 8001320:	4603      	mov	r3, r0
 8001322:	82fb      	strh	r3, [r7, #22]
		if( (value <= max) & (value >= min) ){
 8001324:	8afa      	ldrh	r2, [r7, #22]
 8001326:	88bb      	ldrh	r3, [r7, #4]
 8001328:	429a      	cmp	r2, r3
 800132a:	bf94      	ite	ls
 800132c:	2301      	movls	r3, #1
 800132e:	2300      	movhi	r3, #0
 8001330:	b2da      	uxtb	r2, r3
 8001332:	8af9      	ldrh	r1, [r7, #22]
 8001334:	88fb      	ldrh	r3, [r7, #6]
 8001336:	4299      	cmp	r1, r3
 8001338:	bf2c      	ite	cs
 800133a:	2301      	movcs	r3, #1
 800133c:	2300      	movcc	r3, #0
 800133e:	b2db      	uxtb	r3, r3
 8001340:	4013      	ands	r3, r2
 8001342:	b2db      	uxtb	r3, r3
 8001344:	2b00      	cmp	r3, #0
 8001346:	d103      	bne.n	8001350 <get_value+0x70>
			break;
		} else{
			uartSendString("\r\n# Valor fuera de rango!\r\nIngresar nuevamente: ");
 8001348:	4805      	ldr	r0, [pc, #20]	; (8001360 <get_value+0x80>)
 800134a:	f000 f83b 	bl	80013c4 <uartSendString>
	while(1){
 800134e:	e7d0      	b.n	80012f2 <get_value+0x12>
			break;
 8001350:	bf00      	nop
		}
	}
	return value;
 8001352:	8afb      	ldrh	r3, [r7, #22]
}
 8001354:	4618      	mov	r0, r3
 8001356:	3718      	adds	r7, #24
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	080049e4 	.word	0x080049e4
 8001360:	080049e8 	.word	0x080049e8

08001364 <uartInit>:

/* > Descripcion: Inicializa la uart con la configuracion preestablecida y envia dicha config a la terminal
 * > Parametro: ninguno
 * > Retorno: retorna un boolt_t true en caso exito o false caso contrario
 */
bool_t uartInit(){
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
	// uartHandle >> estructura de dato UART_HandleTypeDef declarada en API_uart.h
	bool_t returnFlag = false;
 800136a:	2300      	movs	r3, #0
 800136c:	71fb      	strb	r3, [r7, #7]

	uartHandle.Instance = USE_USART; // instancia de la uart >> usb conectado a usart2
 800136e:	4b13      	ldr	r3, [pc, #76]	; (80013bc <uartInit+0x58>)
 8001370:	4a13      	ldr	r2, [pc, #76]	; (80013c0 <uartInit+0x5c>)
 8001372:	601a      	str	r2, [r3, #0]
	uartHandle.Init.BaudRate = 9600; // baudrate tipico
 8001374:	4b11      	ldr	r3, [pc, #68]	; (80013bc <uartInit+0x58>)
 8001376:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800137a:	605a      	str	r2, [r3, #4]
	uartHandle.Init.WordLength = UART_WORDLENGTH_8B; // tamano de los datos >> 8 bits
 800137c:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <uartInit+0x58>)
 800137e:	2200      	movs	r2, #0
 8001380:	609a      	str	r2, [r3, #8]
	uartHandle.Init.StopBits = UART_STOPBITS_1; // cantidad de stop bits >> 1 solo
 8001382:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <uartInit+0x58>)
 8001384:	2200      	movs	r2, #0
 8001386:	60da      	str	r2, [r3, #12]
	uartHandle.Init.Parity = UART_PARITY_NONE; // tipo de paridad >> ninguno
 8001388:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <uartInit+0x58>)
 800138a:	2200      	movs	r2, #0
 800138c:	611a      	str	r2, [r3, #16]
	uartHandle.Init.Mode = UART_MODE_TX_RX; // modo recepcion/recepcion habilitado
 800138e:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <uartInit+0x58>)
 8001390:	220c      	movs	r2, #12
 8001392:	615a      	str	r2, [r3, #20]
	uartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE; // sin control de flujo por hardware
 8001394:	4b09      	ldr	r3, [pc, #36]	; (80013bc <uartInit+0x58>)
 8001396:	2200      	movs	r2, #0
 8001398:	619a      	str	r2, [r3, #24]
	uartHandle.Init.OverSampling = UART_OVERSAMPLING_16; // cantidad de muestras por tiempo de bit
 800139a:	4b08      	ldr	r3, [pc, #32]	; (80013bc <uartInit+0x58>)
 800139c:	2200      	movs	r2, #0
 800139e:	61da      	str	r2, [r3, #28]

	if (HAL_UART_Init(&uartHandle) == HAL_OK){ // retornar true si es exitosa la configuracion
 80013a0:	4806      	ldr	r0, [pc, #24]	; (80013bc <uartInit+0x58>)
 80013a2:	f002 fa6f 	bl	8003884 <HAL_UART_Init>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d101      	bne.n	80013b0 <uartInit+0x4c>
		//print_uart_config(uartHandle); // imprimir configuracion si la config fue exitosa
		returnFlag = true;
 80013ac:	2301      	movs	r3, #1
 80013ae:	71fb      	strb	r3, [r7, #7]
	}

	return returnFlag;
 80013b0:	79fb      	ldrb	r3, [r7, #7]
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	2000022c 	.word	0x2000022c
 80013c0:	40004400 	.word	0x40004400

080013c4 <uartSendString>:
/* > Descripcion: envia un string (buffer <pstring>) por la uart, finalizando en el caracter NULL
 * > Parametro: <pstring> puntero del tipo uint8_t
 * 				El buffer de envio tendra una cantidad maxima de caracteres definida en <SEND_BUFFER_MAX_SIZE>
 * > Retorno: ninguno
 */
void uartSendString(uint8_t * pstring){
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	// pstring se envia sin tamano debe recorrerse incrementando la direccion por aritmetica de pointers
	uint16_t index = 0; // indice para recorrer array pstring, admite hasta 2^16 caracteres
 80013cc:	2300      	movs	r3, #0
 80013ce:	81fb      	strh	r3, [r7, #14]
	while(1){
		if( (*(pstring+index) == '\0') || (index > SEND_BUFFER_MAX_SIZE) ) break; // al encontrarse el NULL salir de funcion
 80013d0:	89fb      	ldrh	r3, [r7, #14]
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	4413      	add	r3, r2
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d00e      	beq.n	80013fa <uartSendString+0x36>
 80013dc:	89fb      	ldrh	r3, [r7, #14]
 80013de:	2bff      	cmp	r3, #255	; 0xff
 80013e0:	d80b      	bhi.n	80013fa <uartSendString+0x36>
		HAL_UART_Transmit(&uartHandle, (pstring+index), 1, 100); // enviar caracter x caracter
 80013e2:	89fb      	ldrh	r3, [r7, #14]
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	18d1      	adds	r1, r2, r3
 80013e8:	2364      	movs	r3, #100	; 0x64
 80013ea:	2201      	movs	r2, #1
 80013ec:	4805      	ldr	r0, [pc, #20]	; (8001404 <uartSendString+0x40>)
 80013ee:	f002 fa99 	bl	8003924 <HAL_UART_Transmit>
		index++;
 80013f2:	89fb      	ldrh	r3, [r7, #14]
 80013f4:	3301      	adds	r3, #1
 80013f6:	81fb      	strh	r3, [r7, #14]
		if( (*(pstring+index) == '\0') || (index > SEND_BUFFER_MAX_SIZE) ) break; // al encontrarse el NULL salir de funcion
 80013f8:	e7ea      	b.n	80013d0 <uartSendString+0xc>
	}
}
 80013fa:	bf00      	nop
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	2000022c 	.word	0x2000022c

08001408 <uartReceiveString>:
 * 				  y detiene la coleccion de caracteres al encontrarse un '\r' (se ha presionado ENTER)
 * > Parametro: <pstring> puntero del tipo uint8_t / <size> tamano del buffer de recepcion
 * > 			El buffer de recepcion tendra una cantidad maxima de caracteres definida en <RECEIVE_BUFFER_MAX_SIZE>
 * > Retorno: ninguno
 */
void uartReceiveString(uint8_t * pstring, uint16_t size){
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	460b      	mov	r3, r1
 8001412:	807b      	strh	r3, [r7, #2]
	if(size > RECEIVE_BUFFER_MAX_SIZE) size = RECEIVE_BUFFER_MAX_SIZE;
 8001414:	887b      	ldrh	r3, [r7, #2]
 8001416:	2bff      	cmp	r3, #255	; 0xff
 8001418:	d901      	bls.n	800141e <uartReceiveString+0x16>
 800141a:	23ff      	movs	r3, #255	; 0xff
 800141c:	807b      	strh	r3, [r7, #2]
	if(size < 1 ) size = 1;
 800141e:	887b      	ldrh	r3, [r7, #2]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d101      	bne.n	8001428 <uartReceiveString+0x20>
 8001424:	2301      	movs	r3, #1
 8001426:	807b      	strh	r3, [r7, #2]

	uint16_t index = 0;
 8001428:	2300      	movs	r3, #0
 800142a:	81fb      	strh	r3, [r7, #14]
	while(1){
		HAL_UART_Receive(&uartHandle, (pstring+index), 1, HAL_MAX_DELAY); // recibir y esperar cada caracter hasta <size>
 800142c:	89fb      	ldrh	r3, [r7, #14]
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	18d1      	adds	r1, r2, r3
 8001432:	f04f 33ff 	mov.w	r3, #4294967295
 8001436:	2201      	movs	r2, #1
 8001438:	4810      	ldr	r0, [pc, #64]	; (800147c <uartReceiveString+0x74>)
 800143a:	f002 faf6 	bl	8003a2a <HAL_UART_Receive>
		if( (index == size) ||  ( (*(pstring+index)) == '\r') ) break; // finalizar while al alzancar la cant de caracteres indicada
 800143e:	89fa      	ldrh	r2, [r7, #14]
 8001440:	887b      	ldrh	r3, [r7, #2]
 8001442:	429a      	cmp	r2, r3
 8001444:	d011      	beq.n	800146a <uartReceiveString+0x62>
 8001446:	89fb      	ldrh	r3, [r7, #14]
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	4413      	add	r3, r2
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	2b0d      	cmp	r3, #13
 8001450:	d00b      	beq.n	800146a <uartReceiveString+0x62>
		HAL_UART_Transmit(&uartHandle, (pstring+index), 1, 10);
 8001452:	89fb      	ldrh	r3, [r7, #14]
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	18d1      	adds	r1, r2, r3
 8001458:	230a      	movs	r3, #10
 800145a:	2201      	movs	r2, #1
 800145c:	4807      	ldr	r0, [pc, #28]	; (800147c <uartReceiveString+0x74>)
 800145e:	f002 fa61 	bl	8003924 <HAL_UART_Transmit>
		index++;
 8001462:	89fb      	ldrh	r3, [r7, #14]
 8001464:	3301      	adds	r3, #1
 8001466:	81fb      	strh	r3, [r7, #14]
		HAL_UART_Receive(&uartHandle, (pstring+index), 1, HAL_MAX_DELAY); // recibir y esperar cada caracter hasta <size>
 8001468:	e7e0      	b.n	800142c <uartReceiveString+0x24>
	}

	*(pstring+index) = '\0'; // agregar el NULL al final para conformar el string
 800146a:	89fb      	ldrh	r3, [r7, #14]
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	4413      	add	r3, r2
 8001470:	2200      	movs	r2, #0
 8001472:	701a      	strb	r2, [r3, #0]
}
 8001474:	bf00      	nop
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	2000022c 	.word	0x2000022c

08001480 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001484:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <HAL_Init+0x28>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a07      	ldr	r2, [pc, #28]	; (80014a8 <HAL_Init+0x28>)
 800148a:	f043 0310 	orr.w	r3, r3, #16
 800148e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001490:	2003      	movs	r0, #3
 8001492:	f000 f947 	bl	8001724 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001496:	2000      	movs	r0, #0
 8001498:	f000 f808 	bl	80014ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800149c:	f7fe ff28 	bl	80002f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40022000 	.word	0x40022000

080014ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014b4:	4b12      	ldr	r3, [pc, #72]	; (8001500 <HAL_InitTick+0x54>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	4b12      	ldr	r3, [pc, #72]	; (8001504 <HAL_InitTick+0x58>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	4619      	mov	r1, r3
 80014be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ca:	4618      	mov	r0, r3
 80014cc:	f000 f95f 	bl	800178e <HAL_SYSTICK_Config>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e00e      	b.n	80014f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2b0f      	cmp	r3, #15
 80014de:	d80a      	bhi.n	80014f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014e0:	2200      	movs	r2, #0
 80014e2:	6879      	ldr	r1, [r7, #4]
 80014e4:	f04f 30ff 	mov.w	r0, #4294967295
 80014e8:	f000 f927 	bl	800173a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014ec:	4a06      	ldr	r2, [pc, #24]	; (8001508 <HAL_InitTick+0x5c>)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014f2:	2300      	movs	r3, #0
 80014f4:	e000      	b.n	80014f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20000000 	.word	0x20000000
 8001504:	200000dc 	.word	0x200000dc
 8001508:	200000d8 	.word	0x200000d8

0800150c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001510:	4b05      	ldr	r3, [pc, #20]	; (8001528 <HAL_IncTick+0x1c>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	461a      	mov	r2, r3
 8001516:	4b05      	ldr	r3, [pc, #20]	; (800152c <HAL_IncTick+0x20>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4413      	add	r3, r2
 800151c:	4a03      	ldr	r2, [pc, #12]	; (800152c <HAL_IncTick+0x20>)
 800151e:	6013      	str	r3, [r2, #0]
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	bc80      	pop	{r7}
 8001526:	4770      	bx	lr
 8001528:	200000dc 	.word	0x200000dc
 800152c:	20000274 	.word	0x20000274

08001530 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  return uwTick;
 8001534:	4b02      	ldr	r3, [pc, #8]	; (8001540 <HAL_GetTick+0x10>)
 8001536:	681b      	ldr	r3, [r3, #0]
}
 8001538:	4618      	mov	r0, r3
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr
 8001540:	20000274 	.word	0x20000274

08001544 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800154c:	f7ff fff0 	bl	8001530 <HAL_GetTick>
 8001550:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800155c:	d005      	beq.n	800156a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800155e:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <HAL_Delay+0x44>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	461a      	mov	r2, r3
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	4413      	add	r3, r2
 8001568:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800156a:	bf00      	nop
 800156c:	f7ff ffe0 	bl	8001530 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	68fa      	ldr	r2, [r7, #12]
 8001578:	429a      	cmp	r2, r3
 800157a:	d8f7      	bhi.n	800156c <HAL_Delay+0x28>
  {
  }
}
 800157c:	bf00      	nop
 800157e:	bf00      	nop
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	200000dc 	.word	0x200000dc

0800158c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800159c:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <__NVIC_SetPriorityGrouping+0x44>)
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015a2:	68ba      	ldr	r2, [r7, #8]
 80015a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015a8:	4013      	ands	r3, r2
 80015aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015be:	4a04      	ldr	r2, [pc, #16]	; (80015d0 <__NVIC_SetPriorityGrouping+0x44>)
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	60d3      	str	r3, [r2, #12]
}
 80015c4:	bf00      	nop
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bc80      	pop	{r7}
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	e000ed00 	.word	0xe000ed00

080015d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d8:	4b04      	ldr	r3, [pc, #16]	; (80015ec <__NVIC_GetPriorityGrouping+0x18>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	0a1b      	lsrs	r3, r3, #8
 80015de:	f003 0307 	and.w	r3, r3, #7
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bc80      	pop	{r7}
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	db0b      	blt.n	800161a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	f003 021f 	and.w	r2, r3, #31
 8001608:	4906      	ldr	r1, [pc, #24]	; (8001624 <__NVIC_EnableIRQ+0x34>)
 800160a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160e:	095b      	lsrs	r3, r3, #5
 8001610:	2001      	movs	r0, #1
 8001612:	fa00 f202 	lsl.w	r2, r0, r2
 8001616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr
 8001624:	e000e100 	.word	0xe000e100

08001628 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	6039      	str	r1, [r7, #0]
 8001632:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001638:	2b00      	cmp	r3, #0
 800163a:	db0a      	blt.n	8001652 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	b2da      	uxtb	r2, r3
 8001640:	490c      	ldr	r1, [pc, #48]	; (8001674 <__NVIC_SetPriority+0x4c>)
 8001642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001646:	0112      	lsls	r2, r2, #4
 8001648:	b2d2      	uxtb	r2, r2
 800164a:	440b      	add	r3, r1
 800164c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001650:	e00a      	b.n	8001668 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	b2da      	uxtb	r2, r3
 8001656:	4908      	ldr	r1, [pc, #32]	; (8001678 <__NVIC_SetPriority+0x50>)
 8001658:	79fb      	ldrb	r3, [r7, #7]
 800165a:	f003 030f 	and.w	r3, r3, #15
 800165e:	3b04      	subs	r3, #4
 8001660:	0112      	lsls	r2, r2, #4
 8001662:	b2d2      	uxtb	r2, r2
 8001664:	440b      	add	r3, r1
 8001666:	761a      	strb	r2, [r3, #24]
}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	bc80      	pop	{r7}
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	e000e100 	.word	0xe000e100
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800167c:	b480      	push	{r7}
 800167e:	b089      	sub	sp, #36	; 0x24
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	f1c3 0307 	rsb	r3, r3, #7
 8001696:	2b04      	cmp	r3, #4
 8001698:	bf28      	it	cs
 800169a:	2304      	movcs	r3, #4
 800169c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	3304      	adds	r3, #4
 80016a2:	2b06      	cmp	r3, #6
 80016a4:	d902      	bls.n	80016ac <NVIC_EncodePriority+0x30>
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	3b03      	subs	r3, #3
 80016aa:	e000      	b.n	80016ae <NVIC_EncodePriority+0x32>
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b0:	f04f 32ff 	mov.w	r2, #4294967295
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43da      	mvns	r2, r3
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	401a      	ands	r2, r3
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c4:	f04f 31ff 	mov.w	r1, #4294967295
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	fa01 f303 	lsl.w	r3, r1, r3
 80016ce:	43d9      	mvns	r1, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d4:	4313      	orrs	r3, r2
         );
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3724      	adds	r7, #36	; 0x24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr

080016e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016f0:	d301      	bcc.n	80016f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016f2:	2301      	movs	r3, #1
 80016f4:	e00f      	b.n	8001716 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016f6:	4a0a      	ldr	r2, [pc, #40]	; (8001720 <SysTick_Config+0x40>)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3b01      	subs	r3, #1
 80016fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016fe:	210f      	movs	r1, #15
 8001700:	f04f 30ff 	mov.w	r0, #4294967295
 8001704:	f7ff ff90 	bl	8001628 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001708:	4b05      	ldr	r3, [pc, #20]	; (8001720 <SysTick_Config+0x40>)
 800170a:	2200      	movs	r2, #0
 800170c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800170e:	4b04      	ldr	r3, [pc, #16]	; (8001720 <SysTick_Config+0x40>)
 8001710:	2207      	movs	r2, #7
 8001712:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	e000e010 	.word	0xe000e010

08001724 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f7ff ff2d 	bl	800158c <__NVIC_SetPriorityGrouping>
}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800173a:	b580      	push	{r7, lr}
 800173c:	b086      	sub	sp, #24
 800173e:	af00      	add	r7, sp, #0
 8001740:	4603      	mov	r3, r0
 8001742:	60b9      	str	r1, [r7, #8]
 8001744:	607a      	str	r2, [r7, #4]
 8001746:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800174c:	f7ff ff42 	bl	80015d4 <__NVIC_GetPriorityGrouping>
 8001750:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	68b9      	ldr	r1, [r7, #8]
 8001756:	6978      	ldr	r0, [r7, #20]
 8001758:	f7ff ff90 	bl	800167c <NVIC_EncodePriority>
 800175c:	4602      	mov	r2, r0
 800175e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001762:	4611      	mov	r1, r2
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff ff5f 	bl	8001628 <__NVIC_SetPriority>
}
 800176a:	bf00      	nop
 800176c:	3718      	adds	r7, #24
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	4603      	mov	r3, r0
 800177a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800177c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff ff35 	bl	80015f0 <__NVIC_EnableIRQ>
}
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff ffa2 	bl	80016e0 <SysTick_Config>
 800179c:	4603      	mov	r3, r0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
	...

080017a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b08b      	sub	sp, #44	; 0x2c
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017b2:	2300      	movs	r3, #0
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017b6:	2300      	movs	r3, #0
 80017b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ba:	e169      	b.n	8001a90 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017bc:	2201      	movs	r2, #1
 80017be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	69fa      	ldr	r2, [r7, #28]
 80017cc:	4013      	ands	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	f040 8158 	bne.w	8001a8a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	4a9a      	ldr	r2, [pc, #616]	; (8001a48 <HAL_GPIO_Init+0x2a0>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d05e      	beq.n	80018a2 <HAL_GPIO_Init+0xfa>
 80017e4:	4a98      	ldr	r2, [pc, #608]	; (8001a48 <HAL_GPIO_Init+0x2a0>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d875      	bhi.n	80018d6 <HAL_GPIO_Init+0x12e>
 80017ea:	4a98      	ldr	r2, [pc, #608]	; (8001a4c <HAL_GPIO_Init+0x2a4>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d058      	beq.n	80018a2 <HAL_GPIO_Init+0xfa>
 80017f0:	4a96      	ldr	r2, [pc, #600]	; (8001a4c <HAL_GPIO_Init+0x2a4>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d86f      	bhi.n	80018d6 <HAL_GPIO_Init+0x12e>
 80017f6:	4a96      	ldr	r2, [pc, #600]	; (8001a50 <HAL_GPIO_Init+0x2a8>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d052      	beq.n	80018a2 <HAL_GPIO_Init+0xfa>
 80017fc:	4a94      	ldr	r2, [pc, #592]	; (8001a50 <HAL_GPIO_Init+0x2a8>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d869      	bhi.n	80018d6 <HAL_GPIO_Init+0x12e>
 8001802:	4a94      	ldr	r2, [pc, #592]	; (8001a54 <HAL_GPIO_Init+0x2ac>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d04c      	beq.n	80018a2 <HAL_GPIO_Init+0xfa>
 8001808:	4a92      	ldr	r2, [pc, #584]	; (8001a54 <HAL_GPIO_Init+0x2ac>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d863      	bhi.n	80018d6 <HAL_GPIO_Init+0x12e>
 800180e:	4a92      	ldr	r2, [pc, #584]	; (8001a58 <HAL_GPIO_Init+0x2b0>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d046      	beq.n	80018a2 <HAL_GPIO_Init+0xfa>
 8001814:	4a90      	ldr	r2, [pc, #576]	; (8001a58 <HAL_GPIO_Init+0x2b0>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d85d      	bhi.n	80018d6 <HAL_GPIO_Init+0x12e>
 800181a:	2b12      	cmp	r3, #18
 800181c:	d82a      	bhi.n	8001874 <HAL_GPIO_Init+0xcc>
 800181e:	2b12      	cmp	r3, #18
 8001820:	d859      	bhi.n	80018d6 <HAL_GPIO_Init+0x12e>
 8001822:	a201      	add	r2, pc, #4	; (adr r2, 8001828 <HAL_GPIO_Init+0x80>)
 8001824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001828:	080018a3 	.word	0x080018a3
 800182c:	0800187d 	.word	0x0800187d
 8001830:	0800188f 	.word	0x0800188f
 8001834:	080018d1 	.word	0x080018d1
 8001838:	080018d7 	.word	0x080018d7
 800183c:	080018d7 	.word	0x080018d7
 8001840:	080018d7 	.word	0x080018d7
 8001844:	080018d7 	.word	0x080018d7
 8001848:	080018d7 	.word	0x080018d7
 800184c:	080018d7 	.word	0x080018d7
 8001850:	080018d7 	.word	0x080018d7
 8001854:	080018d7 	.word	0x080018d7
 8001858:	080018d7 	.word	0x080018d7
 800185c:	080018d7 	.word	0x080018d7
 8001860:	080018d7 	.word	0x080018d7
 8001864:	080018d7 	.word	0x080018d7
 8001868:	080018d7 	.word	0x080018d7
 800186c:	08001885 	.word	0x08001885
 8001870:	08001899 	.word	0x08001899
 8001874:	4a79      	ldr	r2, [pc, #484]	; (8001a5c <HAL_GPIO_Init+0x2b4>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d013      	beq.n	80018a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800187a:	e02c      	b.n	80018d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	623b      	str	r3, [r7, #32]
          break;
 8001882:	e029      	b.n	80018d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	3304      	adds	r3, #4
 800188a:	623b      	str	r3, [r7, #32]
          break;
 800188c:	e024      	b.n	80018d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	3308      	adds	r3, #8
 8001894:	623b      	str	r3, [r7, #32]
          break;
 8001896:	e01f      	b.n	80018d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	330c      	adds	r3, #12
 800189e:	623b      	str	r3, [r7, #32]
          break;
 80018a0:	e01a      	b.n	80018d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d102      	bne.n	80018b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018aa:	2304      	movs	r3, #4
 80018ac:	623b      	str	r3, [r7, #32]
          break;
 80018ae:	e013      	b.n	80018d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d105      	bne.n	80018c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018b8:	2308      	movs	r3, #8
 80018ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	69fa      	ldr	r2, [r7, #28]
 80018c0:	611a      	str	r2, [r3, #16]
          break;
 80018c2:	e009      	b.n	80018d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018c4:	2308      	movs	r3, #8
 80018c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	69fa      	ldr	r2, [r7, #28]
 80018cc:	615a      	str	r2, [r3, #20]
          break;
 80018ce:	e003      	b.n	80018d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018d0:	2300      	movs	r3, #0
 80018d2:	623b      	str	r3, [r7, #32]
          break;
 80018d4:	e000      	b.n	80018d8 <HAL_GPIO_Init+0x130>
          break;
 80018d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	2bff      	cmp	r3, #255	; 0xff
 80018dc:	d801      	bhi.n	80018e2 <HAL_GPIO_Init+0x13a>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	e001      	b.n	80018e6 <HAL_GPIO_Init+0x13e>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	3304      	adds	r3, #4
 80018e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	2bff      	cmp	r3, #255	; 0xff
 80018ec:	d802      	bhi.n	80018f4 <HAL_GPIO_Init+0x14c>
 80018ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	e002      	b.n	80018fa <HAL_GPIO_Init+0x152>
 80018f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f6:	3b08      	subs	r3, #8
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	210f      	movs	r1, #15
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	fa01 f303 	lsl.w	r3, r1, r3
 8001908:	43db      	mvns	r3, r3
 800190a:	401a      	ands	r2, r3
 800190c:	6a39      	ldr	r1, [r7, #32]
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	fa01 f303 	lsl.w	r3, r1, r3
 8001914:	431a      	orrs	r2, r3
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001922:	2b00      	cmp	r3, #0
 8001924:	f000 80b1 	beq.w	8001a8a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001928:	4b4d      	ldr	r3, [pc, #308]	; (8001a60 <HAL_GPIO_Init+0x2b8>)
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	4a4c      	ldr	r2, [pc, #304]	; (8001a60 <HAL_GPIO_Init+0x2b8>)
 800192e:	f043 0301 	orr.w	r3, r3, #1
 8001932:	6193      	str	r3, [r2, #24]
 8001934:	4b4a      	ldr	r3, [pc, #296]	; (8001a60 <HAL_GPIO_Init+0x2b8>)
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	60bb      	str	r3, [r7, #8]
 800193e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001940:	4a48      	ldr	r2, [pc, #288]	; (8001a64 <HAL_GPIO_Init+0x2bc>)
 8001942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001944:	089b      	lsrs	r3, r3, #2
 8001946:	3302      	adds	r3, #2
 8001948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800194c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	f003 0303 	and.w	r3, r3, #3
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	220f      	movs	r2, #15
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	4013      	ands	r3, r2
 8001962:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4a40      	ldr	r2, [pc, #256]	; (8001a68 <HAL_GPIO_Init+0x2c0>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d013      	beq.n	8001994 <HAL_GPIO_Init+0x1ec>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a3f      	ldr	r2, [pc, #252]	; (8001a6c <HAL_GPIO_Init+0x2c4>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d00d      	beq.n	8001990 <HAL_GPIO_Init+0x1e8>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a3e      	ldr	r2, [pc, #248]	; (8001a70 <HAL_GPIO_Init+0x2c8>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d007      	beq.n	800198c <HAL_GPIO_Init+0x1e4>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a3d      	ldr	r2, [pc, #244]	; (8001a74 <HAL_GPIO_Init+0x2cc>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d101      	bne.n	8001988 <HAL_GPIO_Init+0x1e0>
 8001984:	2303      	movs	r3, #3
 8001986:	e006      	b.n	8001996 <HAL_GPIO_Init+0x1ee>
 8001988:	2304      	movs	r3, #4
 800198a:	e004      	b.n	8001996 <HAL_GPIO_Init+0x1ee>
 800198c:	2302      	movs	r3, #2
 800198e:	e002      	b.n	8001996 <HAL_GPIO_Init+0x1ee>
 8001990:	2301      	movs	r3, #1
 8001992:	e000      	b.n	8001996 <HAL_GPIO_Init+0x1ee>
 8001994:	2300      	movs	r3, #0
 8001996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001998:	f002 0203 	and.w	r2, r2, #3
 800199c:	0092      	lsls	r2, r2, #2
 800199e:	4093      	lsls	r3, r2
 80019a0:	68fa      	ldr	r2, [r7, #12]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019a6:	492f      	ldr	r1, [pc, #188]	; (8001a64 <HAL_GPIO_Init+0x2bc>)
 80019a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019aa:	089b      	lsrs	r3, r3, #2
 80019ac:	3302      	adds	r3, #2
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d006      	beq.n	80019ce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019c0:	4b2d      	ldr	r3, [pc, #180]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	492c      	ldr	r1, [pc, #176]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	608b      	str	r3, [r1, #8]
 80019cc:	e006      	b.n	80019dc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019ce:	4b2a      	ldr	r3, [pc, #168]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 80019d0:	689a      	ldr	r2, [r3, #8]
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	43db      	mvns	r3, r3
 80019d6:	4928      	ldr	r1, [pc, #160]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 80019d8:	4013      	ands	r3, r2
 80019da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d006      	beq.n	80019f6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019e8:	4b23      	ldr	r3, [pc, #140]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 80019ea:	68da      	ldr	r2, [r3, #12]
 80019ec:	4922      	ldr	r1, [pc, #136]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	60cb      	str	r3, [r1, #12]
 80019f4:	e006      	b.n	8001a04 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019f6:	4b20      	ldr	r3, [pc, #128]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 80019f8:	68da      	ldr	r2, [r3, #12]
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	43db      	mvns	r3, r3
 80019fe:	491e      	ldr	r1, [pc, #120]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 8001a00:	4013      	ands	r3, r2
 8001a02:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d006      	beq.n	8001a1e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a10:	4b19      	ldr	r3, [pc, #100]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 8001a12:	685a      	ldr	r2, [r3, #4]
 8001a14:	4918      	ldr	r1, [pc, #96]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	604b      	str	r3, [r1, #4]
 8001a1c:	e006      	b.n	8001a2c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a1e:	4b16      	ldr	r3, [pc, #88]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 8001a20:	685a      	ldr	r2, [r3, #4]
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	43db      	mvns	r3, r3
 8001a26:	4914      	ldr	r1, [pc, #80]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 8001a28:	4013      	ands	r3, r2
 8001a2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d021      	beq.n	8001a7c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a38:	4b0f      	ldr	r3, [pc, #60]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	490e      	ldr	r1, [pc, #56]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	600b      	str	r3, [r1, #0]
 8001a44:	e021      	b.n	8001a8a <HAL_GPIO_Init+0x2e2>
 8001a46:	bf00      	nop
 8001a48:	10320000 	.word	0x10320000
 8001a4c:	10310000 	.word	0x10310000
 8001a50:	10220000 	.word	0x10220000
 8001a54:	10210000 	.word	0x10210000
 8001a58:	10120000 	.word	0x10120000
 8001a5c:	10110000 	.word	0x10110000
 8001a60:	40021000 	.word	0x40021000
 8001a64:	40010000 	.word	0x40010000
 8001a68:	40010800 	.word	0x40010800
 8001a6c:	40010c00 	.word	0x40010c00
 8001a70:	40011000 	.word	0x40011000
 8001a74:	40011400 	.word	0x40011400
 8001a78:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a7c:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <HAL_GPIO_Init+0x304>)
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	43db      	mvns	r3, r3
 8001a84:	4909      	ldr	r1, [pc, #36]	; (8001aac <HAL_GPIO_Init+0x304>)
 8001a86:	4013      	ands	r3, r2
 8001a88:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a96:	fa22 f303 	lsr.w	r3, r2, r3
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f47f ae8e 	bne.w	80017bc <HAL_GPIO_Init+0x14>
  }
}
 8001aa0:	bf00      	nop
 8001aa2:	bf00      	nop
 8001aa4:	372c      	adds	r7, #44	; 0x2c
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr
 8001aac:	40010400 	.word	0x40010400

08001ab0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	460b      	mov	r3, r1
 8001aba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	887b      	ldrh	r3, [r7, #2]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d002      	beq.n	8001ace <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	73fb      	strb	r3, [r7, #15]
 8001acc:	e001      	b.n	8001ad2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bc80      	pop	{r7}
 8001adc:	4770      	bx	lr

08001ade <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	b083      	sub	sp, #12
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	807b      	strh	r3, [r7, #2]
 8001aea:	4613      	mov	r3, r2
 8001aec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001aee:	787b      	ldrb	r3, [r7, #1]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d003      	beq.n	8001afc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001af4:	887a      	ldrh	r2, [r7, #2]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001afa:	e003      	b.n	8001b04 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001afc:	887b      	ldrh	r3, [r7, #2]
 8001afe:	041a      	lsls	r2, r3, #16
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	611a      	str	r2, [r3, #16]
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr

08001b0e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	b085      	sub	sp, #20
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
 8001b16:	460b      	mov	r3, r1
 8001b18:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b20:	887a      	ldrh	r2, [r7, #2]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	4013      	ands	r3, r2
 8001b26:	041a      	lsls	r2, r3, #16
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	43d9      	mvns	r1, r3
 8001b2c:	887b      	ldrh	r3, [r7, #2]
 8001b2e:	400b      	ands	r3, r1
 8001b30:	431a      	orrs	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	611a      	str	r2, [r3, #16]
}
 8001b36:	bf00      	nop
 8001b38:	3714      	adds	r7, #20
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr

08001b40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b4a:	4b08      	ldr	r3, [pc, #32]	; (8001b6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b4c:	695a      	ldr	r2, [r3, #20]
 8001b4e:	88fb      	ldrh	r3, [r7, #6]
 8001b50:	4013      	ands	r3, r2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d006      	beq.n	8001b64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b56:	4a05      	ldr	r2, [pc, #20]	; (8001b6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b58:	88fb      	ldrh	r3, [r7, #6]
 8001b5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b5c:	88fb      	ldrh	r3, [r7, #6]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f000 f806 	bl	8001b70 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b64:	bf00      	nop
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40010400 	.word	0x40010400

08001b70 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr

08001b84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e12b      	b.n	8001dee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d106      	bne.n	8001bb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7fe fbd2 	bl	8000354 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2224      	movs	r2, #36	; 0x24
 8001bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f022 0201 	bic.w	r2, r2, #1
 8001bc6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001bd6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001be6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001be8:	f001 f832 	bl	8002c50 <HAL_RCC_GetPCLK1Freq>
 8001bec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	4a81      	ldr	r2, [pc, #516]	; (8001df8 <HAL_I2C_Init+0x274>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d807      	bhi.n	8001c08 <HAL_I2C_Init+0x84>
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	4a80      	ldr	r2, [pc, #512]	; (8001dfc <HAL_I2C_Init+0x278>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	bf94      	ite	ls
 8001c00:	2301      	movls	r3, #1
 8001c02:	2300      	movhi	r3, #0
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	e006      	b.n	8001c16 <HAL_I2C_Init+0x92>
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	4a7d      	ldr	r2, [pc, #500]	; (8001e00 <HAL_I2C_Init+0x27c>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	bf94      	ite	ls
 8001c10:	2301      	movls	r3, #1
 8001c12:	2300      	movhi	r3, #0
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e0e7      	b.n	8001dee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	4a78      	ldr	r2, [pc, #480]	; (8001e04 <HAL_I2C_Init+0x280>)
 8001c22:	fba2 2303 	umull	r2, r3, r2, r3
 8001c26:	0c9b      	lsrs	r3, r3, #18
 8001c28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	68ba      	ldr	r2, [r7, #8]
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6a1b      	ldr	r3, [r3, #32]
 8001c44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	4a6a      	ldr	r2, [pc, #424]	; (8001df8 <HAL_I2C_Init+0x274>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d802      	bhi.n	8001c58 <HAL_I2C_Init+0xd4>
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	3301      	adds	r3, #1
 8001c56:	e009      	b.n	8001c6c <HAL_I2C_Init+0xe8>
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c5e:	fb02 f303 	mul.w	r3, r2, r3
 8001c62:	4a69      	ldr	r2, [pc, #420]	; (8001e08 <HAL_I2C_Init+0x284>)
 8001c64:	fba2 2303 	umull	r2, r3, r2, r3
 8001c68:	099b      	lsrs	r3, r3, #6
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	6812      	ldr	r2, [r2, #0]
 8001c70:	430b      	orrs	r3, r1
 8001c72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c7e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	495c      	ldr	r1, [pc, #368]	; (8001df8 <HAL_I2C_Init+0x274>)
 8001c88:	428b      	cmp	r3, r1
 8001c8a:	d819      	bhi.n	8001cc0 <HAL_I2C_Init+0x13c>
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	1e59      	subs	r1, r3, #1
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c9a:	1c59      	adds	r1, r3, #1
 8001c9c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001ca0:	400b      	ands	r3, r1
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d00a      	beq.n	8001cbc <HAL_I2C_Init+0x138>
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	1e59      	subs	r1, r3, #1
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cba:	e051      	b.n	8001d60 <HAL_I2C_Init+0x1dc>
 8001cbc:	2304      	movs	r3, #4
 8001cbe:	e04f      	b.n	8001d60 <HAL_I2C_Init+0x1dc>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d111      	bne.n	8001cec <HAL_I2C_Init+0x168>
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	1e58      	subs	r0, r3, #1
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6859      	ldr	r1, [r3, #4]
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	440b      	add	r3, r1
 8001cd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cda:	3301      	adds	r3, #1
 8001cdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	bf0c      	ite	eq
 8001ce4:	2301      	moveq	r3, #1
 8001ce6:	2300      	movne	r3, #0
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	e012      	b.n	8001d12 <HAL_I2C_Init+0x18e>
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	1e58      	subs	r0, r3, #1
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6859      	ldr	r1, [r3, #4]
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	440b      	add	r3, r1
 8001cfa:	0099      	lsls	r1, r3, #2
 8001cfc:	440b      	add	r3, r1
 8001cfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d02:	3301      	adds	r3, #1
 8001d04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	bf0c      	ite	eq
 8001d0c:	2301      	moveq	r3, #1
 8001d0e:	2300      	movne	r3, #0
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <HAL_I2C_Init+0x196>
 8001d16:	2301      	movs	r3, #1
 8001d18:	e022      	b.n	8001d60 <HAL_I2C_Init+0x1dc>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d10e      	bne.n	8001d40 <HAL_I2C_Init+0x1bc>
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	1e58      	subs	r0, r3, #1
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6859      	ldr	r1, [r3, #4]
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	440b      	add	r3, r1
 8001d30:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d34:	3301      	adds	r3, #1
 8001d36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d3e:	e00f      	b.n	8001d60 <HAL_I2C_Init+0x1dc>
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	1e58      	subs	r0, r3, #1
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6859      	ldr	r1, [r3, #4]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	440b      	add	r3, r1
 8001d4e:	0099      	lsls	r1, r3, #2
 8001d50:	440b      	add	r3, r1
 8001d52:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d56:	3301      	adds	r3, #1
 8001d58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d60:	6879      	ldr	r1, [r7, #4]
 8001d62:	6809      	ldr	r1, [r1, #0]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	69da      	ldr	r2, [r3, #28]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a1b      	ldr	r3, [r3, #32]
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	430a      	orrs	r2, r1
 8001d82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	6911      	ldr	r1, [r2, #16]
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	68d2      	ldr	r2, [r2, #12]
 8001d9a:	4311      	orrs	r1, r2
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	6812      	ldr	r2, [r2, #0]
 8001da0:	430b      	orrs	r3, r1
 8001da2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	695a      	ldr	r2, [r3, #20]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	431a      	orrs	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f042 0201 	orr.w	r2, r2, #1
 8001dce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2220      	movs	r2, #32
 8001dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	000186a0 	.word	0x000186a0
 8001dfc:	001e847f 	.word	0x001e847f
 8001e00:	003d08ff 	.word	0x003d08ff
 8001e04:	431bde83 	.word	0x431bde83
 8001e08:	10624dd3 	.word	0x10624dd3

08001e0c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b088      	sub	sp, #32
 8001e10:	af02      	add	r7, sp, #8
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	607a      	str	r2, [r7, #4]
 8001e16:	461a      	mov	r2, r3
 8001e18:	460b      	mov	r3, r1
 8001e1a:	817b      	strh	r3, [r7, #10]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e20:	f7ff fb86 	bl	8001530 <HAL_GetTick>
 8001e24:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b20      	cmp	r3, #32
 8001e30:	f040 80e0 	bne.w	8001ff4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	2319      	movs	r3, #25
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	4970      	ldr	r1, [pc, #448]	; (8002000 <HAL_I2C_Master_Transmit+0x1f4>)
 8001e3e:	68f8      	ldr	r0, [r7, #12]
 8001e40:	f000 f964 	bl	800210c <I2C_WaitOnFlagUntilTimeout>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	e0d3      	b.n	8001ff6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d101      	bne.n	8001e5c <HAL_I2C_Master_Transmit+0x50>
 8001e58:	2302      	movs	r3, #2
 8001e5a:	e0cc      	b.n	8001ff6 <HAL_I2C_Master_Transmit+0x1ea>
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d007      	beq.n	8001e82 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f042 0201 	orr.w	r2, r2, #1
 8001e80:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e90:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2221      	movs	r2, #33	; 0x21
 8001e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2210      	movs	r2, #16
 8001e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	893a      	ldrh	r2, [r7, #8]
 8001eb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	4a50      	ldr	r2, [pc, #320]	; (8002004 <HAL_I2C_Master_Transmit+0x1f8>)
 8001ec2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001ec4:	8979      	ldrh	r1, [r7, #10]
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	6a3a      	ldr	r2, [r7, #32]
 8001eca:	68f8      	ldr	r0, [r7, #12]
 8001ecc:	f000 f89c 	bl	8002008 <I2C_MasterRequestWrite>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e08d      	b.n	8001ff6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001eda:	2300      	movs	r3, #0
 8001edc:	613b      	str	r3, [r7, #16]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	613b      	str	r3, [r7, #16]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	613b      	str	r3, [r7, #16]
 8001eee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001ef0:	e066      	b.n	8001fc0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ef2:	697a      	ldr	r2, [r7, #20]
 8001ef4:	6a39      	ldr	r1, [r7, #32]
 8001ef6:	68f8      	ldr	r0, [r7, #12]
 8001ef8:	f000 fa22 	bl	8002340 <I2C_WaitOnTXEFlagUntilTimeout>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d00d      	beq.n	8001f1e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f06:	2b04      	cmp	r3, #4
 8001f08:	d107      	bne.n	8001f1a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e06b      	b.n	8001ff6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f22:	781a      	ldrb	r2, [r3, #0]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2e:	1c5a      	adds	r2, r3, #1
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f46:	3b01      	subs	r3, #1
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	f003 0304 	and.w	r3, r3, #4
 8001f58:	2b04      	cmp	r3, #4
 8001f5a:	d11b      	bne.n	8001f94 <HAL_I2C_Master_Transmit+0x188>
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d017      	beq.n	8001f94 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f68:	781a      	ldrb	r2, [r3, #0]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f74:	1c5a      	adds	r2, r3, #1
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	3b01      	subs	r3, #1
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f8c:	3b01      	subs	r3, #1
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f94:	697a      	ldr	r2, [r7, #20]
 8001f96:	6a39      	ldr	r1, [r7, #32]
 8001f98:	68f8      	ldr	r0, [r7, #12]
 8001f9a:	f000 fa19 	bl	80023d0 <I2C_WaitOnBTFFlagUntilTimeout>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d00d      	beq.n	8001fc0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa8:	2b04      	cmp	r3, #4
 8001faa:	d107      	bne.n	8001fbc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e01a      	b.n	8001ff6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d194      	bne.n	8001ef2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2220      	movs	r2, #32
 8001fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	e000      	b.n	8001ff6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001ff4:	2302      	movs	r3, #2
  }
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3718      	adds	r7, #24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	00100002 	.word	0x00100002
 8002004:	ffff0000 	.word	0xffff0000

08002008 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b088      	sub	sp, #32
 800200c:	af02      	add	r7, sp, #8
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	607a      	str	r2, [r7, #4]
 8002012:	603b      	str	r3, [r7, #0]
 8002014:	460b      	mov	r3, r1
 8002016:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	2b08      	cmp	r3, #8
 8002022:	d006      	beq.n	8002032 <I2C_MasterRequestWrite+0x2a>
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d003      	beq.n	8002032 <I2C_MasterRequestWrite+0x2a>
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002030:	d108      	bne.n	8002044 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	e00b      	b.n	800205c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002048:	2b12      	cmp	r3, #18
 800204a:	d107      	bne.n	800205c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800205a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	9300      	str	r3, [sp, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002068:	68f8      	ldr	r0, [r7, #12]
 800206a:	f000 f84f 	bl	800210c <I2C_WaitOnFlagUntilTimeout>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00d      	beq.n	8002090 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002082:	d103      	bne.n	800208c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f44f 7200 	mov.w	r2, #512	; 0x200
 800208a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e035      	b.n	80020fc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002098:	d108      	bne.n	80020ac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800209a:	897b      	ldrh	r3, [r7, #10]
 800209c:	b2db      	uxtb	r3, r3
 800209e:	461a      	mov	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80020a8:	611a      	str	r2, [r3, #16]
 80020aa:	e01b      	b.n	80020e4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80020ac:	897b      	ldrh	r3, [r7, #10]
 80020ae:	11db      	asrs	r3, r3, #7
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	f003 0306 	and.w	r3, r3, #6
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	f063 030f 	orn	r3, r3, #15
 80020bc:	b2da      	uxtb	r2, r3
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	490e      	ldr	r1, [pc, #56]	; (8002104 <I2C_MasterRequestWrite+0xfc>)
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f000 f898 	bl	8002200 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e010      	b.n	80020fc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80020da:	897b      	ldrh	r3, [r7, #10]
 80020dc:	b2da      	uxtb	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	4907      	ldr	r1, [pc, #28]	; (8002108 <I2C_MasterRequestWrite+0x100>)
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f000 f888 	bl	8002200 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e000      	b.n	80020fc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3718      	adds	r7, #24
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	00010008 	.word	0x00010008
 8002108:	00010002 	.word	0x00010002

0800210c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	603b      	str	r3, [r7, #0]
 8002118:	4613      	mov	r3, r2
 800211a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800211c:	e048      	b.n	80021b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002124:	d044      	beq.n	80021b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002126:	f7ff fa03 	bl	8001530 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	429a      	cmp	r2, r3
 8002134:	d302      	bcc.n	800213c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d139      	bne.n	80021b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	0c1b      	lsrs	r3, r3, #16
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b01      	cmp	r3, #1
 8002144:	d10d      	bne.n	8002162 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	695b      	ldr	r3, [r3, #20]
 800214c:	43da      	mvns	r2, r3
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	4013      	ands	r3, r2
 8002152:	b29b      	uxth	r3, r3
 8002154:	2b00      	cmp	r3, #0
 8002156:	bf0c      	ite	eq
 8002158:	2301      	moveq	r3, #1
 800215a:	2300      	movne	r3, #0
 800215c:	b2db      	uxtb	r3, r3
 800215e:	461a      	mov	r2, r3
 8002160:	e00c      	b.n	800217c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	43da      	mvns	r2, r3
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	4013      	ands	r3, r2
 800216e:	b29b      	uxth	r3, r3
 8002170:	2b00      	cmp	r3, #0
 8002172:	bf0c      	ite	eq
 8002174:	2301      	moveq	r3, #1
 8002176:	2300      	movne	r3, #0
 8002178:	b2db      	uxtb	r3, r3
 800217a:	461a      	mov	r2, r3
 800217c:	79fb      	ldrb	r3, [r7, #7]
 800217e:	429a      	cmp	r2, r3
 8002180:	d116      	bne.n	80021b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2220      	movs	r2, #32
 800218c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219c:	f043 0220 	orr.w	r2, r3, #32
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e023      	b.n	80021f8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	0c1b      	lsrs	r3, r3, #16
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d10d      	bne.n	80021d6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	695b      	ldr	r3, [r3, #20]
 80021c0:	43da      	mvns	r2, r3
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	4013      	ands	r3, r2
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	bf0c      	ite	eq
 80021cc:	2301      	moveq	r3, #1
 80021ce:	2300      	movne	r3, #0
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	461a      	mov	r2, r3
 80021d4:	e00c      	b.n	80021f0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	43da      	mvns	r2, r3
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	4013      	ands	r3, r2
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	bf0c      	ite	eq
 80021e8:	2301      	moveq	r3, #1
 80021ea:	2300      	movne	r3, #0
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	461a      	mov	r2, r3
 80021f0:	79fb      	ldrb	r3, [r7, #7]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d093      	beq.n	800211e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3710      	adds	r7, #16
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
 800220c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800220e:	e071      	b.n	80022f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800221a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800221e:	d123      	bne.n	8002268 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800222e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002238:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2200      	movs	r2, #0
 800223e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2220      	movs	r2, #32
 8002244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002254:	f043 0204 	orr.w	r2, r3, #4
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e067      	b.n	8002338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800226e:	d041      	beq.n	80022f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002270:	f7ff f95e 	bl	8001530 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	429a      	cmp	r2, r3
 800227e:	d302      	bcc.n	8002286 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d136      	bne.n	80022f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	0c1b      	lsrs	r3, r3, #16
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b01      	cmp	r3, #1
 800228e:	d10c      	bne.n	80022aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	43da      	mvns	r2, r3
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	4013      	ands	r3, r2
 800229c:	b29b      	uxth	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	bf14      	ite	ne
 80022a2:	2301      	movne	r3, #1
 80022a4:	2300      	moveq	r3, #0
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	e00b      	b.n	80022c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	43da      	mvns	r2, r3
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	4013      	ands	r3, r2
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	bf14      	ite	ne
 80022bc:	2301      	movne	r3, #1
 80022be:	2300      	moveq	r3, #0
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d016      	beq.n	80022f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2200      	movs	r2, #0
 80022ca:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2220      	movs	r2, #32
 80022d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e0:	f043 0220 	orr.w	r2, r3, #32
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e021      	b.n	8002338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	0c1b      	lsrs	r3, r3, #16
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d10c      	bne.n	8002318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	695b      	ldr	r3, [r3, #20]
 8002304:	43da      	mvns	r2, r3
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	4013      	ands	r3, r2
 800230a:	b29b      	uxth	r3, r3
 800230c:	2b00      	cmp	r3, #0
 800230e:	bf14      	ite	ne
 8002310:	2301      	movne	r3, #1
 8002312:	2300      	moveq	r3, #0
 8002314:	b2db      	uxtb	r3, r3
 8002316:	e00b      	b.n	8002330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	43da      	mvns	r2, r3
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	4013      	ands	r3, r2
 8002324:	b29b      	uxth	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	bf14      	ite	ne
 800232a:	2301      	movne	r3, #1
 800232c:	2300      	moveq	r3, #0
 800232e:	b2db      	uxtb	r3, r3
 8002330:	2b00      	cmp	r3, #0
 8002332:	f47f af6d 	bne.w	8002210 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3710      	adds	r7, #16
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800234c:	e034      	b.n	80023b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800234e:	68f8      	ldr	r0, [r7, #12]
 8002350:	f000 f886 	bl	8002460 <I2C_IsAcknowledgeFailed>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e034      	b.n	80023c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002364:	d028      	beq.n	80023b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002366:	f7ff f8e3 	bl	8001530 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	68ba      	ldr	r2, [r7, #8]
 8002372:	429a      	cmp	r2, r3
 8002374:	d302      	bcc.n	800237c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d11d      	bne.n	80023b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002386:	2b80      	cmp	r3, #128	; 0x80
 8002388:	d016      	beq.n	80023b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2200      	movs	r2, #0
 800238e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2220      	movs	r2, #32
 8002394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a4:	f043 0220 	orr.w	r2, r3, #32
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e007      	b.n	80023c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023c2:	2b80      	cmp	r3, #128	; 0x80
 80023c4:	d1c3      	bne.n	800234e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3710      	adds	r7, #16
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023dc:	e034      	b.n	8002448 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80023de:	68f8      	ldr	r0, [r7, #12]
 80023e0:	f000 f83e 	bl	8002460 <I2C_IsAcknowledgeFailed>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e034      	b.n	8002458 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f4:	d028      	beq.n	8002448 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023f6:	f7ff f89b 	bl	8001530 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	68ba      	ldr	r2, [r7, #8]
 8002402:	429a      	cmp	r2, r3
 8002404:	d302      	bcc.n	800240c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d11d      	bne.n	8002448 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	f003 0304 	and.w	r3, r3, #4
 8002416:	2b04      	cmp	r3, #4
 8002418:	d016      	beq.n	8002448 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2220      	movs	r2, #32
 8002424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002434:	f043 0220 	orr.w	r2, r3, #32
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e007      	b.n	8002458 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	f003 0304 	and.w	r3, r3, #4
 8002452:	2b04      	cmp	r3, #4
 8002454:	d1c3      	bne.n	80023de <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	695b      	ldr	r3, [r3, #20]
 800246e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002472:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002476:	d11b      	bne.n	80024b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002480:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2220      	movs	r2, #32
 800248c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249c:	f043 0204 	orr.w	r2, r3, #4
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e000      	b.n	80024b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bc80      	pop	{r7}
 80024ba:	4770      	bx	lr

080024bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e272      	b.n	80029b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f000 8087 	beq.w	80025ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024dc:	4b92      	ldr	r3, [pc, #584]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f003 030c 	and.w	r3, r3, #12
 80024e4:	2b04      	cmp	r3, #4
 80024e6:	d00c      	beq.n	8002502 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024e8:	4b8f      	ldr	r3, [pc, #572]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f003 030c 	and.w	r3, r3, #12
 80024f0:	2b08      	cmp	r3, #8
 80024f2:	d112      	bne.n	800251a <HAL_RCC_OscConfig+0x5e>
 80024f4:	4b8c      	ldr	r3, [pc, #560]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002500:	d10b      	bne.n	800251a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002502:	4b89      	ldr	r3, [pc, #548]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d06c      	beq.n	80025e8 <HAL_RCC_OscConfig+0x12c>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d168      	bne.n	80025e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e24c      	b.n	80029b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002522:	d106      	bne.n	8002532 <HAL_RCC_OscConfig+0x76>
 8002524:	4b80      	ldr	r3, [pc, #512]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a7f      	ldr	r2, [pc, #508]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 800252a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800252e:	6013      	str	r3, [r2, #0]
 8002530:	e02e      	b.n	8002590 <HAL_RCC_OscConfig+0xd4>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10c      	bne.n	8002554 <HAL_RCC_OscConfig+0x98>
 800253a:	4b7b      	ldr	r3, [pc, #492]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a7a      	ldr	r2, [pc, #488]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 8002540:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	4b78      	ldr	r3, [pc, #480]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a77      	ldr	r2, [pc, #476]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 800254c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002550:	6013      	str	r3, [r2, #0]
 8002552:	e01d      	b.n	8002590 <HAL_RCC_OscConfig+0xd4>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800255c:	d10c      	bne.n	8002578 <HAL_RCC_OscConfig+0xbc>
 800255e:	4b72      	ldr	r3, [pc, #456]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a71      	ldr	r2, [pc, #452]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 8002564:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002568:	6013      	str	r3, [r2, #0]
 800256a:	4b6f      	ldr	r3, [pc, #444]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a6e      	ldr	r2, [pc, #440]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 8002570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002574:	6013      	str	r3, [r2, #0]
 8002576:	e00b      	b.n	8002590 <HAL_RCC_OscConfig+0xd4>
 8002578:	4b6b      	ldr	r3, [pc, #428]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a6a      	ldr	r2, [pc, #424]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 800257e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002582:	6013      	str	r3, [r2, #0]
 8002584:	4b68      	ldr	r3, [pc, #416]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a67      	ldr	r2, [pc, #412]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 800258a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800258e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d013      	beq.n	80025c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002598:	f7fe ffca 	bl	8001530 <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025a0:	f7fe ffc6 	bl	8001530 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b64      	cmp	r3, #100	; 0x64
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e200      	b.n	80029b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b2:	4b5d      	ldr	r3, [pc, #372]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d0f0      	beq.n	80025a0 <HAL_RCC_OscConfig+0xe4>
 80025be:	e014      	b.n	80025ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c0:	f7fe ffb6 	bl	8001530 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025c8:	f7fe ffb2 	bl	8001530 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b64      	cmp	r3, #100	; 0x64
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e1ec      	b.n	80029b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025da:	4b53      	ldr	r3, [pc, #332]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1f0      	bne.n	80025c8 <HAL_RCC_OscConfig+0x10c>
 80025e6:	e000      	b.n	80025ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d063      	beq.n	80026be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025f6:	4b4c      	ldr	r3, [pc, #304]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f003 030c 	and.w	r3, r3, #12
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00b      	beq.n	800261a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002602:	4b49      	ldr	r3, [pc, #292]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f003 030c 	and.w	r3, r3, #12
 800260a:	2b08      	cmp	r3, #8
 800260c:	d11c      	bne.n	8002648 <HAL_RCC_OscConfig+0x18c>
 800260e:	4b46      	ldr	r3, [pc, #280]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d116      	bne.n	8002648 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800261a:	4b43      	ldr	r3, [pc, #268]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d005      	beq.n	8002632 <HAL_RCC_OscConfig+0x176>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d001      	beq.n	8002632 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e1c0      	b.n	80029b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002632:	4b3d      	ldr	r3, [pc, #244]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	4939      	ldr	r1, [pc, #228]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 8002642:	4313      	orrs	r3, r2
 8002644:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002646:	e03a      	b.n	80026be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d020      	beq.n	8002692 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002650:	4b36      	ldr	r3, [pc, #216]	; (800272c <HAL_RCC_OscConfig+0x270>)
 8002652:	2201      	movs	r2, #1
 8002654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002656:	f7fe ff6b 	bl	8001530 <HAL_GetTick>
 800265a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800265c:	e008      	b.n	8002670 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800265e:	f7fe ff67 	bl	8001530 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e1a1      	b.n	80029b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002670:	4b2d      	ldr	r3, [pc, #180]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d0f0      	beq.n	800265e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800267c:	4b2a      	ldr	r3, [pc, #168]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	695b      	ldr	r3, [r3, #20]
 8002688:	00db      	lsls	r3, r3, #3
 800268a:	4927      	ldr	r1, [pc, #156]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 800268c:	4313      	orrs	r3, r2
 800268e:	600b      	str	r3, [r1, #0]
 8002690:	e015      	b.n	80026be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002692:	4b26      	ldr	r3, [pc, #152]	; (800272c <HAL_RCC_OscConfig+0x270>)
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002698:	f7fe ff4a 	bl	8001530 <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026a0:	f7fe ff46 	bl	8001530 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e180      	b.n	80029b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026b2:	4b1d      	ldr	r3, [pc, #116]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1f0      	bne.n	80026a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0308 	and.w	r3, r3, #8
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d03a      	beq.n	8002740 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d019      	beq.n	8002706 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026d2:	4b17      	ldr	r3, [pc, #92]	; (8002730 <HAL_RCC_OscConfig+0x274>)
 80026d4:	2201      	movs	r2, #1
 80026d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026d8:	f7fe ff2a 	bl	8001530 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026e0:	f7fe ff26 	bl	8001530 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e160      	b.n	80029b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026f2:	4b0d      	ldr	r3, [pc, #52]	; (8002728 <HAL_RCC_OscConfig+0x26c>)
 80026f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d0f0      	beq.n	80026e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80026fe:	2001      	movs	r0, #1
 8002700:	f000 face 	bl	8002ca0 <RCC_Delay>
 8002704:	e01c      	b.n	8002740 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002706:	4b0a      	ldr	r3, [pc, #40]	; (8002730 <HAL_RCC_OscConfig+0x274>)
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800270c:	f7fe ff10 	bl	8001530 <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002712:	e00f      	b.n	8002734 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002714:	f7fe ff0c 	bl	8001530 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d908      	bls.n	8002734 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e146      	b.n	80029b4 <HAL_RCC_OscConfig+0x4f8>
 8002726:	bf00      	nop
 8002728:	40021000 	.word	0x40021000
 800272c:	42420000 	.word	0x42420000
 8002730:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002734:	4b92      	ldr	r3, [pc, #584]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 8002736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d1e9      	bne.n	8002714 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0304 	and.w	r3, r3, #4
 8002748:	2b00      	cmp	r3, #0
 800274a:	f000 80a6 	beq.w	800289a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800274e:	2300      	movs	r3, #0
 8002750:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002752:	4b8b      	ldr	r3, [pc, #556]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 8002754:	69db      	ldr	r3, [r3, #28]
 8002756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10d      	bne.n	800277a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800275e:	4b88      	ldr	r3, [pc, #544]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	4a87      	ldr	r2, [pc, #540]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 8002764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002768:	61d3      	str	r3, [r2, #28]
 800276a:	4b85      	ldr	r3, [pc, #532]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002772:	60bb      	str	r3, [r7, #8]
 8002774:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002776:	2301      	movs	r3, #1
 8002778:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800277a:	4b82      	ldr	r3, [pc, #520]	; (8002984 <HAL_RCC_OscConfig+0x4c8>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002782:	2b00      	cmp	r3, #0
 8002784:	d118      	bne.n	80027b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002786:	4b7f      	ldr	r3, [pc, #508]	; (8002984 <HAL_RCC_OscConfig+0x4c8>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a7e      	ldr	r2, [pc, #504]	; (8002984 <HAL_RCC_OscConfig+0x4c8>)
 800278c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002790:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002792:	f7fe fecd 	bl	8001530 <HAL_GetTick>
 8002796:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002798:	e008      	b.n	80027ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800279a:	f7fe fec9 	bl	8001530 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b64      	cmp	r3, #100	; 0x64
 80027a6:	d901      	bls.n	80027ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e103      	b.n	80029b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ac:	4b75      	ldr	r3, [pc, #468]	; (8002984 <HAL_RCC_OscConfig+0x4c8>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d0f0      	beq.n	800279a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d106      	bne.n	80027ce <HAL_RCC_OscConfig+0x312>
 80027c0:	4b6f      	ldr	r3, [pc, #444]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 80027c2:	6a1b      	ldr	r3, [r3, #32]
 80027c4:	4a6e      	ldr	r2, [pc, #440]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 80027c6:	f043 0301 	orr.w	r3, r3, #1
 80027ca:	6213      	str	r3, [r2, #32]
 80027cc:	e02d      	b.n	800282a <HAL_RCC_OscConfig+0x36e>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d10c      	bne.n	80027f0 <HAL_RCC_OscConfig+0x334>
 80027d6:	4b6a      	ldr	r3, [pc, #424]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	4a69      	ldr	r2, [pc, #420]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 80027dc:	f023 0301 	bic.w	r3, r3, #1
 80027e0:	6213      	str	r3, [r2, #32]
 80027e2:	4b67      	ldr	r3, [pc, #412]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	4a66      	ldr	r2, [pc, #408]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 80027e8:	f023 0304 	bic.w	r3, r3, #4
 80027ec:	6213      	str	r3, [r2, #32]
 80027ee:	e01c      	b.n	800282a <HAL_RCC_OscConfig+0x36e>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	2b05      	cmp	r3, #5
 80027f6:	d10c      	bne.n	8002812 <HAL_RCC_OscConfig+0x356>
 80027f8:	4b61      	ldr	r3, [pc, #388]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	4a60      	ldr	r2, [pc, #384]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 80027fe:	f043 0304 	orr.w	r3, r3, #4
 8002802:	6213      	str	r3, [r2, #32]
 8002804:	4b5e      	ldr	r3, [pc, #376]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	4a5d      	ldr	r2, [pc, #372]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 800280a:	f043 0301 	orr.w	r3, r3, #1
 800280e:	6213      	str	r3, [r2, #32]
 8002810:	e00b      	b.n	800282a <HAL_RCC_OscConfig+0x36e>
 8002812:	4b5b      	ldr	r3, [pc, #364]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 8002814:	6a1b      	ldr	r3, [r3, #32]
 8002816:	4a5a      	ldr	r2, [pc, #360]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 8002818:	f023 0301 	bic.w	r3, r3, #1
 800281c:	6213      	str	r3, [r2, #32]
 800281e:	4b58      	ldr	r3, [pc, #352]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 8002820:	6a1b      	ldr	r3, [r3, #32]
 8002822:	4a57      	ldr	r2, [pc, #348]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 8002824:	f023 0304 	bic.w	r3, r3, #4
 8002828:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d015      	beq.n	800285e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002832:	f7fe fe7d 	bl	8001530 <HAL_GetTick>
 8002836:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002838:	e00a      	b.n	8002850 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800283a:	f7fe fe79 	bl	8001530 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	f241 3288 	movw	r2, #5000	; 0x1388
 8002848:	4293      	cmp	r3, r2
 800284a:	d901      	bls.n	8002850 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e0b1      	b.n	80029b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002850:	4b4b      	ldr	r3, [pc, #300]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 8002852:	6a1b      	ldr	r3, [r3, #32]
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d0ee      	beq.n	800283a <HAL_RCC_OscConfig+0x37e>
 800285c:	e014      	b.n	8002888 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800285e:	f7fe fe67 	bl	8001530 <HAL_GetTick>
 8002862:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002864:	e00a      	b.n	800287c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002866:	f7fe fe63 	bl	8001530 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	f241 3288 	movw	r2, #5000	; 0x1388
 8002874:	4293      	cmp	r3, r2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e09b      	b.n	80029b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800287c:	4b40      	ldr	r3, [pc, #256]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1ee      	bne.n	8002866 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002888:	7dfb      	ldrb	r3, [r7, #23]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d105      	bne.n	800289a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800288e:	4b3c      	ldr	r3, [pc, #240]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 8002890:	69db      	ldr	r3, [r3, #28]
 8002892:	4a3b      	ldr	r2, [pc, #236]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 8002894:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002898:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	69db      	ldr	r3, [r3, #28]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	f000 8087 	beq.w	80029b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028a4:	4b36      	ldr	r3, [pc, #216]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f003 030c 	and.w	r3, r3, #12
 80028ac:	2b08      	cmp	r3, #8
 80028ae:	d061      	beq.n	8002974 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	69db      	ldr	r3, [r3, #28]
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d146      	bne.n	8002946 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028b8:	4b33      	ldr	r3, [pc, #204]	; (8002988 <HAL_RCC_OscConfig+0x4cc>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028be:	f7fe fe37 	bl	8001530 <HAL_GetTick>
 80028c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028c4:	e008      	b.n	80028d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c6:	f7fe fe33 	bl	8001530 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e06d      	b.n	80029b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028d8:	4b29      	ldr	r3, [pc, #164]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1f0      	bne.n	80028c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028ec:	d108      	bne.n	8002900 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028ee:	4b24      	ldr	r3, [pc, #144]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	4921      	ldr	r1, [pc, #132]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002900:	4b1f      	ldr	r3, [pc, #124]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a19      	ldr	r1, [r3, #32]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002910:	430b      	orrs	r3, r1
 8002912:	491b      	ldr	r1, [pc, #108]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 8002914:	4313      	orrs	r3, r2
 8002916:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002918:	4b1b      	ldr	r3, [pc, #108]	; (8002988 <HAL_RCC_OscConfig+0x4cc>)
 800291a:	2201      	movs	r2, #1
 800291c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291e:	f7fe fe07 	bl	8001530 <HAL_GetTick>
 8002922:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002924:	e008      	b.n	8002938 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002926:	f7fe fe03 	bl	8001530 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e03d      	b.n	80029b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002938:	4b11      	ldr	r3, [pc, #68]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d0f0      	beq.n	8002926 <HAL_RCC_OscConfig+0x46a>
 8002944:	e035      	b.n	80029b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002946:	4b10      	ldr	r3, [pc, #64]	; (8002988 <HAL_RCC_OscConfig+0x4cc>)
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800294c:	f7fe fdf0 	bl	8001530 <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002954:	f7fe fdec 	bl	8001530 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e026      	b.n	80029b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002966:	4b06      	ldr	r3, [pc, #24]	; (8002980 <HAL_RCC_OscConfig+0x4c4>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1f0      	bne.n	8002954 <HAL_RCC_OscConfig+0x498>
 8002972:	e01e      	b.n	80029b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	69db      	ldr	r3, [r3, #28]
 8002978:	2b01      	cmp	r3, #1
 800297a:	d107      	bne.n	800298c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e019      	b.n	80029b4 <HAL_RCC_OscConfig+0x4f8>
 8002980:	40021000 	.word	0x40021000
 8002984:	40007000 	.word	0x40007000
 8002988:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800298c:	4b0b      	ldr	r3, [pc, #44]	; (80029bc <HAL_RCC_OscConfig+0x500>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	429a      	cmp	r2, r3
 800299e:	d106      	bne.n	80029ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d001      	beq.n	80029b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e000      	b.n	80029b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80029b2:	2300      	movs	r3, #0
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3718      	adds	r7, #24
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	40021000 	.word	0x40021000

080029c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d101      	bne.n	80029d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e0d0      	b.n	8002b76 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029d4:	4b6a      	ldr	r3, [pc, #424]	; (8002b80 <HAL_RCC_ClockConfig+0x1c0>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d910      	bls.n	8002a04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029e2:	4b67      	ldr	r3, [pc, #412]	; (8002b80 <HAL_RCC_ClockConfig+0x1c0>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f023 0207 	bic.w	r2, r3, #7
 80029ea:	4965      	ldr	r1, [pc, #404]	; (8002b80 <HAL_RCC_ClockConfig+0x1c0>)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029f2:	4b63      	ldr	r3, [pc, #396]	; (8002b80 <HAL_RCC_ClockConfig+0x1c0>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0307 	and.w	r3, r3, #7
 80029fa:	683a      	ldr	r2, [r7, #0]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d001      	beq.n	8002a04 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e0b8      	b.n	8002b76 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d020      	beq.n	8002a52 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d005      	beq.n	8002a28 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a1c:	4b59      	ldr	r3, [pc, #356]	; (8002b84 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	4a58      	ldr	r2, [pc, #352]	; (8002b84 <HAL_RCC_ClockConfig+0x1c4>)
 8002a22:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a26:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0308 	and.w	r3, r3, #8
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d005      	beq.n	8002a40 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a34:	4b53      	ldr	r3, [pc, #332]	; (8002b84 <HAL_RCC_ClockConfig+0x1c4>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	4a52      	ldr	r2, [pc, #328]	; (8002b84 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a3e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a40:	4b50      	ldr	r3, [pc, #320]	; (8002b84 <HAL_RCC_ClockConfig+0x1c4>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	494d      	ldr	r1, [pc, #308]	; (8002b84 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d040      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d107      	bne.n	8002a76 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a66:	4b47      	ldr	r3, [pc, #284]	; (8002b84 <HAL_RCC_ClockConfig+0x1c4>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d115      	bne.n	8002a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e07f      	b.n	8002b76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d107      	bne.n	8002a8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a7e:	4b41      	ldr	r3, [pc, #260]	; (8002b84 <HAL_RCC_ClockConfig+0x1c4>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d109      	bne.n	8002a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e073      	b.n	8002b76 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a8e:	4b3d      	ldr	r3, [pc, #244]	; (8002b84 <HAL_RCC_ClockConfig+0x1c4>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e06b      	b.n	8002b76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a9e:	4b39      	ldr	r3, [pc, #228]	; (8002b84 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f023 0203 	bic.w	r2, r3, #3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	4936      	ldr	r1, [pc, #216]	; (8002b84 <HAL_RCC_ClockConfig+0x1c4>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ab0:	f7fe fd3e 	bl	8001530 <HAL_GetTick>
 8002ab4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ab6:	e00a      	b.n	8002ace <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ab8:	f7fe fd3a 	bl	8001530 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e053      	b.n	8002b76 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ace:	4b2d      	ldr	r3, [pc, #180]	; (8002b84 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f003 020c 	and.w	r2, r3, #12
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d1eb      	bne.n	8002ab8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ae0:	4b27      	ldr	r3, [pc, #156]	; (8002b80 <HAL_RCC_ClockConfig+0x1c0>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d210      	bcs.n	8002b10 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aee:	4b24      	ldr	r3, [pc, #144]	; (8002b80 <HAL_RCC_ClockConfig+0x1c0>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f023 0207 	bic.w	r2, r3, #7
 8002af6:	4922      	ldr	r1, [pc, #136]	; (8002b80 <HAL_RCC_ClockConfig+0x1c0>)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002afe:	4b20      	ldr	r3, [pc, #128]	; (8002b80 <HAL_RCC_ClockConfig+0x1c0>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0307 	and.w	r3, r3, #7
 8002b06:	683a      	ldr	r2, [r7, #0]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d001      	beq.n	8002b10 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e032      	b.n	8002b76 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d008      	beq.n	8002b2e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b1c:	4b19      	ldr	r3, [pc, #100]	; (8002b84 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	4916      	ldr	r1, [pc, #88]	; (8002b84 <HAL_RCC_ClockConfig+0x1c4>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0308 	and.w	r3, r3, #8
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d009      	beq.n	8002b4e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b3a:	4b12      	ldr	r3, [pc, #72]	; (8002b84 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	490e      	ldr	r1, [pc, #56]	; (8002b84 <HAL_RCC_ClockConfig+0x1c4>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b4e:	f000 f821 	bl	8002b94 <HAL_RCC_GetSysClockFreq>
 8002b52:	4602      	mov	r2, r0
 8002b54:	4b0b      	ldr	r3, [pc, #44]	; (8002b84 <HAL_RCC_ClockConfig+0x1c4>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	091b      	lsrs	r3, r3, #4
 8002b5a:	f003 030f 	and.w	r3, r3, #15
 8002b5e:	490a      	ldr	r1, [pc, #40]	; (8002b88 <HAL_RCC_ClockConfig+0x1c8>)
 8002b60:	5ccb      	ldrb	r3, [r1, r3]
 8002b62:	fa22 f303 	lsr.w	r3, r2, r3
 8002b66:	4a09      	ldr	r2, [pc, #36]	; (8002b8c <HAL_RCC_ClockConfig+0x1cc>)
 8002b68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b6a:	4b09      	ldr	r3, [pc, #36]	; (8002b90 <HAL_RCC_ClockConfig+0x1d0>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7fe fc9c 	bl	80014ac <HAL_InitTick>

  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	40022000 	.word	0x40022000
 8002b84:	40021000 	.word	0x40021000
 8002b88:	08004a1c 	.word	0x08004a1c
 8002b8c:	20000000 	.word	0x20000000
 8002b90:	200000d8 	.word	0x200000d8

08002b94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b087      	sub	sp, #28
 8002b98:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	60fb      	str	r3, [r7, #12]
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60bb      	str	r3, [r7, #8]
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	617b      	str	r3, [r7, #20]
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002baa:	2300      	movs	r3, #0
 8002bac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002bae:	4b1e      	ldr	r3, [pc, #120]	; (8002c28 <HAL_RCC_GetSysClockFreq+0x94>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f003 030c 	and.w	r3, r3, #12
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	d002      	beq.n	8002bc4 <HAL_RCC_GetSysClockFreq+0x30>
 8002bbe:	2b08      	cmp	r3, #8
 8002bc0:	d003      	beq.n	8002bca <HAL_RCC_GetSysClockFreq+0x36>
 8002bc2:	e027      	b.n	8002c14 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bc4:	4b19      	ldr	r3, [pc, #100]	; (8002c2c <HAL_RCC_GetSysClockFreq+0x98>)
 8002bc6:	613b      	str	r3, [r7, #16]
      break;
 8002bc8:	e027      	b.n	8002c1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	0c9b      	lsrs	r3, r3, #18
 8002bce:	f003 030f 	and.w	r3, r3, #15
 8002bd2:	4a17      	ldr	r2, [pc, #92]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002bd4:	5cd3      	ldrb	r3, [r2, r3]
 8002bd6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d010      	beq.n	8002c04 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002be2:	4b11      	ldr	r3, [pc, #68]	; (8002c28 <HAL_RCC_GetSysClockFreq+0x94>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	0c5b      	lsrs	r3, r3, #17
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	4a11      	ldr	r2, [pc, #68]	; (8002c34 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002bee:	5cd3      	ldrb	r3, [r2, r3]
 8002bf0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a0d      	ldr	r2, [pc, #52]	; (8002c2c <HAL_RCC_GetSysClockFreq+0x98>)
 8002bf6:	fb03 f202 	mul.w	r2, r3, r2
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c00:	617b      	str	r3, [r7, #20]
 8002c02:	e004      	b.n	8002c0e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a0c      	ldr	r2, [pc, #48]	; (8002c38 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c08:	fb02 f303 	mul.w	r3, r2, r3
 8002c0c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	613b      	str	r3, [r7, #16]
      break;
 8002c12:	e002      	b.n	8002c1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c14:	4b05      	ldr	r3, [pc, #20]	; (8002c2c <HAL_RCC_GetSysClockFreq+0x98>)
 8002c16:	613b      	str	r3, [r7, #16]
      break;
 8002c18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c1a:	693b      	ldr	r3, [r7, #16]
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	371c      	adds	r7, #28
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bc80      	pop	{r7}
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	40021000 	.word	0x40021000
 8002c2c:	007a1200 	.word	0x007a1200
 8002c30:	08004a54 	.word	0x08004a54
 8002c34:	08004a64 	.word	0x08004a64
 8002c38:	003d0900 	.word	0x003d0900

08002c3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c40:	4b02      	ldr	r3, [pc, #8]	; (8002c4c <HAL_RCC_GetHCLKFreq+0x10>)
 8002c42:	681b      	ldr	r3, [r3, #0]
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bc80      	pop	{r7}
 8002c4a:	4770      	bx	lr
 8002c4c:	20000000 	.word	0x20000000

08002c50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c54:	f7ff fff2 	bl	8002c3c <HAL_RCC_GetHCLKFreq>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	4b05      	ldr	r3, [pc, #20]	; (8002c70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	0a1b      	lsrs	r3, r3, #8
 8002c60:	f003 0307 	and.w	r3, r3, #7
 8002c64:	4903      	ldr	r1, [pc, #12]	; (8002c74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c66:	5ccb      	ldrb	r3, [r1, r3]
 8002c68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40021000 	.word	0x40021000
 8002c74:	08004a2c 	.word	0x08004a2c

08002c78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c7c:	f7ff ffde 	bl	8002c3c <HAL_RCC_GetHCLKFreq>
 8002c80:	4602      	mov	r2, r0
 8002c82:	4b05      	ldr	r3, [pc, #20]	; (8002c98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	0adb      	lsrs	r3, r3, #11
 8002c88:	f003 0307 	and.w	r3, r3, #7
 8002c8c:	4903      	ldr	r1, [pc, #12]	; (8002c9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c8e:	5ccb      	ldrb	r3, [r1, r3]
 8002c90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	08004a2c 	.word	0x08004a2c

08002ca0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ca8:	4b0a      	ldr	r3, [pc, #40]	; (8002cd4 <RCC_Delay+0x34>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a0a      	ldr	r2, [pc, #40]	; (8002cd8 <RCC_Delay+0x38>)
 8002cae:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb2:	0a5b      	lsrs	r3, r3, #9
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	fb02 f303 	mul.w	r3, r2, r3
 8002cba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002cbc:	bf00      	nop
  }
  while (Delay --);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	1e5a      	subs	r2, r3, #1
 8002cc2:	60fa      	str	r2, [r7, #12]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1f9      	bne.n	8002cbc <RCC_Delay+0x1c>
}
 8002cc8:	bf00      	nop
 8002cca:	bf00      	nop
 8002ccc:	3714      	adds	r7, #20
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr
 8002cd4:	20000000 	.word	0x20000000
 8002cd8:	10624dd3 	.word	0x10624dd3

08002cdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e041      	b.n	8002d72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d106      	bne.n	8002d08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f7fd fb76 	bl	80003f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	3304      	adds	r3, #4
 8002d18:	4619      	mov	r1, r3
 8002d1a:	4610      	mov	r0, r2
 8002d1c:	f000 fab0 	bl	8003280 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b082      	sub	sp, #8
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d101      	bne.n	8002d8c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e041      	b.n	8002e10 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d106      	bne.n	8002da6 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f000 f839 	bl	8002e18 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2202      	movs	r2, #2
 8002daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	3304      	adds	r3, #4
 8002db6:	4619      	mov	r1, r3
 8002db8:	4610      	mov	r0, r2
 8002dba:	f000 fa61 	bl	8003280 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3708      	adds	r7, #8
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bc80      	pop	{r7}
 8002e28:	4770      	bx	lr
	...

08002e2c <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d109      	bne.n	8002e50 <HAL_TIM_OC_Start+0x24>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	bf14      	ite	ne
 8002e48:	2301      	movne	r3, #1
 8002e4a:	2300      	moveq	r3, #0
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	e022      	b.n	8002e96 <HAL_TIM_OC_Start+0x6a>
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	d109      	bne.n	8002e6a <HAL_TIM_OC_Start+0x3e>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	bf14      	ite	ne
 8002e62:	2301      	movne	r3, #1
 8002e64:	2300      	moveq	r3, #0
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	e015      	b.n	8002e96 <HAL_TIM_OC_Start+0x6a>
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	2b08      	cmp	r3, #8
 8002e6e:	d109      	bne.n	8002e84 <HAL_TIM_OC_Start+0x58>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	bf14      	ite	ne
 8002e7c:	2301      	movne	r3, #1
 8002e7e:	2300      	moveq	r3, #0
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	e008      	b.n	8002e96 <HAL_TIM_OC_Start+0x6a>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	bf14      	ite	ne
 8002e90:	2301      	movne	r3, #1
 8002e92:	2300      	moveq	r3, #0
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e05e      	b.n	8002f5c <HAL_TIM_OC_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d104      	bne.n	8002eae <HAL_TIM_OC_Start+0x82>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2202      	movs	r2, #2
 8002ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002eac:	e013      	b.n	8002ed6 <HAL_TIM_OC_Start+0xaa>
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	2b04      	cmp	r3, #4
 8002eb2:	d104      	bne.n	8002ebe <HAL_TIM_OC_Start+0x92>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2202      	movs	r2, #2
 8002eb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ebc:	e00b      	b.n	8002ed6 <HAL_TIM_OC_Start+0xaa>
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	2b08      	cmp	r3, #8
 8002ec2:	d104      	bne.n	8002ece <HAL_TIM_OC_Start+0xa2>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ecc:	e003      	b.n	8002ed6 <HAL_TIM_OC_Start+0xaa>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2202      	movs	r2, #2
 8002ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2201      	movs	r2, #1
 8002edc:	6839      	ldr	r1, [r7, #0]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f000 fc4e 	bl	8003780 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a1e      	ldr	r2, [pc, #120]	; (8002f64 <HAL_TIM_OC_Start+0x138>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d107      	bne.n	8002efe <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002efc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a18      	ldr	r2, [pc, #96]	; (8002f64 <HAL_TIM_OC_Start+0x138>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d00e      	beq.n	8002f26 <HAL_TIM_OC_Start+0xfa>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f10:	d009      	beq.n	8002f26 <HAL_TIM_OC_Start+0xfa>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a14      	ldr	r2, [pc, #80]	; (8002f68 <HAL_TIM_OC_Start+0x13c>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d004      	beq.n	8002f26 <HAL_TIM_OC_Start+0xfa>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a12      	ldr	r2, [pc, #72]	; (8002f6c <HAL_TIM_OC_Start+0x140>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d111      	bne.n	8002f4a <HAL_TIM_OC_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f003 0307 	and.w	r3, r3, #7
 8002f30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2b06      	cmp	r3, #6
 8002f36:	d010      	beq.n	8002f5a <HAL_TIM_OC_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f042 0201 	orr.w	r2, r2, #1
 8002f46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f48:	e007      	b.n	8002f5a <HAL_TIM_OC_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f042 0201 	orr.w	r2, r2, #1
 8002f58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3710      	adds	r7, #16
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40012c00 	.word	0x40012c00
 8002f68:	40000400 	.word	0x40000400
 8002f6c:	40000800 	.word	0x40000800

08002f70 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	6839      	ldr	r1, [r7, #0]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f000 fbfc 	bl	8003780 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a29      	ldr	r2, [pc, #164]	; (8003034 <HAL_TIM_OC_Stop+0xc4>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d117      	bne.n	8002fc2 <HAL_TIM_OC_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	6a1a      	ldr	r2, [r3, #32]
 8002f98:	f241 1311 	movw	r3, #4369	; 0x1111
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10f      	bne.n	8002fc2 <HAL_TIM_OC_Stop+0x52>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	6a1a      	ldr	r2, [r3, #32]
 8002fa8:	f240 4344 	movw	r3, #1092	; 0x444
 8002fac:	4013      	ands	r3, r2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d107      	bne.n	8002fc2 <HAL_TIM_OC_Stop+0x52>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fc0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	6a1a      	ldr	r2, [r3, #32]
 8002fc8:	f241 1311 	movw	r3, #4369	; 0x1111
 8002fcc:	4013      	ands	r3, r2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d10f      	bne.n	8002ff2 <HAL_TIM_OC_Stop+0x82>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	6a1a      	ldr	r2, [r3, #32]
 8002fd8:	f240 4344 	movw	r3, #1092	; 0x444
 8002fdc:	4013      	ands	r3, r2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d107      	bne.n	8002ff2 <HAL_TIM_OC_Stop+0x82>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 0201 	bic.w	r2, r2, #1
 8002ff0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d104      	bne.n	8003002 <HAL_TIM_OC_Stop+0x92>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003000:	e013      	b.n	800302a <HAL_TIM_OC_Stop+0xba>
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	2b04      	cmp	r3, #4
 8003006:	d104      	bne.n	8003012 <HAL_TIM_OC_Stop+0xa2>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003010:	e00b      	b.n	800302a <HAL_TIM_OC_Stop+0xba>
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	2b08      	cmp	r3, #8
 8003016:	d104      	bne.n	8003022 <HAL_TIM_OC_Stop+0xb2>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003020:	e003      	b.n	800302a <HAL_TIM_OC_Stop+0xba>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3708      	adds	r7, #8
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	40012c00 	.word	0x40012c00

08003038 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003044:	2300      	movs	r3, #0
 8003046:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800304e:	2b01      	cmp	r3, #1
 8003050:	d101      	bne.n	8003056 <HAL_TIM_OC_ConfigChannel+0x1e>
 8003052:	2302      	movs	r3, #2
 8003054:	e048      	b.n	80030e8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2201      	movs	r2, #1
 800305a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2b0c      	cmp	r3, #12
 8003062:	d839      	bhi.n	80030d8 <HAL_TIM_OC_ConfigChannel+0xa0>
 8003064:	a201      	add	r2, pc, #4	; (adr r2, 800306c <HAL_TIM_OC_ConfigChannel+0x34>)
 8003066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800306a:	bf00      	nop
 800306c:	080030a1 	.word	0x080030a1
 8003070:	080030d9 	.word	0x080030d9
 8003074:	080030d9 	.word	0x080030d9
 8003078:	080030d9 	.word	0x080030d9
 800307c:	080030af 	.word	0x080030af
 8003080:	080030d9 	.word	0x080030d9
 8003084:	080030d9 	.word	0x080030d9
 8003088:	080030d9 	.word	0x080030d9
 800308c:	080030bd 	.word	0x080030bd
 8003090:	080030d9 	.word	0x080030d9
 8003094:	080030d9 	.word	0x080030d9
 8003098:	080030d9 	.word	0x080030d9
 800309c:	080030cb 	.word	0x080030cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68b9      	ldr	r1, [r7, #8]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f000 f94c 	bl	8003344 <TIM_OC1_SetConfig>
      break;
 80030ac:	e017      	b.n	80030de <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68b9      	ldr	r1, [r7, #8]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f000 f9ab 	bl	8003410 <TIM_OC2_SetConfig>
      break;
 80030ba:	e010      	b.n	80030de <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68b9      	ldr	r1, [r7, #8]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f000 fa0e 	bl	80034e4 <TIM_OC3_SetConfig>
      break;
 80030c8:	e009      	b.n	80030de <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68b9      	ldr	r1, [r7, #8]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f000 fa71 	bl	80035b8 <TIM_OC4_SetConfig>
      break;
 80030d6:	e002      	b.n	80030de <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	75fb      	strb	r3, [r7, #23]
      break;
 80030dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80030e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3718      	adds	r7, #24
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030fa:	2300      	movs	r3, #0
 80030fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003104:	2b01      	cmp	r3, #1
 8003106:	d101      	bne.n	800310c <HAL_TIM_ConfigClockSource+0x1c>
 8003108:	2302      	movs	r3, #2
 800310a:	e0b4      	b.n	8003276 <HAL_TIM_ConfigClockSource+0x186>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2202      	movs	r2, #2
 8003118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800312a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003132:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68ba      	ldr	r2, [r7, #8]
 800313a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003144:	d03e      	beq.n	80031c4 <HAL_TIM_ConfigClockSource+0xd4>
 8003146:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800314a:	f200 8087 	bhi.w	800325c <HAL_TIM_ConfigClockSource+0x16c>
 800314e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003152:	f000 8086 	beq.w	8003262 <HAL_TIM_ConfigClockSource+0x172>
 8003156:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800315a:	d87f      	bhi.n	800325c <HAL_TIM_ConfigClockSource+0x16c>
 800315c:	2b70      	cmp	r3, #112	; 0x70
 800315e:	d01a      	beq.n	8003196 <HAL_TIM_ConfigClockSource+0xa6>
 8003160:	2b70      	cmp	r3, #112	; 0x70
 8003162:	d87b      	bhi.n	800325c <HAL_TIM_ConfigClockSource+0x16c>
 8003164:	2b60      	cmp	r3, #96	; 0x60
 8003166:	d050      	beq.n	800320a <HAL_TIM_ConfigClockSource+0x11a>
 8003168:	2b60      	cmp	r3, #96	; 0x60
 800316a:	d877      	bhi.n	800325c <HAL_TIM_ConfigClockSource+0x16c>
 800316c:	2b50      	cmp	r3, #80	; 0x50
 800316e:	d03c      	beq.n	80031ea <HAL_TIM_ConfigClockSource+0xfa>
 8003170:	2b50      	cmp	r3, #80	; 0x50
 8003172:	d873      	bhi.n	800325c <HAL_TIM_ConfigClockSource+0x16c>
 8003174:	2b40      	cmp	r3, #64	; 0x40
 8003176:	d058      	beq.n	800322a <HAL_TIM_ConfigClockSource+0x13a>
 8003178:	2b40      	cmp	r3, #64	; 0x40
 800317a:	d86f      	bhi.n	800325c <HAL_TIM_ConfigClockSource+0x16c>
 800317c:	2b30      	cmp	r3, #48	; 0x30
 800317e:	d064      	beq.n	800324a <HAL_TIM_ConfigClockSource+0x15a>
 8003180:	2b30      	cmp	r3, #48	; 0x30
 8003182:	d86b      	bhi.n	800325c <HAL_TIM_ConfigClockSource+0x16c>
 8003184:	2b20      	cmp	r3, #32
 8003186:	d060      	beq.n	800324a <HAL_TIM_ConfigClockSource+0x15a>
 8003188:	2b20      	cmp	r3, #32
 800318a:	d867      	bhi.n	800325c <HAL_TIM_ConfigClockSource+0x16c>
 800318c:	2b00      	cmp	r3, #0
 800318e:	d05c      	beq.n	800324a <HAL_TIM_ConfigClockSource+0x15a>
 8003190:	2b10      	cmp	r3, #16
 8003192:	d05a      	beq.n	800324a <HAL_TIM_ConfigClockSource+0x15a>
 8003194:	e062      	b.n	800325c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031a6:	f000 facc 	bl	8003742 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80031b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68ba      	ldr	r2, [r7, #8]
 80031c0:	609a      	str	r2, [r3, #8]
      break;
 80031c2:	e04f      	b.n	8003264 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031d4:	f000 fab5 	bl	8003742 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689a      	ldr	r2, [r3, #8]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031e6:	609a      	str	r2, [r3, #8]
      break;
 80031e8:	e03c      	b.n	8003264 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031f6:	461a      	mov	r2, r3
 80031f8:	f000 fa2c 	bl	8003654 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2150      	movs	r1, #80	; 0x50
 8003202:	4618      	mov	r0, r3
 8003204:	f000 fa83 	bl	800370e <TIM_ITRx_SetConfig>
      break;
 8003208:	e02c      	b.n	8003264 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003216:	461a      	mov	r2, r3
 8003218:	f000 fa4a 	bl	80036b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2160      	movs	r1, #96	; 0x60
 8003222:	4618      	mov	r0, r3
 8003224:	f000 fa73 	bl	800370e <TIM_ITRx_SetConfig>
      break;
 8003228:	e01c      	b.n	8003264 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003236:	461a      	mov	r2, r3
 8003238:	f000 fa0c 	bl	8003654 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2140      	movs	r1, #64	; 0x40
 8003242:	4618      	mov	r0, r3
 8003244:	f000 fa63 	bl	800370e <TIM_ITRx_SetConfig>
      break;
 8003248:	e00c      	b.n	8003264 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4619      	mov	r1, r3
 8003254:	4610      	mov	r0, r2
 8003256:	f000 fa5a 	bl	800370e <TIM_ITRx_SetConfig>
      break;
 800325a:	e003      	b.n	8003264 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	73fb      	strb	r3, [r7, #15]
      break;
 8003260:	e000      	b.n	8003264 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003262:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003274:	7bfb      	ldrb	r3, [r7, #15]
}
 8003276:	4618      	mov	r0, r3
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
	...

08003280 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a29      	ldr	r2, [pc, #164]	; (8003338 <TIM_Base_SetConfig+0xb8>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d00b      	beq.n	80032b0 <TIM_Base_SetConfig+0x30>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800329e:	d007      	beq.n	80032b0 <TIM_Base_SetConfig+0x30>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a26      	ldr	r2, [pc, #152]	; (800333c <TIM_Base_SetConfig+0xbc>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d003      	beq.n	80032b0 <TIM_Base_SetConfig+0x30>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a25      	ldr	r2, [pc, #148]	; (8003340 <TIM_Base_SetConfig+0xc0>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d108      	bne.n	80032c2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	4313      	orrs	r3, r2
 80032c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a1c      	ldr	r2, [pc, #112]	; (8003338 <TIM_Base_SetConfig+0xb8>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d00b      	beq.n	80032e2 <TIM_Base_SetConfig+0x62>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d0:	d007      	beq.n	80032e2 <TIM_Base_SetConfig+0x62>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a19      	ldr	r2, [pc, #100]	; (800333c <TIM_Base_SetConfig+0xbc>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d003      	beq.n	80032e2 <TIM_Base_SetConfig+0x62>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a18      	ldr	r2, [pc, #96]	; (8003340 <TIM_Base_SetConfig+0xc0>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d108      	bne.n	80032f4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	4313      	orrs	r3, r2
 8003300:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	689a      	ldr	r2, [r3, #8]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a07      	ldr	r2, [pc, #28]	; (8003338 <TIM_Base_SetConfig+0xb8>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d103      	bne.n	8003328 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	691a      	ldr	r2, [r3, #16]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	615a      	str	r2, [r3, #20]
}
 800332e:	bf00      	nop
 8003330:	3714      	adds	r7, #20
 8003332:	46bd      	mov	sp, r7
 8003334:	bc80      	pop	{r7}
 8003336:	4770      	bx	lr
 8003338:	40012c00 	.word	0x40012c00
 800333c:	40000400 	.word	0x40000400
 8003340:	40000800 	.word	0x40000800

08003344 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003344:	b480      	push	{r7}
 8003346:	b087      	sub	sp, #28
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a1b      	ldr	r3, [r3, #32]
 8003358:	f023 0201 	bic.w	r2, r3, #1
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f023 0303 	bic.w	r3, r3, #3
 800337a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	4313      	orrs	r3, r2
 8003384:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	f023 0302 	bic.w	r3, r3, #2
 800338c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	4313      	orrs	r3, r2
 8003396:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a1c      	ldr	r2, [pc, #112]	; (800340c <TIM_OC1_SetConfig+0xc8>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d10c      	bne.n	80033ba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	f023 0308 	bic.w	r3, r3, #8
 80033a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	697a      	ldr	r2, [r7, #20]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	f023 0304 	bic.w	r3, r3, #4
 80033b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a13      	ldr	r2, [pc, #76]	; (800340c <TIM_OC1_SetConfig+0xc8>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d111      	bne.n	80033e6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	4313      	orrs	r3, r2
 80033da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	685a      	ldr	r2, [r3, #4]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	697a      	ldr	r2, [r7, #20]
 80033fe:	621a      	str	r2, [r3, #32]
}
 8003400:	bf00      	nop
 8003402:	371c      	adds	r7, #28
 8003404:	46bd      	mov	sp, r7
 8003406:	bc80      	pop	{r7}
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	40012c00 	.word	0x40012c00

08003410 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003410:	b480      	push	{r7}
 8003412:	b087      	sub	sp, #28
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	f023 0210 	bic.w	r2, r3, #16
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800343e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003446:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	021b      	lsls	r3, r3, #8
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	4313      	orrs	r3, r2
 8003452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	f023 0320 	bic.w	r3, r3, #32
 800345a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	011b      	lsls	r3, r3, #4
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	4313      	orrs	r3, r2
 8003466:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a1d      	ldr	r2, [pc, #116]	; (80034e0 <TIM_OC2_SetConfig+0xd0>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d10d      	bne.n	800348c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003476:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	011b      	lsls	r3, r3, #4
 800347e:	697a      	ldr	r2, [r7, #20]
 8003480:	4313      	orrs	r3, r2
 8003482:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800348a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a14      	ldr	r2, [pc, #80]	; (80034e0 <TIM_OC2_SetConfig+0xd0>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d113      	bne.n	80034bc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800349a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	695b      	ldr	r3, [r3, #20]
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	68fa      	ldr	r2, [r7, #12]
 80034c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685a      	ldr	r2, [r3, #4]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	621a      	str	r2, [r3, #32]
}
 80034d6:	bf00      	nop
 80034d8:	371c      	adds	r7, #28
 80034da:	46bd      	mov	sp, r7
 80034dc:	bc80      	pop	{r7}
 80034de:	4770      	bx	lr
 80034e0:	40012c00 	.word	0x40012c00

080034e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b087      	sub	sp, #28
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	69db      	ldr	r3, [r3, #28]
 800350a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f023 0303 	bic.w	r3, r3, #3
 800351a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	4313      	orrs	r3, r2
 8003524:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800352c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	021b      	lsls	r3, r3, #8
 8003534:	697a      	ldr	r2, [r7, #20]
 8003536:	4313      	orrs	r3, r2
 8003538:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a1d      	ldr	r2, [pc, #116]	; (80035b4 <TIM_OC3_SetConfig+0xd0>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d10d      	bne.n	800355e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003548:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	021b      	lsls	r3, r3, #8
 8003550:	697a      	ldr	r2, [r7, #20]
 8003552:	4313      	orrs	r3, r2
 8003554:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800355c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a14      	ldr	r2, [pc, #80]	; (80035b4 <TIM_OC3_SetConfig+0xd0>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d113      	bne.n	800358e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800356c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003574:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	011b      	lsls	r3, r3, #4
 800357c:	693a      	ldr	r2, [r7, #16]
 800357e:	4313      	orrs	r3, r2
 8003580:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	011b      	lsls	r3, r3, #4
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	4313      	orrs	r3, r2
 800358c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685a      	ldr	r2, [r3, #4]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	621a      	str	r2, [r3, #32]
}
 80035a8:	bf00      	nop
 80035aa:	371c      	adds	r7, #28
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bc80      	pop	{r7}
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	40012c00 	.word	0x40012c00

080035b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b087      	sub	sp, #28
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a1b      	ldr	r3, [r3, #32]
 80035cc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	69db      	ldr	r3, [r3, #28]
 80035de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	021b      	lsls	r3, r3, #8
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003602:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	031b      	lsls	r3, r3, #12
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	4313      	orrs	r3, r2
 800360e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a0f      	ldr	r2, [pc, #60]	; (8003650 <TIM_OC4_SetConfig+0x98>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d109      	bne.n	800362c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800361e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	695b      	ldr	r3, [r3, #20]
 8003624:	019b      	lsls	r3, r3, #6
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	4313      	orrs	r3, r2
 800362a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685a      	ldr	r2, [r3, #4]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	621a      	str	r2, [r3, #32]
}
 8003646:	bf00      	nop
 8003648:	371c      	adds	r7, #28
 800364a:	46bd      	mov	sp, r7
 800364c:	bc80      	pop	{r7}
 800364e:	4770      	bx	lr
 8003650:	40012c00 	.word	0x40012c00

08003654 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003654:	b480      	push	{r7}
 8003656:	b087      	sub	sp, #28
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6a1b      	ldr	r3, [r3, #32]
 8003664:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	f023 0201 	bic.w	r2, r3, #1
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800367e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	011b      	lsls	r3, r3, #4
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	4313      	orrs	r3, r2
 8003688:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	f023 030a 	bic.w	r3, r3, #10
 8003690:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	4313      	orrs	r3, r2
 8003698:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	621a      	str	r2, [r3, #32]
}
 80036a6:	bf00      	nop
 80036a8:	371c      	adds	r7, #28
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bc80      	pop	{r7}
 80036ae:	4770      	bx	lr

080036b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b087      	sub	sp, #28
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	f023 0210 	bic.w	r2, r3, #16
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	031b      	lsls	r3, r3, #12
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036ec:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	011b      	lsls	r3, r3, #4
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	621a      	str	r2, [r3, #32]
}
 8003704:	bf00      	nop
 8003706:	371c      	adds	r7, #28
 8003708:	46bd      	mov	sp, r7
 800370a:	bc80      	pop	{r7}
 800370c:	4770      	bx	lr

0800370e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800370e:	b480      	push	{r7}
 8003710:	b085      	sub	sp, #20
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
 8003716:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003724:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003726:	683a      	ldr	r2, [r7, #0]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	4313      	orrs	r3, r2
 800372c:	f043 0307 	orr.w	r3, r3, #7
 8003730:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	609a      	str	r2, [r3, #8]
}
 8003738:	bf00      	nop
 800373a:	3714      	adds	r7, #20
 800373c:	46bd      	mov	sp, r7
 800373e:	bc80      	pop	{r7}
 8003740:	4770      	bx	lr

08003742 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003742:	b480      	push	{r7}
 8003744:	b087      	sub	sp, #28
 8003746:	af00      	add	r7, sp, #0
 8003748:	60f8      	str	r0, [r7, #12]
 800374a:	60b9      	str	r1, [r7, #8]
 800374c:	607a      	str	r2, [r7, #4]
 800374e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800375c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	021a      	lsls	r2, r3, #8
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	431a      	orrs	r2, r3
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	4313      	orrs	r3, r2
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	4313      	orrs	r3, r2
 800376e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	609a      	str	r2, [r3, #8]
}
 8003776:	bf00      	nop
 8003778:	371c      	adds	r7, #28
 800377a:	46bd      	mov	sp, r7
 800377c:	bc80      	pop	{r7}
 800377e:	4770      	bx	lr

08003780 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003780:	b480      	push	{r7}
 8003782:	b087      	sub	sp, #28
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	f003 031f 	and.w	r3, r3, #31
 8003792:	2201      	movs	r2, #1
 8003794:	fa02 f303 	lsl.w	r3, r2, r3
 8003798:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6a1a      	ldr	r2, [r3, #32]
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	43db      	mvns	r3, r3
 80037a2:	401a      	ands	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6a1a      	ldr	r2, [r3, #32]
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	f003 031f 	and.w	r3, r3, #31
 80037b2:	6879      	ldr	r1, [r7, #4]
 80037b4:	fa01 f303 	lsl.w	r3, r1, r3
 80037b8:	431a      	orrs	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	621a      	str	r2, [r3, #32]
}
 80037be:	bf00      	nop
 80037c0:	371c      	adds	r7, #28
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bc80      	pop	{r7}
 80037c6:	4770      	bx	lr

080037c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b085      	sub	sp, #20
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d101      	bne.n	80037e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037dc:	2302      	movs	r3, #2
 80037de:	e046      	b.n	800386e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2202      	movs	r2, #2
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003806:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	4313      	orrs	r3, r2
 8003810:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a16      	ldr	r2, [pc, #88]	; (8003878 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d00e      	beq.n	8003842 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800382c:	d009      	beq.n	8003842 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a12      	ldr	r2, [pc, #72]	; (800387c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d004      	beq.n	8003842 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a10      	ldr	r2, [pc, #64]	; (8003880 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d10c      	bne.n	800385c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003848:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	68ba      	ldr	r2, [r7, #8]
 8003850:	4313      	orrs	r3, r2
 8003852:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3714      	adds	r7, #20
 8003872:	46bd      	mov	sp, r7
 8003874:	bc80      	pop	{r7}
 8003876:	4770      	bx	lr
 8003878:	40012c00 	.word	0x40012c00
 800387c:	40000400 	.word	0x40000400
 8003880:	40000800 	.word	0x40000800

08003884 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d101      	bne.n	8003896 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e042      	b.n	800391c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d106      	bne.n	80038b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f7fc fdee 	bl	800048c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2224      	movs	r2, #36	; 0x24
 80038b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68da      	ldr	r2, [r3, #12]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 f9af 	bl	8003c2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	691a      	ldr	r2, [r3, #16]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	695a      	ldr	r2, [r3, #20]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68da      	ldr	r2, [r3, #12]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2220      	movs	r2, #32
 8003908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2220      	movs	r2, #32
 8003910:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	3708      	adds	r7, #8
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b08a      	sub	sp, #40	; 0x28
 8003928:	af02      	add	r7, sp, #8
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	603b      	str	r3, [r7, #0]
 8003930:	4613      	mov	r3, r2
 8003932:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003934:	2300      	movs	r3, #0
 8003936:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800393e:	b2db      	uxtb	r3, r3
 8003940:	2b20      	cmp	r3, #32
 8003942:	d16d      	bne.n	8003a20 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d002      	beq.n	8003950 <HAL_UART_Transmit+0x2c>
 800394a:	88fb      	ldrh	r3, [r7, #6]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d101      	bne.n	8003954 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e066      	b.n	8003a22 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2221      	movs	r2, #33	; 0x21
 800395e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003962:	f7fd fde5 	bl	8001530 <HAL_GetTick>
 8003966:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	88fa      	ldrh	r2, [r7, #6]
 800396c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	88fa      	ldrh	r2, [r7, #6]
 8003972:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800397c:	d108      	bne.n	8003990 <HAL_UART_Transmit+0x6c>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d104      	bne.n	8003990 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003986:	2300      	movs	r3, #0
 8003988:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	61bb      	str	r3, [r7, #24]
 800398e:	e003      	b.n	8003998 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003994:	2300      	movs	r3, #0
 8003996:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003998:	e02a      	b.n	80039f0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	9300      	str	r3, [sp, #0]
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	2200      	movs	r2, #0
 80039a2:	2180      	movs	r1, #128	; 0x80
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f000 f8d2 	bl	8003b4e <UART_WaitOnFlagUntilTimeout>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d001      	beq.n	80039b4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e036      	b.n	8003a22 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10b      	bne.n	80039d2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	881b      	ldrh	r3, [r3, #0]
 80039be:	461a      	mov	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	3302      	adds	r3, #2
 80039ce:	61bb      	str	r3, [r7, #24]
 80039d0:	e007      	b.n	80039e2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	781a      	ldrb	r2, [r3, #0]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	3301      	adds	r3, #1
 80039e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	3b01      	subs	r3, #1
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1cf      	bne.n	800399a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	9300      	str	r3, [sp, #0]
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	2200      	movs	r2, #0
 8003a02:	2140      	movs	r1, #64	; 0x40
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f000 f8a2 	bl	8003b4e <UART_WaitOnFlagUntilTimeout>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d001      	beq.n	8003a14 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e006      	b.n	8003a22 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2220      	movs	r2, #32
 8003a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	e000      	b.n	8003a22 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003a20:	2302      	movs	r3, #2
  }
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3720      	adds	r7, #32
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b08a      	sub	sp, #40	; 0x28
 8003a2e:	af02      	add	r7, sp, #8
 8003a30:	60f8      	str	r0, [r7, #12]
 8003a32:	60b9      	str	r1, [r7, #8]
 8003a34:	603b      	str	r3, [r7, #0]
 8003a36:	4613      	mov	r3, r2
 8003a38:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b20      	cmp	r3, #32
 8003a48:	d17c      	bne.n	8003b44 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d002      	beq.n	8003a56 <HAL_UART_Receive+0x2c>
 8003a50:	88fb      	ldrh	r3, [r7, #6]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e075      	b.n	8003b46 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2222      	movs	r2, #34	; 0x22
 8003a64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a6e:	f7fd fd5f 	bl	8001530 <HAL_GetTick>
 8003a72:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	88fa      	ldrh	r2, [r7, #6]
 8003a78:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	88fa      	ldrh	r2, [r7, #6]
 8003a7e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a88:	d108      	bne.n	8003a9c <HAL_UART_Receive+0x72>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d104      	bne.n	8003a9c <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8003a92:	2300      	movs	r3, #0
 8003a94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	61bb      	str	r3, [r7, #24]
 8003a9a:	e003      	b.n	8003aa4 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003aa4:	e043      	b.n	8003b2e <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	9300      	str	r3, [sp, #0]
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	2200      	movs	r2, #0
 8003aae:	2120      	movs	r1, #32
 8003ab0:	68f8      	ldr	r0, [r7, #12]
 8003ab2:	f000 f84c 	bl	8003b4e <UART_WaitOnFlagUntilTimeout>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e042      	b.n	8003b46 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d10c      	bne.n	8003ae0 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ad2:	b29a      	uxth	r2, r3
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	3302      	adds	r3, #2
 8003adc:	61bb      	str	r3, [r7, #24]
 8003ade:	e01f      	b.n	8003b20 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ae8:	d007      	beq.n	8003afa <HAL_UART_Receive+0xd0>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10a      	bne.n	8003b08 <HAL_UART_Receive+0xde>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d106      	bne.n	8003b08 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	b2da      	uxtb	r2, r3
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	701a      	strb	r2, [r3, #0]
 8003b06:	e008      	b.n	8003b1a <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b14:	b2da      	uxtb	r2, r3
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	3b01      	subs	r3, #1
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1b6      	bne.n	8003aa6 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8003b40:	2300      	movs	r3, #0
 8003b42:	e000      	b.n	8003b46 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003b44:	2302      	movs	r3, #2
  }
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3720      	adds	r7, #32
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b090      	sub	sp, #64	; 0x40
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	60f8      	str	r0, [r7, #12]
 8003b56:	60b9      	str	r1, [r7, #8]
 8003b58:	603b      	str	r3, [r7, #0]
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b5e:	e050      	b.n	8003c02 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b66:	d04c      	beq.n	8003c02 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d007      	beq.n	8003b7e <UART_WaitOnFlagUntilTimeout+0x30>
 8003b6e:	f7fd fcdf 	bl	8001530 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d241      	bcs.n	8003c02 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	330c      	adds	r3, #12
 8003b84:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b88:	e853 3f00 	ldrex	r3, [r3]
 8003b8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b90:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	330c      	adds	r3, #12
 8003b9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b9e:	637a      	str	r2, [r7, #52]	; 0x34
 8003ba0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ba4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ba6:	e841 2300 	strex	r3, r2, [r1]
 8003baa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1e5      	bne.n	8003b7e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	3314      	adds	r3, #20
 8003bb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	e853 3f00 	ldrex	r3, [r3]
 8003bc0:	613b      	str	r3, [r7, #16]
   return(result);
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	f023 0301 	bic.w	r3, r3, #1
 8003bc8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	3314      	adds	r3, #20
 8003bd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bd2:	623a      	str	r2, [r7, #32]
 8003bd4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd6:	69f9      	ldr	r1, [r7, #28]
 8003bd8:	6a3a      	ldr	r2, [r7, #32]
 8003bda:	e841 2300 	strex	r3, r2, [r1]
 8003bde:	61bb      	str	r3, [r7, #24]
   return(result);
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1e5      	bne.n	8003bb2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2220      	movs	r2, #32
 8003bea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2220      	movs	r2, #32
 8003bf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e00f      	b.n	8003c22 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	68ba      	ldr	r2, [r7, #8]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	bf0c      	ite	eq
 8003c12:	2301      	moveq	r3, #1
 8003c14:	2300      	movne	r3, #0
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	461a      	mov	r2, r3
 8003c1a:	79fb      	ldrb	r3, [r7, #7]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d09f      	beq.n	8003b60 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3740      	adds	r7, #64	; 0x40
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
	...

08003c2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	68da      	ldr	r2, [r3, #12]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	689a      	ldr	r2, [r3, #8]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	431a      	orrs	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003c66:	f023 030c 	bic.w	r3, r3, #12
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	6812      	ldr	r2, [r2, #0]
 8003c6e:	68b9      	ldr	r1, [r7, #8]
 8003c70:	430b      	orrs	r3, r1
 8003c72:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	699a      	ldr	r2, [r3, #24]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	430a      	orrs	r2, r1
 8003c88:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a2c      	ldr	r2, [pc, #176]	; (8003d40 <UART_SetConfig+0x114>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d103      	bne.n	8003c9c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003c94:	f7fe fff0 	bl	8002c78 <HAL_RCC_GetPCLK2Freq>
 8003c98:	60f8      	str	r0, [r7, #12]
 8003c9a:	e002      	b.n	8003ca2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003c9c:	f7fe ffd8 	bl	8002c50 <HAL_RCC_GetPCLK1Freq>
 8003ca0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	4413      	add	r3, r2
 8003caa:	009a      	lsls	r2, r3, #2
 8003cac:	441a      	add	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb8:	4a22      	ldr	r2, [pc, #136]	; (8003d44 <UART_SetConfig+0x118>)
 8003cba:	fba2 2303 	umull	r2, r3, r2, r3
 8003cbe:	095b      	lsrs	r3, r3, #5
 8003cc0:	0119      	lsls	r1, r3, #4
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	4413      	add	r3, r2
 8003cca:	009a      	lsls	r2, r3, #2
 8003ccc:	441a      	add	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cd8:	4b1a      	ldr	r3, [pc, #104]	; (8003d44 <UART_SetConfig+0x118>)
 8003cda:	fba3 0302 	umull	r0, r3, r3, r2
 8003cde:	095b      	lsrs	r3, r3, #5
 8003ce0:	2064      	movs	r0, #100	; 0x64
 8003ce2:	fb00 f303 	mul.w	r3, r0, r3
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	011b      	lsls	r3, r3, #4
 8003cea:	3332      	adds	r3, #50	; 0x32
 8003cec:	4a15      	ldr	r2, [pc, #84]	; (8003d44 <UART_SetConfig+0x118>)
 8003cee:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf2:	095b      	lsrs	r3, r3, #5
 8003cf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cf8:	4419      	add	r1, r3
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	4413      	add	r3, r2
 8003d02:	009a      	lsls	r2, r3, #2
 8003d04:	441a      	add	r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d10:	4b0c      	ldr	r3, [pc, #48]	; (8003d44 <UART_SetConfig+0x118>)
 8003d12:	fba3 0302 	umull	r0, r3, r3, r2
 8003d16:	095b      	lsrs	r3, r3, #5
 8003d18:	2064      	movs	r0, #100	; 0x64
 8003d1a:	fb00 f303 	mul.w	r3, r0, r3
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	011b      	lsls	r3, r3, #4
 8003d22:	3332      	adds	r3, #50	; 0x32
 8003d24:	4a07      	ldr	r2, [pc, #28]	; (8003d44 <UART_SetConfig+0x118>)
 8003d26:	fba2 2303 	umull	r2, r3, r2, r3
 8003d2a:	095b      	lsrs	r3, r3, #5
 8003d2c:	f003 020f 	and.w	r2, r3, #15
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	440a      	add	r2, r1
 8003d36:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003d38:	bf00      	nop
 8003d3a:	3710      	adds	r7, #16
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	40013800 	.word	0x40013800
 8003d44:	51eb851f 	.word	0x51eb851f

08003d48 <atoi>:
 8003d48:	220a      	movs	r2, #10
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	f000 b87e 	b.w	8003e4c <strtol>

08003d50 <_strtol_l.constprop.0>:
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d56:	4686      	mov	lr, r0
 8003d58:	4690      	mov	r8, r2
 8003d5a:	d001      	beq.n	8003d60 <_strtol_l.constprop.0+0x10>
 8003d5c:	2b24      	cmp	r3, #36	; 0x24
 8003d5e:	d906      	bls.n	8003d6e <_strtol_l.constprop.0+0x1e>
 8003d60:	f000 f8a6 	bl	8003eb0 <__errno>
 8003d64:	2316      	movs	r3, #22
 8003d66:	6003      	str	r3, [r0, #0]
 8003d68:	2000      	movs	r0, #0
 8003d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d6e:	460d      	mov	r5, r1
 8003d70:	4835      	ldr	r0, [pc, #212]	; (8003e48 <_strtol_l.constprop.0+0xf8>)
 8003d72:	462a      	mov	r2, r5
 8003d74:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003d78:	5d06      	ldrb	r6, [r0, r4]
 8003d7a:	f016 0608 	ands.w	r6, r6, #8
 8003d7e:	d1f8      	bne.n	8003d72 <_strtol_l.constprop.0+0x22>
 8003d80:	2c2d      	cmp	r4, #45	; 0x2d
 8003d82:	d12e      	bne.n	8003de2 <_strtol_l.constprop.0+0x92>
 8003d84:	2601      	movs	r6, #1
 8003d86:	782c      	ldrb	r4, [r5, #0]
 8003d88:	1c95      	adds	r5, r2, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d057      	beq.n	8003e3e <_strtol_l.constprop.0+0xee>
 8003d8e:	2b10      	cmp	r3, #16
 8003d90:	d109      	bne.n	8003da6 <_strtol_l.constprop.0+0x56>
 8003d92:	2c30      	cmp	r4, #48	; 0x30
 8003d94:	d107      	bne.n	8003da6 <_strtol_l.constprop.0+0x56>
 8003d96:	782a      	ldrb	r2, [r5, #0]
 8003d98:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8003d9c:	2a58      	cmp	r2, #88	; 0x58
 8003d9e:	d149      	bne.n	8003e34 <_strtol_l.constprop.0+0xe4>
 8003da0:	2310      	movs	r3, #16
 8003da2:	786c      	ldrb	r4, [r5, #1]
 8003da4:	3502      	adds	r5, #2
 8003da6:	2200      	movs	r2, #0
 8003da8:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8003dac:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003db0:	fbbc f9f3 	udiv	r9, ip, r3
 8003db4:	4610      	mov	r0, r2
 8003db6:	fb03 ca19 	mls	sl, r3, r9, ip
 8003dba:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8003dbe:	2f09      	cmp	r7, #9
 8003dc0:	d814      	bhi.n	8003dec <_strtol_l.constprop.0+0x9c>
 8003dc2:	463c      	mov	r4, r7
 8003dc4:	42a3      	cmp	r3, r4
 8003dc6:	dd20      	ble.n	8003e0a <_strtol_l.constprop.0+0xba>
 8003dc8:	1c57      	adds	r7, r2, #1
 8003dca:	d007      	beq.n	8003ddc <_strtol_l.constprop.0+0x8c>
 8003dcc:	4581      	cmp	r9, r0
 8003dce:	d319      	bcc.n	8003e04 <_strtol_l.constprop.0+0xb4>
 8003dd0:	d101      	bne.n	8003dd6 <_strtol_l.constprop.0+0x86>
 8003dd2:	45a2      	cmp	sl, r4
 8003dd4:	db16      	blt.n	8003e04 <_strtol_l.constprop.0+0xb4>
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	fb00 4003 	mla	r0, r0, r3, r4
 8003ddc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003de0:	e7eb      	b.n	8003dba <_strtol_l.constprop.0+0x6a>
 8003de2:	2c2b      	cmp	r4, #43	; 0x2b
 8003de4:	bf04      	itt	eq
 8003de6:	782c      	ldrbeq	r4, [r5, #0]
 8003de8:	1c95      	addeq	r5, r2, #2
 8003dea:	e7ce      	b.n	8003d8a <_strtol_l.constprop.0+0x3a>
 8003dec:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8003df0:	2f19      	cmp	r7, #25
 8003df2:	d801      	bhi.n	8003df8 <_strtol_l.constprop.0+0xa8>
 8003df4:	3c37      	subs	r4, #55	; 0x37
 8003df6:	e7e5      	b.n	8003dc4 <_strtol_l.constprop.0+0x74>
 8003df8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8003dfc:	2f19      	cmp	r7, #25
 8003dfe:	d804      	bhi.n	8003e0a <_strtol_l.constprop.0+0xba>
 8003e00:	3c57      	subs	r4, #87	; 0x57
 8003e02:	e7df      	b.n	8003dc4 <_strtol_l.constprop.0+0x74>
 8003e04:	f04f 32ff 	mov.w	r2, #4294967295
 8003e08:	e7e8      	b.n	8003ddc <_strtol_l.constprop.0+0x8c>
 8003e0a:	1c53      	adds	r3, r2, #1
 8003e0c:	d108      	bne.n	8003e20 <_strtol_l.constprop.0+0xd0>
 8003e0e:	2322      	movs	r3, #34	; 0x22
 8003e10:	4660      	mov	r0, ip
 8003e12:	f8ce 3000 	str.w	r3, [lr]
 8003e16:	f1b8 0f00 	cmp.w	r8, #0
 8003e1a:	d0a6      	beq.n	8003d6a <_strtol_l.constprop.0+0x1a>
 8003e1c:	1e69      	subs	r1, r5, #1
 8003e1e:	e006      	b.n	8003e2e <_strtol_l.constprop.0+0xde>
 8003e20:	b106      	cbz	r6, 8003e24 <_strtol_l.constprop.0+0xd4>
 8003e22:	4240      	negs	r0, r0
 8003e24:	f1b8 0f00 	cmp.w	r8, #0
 8003e28:	d09f      	beq.n	8003d6a <_strtol_l.constprop.0+0x1a>
 8003e2a:	2a00      	cmp	r2, #0
 8003e2c:	d1f6      	bne.n	8003e1c <_strtol_l.constprop.0+0xcc>
 8003e2e:	f8c8 1000 	str.w	r1, [r8]
 8003e32:	e79a      	b.n	8003d6a <_strtol_l.constprop.0+0x1a>
 8003e34:	2430      	movs	r4, #48	; 0x30
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1b5      	bne.n	8003da6 <_strtol_l.constprop.0+0x56>
 8003e3a:	2308      	movs	r3, #8
 8003e3c:	e7b3      	b.n	8003da6 <_strtol_l.constprop.0+0x56>
 8003e3e:	2c30      	cmp	r4, #48	; 0x30
 8003e40:	d0a9      	beq.n	8003d96 <_strtol_l.constprop.0+0x46>
 8003e42:	230a      	movs	r3, #10
 8003e44:	e7af      	b.n	8003da6 <_strtol_l.constprop.0+0x56>
 8003e46:	bf00      	nop
 8003e48:	08004a67 	.word	0x08004a67

08003e4c <strtol>:
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	460a      	mov	r2, r1
 8003e50:	4601      	mov	r1, r0
 8003e52:	4802      	ldr	r0, [pc, #8]	; (8003e5c <strtol+0x10>)
 8003e54:	6800      	ldr	r0, [r0, #0]
 8003e56:	f7ff bf7b 	b.w	8003d50 <_strtol_l.constprop.0>
 8003e5a:	bf00      	nop
 8003e5c:	2000012c 	.word	0x2000012c

08003e60 <siprintf>:
 8003e60:	b40e      	push	{r1, r2, r3}
 8003e62:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003e66:	b500      	push	{lr}
 8003e68:	b09c      	sub	sp, #112	; 0x70
 8003e6a:	ab1d      	add	r3, sp, #116	; 0x74
 8003e6c:	9002      	str	r0, [sp, #8]
 8003e6e:	9006      	str	r0, [sp, #24]
 8003e70:	9107      	str	r1, [sp, #28]
 8003e72:	9104      	str	r1, [sp, #16]
 8003e74:	4808      	ldr	r0, [pc, #32]	; (8003e98 <siprintf+0x38>)
 8003e76:	4909      	ldr	r1, [pc, #36]	; (8003e9c <siprintf+0x3c>)
 8003e78:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e7c:	9105      	str	r1, [sp, #20]
 8003e7e:	6800      	ldr	r0, [r0, #0]
 8003e80:	a902      	add	r1, sp, #8
 8003e82:	9301      	str	r3, [sp, #4]
 8003e84:	f000 f99c 	bl	80041c0 <_svfiprintf_r>
 8003e88:	2200      	movs	r2, #0
 8003e8a:	9b02      	ldr	r3, [sp, #8]
 8003e8c:	701a      	strb	r2, [r3, #0]
 8003e8e:	b01c      	add	sp, #112	; 0x70
 8003e90:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e94:	b003      	add	sp, #12
 8003e96:	4770      	bx	lr
 8003e98:	2000012c 	.word	0x2000012c
 8003e9c:	ffff0208 	.word	0xffff0208

08003ea0 <memset>:
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	4402      	add	r2, r0
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d100      	bne.n	8003eaa <memset+0xa>
 8003ea8:	4770      	bx	lr
 8003eaa:	f803 1b01 	strb.w	r1, [r3], #1
 8003eae:	e7f9      	b.n	8003ea4 <memset+0x4>

08003eb0 <__errno>:
 8003eb0:	4b01      	ldr	r3, [pc, #4]	; (8003eb8 <__errno+0x8>)
 8003eb2:	6818      	ldr	r0, [r3, #0]
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	2000012c 	.word	0x2000012c

08003ebc <__libc_init_array>:
 8003ebc:	b570      	push	{r4, r5, r6, lr}
 8003ebe:	2600      	movs	r6, #0
 8003ec0:	4d0c      	ldr	r5, [pc, #48]	; (8003ef4 <__libc_init_array+0x38>)
 8003ec2:	4c0d      	ldr	r4, [pc, #52]	; (8003ef8 <__libc_init_array+0x3c>)
 8003ec4:	1b64      	subs	r4, r4, r5
 8003ec6:	10a4      	asrs	r4, r4, #2
 8003ec8:	42a6      	cmp	r6, r4
 8003eca:	d109      	bne.n	8003ee0 <__libc_init_array+0x24>
 8003ecc:	f000 fc7a 	bl	80047c4 <_init>
 8003ed0:	2600      	movs	r6, #0
 8003ed2:	4d0a      	ldr	r5, [pc, #40]	; (8003efc <__libc_init_array+0x40>)
 8003ed4:	4c0a      	ldr	r4, [pc, #40]	; (8003f00 <__libc_init_array+0x44>)
 8003ed6:	1b64      	subs	r4, r4, r5
 8003ed8:	10a4      	asrs	r4, r4, #2
 8003eda:	42a6      	cmp	r6, r4
 8003edc:	d105      	bne.n	8003eea <__libc_init_array+0x2e>
 8003ede:	bd70      	pop	{r4, r5, r6, pc}
 8003ee0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ee4:	4798      	blx	r3
 8003ee6:	3601      	adds	r6, #1
 8003ee8:	e7ee      	b.n	8003ec8 <__libc_init_array+0xc>
 8003eea:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eee:	4798      	blx	r3
 8003ef0:	3601      	adds	r6, #1
 8003ef2:	e7f2      	b.n	8003eda <__libc_init_array+0x1e>
 8003ef4:	08004b9c 	.word	0x08004b9c
 8003ef8:	08004b9c 	.word	0x08004b9c
 8003efc:	08004b9c 	.word	0x08004b9c
 8003f00:	08004ba0 	.word	0x08004ba0

08003f04 <__retarget_lock_acquire_recursive>:
 8003f04:	4770      	bx	lr

08003f06 <__retarget_lock_release_recursive>:
 8003f06:	4770      	bx	lr

08003f08 <memcpy>:
 8003f08:	440a      	add	r2, r1
 8003f0a:	4291      	cmp	r1, r2
 8003f0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003f10:	d100      	bne.n	8003f14 <memcpy+0xc>
 8003f12:	4770      	bx	lr
 8003f14:	b510      	push	{r4, lr}
 8003f16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f1a:	4291      	cmp	r1, r2
 8003f1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f20:	d1f9      	bne.n	8003f16 <memcpy+0xe>
 8003f22:	bd10      	pop	{r4, pc}

08003f24 <_free_r>:
 8003f24:	b538      	push	{r3, r4, r5, lr}
 8003f26:	4605      	mov	r5, r0
 8003f28:	2900      	cmp	r1, #0
 8003f2a:	d040      	beq.n	8003fae <_free_r+0x8a>
 8003f2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f30:	1f0c      	subs	r4, r1, #4
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	bfb8      	it	lt
 8003f36:	18e4      	addlt	r4, r4, r3
 8003f38:	f000 f8dc 	bl	80040f4 <__malloc_lock>
 8003f3c:	4a1c      	ldr	r2, [pc, #112]	; (8003fb0 <_free_r+0x8c>)
 8003f3e:	6813      	ldr	r3, [r2, #0]
 8003f40:	b933      	cbnz	r3, 8003f50 <_free_r+0x2c>
 8003f42:	6063      	str	r3, [r4, #4]
 8003f44:	6014      	str	r4, [r2, #0]
 8003f46:	4628      	mov	r0, r5
 8003f48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f4c:	f000 b8d8 	b.w	8004100 <__malloc_unlock>
 8003f50:	42a3      	cmp	r3, r4
 8003f52:	d908      	bls.n	8003f66 <_free_r+0x42>
 8003f54:	6820      	ldr	r0, [r4, #0]
 8003f56:	1821      	adds	r1, r4, r0
 8003f58:	428b      	cmp	r3, r1
 8003f5a:	bf01      	itttt	eq
 8003f5c:	6819      	ldreq	r1, [r3, #0]
 8003f5e:	685b      	ldreq	r3, [r3, #4]
 8003f60:	1809      	addeq	r1, r1, r0
 8003f62:	6021      	streq	r1, [r4, #0]
 8003f64:	e7ed      	b.n	8003f42 <_free_r+0x1e>
 8003f66:	461a      	mov	r2, r3
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	b10b      	cbz	r3, 8003f70 <_free_r+0x4c>
 8003f6c:	42a3      	cmp	r3, r4
 8003f6e:	d9fa      	bls.n	8003f66 <_free_r+0x42>
 8003f70:	6811      	ldr	r1, [r2, #0]
 8003f72:	1850      	adds	r0, r2, r1
 8003f74:	42a0      	cmp	r0, r4
 8003f76:	d10b      	bne.n	8003f90 <_free_r+0x6c>
 8003f78:	6820      	ldr	r0, [r4, #0]
 8003f7a:	4401      	add	r1, r0
 8003f7c:	1850      	adds	r0, r2, r1
 8003f7e:	4283      	cmp	r3, r0
 8003f80:	6011      	str	r1, [r2, #0]
 8003f82:	d1e0      	bne.n	8003f46 <_free_r+0x22>
 8003f84:	6818      	ldr	r0, [r3, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	4408      	add	r0, r1
 8003f8a:	6010      	str	r0, [r2, #0]
 8003f8c:	6053      	str	r3, [r2, #4]
 8003f8e:	e7da      	b.n	8003f46 <_free_r+0x22>
 8003f90:	d902      	bls.n	8003f98 <_free_r+0x74>
 8003f92:	230c      	movs	r3, #12
 8003f94:	602b      	str	r3, [r5, #0]
 8003f96:	e7d6      	b.n	8003f46 <_free_r+0x22>
 8003f98:	6820      	ldr	r0, [r4, #0]
 8003f9a:	1821      	adds	r1, r4, r0
 8003f9c:	428b      	cmp	r3, r1
 8003f9e:	bf01      	itttt	eq
 8003fa0:	6819      	ldreq	r1, [r3, #0]
 8003fa2:	685b      	ldreq	r3, [r3, #4]
 8003fa4:	1809      	addeq	r1, r1, r0
 8003fa6:	6021      	streq	r1, [r4, #0]
 8003fa8:	6063      	str	r3, [r4, #4]
 8003faa:	6054      	str	r4, [r2, #4]
 8003fac:	e7cb      	b.n	8003f46 <_free_r+0x22>
 8003fae:	bd38      	pop	{r3, r4, r5, pc}
 8003fb0:	200003b8 	.word	0x200003b8

08003fb4 <sbrk_aligned>:
 8003fb4:	b570      	push	{r4, r5, r6, lr}
 8003fb6:	4e0e      	ldr	r6, [pc, #56]	; (8003ff0 <sbrk_aligned+0x3c>)
 8003fb8:	460c      	mov	r4, r1
 8003fba:	6831      	ldr	r1, [r6, #0]
 8003fbc:	4605      	mov	r5, r0
 8003fbe:	b911      	cbnz	r1, 8003fc6 <sbrk_aligned+0x12>
 8003fc0:	f000 fbaa 	bl	8004718 <_sbrk_r>
 8003fc4:	6030      	str	r0, [r6, #0]
 8003fc6:	4621      	mov	r1, r4
 8003fc8:	4628      	mov	r0, r5
 8003fca:	f000 fba5 	bl	8004718 <_sbrk_r>
 8003fce:	1c43      	adds	r3, r0, #1
 8003fd0:	d00a      	beq.n	8003fe8 <sbrk_aligned+0x34>
 8003fd2:	1cc4      	adds	r4, r0, #3
 8003fd4:	f024 0403 	bic.w	r4, r4, #3
 8003fd8:	42a0      	cmp	r0, r4
 8003fda:	d007      	beq.n	8003fec <sbrk_aligned+0x38>
 8003fdc:	1a21      	subs	r1, r4, r0
 8003fde:	4628      	mov	r0, r5
 8003fe0:	f000 fb9a 	bl	8004718 <_sbrk_r>
 8003fe4:	3001      	adds	r0, #1
 8003fe6:	d101      	bne.n	8003fec <sbrk_aligned+0x38>
 8003fe8:	f04f 34ff 	mov.w	r4, #4294967295
 8003fec:	4620      	mov	r0, r4
 8003fee:	bd70      	pop	{r4, r5, r6, pc}
 8003ff0:	200003bc 	.word	0x200003bc

08003ff4 <_malloc_r>:
 8003ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ff8:	1ccd      	adds	r5, r1, #3
 8003ffa:	f025 0503 	bic.w	r5, r5, #3
 8003ffe:	3508      	adds	r5, #8
 8004000:	2d0c      	cmp	r5, #12
 8004002:	bf38      	it	cc
 8004004:	250c      	movcc	r5, #12
 8004006:	2d00      	cmp	r5, #0
 8004008:	4607      	mov	r7, r0
 800400a:	db01      	blt.n	8004010 <_malloc_r+0x1c>
 800400c:	42a9      	cmp	r1, r5
 800400e:	d905      	bls.n	800401c <_malloc_r+0x28>
 8004010:	230c      	movs	r3, #12
 8004012:	2600      	movs	r6, #0
 8004014:	603b      	str	r3, [r7, #0]
 8004016:	4630      	mov	r0, r6
 8004018:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800401c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80040f0 <_malloc_r+0xfc>
 8004020:	f000 f868 	bl	80040f4 <__malloc_lock>
 8004024:	f8d8 3000 	ldr.w	r3, [r8]
 8004028:	461c      	mov	r4, r3
 800402a:	bb5c      	cbnz	r4, 8004084 <_malloc_r+0x90>
 800402c:	4629      	mov	r1, r5
 800402e:	4638      	mov	r0, r7
 8004030:	f7ff ffc0 	bl	8003fb4 <sbrk_aligned>
 8004034:	1c43      	adds	r3, r0, #1
 8004036:	4604      	mov	r4, r0
 8004038:	d155      	bne.n	80040e6 <_malloc_r+0xf2>
 800403a:	f8d8 4000 	ldr.w	r4, [r8]
 800403e:	4626      	mov	r6, r4
 8004040:	2e00      	cmp	r6, #0
 8004042:	d145      	bne.n	80040d0 <_malloc_r+0xdc>
 8004044:	2c00      	cmp	r4, #0
 8004046:	d048      	beq.n	80040da <_malloc_r+0xe6>
 8004048:	6823      	ldr	r3, [r4, #0]
 800404a:	4631      	mov	r1, r6
 800404c:	4638      	mov	r0, r7
 800404e:	eb04 0903 	add.w	r9, r4, r3
 8004052:	f000 fb61 	bl	8004718 <_sbrk_r>
 8004056:	4581      	cmp	r9, r0
 8004058:	d13f      	bne.n	80040da <_malloc_r+0xe6>
 800405a:	6821      	ldr	r1, [r4, #0]
 800405c:	4638      	mov	r0, r7
 800405e:	1a6d      	subs	r5, r5, r1
 8004060:	4629      	mov	r1, r5
 8004062:	f7ff ffa7 	bl	8003fb4 <sbrk_aligned>
 8004066:	3001      	adds	r0, #1
 8004068:	d037      	beq.n	80040da <_malloc_r+0xe6>
 800406a:	6823      	ldr	r3, [r4, #0]
 800406c:	442b      	add	r3, r5
 800406e:	6023      	str	r3, [r4, #0]
 8004070:	f8d8 3000 	ldr.w	r3, [r8]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d038      	beq.n	80040ea <_malloc_r+0xf6>
 8004078:	685a      	ldr	r2, [r3, #4]
 800407a:	42a2      	cmp	r2, r4
 800407c:	d12b      	bne.n	80040d6 <_malloc_r+0xe2>
 800407e:	2200      	movs	r2, #0
 8004080:	605a      	str	r2, [r3, #4]
 8004082:	e00f      	b.n	80040a4 <_malloc_r+0xb0>
 8004084:	6822      	ldr	r2, [r4, #0]
 8004086:	1b52      	subs	r2, r2, r5
 8004088:	d41f      	bmi.n	80040ca <_malloc_r+0xd6>
 800408a:	2a0b      	cmp	r2, #11
 800408c:	d917      	bls.n	80040be <_malloc_r+0xca>
 800408e:	1961      	adds	r1, r4, r5
 8004090:	42a3      	cmp	r3, r4
 8004092:	6025      	str	r5, [r4, #0]
 8004094:	bf18      	it	ne
 8004096:	6059      	strne	r1, [r3, #4]
 8004098:	6863      	ldr	r3, [r4, #4]
 800409a:	bf08      	it	eq
 800409c:	f8c8 1000 	streq.w	r1, [r8]
 80040a0:	5162      	str	r2, [r4, r5]
 80040a2:	604b      	str	r3, [r1, #4]
 80040a4:	4638      	mov	r0, r7
 80040a6:	f104 060b 	add.w	r6, r4, #11
 80040aa:	f000 f829 	bl	8004100 <__malloc_unlock>
 80040ae:	f026 0607 	bic.w	r6, r6, #7
 80040b2:	1d23      	adds	r3, r4, #4
 80040b4:	1af2      	subs	r2, r6, r3
 80040b6:	d0ae      	beq.n	8004016 <_malloc_r+0x22>
 80040b8:	1b9b      	subs	r3, r3, r6
 80040ba:	50a3      	str	r3, [r4, r2]
 80040bc:	e7ab      	b.n	8004016 <_malloc_r+0x22>
 80040be:	42a3      	cmp	r3, r4
 80040c0:	6862      	ldr	r2, [r4, #4]
 80040c2:	d1dd      	bne.n	8004080 <_malloc_r+0x8c>
 80040c4:	f8c8 2000 	str.w	r2, [r8]
 80040c8:	e7ec      	b.n	80040a4 <_malloc_r+0xb0>
 80040ca:	4623      	mov	r3, r4
 80040cc:	6864      	ldr	r4, [r4, #4]
 80040ce:	e7ac      	b.n	800402a <_malloc_r+0x36>
 80040d0:	4634      	mov	r4, r6
 80040d2:	6876      	ldr	r6, [r6, #4]
 80040d4:	e7b4      	b.n	8004040 <_malloc_r+0x4c>
 80040d6:	4613      	mov	r3, r2
 80040d8:	e7cc      	b.n	8004074 <_malloc_r+0x80>
 80040da:	230c      	movs	r3, #12
 80040dc:	4638      	mov	r0, r7
 80040de:	603b      	str	r3, [r7, #0]
 80040e0:	f000 f80e 	bl	8004100 <__malloc_unlock>
 80040e4:	e797      	b.n	8004016 <_malloc_r+0x22>
 80040e6:	6025      	str	r5, [r4, #0]
 80040e8:	e7dc      	b.n	80040a4 <_malloc_r+0xb0>
 80040ea:	605b      	str	r3, [r3, #4]
 80040ec:	deff      	udf	#255	; 0xff
 80040ee:	bf00      	nop
 80040f0:	200003b8 	.word	0x200003b8

080040f4 <__malloc_lock>:
 80040f4:	4801      	ldr	r0, [pc, #4]	; (80040fc <__malloc_lock+0x8>)
 80040f6:	f7ff bf05 	b.w	8003f04 <__retarget_lock_acquire_recursive>
 80040fa:	bf00      	nop
 80040fc:	200003b4 	.word	0x200003b4

08004100 <__malloc_unlock>:
 8004100:	4801      	ldr	r0, [pc, #4]	; (8004108 <__malloc_unlock+0x8>)
 8004102:	f7ff bf00 	b.w	8003f06 <__retarget_lock_release_recursive>
 8004106:	bf00      	nop
 8004108:	200003b4 	.word	0x200003b4

0800410c <__ssputs_r>:
 800410c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004110:	461f      	mov	r7, r3
 8004112:	688e      	ldr	r6, [r1, #8]
 8004114:	4682      	mov	sl, r0
 8004116:	42be      	cmp	r6, r7
 8004118:	460c      	mov	r4, r1
 800411a:	4690      	mov	r8, r2
 800411c:	680b      	ldr	r3, [r1, #0]
 800411e:	d82c      	bhi.n	800417a <__ssputs_r+0x6e>
 8004120:	898a      	ldrh	r2, [r1, #12]
 8004122:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004126:	d026      	beq.n	8004176 <__ssputs_r+0x6a>
 8004128:	6965      	ldr	r5, [r4, #20]
 800412a:	6909      	ldr	r1, [r1, #16]
 800412c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004130:	eba3 0901 	sub.w	r9, r3, r1
 8004134:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004138:	1c7b      	adds	r3, r7, #1
 800413a:	444b      	add	r3, r9
 800413c:	106d      	asrs	r5, r5, #1
 800413e:	429d      	cmp	r5, r3
 8004140:	bf38      	it	cc
 8004142:	461d      	movcc	r5, r3
 8004144:	0553      	lsls	r3, r2, #21
 8004146:	d527      	bpl.n	8004198 <__ssputs_r+0x8c>
 8004148:	4629      	mov	r1, r5
 800414a:	f7ff ff53 	bl	8003ff4 <_malloc_r>
 800414e:	4606      	mov	r6, r0
 8004150:	b360      	cbz	r0, 80041ac <__ssputs_r+0xa0>
 8004152:	464a      	mov	r2, r9
 8004154:	6921      	ldr	r1, [r4, #16]
 8004156:	f7ff fed7 	bl	8003f08 <memcpy>
 800415a:	89a3      	ldrh	r3, [r4, #12]
 800415c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004164:	81a3      	strh	r3, [r4, #12]
 8004166:	6126      	str	r6, [r4, #16]
 8004168:	444e      	add	r6, r9
 800416a:	6026      	str	r6, [r4, #0]
 800416c:	463e      	mov	r6, r7
 800416e:	6165      	str	r5, [r4, #20]
 8004170:	eba5 0509 	sub.w	r5, r5, r9
 8004174:	60a5      	str	r5, [r4, #8]
 8004176:	42be      	cmp	r6, r7
 8004178:	d900      	bls.n	800417c <__ssputs_r+0x70>
 800417a:	463e      	mov	r6, r7
 800417c:	4632      	mov	r2, r6
 800417e:	4641      	mov	r1, r8
 8004180:	6820      	ldr	r0, [r4, #0]
 8004182:	f000 faaf 	bl	80046e4 <memmove>
 8004186:	2000      	movs	r0, #0
 8004188:	68a3      	ldr	r3, [r4, #8]
 800418a:	1b9b      	subs	r3, r3, r6
 800418c:	60a3      	str	r3, [r4, #8]
 800418e:	6823      	ldr	r3, [r4, #0]
 8004190:	4433      	add	r3, r6
 8004192:	6023      	str	r3, [r4, #0]
 8004194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004198:	462a      	mov	r2, r5
 800419a:	f000 fadb 	bl	8004754 <_realloc_r>
 800419e:	4606      	mov	r6, r0
 80041a0:	2800      	cmp	r0, #0
 80041a2:	d1e0      	bne.n	8004166 <__ssputs_r+0x5a>
 80041a4:	4650      	mov	r0, sl
 80041a6:	6921      	ldr	r1, [r4, #16]
 80041a8:	f7ff febc 	bl	8003f24 <_free_r>
 80041ac:	230c      	movs	r3, #12
 80041ae:	f8ca 3000 	str.w	r3, [sl]
 80041b2:	89a3      	ldrh	r3, [r4, #12]
 80041b4:	f04f 30ff 	mov.w	r0, #4294967295
 80041b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041bc:	81a3      	strh	r3, [r4, #12]
 80041be:	e7e9      	b.n	8004194 <__ssputs_r+0x88>

080041c0 <_svfiprintf_r>:
 80041c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041c4:	4698      	mov	r8, r3
 80041c6:	898b      	ldrh	r3, [r1, #12]
 80041c8:	4607      	mov	r7, r0
 80041ca:	061b      	lsls	r3, r3, #24
 80041cc:	460d      	mov	r5, r1
 80041ce:	4614      	mov	r4, r2
 80041d0:	b09d      	sub	sp, #116	; 0x74
 80041d2:	d50e      	bpl.n	80041f2 <_svfiprintf_r+0x32>
 80041d4:	690b      	ldr	r3, [r1, #16]
 80041d6:	b963      	cbnz	r3, 80041f2 <_svfiprintf_r+0x32>
 80041d8:	2140      	movs	r1, #64	; 0x40
 80041da:	f7ff ff0b 	bl	8003ff4 <_malloc_r>
 80041de:	6028      	str	r0, [r5, #0]
 80041e0:	6128      	str	r0, [r5, #16]
 80041e2:	b920      	cbnz	r0, 80041ee <_svfiprintf_r+0x2e>
 80041e4:	230c      	movs	r3, #12
 80041e6:	603b      	str	r3, [r7, #0]
 80041e8:	f04f 30ff 	mov.w	r0, #4294967295
 80041ec:	e0d0      	b.n	8004390 <_svfiprintf_r+0x1d0>
 80041ee:	2340      	movs	r3, #64	; 0x40
 80041f0:	616b      	str	r3, [r5, #20]
 80041f2:	2300      	movs	r3, #0
 80041f4:	9309      	str	r3, [sp, #36]	; 0x24
 80041f6:	2320      	movs	r3, #32
 80041f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80041fc:	2330      	movs	r3, #48	; 0x30
 80041fe:	f04f 0901 	mov.w	r9, #1
 8004202:	f8cd 800c 	str.w	r8, [sp, #12]
 8004206:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80043a8 <_svfiprintf_r+0x1e8>
 800420a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800420e:	4623      	mov	r3, r4
 8004210:	469a      	mov	sl, r3
 8004212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004216:	b10a      	cbz	r2, 800421c <_svfiprintf_r+0x5c>
 8004218:	2a25      	cmp	r2, #37	; 0x25
 800421a:	d1f9      	bne.n	8004210 <_svfiprintf_r+0x50>
 800421c:	ebba 0b04 	subs.w	fp, sl, r4
 8004220:	d00b      	beq.n	800423a <_svfiprintf_r+0x7a>
 8004222:	465b      	mov	r3, fp
 8004224:	4622      	mov	r2, r4
 8004226:	4629      	mov	r1, r5
 8004228:	4638      	mov	r0, r7
 800422a:	f7ff ff6f 	bl	800410c <__ssputs_r>
 800422e:	3001      	adds	r0, #1
 8004230:	f000 80a9 	beq.w	8004386 <_svfiprintf_r+0x1c6>
 8004234:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004236:	445a      	add	r2, fp
 8004238:	9209      	str	r2, [sp, #36]	; 0x24
 800423a:	f89a 3000 	ldrb.w	r3, [sl]
 800423e:	2b00      	cmp	r3, #0
 8004240:	f000 80a1 	beq.w	8004386 <_svfiprintf_r+0x1c6>
 8004244:	2300      	movs	r3, #0
 8004246:	f04f 32ff 	mov.w	r2, #4294967295
 800424a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800424e:	f10a 0a01 	add.w	sl, sl, #1
 8004252:	9304      	str	r3, [sp, #16]
 8004254:	9307      	str	r3, [sp, #28]
 8004256:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800425a:	931a      	str	r3, [sp, #104]	; 0x68
 800425c:	4654      	mov	r4, sl
 800425e:	2205      	movs	r2, #5
 8004260:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004264:	4850      	ldr	r0, [pc, #320]	; (80043a8 <_svfiprintf_r+0x1e8>)
 8004266:	f000 fa67 	bl	8004738 <memchr>
 800426a:	9a04      	ldr	r2, [sp, #16]
 800426c:	b9d8      	cbnz	r0, 80042a6 <_svfiprintf_r+0xe6>
 800426e:	06d0      	lsls	r0, r2, #27
 8004270:	bf44      	itt	mi
 8004272:	2320      	movmi	r3, #32
 8004274:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004278:	0711      	lsls	r1, r2, #28
 800427a:	bf44      	itt	mi
 800427c:	232b      	movmi	r3, #43	; 0x2b
 800427e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004282:	f89a 3000 	ldrb.w	r3, [sl]
 8004286:	2b2a      	cmp	r3, #42	; 0x2a
 8004288:	d015      	beq.n	80042b6 <_svfiprintf_r+0xf6>
 800428a:	4654      	mov	r4, sl
 800428c:	2000      	movs	r0, #0
 800428e:	f04f 0c0a 	mov.w	ip, #10
 8004292:	9a07      	ldr	r2, [sp, #28]
 8004294:	4621      	mov	r1, r4
 8004296:	f811 3b01 	ldrb.w	r3, [r1], #1
 800429a:	3b30      	subs	r3, #48	; 0x30
 800429c:	2b09      	cmp	r3, #9
 800429e:	d94d      	bls.n	800433c <_svfiprintf_r+0x17c>
 80042a0:	b1b0      	cbz	r0, 80042d0 <_svfiprintf_r+0x110>
 80042a2:	9207      	str	r2, [sp, #28]
 80042a4:	e014      	b.n	80042d0 <_svfiprintf_r+0x110>
 80042a6:	eba0 0308 	sub.w	r3, r0, r8
 80042aa:	fa09 f303 	lsl.w	r3, r9, r3
 80042ae:	4313      	orrs	r3, r2
 80042b0:	46a2      	mov	sl, r4
 80042b2:	9304      	str	r3, [sp, #16]
 80042b4:	e7d2      	b.n	800425c <_svfiprintf_r+0x9c>
 80042b6:	9b03      	ldr	r3, [sp, #12]
 80042b8:	1d19      	adds	r1, r3, #4
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	9103      	str	r1, [sp, #12]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	bfbb      	ittet	lt
 80042c2:	425b      	neglt	r3, r3
 80042c4:	f042 0202 	orrlt.w	r2, r2, #2
 80042c8:	9307      	strge	r3, [sp, #28]
 80042ca:	9307      	strlt	r3, [sp, #28]
 80042cc:	bfb8      	it	lt
 80042ce:	9204      	strlt	r2, [sp, #16]
 80042d0:	7823      	ldrb	r3, [r4, #0]
 80042d2:	2b2e      	cmp	r3, #46	; 0x2e
 80042d4:	d10c      	bne.n	80042f0 <_svfiprintf_r+0x130>
 80042d6:	7863      	ldrb	r3, [r4, #1]
 80042d8:	2b2a      	cmp	r3, #42	; 0x2a
 80042da:	d134      	bne.n	8004346 <_svfiprintf_r+0x186>
 80042dc:	9b03      	ldr	r3, [sp, #12]
 80042de:	3402      	adds	r4, #2
 80042e0:	1d1a      	adds	r2, r3, #4
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	9203      	str	r2, [sp, #12]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	bfb8      	it	lt
 80042ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80042ee:	9305      	str	r3, [sp, #20]
 80042f0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80043ac <_svfiprintf_r+0x1ec>
 80042f4:	2203      	movs	r2, #3
 80042f6:	4650      	mov	r0, sl
 80042f8:	7821      	ldrb	r1, [r4, #0]
 80042fa:	f000 fa1d 	bl	8004738 <memchr>
 80042fe:	b138      	cbz	r0, 8004310 <_svfiprintf_r+0x150>
 8004300:	2240      	movs	r2, #64	; 0x40
 8004302:	9b04      	ldr	r3, [sp, #16]
 8004304:	eba0 000a 	sub.w	r0, r0, sl
 8004308:	4082      	lsls	r2, r0
 800430a:	4313      	orrs	r3, r2
 800430c:	3401      	adds	r4, #1
 800430e:	9304      	str	r3, [sp, #16]
 8004310:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004314:	2206      	movs	r2, #6
 8004316:	4826      	ldr	r0, [pc, #152]	; (80043b0 <_svfiprintf_r+0x1f0>)
 8004318:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800431c:	f000 fa0c 	bl	8004738 <memchr>
 8004320:	2800      	cmp	r0, #0
 8004322:	d038      	beq.n	8004396 <_svfiprintf_r+0x1d6>
 8004324:	4b23      	ldr	r3, [pc, #140]	; (80043b4 <_svfiprintf_r+0x1f4>)
 8004326:	bb1b      	cbnz	r3, 8004370 <_svfiprintf_r+0x1b0>
 8004328:	9b03      	ldr	r3, [sp, #12]
 800432a:	3307      	adds	r3, #7
 800432c:	f023 0307 	bic.w	r3, r3, #7
 8004330:	3308      	adds	r3, #8
 8004332:	9303      	str	r3, [sp, #12]
 8004334:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004336:	4433      	add	r3, r6
 8004338:	9309      	str	r3, [sp, #36]	; 0x24
 800433a:	e768      	b.n	800420e <_svfiprintf_r+0x4e>
 800433c:	460c      	mov	r4, r1
 800433e:	2001      	movs	r0, #1
 8004340:	fb0c 3202 	mla	r2, ip, r2, r3
 8004344:	e7a6      	b.n	8004294 <_svfiprintf_r+0xd4>
 8004346:	2300      	movs	r3, #0
 8004348:	f04f 0c0a 	mov.w	ip, #10
 800434c:	4619      	mov	r1, r3
 800434e:	3401      	adds	r4, #1
 8004350:	9305      	str	r3, [sp, #20]
 8004352:	4620      	mov	r0, r4
 8004354:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004358:	3a30      	subs	r2, #48	; 0x30
 800435a:	2a09      	cmp	r2, #9
 800435c:	d903      	bls.n	8004366 <_svfiprintf_r+0x1a6>
 800435e:	2b00      	cmp	r3, #0
 8004360:	d0c6      	beq.n	80042f0 <_svfiprintf_r+0x130>
 8004362:	9105      	str	r1, [sp, #20]
 8004364:	e7c4      	b.n	80042f0 <_svfiprintf_r+0x130>
 8004366:	4604      	mov	r4, r0
 8004368:	2301      	movs	r3, #1
 800436a:	fb0c 2101 	mla	r1, ip, r1, r2
 800436e:	e7f0      	b.n	8004352 <_svfiprintf_r+0x192>
 8004370:	ab03      	add	r3, sp, #12
 8004372:	9300      	str	r3, [sp, #0]
 8004374:	462a      	mov	r2, r5
 8004376:	4638      	mov	r0, r7
 8004378:	4b0f      	ldr	r3, [pc, #60]	; (80043b8 <_svfiprintf_r+0x1f8>)
 800437a:	a904      	add	r1, sp, #16
 800437c:	f3af 8000 	nop.w
 8004380:	1c42      	adds	r2, r0, #1
 8004382:	4606      	mov	r6, r0
 8004384:	d1d6      	bne.n	8004334 <_svfiprintf_r+0x174>
 8004386:	89ab      	ldrh	r3, [r5, #12]
 8004388:	065b      	lsls	r3, r3, #25
 800438a:	f53f af2d 	bmi.w	80041e8 <_svfiprintf_r+0x28>
 800438e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004390:	b01d      	add	sp, #116	; 0x74
 8004392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004396:	ab03      	add	r3, sp, #12
 8004398:	9300      	str	r3, [sp, #0]
 800439a:	462a      	mov	r2, r5
 800439c:	4638      	mov	r0, r7
 800439e:	4b06      	ldr	r3, [pc, #24]	; (80043b8 <_svfiprintf_r+0x1f8>)
 80043a0:	a904      	add	r1, sp, #16
 80043a2:	f000 f87d 	bl	80044a0 <_printf_i>
 80043a6:	e7eb      	b.n	8004380 <_svfiprintf_r+0x1c0>
 80043a8:	08004b67 	.word	0x08004b67
 80043ac:	08004b6d 	.word	0x08004b6d
 80043b0:	08004b71 	.word	0x08004b71
 80043b4:	00000000 	.word	0x00000000
 80043b8:	0800410d 	.word	0x0800410d

080043bc <_printf_common>:
 80043bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043c0:	4616      	mov	r6, r2
 80043c2:	4699      	mov	r9, r3
 80043c4:	688a      	ldr	r2, [r1, #8]
 80043c6:	690b      	ldr	r3, [r1, #16]
 80043c8:	4607      	mov	r7, r0
 80043ca:	4293      	cmp	r3, r2
 80043cc:	bfb8      	it	lt
 80043ce:	4613      	movlt	r3, r2
 80043d0:	6033      	str	r3, [r6, #0]
 80043d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80043d6:	460c      	mov	r4, r1
 80043d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80043dc:	b10a      	cbz	r2, 80043e2 <_printf_common+0x26>
 80043de:	3301      	adds	r3, #1
 80043e0:	6033      	str	r3, [r6, #0]
 80043e2:	6823      	ldr	r3, [r4, #0]
 80043e4:	0699      	lsls	r1, r3, #26
 80043e6:	bf42      	ittt	mi
 80043e8:	6833      	ldrmi	r3, [r6, #0]
 80043ea:	3302      	addmi	r3, #2
 80043ec:	6033      	strmi	r3, [r6, #0]
 80043ee:	6825      	ldr	r5, [r4, #0]
 80043f0:	f015 0506 	ands.w	r5, r5, #6
 80043f4:	d106      	bne.n	8004404 <_printf_common+0x48>
 80043f6:	f104 0a19 	add.w	sl, r4, #25
 80043fa:	68e3      	ldr	r3, [r4, #12]
 80043fc:	6832      	ldr	r2, [r6, #0]
 80043fe:	1a9b      	subs	r3, r3, r2
 8004400:	42ab      	cmp	r3, r5
 8004402:	dc2b      	bgt.n	800445c <_printf_common+0xa0>
 8004404:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004408:	1e13      	subs	r3, r2, #0
 800440a:	6822      	ldr	r2, [r4, #0]
 800440c:	bf18      	it	ne
 800440e:	2301      	movne	r3, #1
 8004410:	0692      	lsls	r2, r2, #26
 8004412:	d430      	bmi.n	8004476 <_printf_common+0xba>
 8004414:	4649      	mov	r1, r9
 8004416:	4638      	mov	r0, r7
 8004418:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800441c:	47c0      	blx	r8
 800441e:	3001      	adds	r0, #1
 8004420:	d023      	beq.n	800446a <_printf_common+0xae>
 8004422:	6823      	ldr	r3, [r4, #0]
 8004424:	6922      	ldr	r2, [r4, #16]
 8004426:	f003 0306 	and.w	r3, r3, #6
 800442a:	2b04      	cmp	r3, #4
 800442c:	bf14      	ite	ne
 800442e:	2500      	movne	r5, #0
 8004430:	6833      	ldreq	r3, [r6, #0]
 8004432:	f04f 0600 	mov.w	r6, #0
 8004436:	bf08      	it	eq
 8004438:	68e5      	ldreq	r5, [r4, #12]
 800443a:	f104 041a 	add.w	r4, r4, #26
 800443e:	bf08      	it	eq
 8004440:	1aed      	subeq	r5, r5, r3
 8004442:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004446:	bf08      	it	eq
 8004448:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800444c:	4293      	cmp	r3, r2
 800444e:	bfc4      	itt	gt
 8004450:	1a9b      	subgt	r3, r3, r2
 8004452:	18ed      	addgt	r5, r5, r3
 8004454:	42b5      	cmp	r5, r6
 8004456:	d11a      	bne.n	800448e <_printf_common+0xd2>
 8004458:	2000      	movs	r0, #0
 800445a:	e008      	b.n	800446e <_printf_common+0xb2>
 800445c:	2301      	movs	r3, #1
 800445e:	4652      	mov	r2, sl
 8004460:	4649      	mov	r1, r9
 8004462:	4638      	mov	r0, r7
 8004464:	47c0      	blx	r8
 8004466:	3001      	adds	r0, #1
 8004468:	d103      	bne.n	8004472 <_printf_common+0xb6>
 800446a:	f04f 30ff 	mov.w	r0, #4294967295
 800446e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004472:	3501      	adds	r5, #1
 8004474:	e7c1      	b.n	80043fa <_printf_common+0x3e>
 8004476:	2030      	movs	r0, #48	; 0x30
 8004478:	18e1      	adds	r1, r4, r3
 800447a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800447e:	1c5a      	adds	r2, r3, #1
 8004480:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004484:	4422      	add	r2, r4
 8004486:	3302      	adds	r3, #2
 8004488:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800448c:	e7c2      	b.n	8004414 <_printf_common+0x58>
 800448e:	2301      	movs	r3, #1
 8004490:	4622      	mov	r2, r4
 8004492:	4649      	mov	r1, r9
 8004494:	4638      	mov	r0, r7
 8004496:	47c0      	blx	r8
 8004498:	3001      	adds	r0, #1
 800449a:	d0e6      	beq.n	800446a <_printf_common+0xae>
 800449c:	3601      	adds	r6, #1
 800449e:	e7d9      	b.n	8004454 <_printf_common+0x98>

080044a0 <_printf_i>:
 80044a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044a4:	7e0f      	ldrb	r7, [r1, #24]
 80044a6:	4691      	mov	r9, r2
 80044a8:	2f78      	cmp	r7, #120	; 0x78
 80044aa:	4680      	mov	r8, r0
 80044ac:	460c      	mov	r4, r1
 80044ae:	469a      	mov	sl, r3
 80044b0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80044b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80044b6:	d807      	bhi.n	80044c8 <_printf_i+0x28>
 80044b8:	2f62      	cmp	r7, #98	; 0x62
 80044ba:	d80a      	bhi.n	80044d2 <_printf_i+0x32>
 80044bc:	2f00      	cmp	r7, #0
 80044be:	f000 80d5 	beq.w	800466c <_printf_i+0x1cc>
 80044c2:	2f58      	cmp	r7, #88	; 0x58
 80044c4:	f000 80c1 	beq.w	800464a <_printf_i+0x1aa>
 80044c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80044d0:	e03a      	b.n	8004548 <_printf_i+0xa8>
 80044d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80044d6:	2b15      	cmp	r3, #21
 80044d8:	d8f6      	bhi.n	80044c8 <_printf_i+0x28>
 80044da:	a101      	add	r1, pc, #4	; (adr r1, 80044e0 <_printf_i+0x40>)
 80044dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80044e0:	08004539 	.word	0x08004539
 80044e4:	0800454d 	.word	0x0800454d
 80044e8:	080044c9 	.word	0x080044c9
 80044ec:	080044c9 	.word	0x080044c9
 80044f0:	080044c9 	.word	0x080044c9
 80044f4:	080044c9 	.word	0x080044c9
 80044f8:	0800454d 	.word	0x0800454d
 80044fc:	080044c9 	.word	0x080044c9
 8004500:	080044c9 	.word	0x080044c9
 8004504:	080044c9 	.word	0x080044c9
 8004508:	080044c9 	.word	0x080044c9
 800450c:	08004653 	.word	0x08004653
 8004510:	08004579 	.word	0x08004579
 8004514:	0800460d 	.word	0x0800460d
 8004518:	080044c9 	.word	0x080044c9
 800451c:	080044c9 	.word	0x080044c9
 8004520:	08004675 	.word	0x08004675
 8004524:	080044c9 	.word	0x080044c9
 8004528:	08004579 	.word	0x08004579
 800452c:	080044c9 	.word	0x080044c9
 8004530:	080044c9 	.word	0x080044c9
 8004534:	08004615 	.word	0x08004615
 8004538:	682b      	ldr	r3, [r5, #0]
 800453a:	1d1a      	adds	r2, r3, #4
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	602a      	str	r2, [r5, #0]
 8004540:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004544:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004548:	2301      	movs	r3, #1
 800454a:	e0a0      	b.n	800468e <_printf_i+0x1ee>
 800454c:	6820      	ldr	r0, [r4, #0]
 800454e:	682b      	ldr	r3, [r5, #0]
 8004550:	0607      	lsls	r7, r0, #24
 8004552:	f103 0104 	add.w	r1, r3, #4
 8004556:	6029      	str	r1, [r5, #0]
 8004558:	d501      	bpl.n	800455e <_printf_i+0xbe>
 800455a:	681e      	ldr	r6, [r3, #0]
 800455c:	e003      	b.n	8004566 <_printf_i+0xc6>
 800455e:	0646      	lsls	r6, r0, #25
 8004560:	d5fb      	bpl.n	800455a <_printf_i+0xba>
 8004562:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004566:	2e00      	cmp	r6, #0
 8004568:	da03      	bge.n	8004572 <_printf_i+0xd2>
 800456a:	232d      	movs	r3, #45	; 0x2d
 800456c:	4276      	negs	r6, r6
 800456e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004572:	230a      	movs	r3, #10
 8004574:	4859      	ldr	r0, [pc, #356]	; (80046dc <_printf_i+0x23c>)
 8004576:	e012      	b.n	800459e <_printf_i+0xfe>
 8004578:	682b      	ldr	r3, [r5, #0]
 800457a:	6820      	ldr	r0, [r4, #0]
 800457c:	1d19      	adds	r1, r3, #4
 800457e:	6029      	str	r1, [r5, #0]
 8004580:	0605      	lsls	r5, r0, #24
 8004582:	d501      	bpl.n	8004588 <_printf_i+0xe8>
 8004584:	681e      	ldr	r6, [r3, #0]
 8004586:	e002      	b.n	800458e <_printf_i+0xee>
 8004588:	0641      	lsls	r1, r0, #25
 800458a:	d5fb      	bpl.n	8004584 <_printf_i+0xe4>
 800458c:	881e      	ldrh	r6, [r3, #0]
 800458e:	2f6f      	cmp	r7, #111	; 0x6f
 8004590:	bf0c      	ite	eq
 8004592:	2308      	moveq	r3, #8
 8004594:	230a      	movne	r3, #10
 8004596:	4851      	ldr	r0, [pc, #324]	; (80046dc <_printf_i+0x23c>)
 8004598:	2100      	movs	r1, #0
 800459a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800459e:	6865      	ldr	r5, [r4, #4]
 80045a0:	2d00      	cmp	r5, #0
 80045a2:	bfa8      	it	ge
 80045a4:	6821      	ldrge	r1, [r4, #0]
 80045a6:	60a5      	str	r5, [r4, #8]
 80045a8:	bfa4      	itt	ge
 80045aa:	f021 0104 	bicge.w	r1, r1, #4
 80045ae:	6021      	strge	r1, [r4, #0]
 80045b0:	b90e      	cbnz	r6, 80045b6 <_printf_i+0x116>
 80045b2:	2d00      	cmp	r5, #0
 80045b4:	d04b      	beq.n	800464e <_printf_i+0x1ae>
 80045b6:	4615      	mov	r5, r2
 80045b8:	fbb6 f1f3 	udiv	r1, r6, r3
 80045bc:	fb03 6711 	mls	r7, r3, r1, r6
 80045c0:	5dc7      	ldrb	r7, [r0, r7]
 80045c2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80045c6:	4637      	mov	r7, r6
 80045c8:	42bb      	cmp	r3, r7
 80045ca:	460e      	mov	r6, r1
 80045cc:	d9f4      	bls.n	80045b8 <_printf_i+0x118>
 80045ce:	2b08      	cmp	r3, #8
 80045d0:	d10b      	bne.n	80045ea <_printf_i+0x14a>
 80045d2:	6823      	ldr	r3, [r4, #0]
 80045d4:	07de      	lsls	r6, r3, #31
 80045d6:	d508      	bpl.n	80045ea <_printf_i+0x14a>
 80045d8:	6923      	ldr	r3, [r4, #16]
 80045da:	6861      	ldr	r1, [r4, #4]
 80045dc:	4299      	cmp	r1, r3
 80045de:	bfde      	ittt	le
 80045e0:	2330      	movle	r3, #48	; 0x30
 80045e2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80045e6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80045ea:	1b52      	subs	r2, r2, r5
 80045ec:	6122      	str	r2, [r4, #16]
 80045ee:	464b      	mov	r3, r9
 80045f0:	4621      	mov	r1, r4
 80045f2:	4640      	mov	r0, r8
 80045f4:	f8cd a000 	str.w	sl, [sp]
 80045f8:	aa03      	add	r2, sp, #12
 80045fa:	f7ff fedf 	bl	80043bc <_printf_common>
 80045fe:	3001      	adds	r0, #1
 8004600:	d14a      	bne.n	8004698 <_printf_i+0x1f8>
 8004602:	f04f 30ff 	mov.w	r0, #4294967295
 8004606:	b004      	add	sp, #16
 8004608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800460c:	6823      	ldr	r3, [r4, #0]
 800460e:	f043 0320 	orr.w	r3, r3, #32
 8004612:	6023      	str	r3, [r4, #0]
 8004614:	2778      	movs	r7, #120	; 0x78
 8004616:	4832      	ldr	r0, [pc, #200]	; (80046e0 <_printf_i+0x240>)
 8004618:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800461c:	6823      	ldr	r3, [r4, #0]
 800461e:	6829      	ldr	r1, [r5, #0]
 8004620:	061f      	lsls	r7, r3, #24
 8004622:	f851 6b04 	ldr.w	r6, [r1], #4
 8004626:	d402      	bmi.n	800462e <_printf_i+0x18e>
 8004628:	065f      	lsls	r7, r3, #25
 800462a:	bf48      	it	mi
 800462c:	b2b6      	uxthmi	r6, r6
 800462e:	07df      	lsls	r7, r3, #31
 8004630:	bf48      	it	mi
 8004632:	f043 0320 	orrmi.w	r3, r3, #32
 8004636:	6029      	str	r1, [r5, #0]
 8004638:	bf48      	it	mi
 800463a:	6023      	strmi	r3, [r4, #0]
 800463c:	b91e      	cbnz	r6, 8004646 <_printf_i+0x1a6>
 800463e:	6823      	ldr	r3, [r4, #0]
 8004640:	f023 0320 	bic.w	r3, r3, #32
 8004644:	6023      	str	r3, [r4, #0]
 8004646:	2310      	movs	r3, #16
 8004648:	e7a6      	b.n	8004598 <_printf_i+0xf8>
 800464a:	4824      	ldr	r0, [pc, #144]	; (80046dc <_printf_i+0x23c>)
 800464c:	e7e4      	b.n	8004618 <_printf_i+0x178>
 800464e:	4615      	mov	r5, r2
 8004650:	e7bd      	b.n	80045ce <_printf_i+0x12e>
 8004652:	682b      	ldr	r3, [r5, #0]
 8004654:	6826      	ldr	r6, [r4, #0]
 8004656:	1d18      	adds	r0, r3, #4
 8004658:	6961      	ldr	r1, [r4, #20]
 800465a:	6028      	str	r0, [r5, #0]
 800465c:	0635      	lsls	r5, r6, #24
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	d501      	bpl.n	8004666 <_printf_i+0x1c6>
 8004662:	6019      	str	r1, [r3, #0]
 8004664:	e002      	b.n	800466c <_printf_i+0x1cc>
 8004666:	0670      	lsls	r0, r6, #25
 8004668:	d5fb      	bpl.n	8004662 <_printf_i+0x1c2>
 800466a:	8019      	strh	r1, [r3, #0]
 800466c:	2300      	movs	r3, #0
 800466e:	4615      	mov	r5, r2
 8004670:	6123      	str	r3, [r4, #16]
 8004672:	e7bc      	b.n	80045ee <_printf_i+0x14e>
 8004674:	682b      	ldr	r3, [r5, #0]
 8004676:	2100      	movs	r1, #0
 8004678:	1d1a      	adds	r2, r3, #4
 800467a:	602a      	str	r2, [r5, #0]
 800467c:	681d      	ldr	r5, [r3, #0]
 800467e:	6862      	ldr	r2, [r4, #4]
 8004680:	4628      	mov	r0, r5
 8004682:	f000 f859 	bl	8004738 <memchr>
 8004686:	b108      	cbz	r0, 800468c <_printf_i+0x1ec>
 8004688:	1b40      	subs	r0, r0, r5
 800468a:	6060      	str	r0, [r4, #4]
 800468c:	6863      	ldr	r3, [r4, #4]
 800468e:	6123      	str	r3, [r4, #16]
 8004690:	2300      	movs	r3, #0
 8004692:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004696:	e7aa      	b.n	80045ee <_printf_i+0x14e>
 8004698:	462a      	mov	r2, r5
 800469a:	4649      	mov	r1, r9
 800469c:	4640      	mov	r0, r8
 800469e:	6923      	ldr	r3, [r4, #16]
 80046a0:	47d0      	blx	sl
 80046a2:	3001      	adds	r0, #1
 80046a4:	d0ad      	beq.n	8004602 <_printf_i+0x162>
 80046a6:	6823      	ldr	r3, [r4, #0]
 80046a8:	079b      	lsls	r3, r3, #30
 80046aa:	d413      	bmi.n	80046d4 <_printf_i+0x234>
 80046ac:	68e0      	ldr	r0, [r4, #12]
 80046ae:	9b03      	ldr	r3, [sp, #12]
 80046b0:	4298      	cmp	r0, r3
 80046b2:	bfb8      	it	lt
 80046b4:	4618      	movlt	r0, r3
 80046b6:	e7a6      	b.n	8004606 <_printf_i+0x166>
 80046b8:	2301      	movs	r3, #1
 80046ba:	4632      	mov	r2, r6
 80046bc:	4649      	mov	r1, r9
 80046be:	4640      	mov	r0, r8
 80046c0:	47d0      	blx	sl
 80046c2:	3001      	adds	r0, #1
 80046c4:	d09d      	beq.n	8004602 <_printf_i+0x162>
 80046c6:	3501      	adds	r5, #1
 80046c8:	68e3      	ldr	r3, [r4, #12]
 80046ca:	9903      	ldr	r1, [sp, #12]
 80046cc:	1a5b      	subs	r3, r3, r1
 80046ce:	42ab      	cmp	r3, r5
 80046d0:	dcf2      	bgt.n	80046b8 <_printf_i+0x218>
 80046d2:	e7eb      	b.n	80046ac <_printf_i+0x20c>
 80046d4:	2500      	movs	r5, #0
 80046d6:	f104 0619 	add.w	r6, r4, #25
 80046da:	e7f5      	b.n	80046c8 <_printf_i+0x228>
 80046dc:	08004b78 	.word	0x08004b78
 80046e0:	08004b89 	.word	0x08004b89

080046e4 <memmove>:
 80046e4:	4288      	cmp	r0, r1
 80046e6:	b510      	push	{r4, lr}
 80046e8:	eb01 0402 	add.w	r4, r1, r2
 80046ec:	d902      	bls.n	80046f4 <memmove+0x10>
 80046ee:	4284      	cmp	r4, r0
 80046f0:	4623      	mov	r3, r4
 80046f2:	d807      	bhi.n	8004704 <memmove+0x20>
 80046f4:	1e43      	subs	r3, r0, #1
 80046f6:	42a1      	cmp	r1, r4
 80046f8:	d008      	beq.n	800470c <memmove+0x28>
 80046fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004702:	e7f8      	b.n	80046f6 <memmove+0x12>
 8004704:	4601      	mov	r1, r0
 8004706:	4402      	add	r2, r0
 8004708:	428a      	cmp	r2, r1
 800470a:	d100      	bne.n	800470e <memmove+0x2a>
 800470c:	bd10      	pop	{r4, pc}
 800470e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004712:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004716:	e7f7      	b.n	8004708 <memmove+0x24>

08004718 <_sbrk_r>:
 8004718:	b538      	push	{r3, r4, r5, lr}
 800471a:	2300      	movs	r3, #0
 800471c:	4d05      	ldr	r5, [pc, #20]	; (8004734 <_sbrk_r+0x1c>)
 800471e:	4604      	mov	r4, r0
 8004720:	4608      	mov	r0, r1
 8004722:	602b      	str	r3, [r5, #0]
 8004724:	f7fb ff20 	bl	8000568 <_sbrk>
 8004728:	1c43      	adds	r3, r0, #1
 800472a:	d102      	bne.n	8004732 <_sbrk_r+0x1a>
 800472c:	682b      	ldr	r3, [r5, #0]
 800472e:	b103      	cbz	r3, 8004732 <_sbrk_r+0x1a>
 8004730:	6023      	str	r3, [r4, #0]
 8004732:	bd38      	pop	{r3, r4, r5, pc}
 8004734:	200003b0 	.word	0x200003b0

08004738 <memchr>:
 8004738:	4603      	mov	r3, r0
 800473a:	b510      	push	{r4, lr}
 800473c:	b2c9      	uxtb	r1, r1
 800473e:	4402      	add	r2, r0
 8004740:	4293      	cmp	r3, r2
 8004742:	4618      	mov	r0, r3
 8004744:	d101      	bne.n	800474a <memchr+0x12>
 8004746:	2000      	movs	r0, #0
 8004748:	e003      	b.n	8004752 <memchr+0x1a>
 800474a:	7804      	ldrb	r4, [r0, #0]
 800474c:	3301      	adds	r3, #1
 800474e:	428c      	cmp	r4, r1
 8004750:	d1f6      	bne.n	8004740 <memchr+0x8>
 8004752:	bd10      	pop	{r4, pc}

08004754 <_realloc_r>:
 8004754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004758:	4680      	mov	r8, r0
 800475a:	4614      	mov	r4, r2
 800475c:	460e      	mov	r6, r1
 800475e:	b921      	cbnz	r1, 800476a <_realloc_r+0x16>
 8004760:	4611      	mov	r1, r2
 8004762:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004766:	f7ff bc45 	b.w	8003ff4 <_malloc_r>
 800476a:	b92a      	cbnz	r2, 8004778 <_realloc_r+0x24>
 800476c:	f7ff fbda 	bl	8003f24 <_free_r>
 8004770:	4625      	mov	r5, r4
 8004772:	4628      	mov	r0, r5
 8004774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004778:	f000 f81b 	bl	80047b2 <_malloc_usable_size_r>
 800477c:	4284      	cmp	r4, r0
 800477e:	4607      	mov	r7, r0
 8004780:	d802      	bhi.n	8004788 <_realloc_r+0x34>
 8004782:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004786:	d812      	bhi.n	80047ae <_realloc_r+0x5a>
 8004788:	4621      	mov	r1, r4
 800478a:	4640      	mov	r0, r8
 800478c:	f7ff fc32 	bl	8003ff4 <_malloc_r>
 8004790:	4605      	mov	r5, r0
 8004792:	2800      	cmp	r0, #0
 8004794:	d0ed      	beq.n	8004772 <_realloc_r+0x1e>
 8004796:	42bc      	cmp	r4, r7
 8004798:	4622      	mov	r2, r4
 800479a:	4631      	mov	r1, r6
 800479c:	bf28      	it	cs
 800479e:	463a      	movcs	r2, r7
 80047a0:	f7ff fbb2 	bl	8003f08 <memcpy>
 80047a4:	4631      	mov	r1, r6
 80047a6:	4640      	mov	r0, r8
 80047a8:	f7ff fbbc 	bl	8003f24 <_free_r>
 80047ac:	e7e1      	b.n	8004772 <_realloc_r+0x1e>
 80047ae:	4635      	mov	r5, r6
 80047b0:	e7df      	b.n	8004772 <_realloc_r+0x1e>

080047b2 <_malloc_usable_size_r>:
 80047b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047b6:	1f18      	subs	r0, r3, #4
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	bfbc      	itt	lt
 80047bc:	580b      	ldrlt	r3, [r1, r0]
 80047be:	18c0      	addlt	r0, r0, r3
 80047c0:	4770      	bx	lr
	...

080047c4 <_init>:
 80047c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047c6:	bf00      	nop
 80047c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ca:	bc08      	pop	{r3}
 80047cc:	469e      	mov	lr, r3
 80047ce:	4770      	bx	lr

080047d0 <_fini>:
 80047d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047d2:	bf00      	nop
 80047d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047d6:	bc08      	pop	{r3}
 80047d8:	469e      	mov	lr, r3
 80047da:	4770      	bx	lr
