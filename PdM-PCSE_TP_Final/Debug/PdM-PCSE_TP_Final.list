
PdM-PCSE_TP_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037c0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000720  080038cc  080038cc  000138cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fec  08003fec  00020120  2**0
                  CONTENTS
  4 .ARM          00000000  08003fec  08003fec  00020120  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003fec  08003fec  00020120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fec  08003fec  00013fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ff0  08003ff0  00013ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000120  20000000  08003ff4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  20000120  08004114  00020120  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000035c  08004114  0002035c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020149  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ac88  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e9e  00000000  00000000  0002ae14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a88  00000000  00000000  0002ccb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000830  00000000  00000000  0002d740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017cf2  00000000  00000000  0002df70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e3af  00000000  00000000  00045c62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008509e  00000000  00000000  00054011  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002fb8  00000000  00000000  000d90b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000dc068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000120 	.word	0x20000120
 8000128:	00000000 	.word	0x00000000
 800012c:	080038b4 	.word	0x080038b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000124 	.word	0x20000124
 8000148:	080038b4 	.word	0x080038b4

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 ffe1 	bl	8001118 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f817 	bl	8000188 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f851 	bl	8000200 <MX_GPIO_Init>
  //MX_USART2_UART_Init();
  //MX_I2C1_Init();
  /* USER CODE BEGIN 2 */
  uartInit();
 800015e:	f000 ff49 	bl	8000ff4 <uartInit>
  i2c_init();
 8000162:	f000 fc43 	bl	80009ec <i2c_init>

  debounceFSM_init();
 8000166:	f000 fa11 	bl	800058c <debounceFSM_init>
  menuMEF_init();
 800016a:	f000 fc69 	bl	8000a40 <menuMEF_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  action_t menuAction = NONE;
 800016e:	2300      	movs	r3, #0
 8000170:	71fb      	strb	r3, [r7, #7]

  while(1){

	  debounceFSM_update(); // checkear el estado del pulsador y actualizar su valor
 8000172:	f000 fa1b 	bl	80005ac <debounceFSM_update>
	  menuAction = menuMEF_update(); // obtener la accion del pulsador (NONE, EXECUTE, NEXT)
 8000176:	f000 fca3 	bl	8000ac0 <menuMEF_update>
 800017a:	4603      	mov	r3, r0
 800017c:	71fb      	strb	r3, [r7, #7]
	  menuMEF_set_state(menuAction); // ejecutar la accion correspondiente al estado y a la accion del pulsador
 800017e:	79fb      	ldrb	r3, [r7, #7]
 8000180:	4618      	mov	r0, r3
 8000182:	f000 fcef 	bl	8000b64 <menuMEF_set_state>
	  debounceFSM_update(); // checkear el estado del pulsador y actualizar su valor
 8000186:	e7f4      	b.n	8000172 <main+0x26>

08000188 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b090      	sub	sp, #64	; 0x40
 800018c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800018e:	f107 0318 	add.w	r3, r7, #24
 8000192:	2228      	movs	r2, #40	; 0x28
 8000194:	2100      	movs	r1, #0
 8000196:	4618      	mov	r0, r3
 8000198:	f002 fefa 	bl	8002f90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800019c:	1d3b      	adds	r3, r7, #4
 800019e:	2200      	movs	r2, #0
 80001a0:	601a      	str	r2, [r3, #0]
 80001a2:	605a      	str	r2, [r3, #4]
 80001a4:	609a      	str	r2, [r3, #8]
 80001a6:	60da      	str	r2, [r3, #12]
 80001a8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001aa:	2301      	movs	r3, #1
 80001ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80001ae:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80001b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001b4:	2300      	movs	r3, #0
 80001b6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001b8:	f107 0318 	add.w	r3, r7, #24
 80001bc:	4618      	mov	r0, r3
 80001be:	f001 ffc9 	bl	8002154 <HAL_RCC_OscConfig>
 80001c2:	4603      	mov	r3, r0
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d001      	beq.n	80001cc <SystemClock_Config+0x44>
  {
    Error_Handler();
 80001c8:	f000 f888 	bl	80002dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001cc:	230f      	movs	r3, #15
 80001ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80001d0:	2301      	movs	r3, #1
 80001d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d4:	2300      	movs	r3, #0
 80001d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001de:	2300      	movs	r3, #0
 80001e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001e2:	1d3b      	adds	r3, r7, #4
 80001e4:	2100      	movs	r1, #0
 80001e6:	4618      	mov	r0, r3
 80001e8:	f002 fa36 	bl	8002658 <HAL_RCC_ClockConfig>
 80001ec:	4603      	mov	r3, r0
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d001      	beq.n	80001f6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80001f2:	f000 f873 	bl	80002dc <Error_Handler>
  }
}
 80001f6:	bf00      	nop
 80001f8:	3740      	adds	r7, #64	; 0x40
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bd80      	pop	{r7, pc}
	...

08000200 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b088      	sub	sp, #32
 8000204:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000206:	f107 0310 	add.w	r3, r7, #16
 800020a:	2200      	movs	r2, #0
 800020c:	601a      	str	r2, [r3, #0]
 800020e:	605a      	str	r2, [r3, #4]
 8000210:	609a      	str	r2, [r3, #8]
 8000212:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000214:	4b2d      	ldr	r3, [pc, #180]	; (80002cc <MX_GPIO_Init+0xcc>)
 8000216:	699b      	ldr	r3, [r3, #24]
 8000218:	4a2c      	ldr	r2, [pc, #176]	; (80002cc <MX_GPIO_Init+0xcc>)
 800021a:	f043 0310 	orr.w	r3, r3, #16
 800021e:	6193      	str	r3, [r2, #24]
 8000220:	4b2a      	ldr	r3, [pc, #168]	; (80002cc <MX_GPIO_Init+0xcc>)
 8000222:	699b      	ldr	r3, [r3, #24]
 8000224:	f003 0310 	and.w	r3, r3, #16
 8000228:	60fb      	str	r3, [r7, #12]
 800022a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800022c:	4b27      	ldr	r3, [pc, #156]	; (80002cc <MX_GPIO_Init+0xcc>)
 800022e:	699b      	ldr	r3, [r3, #24]
 8000230:	4a26      	ldr	r2, [pc, #152]	; (80002cc <MX_GPIO_Init+0xcc>)
 8000232:	f043 0320 	orr.w	r3, r3, #32
 8000236:	6193      	str	r3, [r2, #24]
 8000238:	4b24      	ldr	r3, [pc, #144]	; (80002cc <MX_GPIO_Init+0xcc>)
 800023a:	699b      	ldr	r3, [r3, #24]
 800023c:	f003 0320 	and.w	r3, r3, #32
 8000240:	60bb      	str	r3, [r7, #8]
 8000242:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000244:	4b21      	ldr	r3, [pc, #132]	; (80002cc <MX_GPIO_Init+0xcc>)
 8000246:	699b      	ldr	r3, [r3, #24]
 8000248:	4a20      	ldr	r2, [pc, #128]	; (80002cc <MX_GPIO_Init+0xcc>)
 800024a:	f043 0304 	orr.w	r3, r3, #4
 800024e:	6193      	str	r3, [r2, #24]
 8000250:	4b1e      	ldr	r3, [pc, #120]	; (80002cc <MX_GPIO_Init+0xcc>)
 8000252:	699b      	ldr	r3, [r3, #24]
 8000254:	f003 0304 	and.w	r3, r3, #4
 8000258:	607b      	str	r3, [r7, #4]
 800025a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800025c:	4b1b      	ldr	r3, [pc, #108]	; (80002cc <MX_GPIO_Init+0xcc>)
 800025e:	699b      	ldr	r3, [r3, #24]
 8000260:	4a1a      	ldr	r2, [pc, #104]	; (80002cc <MX_GPIO_Init+0xcc>)
 8000262:	f043 0308 	orr.w	r3, r3, #8
 8000266:	6193      	str	r3, [r2, #24]
 8000268:	4b18      	ldr	r3, [pc, #96]	; (80002cc <MX_GPIO_Init+0xcc>)
 800026a:	699b      	ldr	r3, [r3, #24]
 800026c:	f003 0308 	and.w	r3, r3, #8
 8000270:	603b      	str	r3, [r7, #0]
 8000272:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000274:	2200      	movs	r2, #0
 8000276:	2120      	movs	r1, #32
 8000278:	4815      	ldr	r0, [pc, #84]	; (80002d0 <MX_GPIO_Init+0xd0>)
 800027a:	f001 fa7c 	bl	8001776 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800027e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000282:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000284:	4b13      	ldr	r3, [pc, #76]	; (80002d4 <MX_GPIO_Init+0xd4>)
 8000286:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000288:	2300      	movs	r3, #0
 800028a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800028c:	f107 0310 	add.w	r3, r7, #16
 8000290:	4619      	mov	r1, r3
 8000292:	4811      	ldr	r0, [pc, #68]	; (80002d8 <MX_GPIO_Init+0xd8>)
 8000294:	f001 f8d4 	bl	8001440 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000298:	2320      	movs	r3, #32
 800029a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800029c:	2301      	movs	r3, #1
 800029e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002a0:	2300      	movs	r3, #0
 80002a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002a4:	2302      	movs	r3, #2
 80002a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80002a8:	f107 0310 	add.w	r3, r7, #16
 80002ac:	4619      	mov	r1, r3
 80002ae:	4808      	ldr	r0, [pc, #32]	; (80002d0 <MX_GPIO_Init+0xd0>)
 80002b0:	f001 f8c6 	bl	8001440 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80002b4:	2200      	movs	r2, #0
 80002b6:	2100      	movs	r1, #0
 80002b8:	2028      	movs	r0, #40	; 0x28
 80002ba:	f001 f88a 	bl	80013d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80002be:	2028      	movs	r0, #40	; 0x28
 80002c0:	f001 f8a3 	bl	800140a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80002c4:	bf00      	nop
 80002c6:	3720      	adds	r7, #32
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	40021000 	.word	0x40021000
 80002d0:	40010800 	.word	0x40010800
 80002d4:	10110000 	.word	0x10110000
 80002d8:	40011000 	.word	0x40011000

080002dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002e0:	b672      	cpsid	i
}
 80002e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002e4:	e7fe      	b.n	80002e4 <Error_Handler+0x8>
	...

080002e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b085      	sub	sp, #20
 80002ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002ee:	4b15      	ldr	r3, [pc, #84]	; (8000344 <HAL_MspInit+0x5c>)
 80002f0:	699b      	ldr	r3, [r3, #24]
 80002f2:	4a14      	ldr	r2, [pc, #80]	; (8000344 <HAL_MspInit+0x5c>)
 80002f4:	f043 0301 	orr.w	r3, r3, #1
 80002f8:	6193      	str	r3, [r2, #24]
 80002fa:	4b12      	ldr	r3, [pc, #72]	; (8000344 <HAL_MspInit+0x5c>)
 80002fc:	699b      	ldr	r3, [r3, #24]
 80002fe:	f003 0301 	and.w	r3, r3, #1
 8000302:	60bb      	str	r3, [r7, #8]
 8000304:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000306:	4b0f      	ldr	r3, [pc, #60]	; (8000344 <HAL_MspInit+0x5c>)
 8000308:	69db      	ldr	r3, [r3, #28]
 800030a:	4a0e      	ldr	r2, [pc, #56]	; (8000344 <HAL_MspInit+0x5c>)
 800030c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000310:	61d3      	str	r3, [r2, #28]
 8000312:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <HAL_MspInit+0x5c>)
 8000314:	69db      	ldr	r3, [r3, #28]
 8000316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800031a:	607b      	str	r3, [r7, #4]
 800031c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800031e:	4b0a      	ldr	r3, [pc, #40]	; (8000348 <HAL_MspInit+0x60>)
 8000320:	685b      	ldr	r3, [r3, #4]
 8000322:	60fb      	str	r3, [r7, #12]
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800032a:	60fb      	str	r3, [r7, #12]
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000332:	60fb      	str	r3, [r7, #12]
 8000334:	4a04      	ldr	r2, [pc, #16]	; (8000348 <HAL_MspInit+0x60>)
 8000336:	68fb      	ldr	r3, [r7, #12]
 8000338:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800033a:	bf00      	nop
 800033c:	3714      	adds	r7, #20
 800033e:	46bd      	mov	sp, r7
 8000340:	bc80      	pop	{r7}
 8000342:	4770      	bx	lr
 8000344:	40021000 	.word	0x40021000
 8000348:	40010000 	.word	0x40010000

0800034c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b08a      	sub	sp, #40	; 0x28
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000354:	f107 0314 	add.w	r3, r7, #20
 8000358:	2200      	movs	r2, #0
 800035a:	601a      	str	r2, [r3, #0]
 800035c:	605a      	str	r2, [r3, #4]
 800035e:	609a      	str	r2, [r3, #8]
 8000360:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	4a1d      	ldr	r2, [pc, #116]	; (80003dc <HAL_I2C_MspInit+0x90>)
 8000368:	4293      	cmp	r3, r2
 800036a:	d132      	bne.n	80003d2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800036c:	4b1c      	ldr	r3, [pc, #112]	; (80003e0 <HAL_I2C_MspInit+0x94>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	4a1b      	ldr	r2, [pc, #108]	; (80003e0 <HAL_I2C_MspInit+0x94>)
 8000372:	f043 0308 	orr.w	r3, r3, #8
 8000376:	6193      	str	r3, [r2, #24]
 8000378:	4b19      	ldr	r3, [pc, #100]	; (80003e0 <HAL_I2C_MspInit+0x94>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	f003 0308 	and.w	r3, r3, #8
 8000380:	613b      	str	r3, [r7, #16]
 8000382:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000384:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000388:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800038a:	2312      	movs	r3, #18
 800038c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800038e:	2303      	movs	r3, #3
 8000390:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000392:	f107 0314 	add.w	r3, r7, #20
 8000396:	4619      	mov	r1, r3
 8000398:	4812      	ldr	r0, [pc, #72]	; (80003e4 <HAL_I2C_MspInit+0x98>)
 800039a:	f001 f851 	bl	8001440 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800039e:	4b12      	ldr	r3, [pc, #72]	; (80003e8 <HAL_I2C_MspInit+0x9c>)
 80003a0:	685b      	ldr	r3, [r3, #4]
 80003a2:	627b      	str	r3, [r7, #36]	; 0x24
 80003a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003a6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80003aa:	627b      	str	r3, [r7, #36]	; 0x24
 80003ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003ae:	f043 0302 	orr.w	r3, r3, #2
 80003b2:	627b      	str	r3, [r7, #36]	; 0x24
 80003b4:	4a0c      	ldr	r2, [pc, #48]	; (80003e8 <HAL_I2C_MspInit+0x9c>)
 80003b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003b8:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80003ba:	4b09      	ldr	r3, [pc, #36]	; (80003e0 <HAL_I2C_MspInit+0x94>)
 80003bc:	69db      	ldr	r3, [r3, #28]
 80003be:	4a08      	ldr	r2, [pc, #32]	; (80003e0 <HAL_I2C_MspInit+0x94>)
 80003c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80003c4:	61d3      	str	r3, [r2, #28]
 80003c6:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <HAL_I2C_MspInit+0x94>)
 80003c8:	69db      	ldr	r3, [r3, #28]
 80003ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80003ce:	60fb      	str	r3, [r7, #12]
 80003d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80003d2:	bf00      	nop
 80003d4:	3728      	adds	r7, #40	; 0x28
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	40005400 	.word	0x40005400
 80003e0:	40021000 	.word	0x40021000
 80003e4:	40010c00 	.word	0x40010c00
 80003e8:	40010000 	.word	0x40010000

080003ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b088      	sub	sp, #32
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f4:	f107 0310 	add.w	r3, r7, #16
 80003f8:	2200      	movs	r2, #0
 80003fa:	601a      	str	r2, [r3, #0]
 80003fc:	605a      	str	r2, [r3, #4]
 80003fe:	609a      	str	r2, [r3, #8]
 8000400:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	4a15      	ldr	r2, [pc, #84]	; (800045c <HAL_UART_MspInit+0x70>)
 8000408:	4293      	cmp	r3, r2
 800040a:	d123      	bne.n	8000454 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800040c:	4b14      	ldr	r3, [pc, #80]	; (8000460 <HAL_UART_MspInit+0x74>)
 800040e:	69db      	ldr	r3, [r3, #28]
 8000410:	4a13      	ldr	r2, [pc, #76]	; (8000460 <HAL_UART_MspInit+0x74>)
 8000412:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000416:	61d3      	str	r3, [r2, #28]
 8000418:	4b11      	ldr	r3, [pc, #68]	; (8000460 <HAL_UART_MspInit+0x74>)
 800041a:	69db      	ldr	r3, [r3, #28]
 800041c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000420:	60fb      	str	r3, [r7, #12]
 8000422:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000424:	4b0e      	ldr	r3, [pc, #56]	; (8000460 <HAL_UART_MspInit+0x74>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	4a0d      	ldr	r2, [pc, #52]	; (8000460 <HAL_UART_MspInit+0x74>)
 800042a:	f043 0304 	orr.w	r3, r3, #4
 800042e:	6193      	str	r3, [r2, #24]
 8000430:	4b0b      	ldr	r3, [pc, #44]	; (8000460 <HAL_UART_MspInit+0x74>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	f003 0304 	and.w	r3, r3, #4
 8000438:	60bb      	str	r3, [r7, #8]
 800043a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800043c:	230c      	movs	r3, #12
 800043e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000440:	2302      	movs	r3, #2
 8000442:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000444:	2302      	movs	r3, #2
 8000446:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000448:	f107 0310 	add.w	r3, r7, #16
 800044c:	4619      	mov	r1, r3
 800044e:	4805      	ldr	r0, [pc, #20]	; (8000464 <HAL_UART_MspInit+0x78>)
 8000450:	f000 fff6 	bl	8001440 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000454:	bf00      	nop
 8000456:	3720      	adds	r7, #32
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	40004400 	.word	0x40004400
 8000460:	40021000 	.word	0x40021000
 8000464:	40010800 	.word	0x40010800

08000468 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800046c:	e7fe      	b.n	800046c <NMI_Handler+0x4>

0800046e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800046e:	b480      	push	{r7}
 8000470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000472:	e7fe      	b.n	8000472 <HardFault_Handler+0x4>

08000474 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000478:	e7fe      	b.n	8000478 <MemManage_Handler+0x4>

0800047a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800047a:	b480      	push	{r7}
 800047c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800047e:	e7fe      	b.n	800047e <BusFault_Handler+0x4>

08000480 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000484:	e7fe      	b.n	8000484 <UsageFault_Handler+0x4>

08000486 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000486:	b480      	push	{r7}
 8000488:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800048a:	bf00      	nop
 800048c:	46bd      	mov	sp, r7
 800048e:	bc80      	pop	{r7}
 8000490:	4770      	bx	lr

08000492 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000492:	b480      	push	{r7}
 8000494:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000496:	bf00      	nop
 8000498:	46bd      	mov	sp, r7
 800049a:	bc80      	pop	{r7}
 800049c:	4770      	bx	lr

0800049e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800049e:	b480      	push	{r7}
 80004a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004a2:	bf00      	nop
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bc80      	pop	{r7}
 80004a8:	4770      	bx	lr

080004aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004aa:	b580      	push	{r7, lr}
 80004ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004ae:	f000 fe79 	bl	80011a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004b2:	bf00      	nop
 80004b4:	bd80      	pop	{r7, pc}

080004b6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80004b6:	b580      	push	{r7, lr}
 80004b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80004ba:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80004be:	f001 f98b 	bl	80017d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80004c2:	bf00      	nop
 80004c4:	bd80      	pop	{r7, pc}
	...

080004c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004d0:	4a14      	ldr	r2, [pc, #80]	; (8000524 <_sbrk+0x5c>)
 80004d2:	4b15      	ldr	r3, [pc, #84]	; (8000528 <_sbrk+0x60>)
 80004d4:	1ad3      	subs	r3, r2, r3
 80004d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004d8:	697b      	ldr	r3, [r7, #20]
 80004da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004dc:	4b13      	ldr	r3, [pc, #76]	; (800052c <_sbrk+0x64>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d102      	bne.n	80004ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004e4:	4b11      	ldr	r3, [pc, #68]	; (800052c <_sbrk+0x64>)
 80004e6:	4a12      	ldr	r2, [pc, #72]	; (8000530 <_sbrk+0x68>)
 80004e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004ea:	4b10      	ldr	r3, [pc, #64]	; (800052c <_sbrk+0x64>)
 80004ec:	681a      	ldr	r2, [r3, #0]
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	4413      	add	r3, r2
 80004f2:	693a      	ldr	r2, [r7, #16]
 80004f4:	429a      	cmp	r2, r3
 80004f6:	d207      	bcs.n	8000508 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004f8:	f002 fd52 	bl	8002fa0 <__errno>
 80004fc:	4603      	mov	r3, r0
 80004fe:	220c      	movs	r2, #12
 8000500:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000502:	f04f 33ff 	mov.w	r3, #4294967295
 8000506:	e009      	b.n	800051c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000508:	4b08      	ldr	r3, [pc, #32]	; (800052c <_sbrk+0x64>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800050e:	4b07      	ldr	r3, [pc, #28]	; (800052c <_sbrk+0x64>)
 8000510:	681a      	ldr	r2, [r3, #0]
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	4413      	add	r3, r2
 8000516:	4a05      	ldr	r2, [pc, #20]	; (800052c <_sbrk+0x64>)
 8000518:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800051a:	68fb      	ldr	r3, [r7, #12]
}
 800051c:	4618      	mov	r0, r3
 800051e:	3718      	adds	r7, #24
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	20005000 	.word	0x20005000
 8000528:	00000400 	.word	0x00000400
 800052c:	2000013c 	.word	0x2000013c
 8000530:	20000360 	.word	0x20000360

08000534 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr

08000540 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000540:	f7ff fff8 	bl	8000534 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000544:	480b      	ldr	r0, [pc, #44]	; (8000574 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000546:	490c      	ldr	r1, [pc, #48]	; (8000578 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000548:	4a0c      	ldr	r2, [pc, #48]	; (800057c <LoopFillZerobss+0x16>)
  movs r3, #0
 800054a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800054c:	e002      	b.n	8000554 <LoopCopyDataInit>

0800054e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800054e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000550:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000552:	3304      	adds	r3, #4

08000554 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000554:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000556:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000558:	d3f9      	bcc.n	800054e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800055a:	4a09      	ldr	r2, [pc, #36]	; (8000580 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800055c:	4c09      	ldr	r4, [pc, #36]	; (8000584 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800055e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000560:	e001      	b.n	8000566 <LoopFillZerobss>

08000562 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000562:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000564:	3204      	adds	r2, #4

08000566 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000566:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000568:	d3fb      	bcc.n	8000562 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800056a:	f002 fd1f 	bl	8002fac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800056e:	f7ff fded 	bl	800014c <main>
  bx lr
 8000572:	4770      	bx	lr
  ldr r0, =_sdata
 8000574:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000578:	20000120 	.word	0x20000120
  ldr r2, =_sidata
 800057c:	08003ff4 	.word	0x08003ff4
  ldr r2, =_sbss
 8000580:	20000120 	.word	0x20000120
  ldr r4, =_ebss
 8000584:	2000035c 	.word	0x2000035c

08000588 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000588:	e7fe      	b.n	8000588 <ADC1_2_IRQHandler>
	...

0800058c <debounceFSM_init>:


/* DEFINICION DE FUNCIONES */

// Definicion de inicializacion del anti rebote
void debounceFSM_init(){
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
	estado = BUTTON_UP;
 8000590:	4b04      	ldr	r3, [pc, #16]	; (80005a4 <debounceFSM_init+0x18>)
 8000592:	2200      	movs	r2, #0
 8000594:	701a      	strb	r2, [r3, #0]
	//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, RESET); // iniciar con led apagado (salida)
	delayInit(&delayHandle, DEBOUNCE_DELAY);
 8000596:	2128      	movs	r1, #40	; 0x28
 8000598:	4803      	ldr	r0, [pc, #12]	; (80005a8 <debounceFSM_init+0x1c>)
 800059a:	f000 f8b5 	bl	8000708 <delayInit>
}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000140 	.word	0x20000140
 80005a8:	20000144 	.word	0x20000144

080005ac <debounceFSM_update>:

// Definicion de actualizacion del valor del pulsador con anti rebote por software
void debounceFSM_update(){
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	switch(estado){
 80005b0:	4b34      	ldr	r3, [pc, #208]	; (8000684 <debounceFSM_update+0xd8>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	2b03      	cmp	r3, #3
 80005b6:	d859      	bhi.n	800066c <debounceFSM_update+0xc0>
 80005b8:	a201      	add	r2, pc, #4	; (adr r2, 80005c0 <debounceFSM_update+0x14>)
 80005ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005be:	bf00      	nop
 80005c0:	080005d1 	.word	0x080005d1
 80005c4:	080005e9 	.word	0x080005e9
 80005c8:	0800061f 	.word	0x0800061f
 80005cc:	08000637 	.word	0x08000637
	case BUTTON_UP:
		// si el pin esta low pasar al estado BUTTON_FALLING
		if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 0){
 80005d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d4:	482c      	ldr	r0, [pc, #176]	; (8000688 <debounceFSM_update+0xdc>)
 80005d6:	f001 f8b7 	bl	8001748 <HAL_GPIO_ReadPin>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d148      	bne.n	8000672 <debounceFSM_update+0xc6>
			estado = BUTTON_FALLING;
 80005e0:	4b28      	ldr	r3, [pc, #160]	; (8000684 <debounceFSM_update+0xd8>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	701a      	strb	r2, [r3, #0]
		}
		break;
 80005e6:	e044      	b.n	8000672 <debounceFSM_update+0xc6>
	case BUTTON_FALLING:
		// si el pin esta high luego de 40 ms, volver a BUTTON_UP
		// si el pin esta low luego de 40 ms, cambiar a BUTTON_DOWN
		if(delayRead(&delayHandle) == true){ // si transcurrio el debounceDelay, muestrear pulsador nuevamente. Iniciar delay si es llamado por 1ra vez
 80005e8:	4828      	ldr	r0, [pc, #160]	; (800068c <debounceFSM_update+0xe0>)
 80005ea:	f000 f8aa 	bl	8000742 <delayRead>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d040      	beq.n	8000676 <debounceFSM_update+0xca>
			if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 1){ // pulsador no presionado >> 1
 80005f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005f8:	4823      	ldr	r0, [pc, #140]	; (8000688 <debounceFSM_update+0xdc>)
 80005fa:	f001 f8a5 	bl	8001748 <HAL_GPIO_ReadPin>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b01      	cmp	r3, #1
 8000602:	d103      	bne.n	800060c <debounceFSM_update+0x60>
				estado = BUTTON_UP; // si sigue high, el estado vuelve a BUTTON_UP
 8000604:	4b1f      	ldr	r3, [pc, #124]	; (8000684 <debounceFSM_update+0xd8>)
 8000606:	2200      	movs	r2, #0
 8000608:	701a      	strb	r2, [r3, #0]
				buttonPressed();
				// Reemplazo del encendido del led por la deteccion unica del flanco descendente
				fallingState = true;
			}
		}
		break;
 800060a:	e034      	b.n	8000676 <debounceFSM_update+0xca>
				estado = BUTTON_DOWN;
 800060c:	4b1d      	ldr	r3, [pc, #116]	; (8000684 <debounceFSM_update+0xd8>)
 800060e:	2202      	movs	r2, #2
 8000610:	701a      	strb	r2, [r3, #0]
				buttonPressed();
 8000612:	f000 f86d 	bl	80006f0 <buttonPressed>
				fallingState = true;
 8000616:	4b1e      	ldr	r3, [pc, #120]	; (8000690 <debounceFSM_update+0xe4>)
 8000618:	2201      	movs	r2, #1
 800061a:	701a      	strb	r2, [r3, #0]
		break;
 800061c:	e02b      	b.n	8000676 <debounceFSM_update+0xca>
	case BUTTON_DOWN:
		// si el pin esta high, pasar al estado BUTTON_RAISING
		if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 1){
 800061e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000622:	4819      	ldr	r0, [pc, #100]	; (8000688 <debounceFSM_update+0xdc>)
 8000624:	f001 f890 	bl	8001748 <HAL_GPIO_ReadPin>
 8000628:	4603      	mov	r3, r0
 800062a:	2b01      	cmp	r3, #1
 800062c:	d125      	bne.n	800067a <debounceFSM_update+0xce>
			estado = BUTTON_RAISING;
 800062e:	4b15      	ldr	r3, [pc, #84]	; (8000684 <debounceFSM_update+0xd8>)
 8000630:	2203      	movs	r2, #3
 8000632:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000634:	e021      	b.n	800067a <debounceFSM_update+0xce>
	case BUTTON_RAISING:
		// si el pin esta low luego de 40 ms, volver a BUTTON_DOWN
		// si el pin esta high luego de 40 ms, cambiar a BUTTON_UP
		if(delayRead(&delayHandle) == true){ // si transcurrio el debounceDelay, muestrear pulsador nuevamente
 8000636:	4815      	ldr	r0, [pc, #84]	; (800068c <debounceFSM_update+0xe0>)
 8000638:	f000 f883 	bl	8000742 <delayRead>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d01d      	beq.n	800067e <debounceFSM_update+0xd2>
			if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 0){ // pulsador presionado >> 0
 8000642:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000646:	4810      	ldr	r0, [pc, #64]	; (8000688 <debounceFSM_update+0xdc>)
 8000648:	f001 f87e 	bl	8001748 <HAL_GPIO_ReadPin>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d103      	bne.n	800065a <debounceFSM_update+0xae>
				estado = BUTTON_DOWN; // si sigue low, el estado vuelve a BUTTON_DOWN
 8000652:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <debounceFSM_update+0xd8>)
 8000654:	2202      	movs	r2, #2
 8000656:	701a      	strb	r2, [r3, #0]
				buttonReleased();
				risingState = true;
			}
		}

		break;
 8000658:	e011      	b.n	800067e <debounceFSM_update+0xd2>
				estado = BUTTON_UP;
 800065a:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <debounceFSM_update+0xd8>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
				buttonReleased();
 8000660:	f000 f84c 	bl	80006fc <buttonReleased>
				risingState = true;
 8000664:	4b0b      	ldr	r3, [pc, #44]	; (8000694 <debounceFSM_update+0xe8>)
 8000666:	2201      	movs	r2, #1
 8000668:	701a      	strb	r2, [r3, #0]
		break;
 800066a:	e008      	b.n	800067e <debounceFSM_update+0xd2>
	default:
		// checkear errores
		// reiniciar estado
		debounceFSM_init();
 800066c:	f7ff ff8e 	bl	800058c <debounceFSM_init>
		break;
 8000670:	e006      	b.n	8000680 <debounceFSM_update+0xd4>
		break;
 8000672:	bf00      	nop
 8000674:	e004      	b.n	8000680 <debounceFSM_update+0xd4>
		break;
 8000676:	bf00      	nop
 8000678:	e002      	b.n	8000680 <debounceFSM_update+0xd4>
		break;
 800067a:	bf00      	nop
 800067c:	e000      	b.n	8000680 <debounceFSM_update+0xd4>
		break;
 800067e:	bf00      	nop
	}
}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000140 	.word	0x20000140
 8000688:	40011000 	.word	0x40011000
 800068c:	20000144 	.word	0x20000144
 8000690:	20000141 	.word	0x20000141
 8000694:	20000142 	.word	0x20000142

08000698 <readKey_down>:

// La funcion retorna true al detectar el flanco descendente y se autoresetea
bool_t readKey_down(){
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
	bool_t result = false;
 800069e:	2300      	movs	r3, #0
 80006a0:	71fb      	strb	r3, [r7, #7]
	// retornar true solo si se detecta flanco descendente
	if(fallingState == true){
 80006a2:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <readKey_down+0x28>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d004      	beq.n	80006b4 <readKey_down+0x1c>
		fallingState = false; // resetear variable privada
 80006aa:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <readKey_down+0x28>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	701a      	strb	r2, [r3, #0]
		result = true;
 80006b0:	2301      	movs	r3, #1
 80006b2:	71fb      	strb	r3, [r7, #7]
	}
	return result;
 80006b4:	79fb      	ldrb	r3, [r7, #7]
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bc80      	pop	{r7}
 80006be:	4770      	bx	lr
 80006c0:	20000141 	.word	0x20000141

080006c4 <readKey_up>:

// La funcion retorna true al detectar el flanco ascendente y se autoresetea
bool_t readKey_up(){
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
	bool_t result = false;
 80006ca:	2300      	movs	r3, #0
 80006cc:	71fb      	strb	r3, [r7, #7]
	// retornar true solo si se detecta flanco ascendente
	if(risingState == true){
 80006ce:	4b07      	ldr	r3, [pc, #28]	; (80006ec <readKey_up+0x28>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d004      	beq.n	80006e0 <readKey_up+0x1c>
		risingState = false; // resetear variable privada
 80006d6:	4b05      	ldr	r3, [pc, #20]	; (80006ec <readKey_up+0x28>)
 80006d8:	2200      	movs	r2, #0
 80006da:	701a      	strb	r2, [r3, #0]
		result = true;
 80006dc:	2301      	movs	r3, #1
 80006de:	71fb      	strb	r3, [r7, #7]
	}
	return result;
 80006e0:	79fb      	ldrb	r3, [r7, #7]
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bc80      	pop	{r7}
 80006ea:	4770      	bx	lr
 80006ec:	20000142 	.word	0x20000142

080006f0 <buttonPressed>:


// Definicion de funcion para boton presionado
void buttonPressed(){
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, SET);
	// ejecutar la accion deseada al detectar pulsado
	//uartSendString("\r\nFlanco descendente!\r\n");
}
 80006f4:	bf00      	nop
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr

080006fc <buttonReleased>:

// Definicion de funcion para boton liberado
void buttonReleased(){
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, RESET);
	// ejecutar la accion deseada al detectar liberacion
	//uartSendString("\r\nFlanco ascendente!\r\n");
}
 8000700:	bf00      	nop
 8000702:	46bd      	mov	sp, r7
 8000704:	bc80      	pop	{r7}
 8000706:	4770      	bx	lr

08000708 <delayInit>:
/**
	* @brief Inicializacion del temporizador
	* @param delay struct {startTime, duration, running}
	* @retval Ninguno
	*/
void delayInit( delay_t * delay, tick_t duration ){
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	6039      	str	r1, [r7, #0]
	if(duration > 10000) duration = 10000; // limitar el tiempo a 10 segundos
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	f242 7210 	movw	r2, #10000	; 0x2710
 8000718:	4293      	cmp	r3, r2
 800071a:	d902      	bls.n	8000722 <delayInit+0x1a>
 800071c:	f242 7310 	movw	r3, #10000	; 0x2710
 8000720:	603b      	str	r3, [r7, #0]
	if(duration < 5) duration = 5; // limitar el tiempo minimo a 5 ms
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	2b04      	cmp	r3, #4
 8000726:	d801      	bhi.n	800072c <delayInit+0x24>
 8000728:	2305      	movs	r3, #5
 800072a:	603b      	str	r3, [r7, #0]

	delay->duration = duration;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	683a      	ldr	r2, [r7, #0]
 8000730:	605a      	str	r2, [r3, #4]
	delay->running = false;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2200      	movs	r2, #0
 8000736:	721a      	strb	r2, [r3, #8]
}
 8000738:	bf00      	nop
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	bc80      	pop	{r7}
 8000740:	4770      	bx	lr

08000742 <delayRead>:
/**
	* @brief Comparacion de delay vs contador milisegundos. Inicia timer si no esta en func
	* @param delay struct {startTime, duration, running}
	* @retval bool true si se cumplio el tiempo / false si no
	*/
bool_t delayRead( delay_t * delay ){
 8000742:	b580      	push	{r7, lr}
 8000744:	b082      	sub	sp, #8
 8000746:	af00      	add	r7, sp, #0
 8000748:	6078      	str	r0, [r7, #4]

	if(delay->running == false){ // activar timer
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	7a1b      	ldrb	r3, [r3, #8]
 800074e:	f083 0301 	eor.w	r3, r3, #1
 8000752:	b2db      	uxtb	r3, r3
 8000754:	2b00      	cmp	r3, #0
 8000756:	d00a      	beq.n	800076e <delayRead+0x2c>
		delay->running = true;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2201      	movs	r2, #1
 800075c:	721a      	strb	r2, [r3, #8]
		delay->startTime = HAL_GetTick(); // tomar valor de contador en [ms] actual
 800075e:	f000 fd33 	bl	80011c8 <HAL_GetTick>
 8000762:	4603      	mov	r3, r0
 8000764:	461a      	mov	r2, r3
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	601a      	str	r2, [r3, #0]
		return false; // salir de la funcion
 800076a:	2300      	movs	r3, #0
 800076c:	e010      	b.n	8000790 <delayRead+0x4e>
	} else {
		// si running == true ya estaba activo el timer, comparar valor actual con duration
		if(HAL_GetTick() - delay->startTime > delay->duration){ // si es timeout
 800076e:	f000 fd2b 	bl	80011c8 <HAL_GetTick>
 8000772:	4603      	mov	r3, r0
 8000774:	461a      	mov	r2, r3
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	1ad2      	subs	r2, r2, r3
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	685b      	ldr	r3, [r3, #4]
 8000780:	429a      	cmp	r2, r3
 8000782:	d904      	bls.n	800078e <delayRead+0x4c>
			delay->running = false; // reset el flag
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2200      	movs	r2, #0
 8000788:	721a      	strb	r2, [r3, #8]
			return true;
 800078a:	2301      	movs	r3, #1
 800078c:	e000      	b.n	8000790 <delayRead+0x4e>
		} else {
			// si no es timeout
			return false;
 800078e:	2300      	movs	r3, #0
		}
	}
}
 8000790:	4618      	mov	r0, r3
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <lcd_send_byte>:
/**************************** WRITE TO LCD FUNCTIONS ***************************/

/* Serial->Parallel: output Byte Px: D7 D6 D5 D4 BT E RW RS */


void lcd_send_byte(uint8_t byte, bool rs, bool rw){
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	71fb      	strb	r3, [r7, #7]
 80007a2:	460b      	mov	r3, r1
 80007a4:	71bb      	strb	r3, [r7, #6]
 80007a6:	4613      	mov	r3, r2
 80007a8:	717b      	strb	r3, [r7, #5]
	// byte contains 8 bits of information  / byteType can be INSTRUCTION or DATA
	uint8_t upperByte = (byte & HIGH_NIBBLE); // mask with 1111 0000
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	f023 030f 	bic.w	r3, r3, #15
 80007b0:	73fb      	strb	r3, [r7, #15]
	uint8_t lowerByte = (byte << 4); // shift 4 to the left so lower nibble becomes high
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	011b      	lsls	r3, r3, #4
 80007b6:	73bb      	strb	r3, [r7, #14]

	// add rs and rw bits
	upperByte |= ((rs<<RS_POS) | (rw<<RW_POS) | (BT_ON<<BT_POS));
 80007b8:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80007bc:	797b      	ldrb	r3, [r7, #5]
 80007be:	005b      	lsls	r3, r3, #1
 80007c0:	b25b      	sxtb	r3, r3
 80007c2:	4313      	orrs	r3, r2
 80007c4:	b25b      	sxtb	r3, r3
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	7bfb      	ldrb	r3, [r7, #15]
 80007ca:	4313      	orrs	r3, r2
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	f043 0308 	orr.w	r3, r3, #8
 80007d2:	73fb      	strb	r3, [r7, #15]
	lowerByte |= ((rs<<RS_POS) | (rw<<RW_POS) | (BT_ON<<BT_POS));
 80007d4:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80007d8:	797b      	ldrb	r3, [r7, #5]
 80007da:	005b      	lsls	r3, r3, #1
 80007dc:	b25b      	sxtb	r3, r3
 80007de:	4313      	orrs	r3, r2
 80007e0:	b25b      	sxtb	r3, r3
 80007e2:	b2da      	uxtb	r2, r3
 80007e4:	7bbb      	ldrb	r3, [r7, #14]
 80007e6:	4313      	orrs	r3, r2
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	f043 0308 	orr.w	r3, r3, #8
 80007ee:	73bb      	strb	r3, [r7, #14]
	// E bit 1 0 1 0 to create pulses in LCD controller

	uint8_t byteSequence[4] = {
 80007f0:	7bfb      	ldrb	r3, [r7, #15]
 80007f2:	f043 0304 	orr.w	r3, r3, #4
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	723b      	strb	r3, [r7, #8]
 80007fa:	7bfb      	ldrb	r3, [r7, #15]
 80007fc:	727b      	strb	r3, [r7, #9]
 80007fe:	7bbb      	ldrb	r3, [r7, #14]
 8000800:	f043 0304 	orr.w	r3, r3, #4
 8000804:	b2db      	uxtb	r3, r3
 8000806:	72bb      	strb	r3, [r7, #10]
 8000808:	7bbb      	ldrb	r3, [r7, #14]
 800080a:	72fb      	strb	r3, [r7, #11]
			(upperByte | (E_LOW<<E_POS)),
			(lowerByte | (E_HIGH<<E_POS)),
			(lowerByte | (E_LOW<<E_POS))
	};

	send_bytes_i2c(LCD_ADDRESS, byteSequence, 4, I2C_WRITE);
 800080c:	f107 0108 	add.w	r1, r7, #8
 8000810:	2300      	movs	r3, #0
 8000812:	2204      	movs	r2, #4
 8000814:	2027      	movs	r0, #39	; 0x27
 8000816:	f000 f807 	bl	8000828 <send_bytes_i2c>
	HAL_Delay(5);
 800081a:	2005      	movs	r0, #5
 800081c:	f000 fcde 	bl	80011dc <HAL_Delay>

}
 8000820:	bf00      	nop
 8000822:	3710      	adds	r7, #16
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <send_bytes_i2c>:

void send_bytes_i2c(uint8_t slaveAddress, uint8_t byteSequence[], uint8_t sequenceSize, bool i2c_rw){
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af02      	add	r7, sp, #8
 800082e:	6039      	str	r1, [r7, #0]
 8000830:	4611      	mov	r1, r2
 8000832:	461a      	mov	r2, r3
 8000834:	4603      	mov	r3, r0
 8000836:	71fb      	strb	r3, [r7, #7]
 8000838:	460b      	mov	r3, r1
 800083a:	71bb      	strb	r3, [r7, #6]
 800083c:	4613      	mov	r3, r2
 800083e:	717b      	strb	r3, [r7, #5]
	slaveAddress = ((slaveAddress<<1) | i2c_rw); // i2c WRITE or READ
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	005b      	lsls	r3, r3, #1
 8000844:	b25a      	sxtb	r2, r3
 8000846:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800084a:	4313      	orrs	r3, r2
 800084c:	b25b      	sxtb	r3, r3
 800084e:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&i2cHandle, slaveAddress, byteSequence, sequenceSize, 100);
 8000850:	79fb      	ldrb	r3, [r7, #7]
 8000852:	b299      	uxth	r1, r3
 8000854:	79bb      	ldrb	r3, [r7, #6]
 8000856:	b29b      	uxth	r3, r3
 8000858:	2264      	movs	r2, #100	; 0x64
 800085a:	9200      	str	r2, [sp, #0]
 800085c:	683a      	ldr	r2, [r7, #0]
 800085e:	4803      	ldr	r0, [pc, #12]	; (800086c <send_bytes_i2c+0x44>)
 8000860:	f001 f920 	bl	8001aa4 <HAL_I2C_Master_Transmit>
}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000150 	.word	0x20000150

08000870 <lcd_clear>:

void lcd_clear(){
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
	lcd_send_byte(0x01, RS_INSTRUCTION, RW_WRITE);
 8000874:	2200      	movs	r2, #0
 8000876:	2100      	movs	r1, #0
 8000878:	2001      	movs	r0, #1
 800087a:	f7ff ff8d 	bl	8000798 <lcd_send_byte>
}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}

08000882 <return_home>:

void return_home(){
 8000882:	b580      	push	{r7, lr}
 8000884:	af00      	add	r7, sp, #0
	lcd_send_byte(0x02, RS_INSTRUCTION, RW_WRITE);
 8000886:	2200      	movs	r2, #0
 8000888:	2100      	movs	r1, #0
 800088a:	2002      	movs	r0, #2
 800088c:	f7ff ff84 	bl	8000798 <lcd_send_byte>
}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}

08000894 <lcd_set_position>:

void lcd_set_position(uint8_t row, uint8_t column){
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	460a      	mov	r2, r1
 800089e:	71fb      	strb	r3, [r7, #7]
 80008a0:	4613      	mov	r3, r2
 80008a2:	71bb      	strb	r3, [r7, #6]
	// for LCD 16x2 check ranges
	if(row>2) row = 2;
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	2b02      	cmp	r3, #2
 80008a8:	d901      	bls.n	80008ae <lcd_set_position+0x1a>
 80008aa:	2302      	movs	r3, #2
 80008ac:	71fb      	strb	r3, [r7, #7]
	if(row<1) row = 1;
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d101      	bne.n	80008b8 <lcd_set_position+0x24>
 80008b4:	2301      	movs	r3, #1
 80008b6:	71fb      	strb	r3, [r7, #7]
	if(column>16) column = 16;
 80008b8:	79bb      	ldrb	r3, [r7, #6]
 80008ba:	2b10      	cmp	r3, #16
 80008bc:	d901      	bls.n	80008c2 <lcd_set_position+0x2e>
 80008be:	2310      	movs	r3, #16
 80008c0:	71bb      	strb	r3, [r7, #6]
	if(column<1) column = 1;
 80008c2:	79bb      	ldrb	r3, [r7, #6]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d101      	bne.n	80008cc <lcd_set_position+0x38>
 80008c8:	2301      	movs	r3, #1
 80008ca:	71bb      	strb	r3, [r7, #6]

	uint8_t ddram = ddram_address_16x2[row-1][column-1];
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	1e5a      	subs	r2, r3, #1
 80008d0:	79bb      	ldrb	r3, [r7, #6]
 80008d2:	3b01      	subs	r3, #1
 80008d4:	4909      	ldr	r1, [pc, #36]	; (80008fc <lcd_set_position+0x68>)
 80008d6:	0112      	lsls	r2, r2, #4
 80008d8:	440a      	add	r2, r1
 80008da:	4413      	add	r3, r2
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	73fb      	strb	r3, [r7, #15]
	uint8_t ddram_cmd = ddram | (1<<7); // add a 1 in DB7 for DDRAM command
 80008e0:	7bfb      	ldrb	r3, [r7, #15]
 80008e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008e6:	73bb      	strb	r3, [r7, #14]

	lcd_send_byte(ddram_cmd, RS_INSTRUCTION, RW_WRITE); // send address as instruction, not data
 80008e8:	7bbb      	ldrb	r3, [r7, #14]
 80008ea:	2200      	movs	r2, #0
 80008ec:	2100      	movs	r1, #0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f7ff ff52 	bl	8000798 <lcd_send_byte>
}
 80008f4:	bf00      	nop
 80008f6:	3710      	adds	r7, #16
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	08003e84 	.word	0x08003e84

08000900 <lcd_print_text>:

void lcd_print_text(uint8_t text[], uint8_t size){
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	460b      	mov	r3, r1
 800090a:	70fb      	strb	r3, [r7, #3]

	for(uint8_t i = 0; i < size-1; i++){ // -1 to exclude the '/0' char
 800090c:	2300      	movs	r3, #0
 800090e:	73fb      	strb	r3, [r7, #15]
 8000910:	e00e      	b.n	8000930 <lcd_print_text+0x30>
		HAL_Delay(1); // without this some chars go missing
 8000912:	2001      	movs	r0, #1
 8000914:	f000 fc62 	bl	80011dc <HAL_Delay>
		lcd_send_byte(text[i], RS_DATA, RW_WRITE);
 8000918:	7bfb      	ldrb	r3, [r7, #15]
 800091a:	687a      	ldr	r2, [r7, #4]
 800091c:	4413      	add	r3, r2
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	2200      	movs	r2, #0
 8000922:	2101      	movs	r1, #1
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff ff37 	bl	8000798 <lcd_send_byte>
	for(uint8_t i = 0; i < size-1; i++){ // -1 to exclude the '/0' char
 800092a:	7bfb      	ldrb	r3, [r7, #15]
 800092c:	3301      	adds	r3, #1
 800092e:	73fb      	strb	r3, [r7, #15]
 8000930:	7bfa      	ldrb	r2, [r7, #15]
 8000932:	78fb      	ldrb	r3, [r7, #3]
 8000934:	3b01      	subs	r3, #1
 8000936:	429a      	cmp	r2, r3
 8000938:	dbeb      	blt.n	8000912 <lcd_print_text+0x12>
	}
}
 800093a:	bf00      	nop
 800093c:	bf00      	nop
 800093e:	3710      	adds	r7, #16
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}

08000944 <lcd_init>:
void lcd_print_custom_character(uint8_t customCharArray[], uint8_t index){
	create_character(index, customCharArray);
	lcd_send_byte(index, RS_DATA, RW_WRITE);
}

void lcd_init(){
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
	// initialization sequence p46 HD44780 datasheet
	HAL_Delay(60); // wait >40 ms
 8000948:	203c      	movs	r0, #60	; 0x3c
 800094a:	f000 fc47 	bl	80011dc <HAL_Delay>
	lcd_send_byte(0x30, RS_INSTRUCTION, RW_WRITE); // 0 0 1 1 x x x x -> 0x30
 800094e:	2200      	movs	r2, #0
 8000950:	2100      	movs	r1, #0
 8000952:	2030      	movs	r0, #48	; 0x30
 8000954:	f7ff ff20 	bl	8000798 <lcd_send_byte>
	HAL_Delay(10); // wait > 4 ms
 8000958:	200a      	movs	r0, #10
 800095a:	f000 fc3f 	bl	80011dc <HAL_Delay>
	lcd_send_byte(0x30, RS_INSTRUCTION, RW_WRITE);
 800095e:	2200      	movs	r2, #0
 8000960:	2100      	movs	r1, #0
 8000962:	2030      	movs	r0, #48	; 0x30
 8000964:	f7ff ff18 	bl	8000798 <lcd_send_byte>
	HAL_Delay(10); // wait > 0.1 ms
 8000968:	200a      	movs	r0, #10
 800096a:	f000 fc37 	bl	80011dc <HAL_Delay>
	lcd_send_byte(0x30, RS_INSTRUCTION, RW_WRITE);
 800096e:	2200      	movs	r2, #0
 8000970:	2100      	movs	r1, #0
 8000972:	2030      	movs	r0, #48	; 0x30
 8000974:	f7ff ff10 	bl	8000798 <lcd_send_byte>
	HAL_Delay(10);
 8000978:	200a      	movs	r0, #10
 800097a:	f000 fc2f 	bl	80011dc <HAL_Delay>
	lcd_send_byte(0x20, RS_INSTRUCTION, RW_WRITE); // 0 0 1 DL=0 x x x x -> 0x20 / Function set: DL=4-bit mode
 800097e:	2200      	movs	r2, #0
 8000980:	2100      	movs	r1, #0
 8000982:	2020      	movs	r0, #32
 8000984:	f7ff ff08 	bl	8000798 <lcd_send_byte>
	// start in 4 bit mode
	lcd_send_byte(0x28, RS_INSTRUCTION, RW_WRITE); // 0 0 1 0 N=1 F=0 x x -> 0x28 / Function set: N=2-lines, F=5x8
 8000988:	2200      	movs	r2, #0
 800098a:	2100      	movs	r1, #0
 800098c:	2028      	movs	r0, #40	; 0x28
 800098e:	f7ff ff03 	bl	8000798 <lcd_send_byte>
	HAL_Delay(10);
 8000992:	200a      	movs	r0, #10
 8000994:	f000 fc22 	bl	80011dc <HAL_Delay>
	lcd_send_byte(0x08, RS_INSTRUCTION, RW_WRITE); // 0 0 0 0 1 D=0 C=0 B=0 -> 0x08 / Display control: D=display off, C=cursor off, B=blink off
 8000998:	2200      	movs	r2, #0
 800099a:	2100      	movs	r1, #0
 800099c:	2008      	movs	r0, #8
 800099e:	f7ff fefb 	bl	8000798 <lcd_send_byte>
	HAL_Delay(10);
 80009a2:	200a      	movs	r0, #10
 80009a4:	f000 fc1a 	bl	80011dc <HAL_Delay>
	lcd_clear();
 80009a8:	f7ff ff62 	bl	8000870 <lcd_clear>
	HAL_Delay(10);
 80009ac:	200a      	movs	r0, #10
 80009ae:	f000 fc15 	bl	80011dc <HAL_Delay>
	lcd_send_byte(0x06, RS_INSTRUCTION, RW_WRITE); // 0 0 0 0 0 1 ID=1 S=0 -> 0x06/ Entry mode: ID=increment, S=no display shift
 80009b2:	2200      	movs	r2, #0
 80009b4:	2100      	movs	r1, #0
 80009b6:	2006      	movs	r0, #6
 80009b8:	f7ff feee 	bl	8000798 <lcd_send_byte>
	HAL_Delay(10);
 80009bc:	200a      	movs	r0, #10
 80009be:	f000 fc0d 	bl	80011dc <HAL_Delay>
	lcd_send_byte(0x0C, RS_INSTRUCTION, RW_WRITE); // 0 0 0 0 1 D=1 C=0 B=0 -> 0x0C / Display control:D-display on, C=cursor off, B=blink off
 80009c2:	2200      	movs	r2, #0
 80009c4:	2100      	movs	r1, #0
 80009c6:	200c      	movs	r0, #12
 80009c8:	f7ff fee6 	bl	8000798 <lcd_send_byte>
	HAL_Delay(10);
 80009cc:	200a      	movs	r0, #10
 80009ce:	f000 fc05 	bl	80011dc <HAL_Delay>
	lcd_clear();
 80009d2:	f7ff ff4d 	bl	8000870 <lcd_clear>
	HAL_Delay(10);
 80009d6:	200a      	movs	r0, #10
 80009d8:	f000 fc00 	bl	80011dc <HAL_Delay>
	return_home();
 80009dc:	f7ff ff51 	bl	8000882 <return_home>
	HAL_Delay(10);
 80009e0:	200a      	movs	r0, #10
 80009e2:	f000 fbfb 	bl	80011dc <HAL_Delay>
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
	...

080009ec <i2c_init>:

void i2c_linker(I2C_HandleTypeDef * i2cInstance){
	i2cHandle = *i2cInstance;
}

void i2c_init(void){
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0

	i2cHandle.Instance = I2C1;
 80009f0:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <i2c_init+0x48>)
 80009f2:	4a11      	ldr	r2, [pc, #68]	; (8000a38 <i2c_init+0x4c>)
 80009f4:	601a      	str	r2, [r3, #0]
	i2cHandle.Init.ClockSpeed = 100000;
 80009f6:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <i2c_init+0x48>)
 80009f8:	4a10      	ldr	r2, [pc, #64]	; (8000a3c <i2c_init+0x50>)
 80009fa:	605a      	str	r2, [r3, #4]
	i2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009fc:	4b0d      	ldr	r3, [pc, #52]	; (8000a34 <i2c_init+0x48>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
	i2cHandle.Init.OwnAddress1 = 0;
 8000a02:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <i2c_init+0x48>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	60da      	str	r2, [r3, #12]
	i2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a08:	4b0a      	ldr	r3, [pc, #40]	; (8000a34 <i2c_init+0x48>)
 8000a0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a0e:	611a      	str	r2, [r3, #16]
	i2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a10:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <i2c_init+0x48>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	615a      	str	r2, [r3, #20]
	i2cHandle.Init.OwnAddress2 = 0;
 8000a16:	4b07      	ldr	r3, [pc, #28]	; (8000a34 <i2c_init+0x48>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
	i2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a1c:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <i2c_init+0x48>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	61da      	str	r2, [r3, #28]
	i2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a22:	4b04      	ldr	r3, [pc, #16]	; (8000a34 <i2c_init+0x48>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&i2cHandle) != HAL_OK)
 8000a28:	4802      	ldr	r0, [pc, #8]	; (8000a34 <i2c_init+0x48>)
 8000a2a:	f000 fef7 	bl	800181c <HAL_I2C_Init>
  {
    //Error_Handler();
  }
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20000150 	.word	0x20000150
 8000a38:	40005400 	.word	0x40005400
 8000a3c:	000186a0 	.word	0x000186a0

08000a40 <menuMEF_init>:
static uint16_t blinkRepeat = BLINK_REPEAT_DEFAULT; // almacena el valor de las repeticiones

static uint8_t optionText[12][16] = {"OPCION 1       ", "OPCION 2       ", "OPCION 3       ", "OPCION 4       ", "OPCION 5       ", "OPCION 6       ",
				"EJECUTANDO 1   ", "EJECUTANDO 2   ", "EJECUTANDO 3   ", "EJECUTANDO 4   ", "EJECUTANDO 5   ", "EJECUTANDO 6   "};

void menuMEF_init(){
 8000a40:	b590      	push	{r4, r7, lr}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
	pulseHandle.nextTime = NEXT_TIME;
 8000a46:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <menuMEF_init+0x64>)
 8000a48:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000a4c:	819a      	strh	r2, [r3, #12]
	pulseHandle.executeTime = EXECUTE_TIME;
 8000a4e:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <menuMEF_init+0x64>)
 8000a50:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000a54:	81da      	strh	r2, [r3, #14]
	currentState = OPTION_1;
 8000a56:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <menuMEF_init+0x68>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	701a      	strb	r2, [r3, #0]

	// ingreso de parametros por la terminal
	menuMEF_user_input();
 8000a5c:	f000 fa26 	bl	8000eac <menuMEF_user_input>

	// Comienzo del LCD
	lcd_init();
 8000a60:	f7ff ff70 	bl	8000944 <lcd_init>
	uint8_t welcomeText[] = "* MENU MEF *";
 8000a64:	4b11      	ldr	r3, [pc, #68]	; (8000aac <menuMEF_init+0x6c>)
 8000a66:	463c      	mov	r4, r7
 8000a68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a6a:	c407      	stmia	r4!, {r0, r1, r2}
 8000a6c:	7023      	strb	r3, [r4, #0]

	lcd_print_text(welcomeText, sizeof(welcomeText)/sizeof(welcomeText[0]));
 8000a6e:	463b      	mov	r3, r7
 8000a70:	210d      	movs	r1, #13
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff ff44 	bl	8000900 <lcd_print_text>
//		lcd_send_byte(0, RS_DATA, RW_WRITE);
//		HAL_Delay(500);
//	}

	// Mostrar comienzo en terminal
	uartSendString("\r\n**************************************************\r\n");
 8000a78:	480d      	ldr	r0, [pc, #52]	; (8000ab0 <menuMEF_init+0x70>)
 8000a7a:	f000 faef 	bl	800105c <uartSendString>
	uartSendString("*************** Comienzo MENU MEF ****************\r\n");
 8000a7e:	480d      	ldr	r0, [pc, #52]	; (8000ab4 <menuMEF_init+0x74>)
 8000a80:	f000 faec 	bl	800105c <uartSendString>
	uartSendString("Opcion 1\r\n");
 8000a84:	480c      	ldr	r0, [pc, #48]	; (8000ab8 <menuMEF_init+0x78>)
 8000a86:	f000 fae9 	bl	800105c <uartSendString>

	lcd_set_position(2, 1);
 8000a8a:	2101      	movs	r1, #1
 8000a8c:	2002      	movs	r0, #2
 8000a8e:	f7ff ff01 	bl	8000894 <lcd_set_position>
	lcd_print_text(optionText[OPTION_1], sizeof(optionText)/sizeof(optionText[0]));
 8000a92:	210c      	movs	r1, #12
 8000a94:	4809      	ldr	r0, [pc, #36]	; (8000abc <menuMEF_init+0x7c>)
 8000a96:	f7ff ff33 	bl	8000900 <lcd_print_text>

}
 8000a9a:	bf00      	nop
 8000a9c:	3714      	adds	r7, #20
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd90      	pop	{r4, r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	200001a8 	.word	0x200001a8
 8000aa8:	200001a4 	.word	0x200001a4
 8000aac:	08003948 	.word	0x08003948
 8000ab0:	080038cc 	.word	0x080038cc
 8000ab4:	08003904 	.word	0x08003904
 8000ab8:	0800393c 	.word	0x0800393c
 8000abc:	20000008 	.word	0x20000008

08000ac0 <menuMEF_update>:

// actualiza el estado de la MEF en funcion del largo del pulso
// retorna NEXT, EXECUTE o NONE para establecer el estado actual de la MEF en menuMEF_set_state()
action_t menuMEF_update(void){
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
	action_t command = NONE;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	71fb      	strb	r3, [r7, #7]
	if(readKey_down() == true){
 8000aca:	f7ff fde5 	bl	8000698 <readKey_down>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d004      	beq.n	8000ade <menuMEF_update+0x1e>
		// comenzar conteo
		pulseHandle.startTime = HAL_GetTick(); // tiempo desde boton presionado
 8000ad4:	f000 fb78 	bl	80011c8 <HAL_GetTick>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	4a1e      	ldr	r2, [pc, #120]	; (8000b54 <menuMEF_update+0x94>)
 8000adc:	6013      	str	r3, [r2, #0]
	}
	if(readKey_up() == true){
 8000ade:	f7ff fdf1 	bl	80006c4 <readKey_up>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d02f      	beq.n	8000b48 <menuMEF_update+0x88>
		// terminar conteo y pasar de opcion o ejecutarla
		pulseHandle.stopTime = HAL_GetTick(); // tiempo desde boton presionado
 8000ae8:	f000 fb6e 	bl	80011c8 <HAL_GetTick>
 8000aec:	4603      	mov	r3, r0
 8000aee:	4a19      	ldr	r2, [pc, #100]	; (8000b54 <menuMEF_update+0x94>)
 8000af0:	6053      	str	r3, [r2, #4]
		pulseHandle.deltaTime = pulseHandle.stopTime - pulseHandle.startTime; // if stop>start
 8000af2:	4b18      	ldr	r3, [pc, #96]	; (8000b54 <menuMEF_update+0x94>)
 8000af4:	685a      	ldr	r2, [r3, #4]
 8000af6:	4b17      	ldr	r3, [pc, #92]	; (8000b54 <menuMEF_update+0x94>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	1ad3      	subs	r3, r2, r3
 8000afc:	4a15      	ldr	r2, [pc, #84]	; (8000b54 <menuMEF_update+0x94>)
 8000afe:	6093      	str	r3, [r2, #8]

		if( executingRoutine == false){
 8000b00:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <menuMEF_update+0x98>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	f083 0301 	eor.w	r3, r3, #1
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d01a      	beq.n	8000b44 <menuMEF_update+0x84>
			if(pulseHandle.deltaTime < pulseHandle.nextTime){
 8000b0e:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <menuMEF_update+0x94>)
 8000b10:	689b      	ldr	r3, [r3, #8]
 8000b12:	4a10      	ldr	r2, [pc, #64]	; (8000b54 <menuMEF_update+0x94>)
 8000b14:	8992      	ldrh	r2, [r2, #12]
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d205      	bcs.n	8000b26 <menuMEF_update+0x66>
				command = NEXT;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	71fb      	strb	r3, [r7, #7]
				uartSendString("NEXT\r\n");
 8000b1e:	480f      	ldr	r0, [pc, #60]	; (8000b5c <menuMEF_update+0x9c>)
 8000b20:	f000 fa9c 	bl	800105c <uartSendString>
 8000b24:	e010      	b.n	8000b48 <menuMEF_update+0x88>
			} else if (pulseHandle.deltaTime > pulseHandle.executeTime){
 8000b26:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <menuMEF_update+0x94>)
 8000b28:	689b      	ldr	r3, [r3, #8]
 8000b2a:	4a0a      	ldr	r2, [pc, #40]	; (8000b54 <menuMEF_update+0x94>)
 8000b2c:	89d2      	ldrh	r2, [r2, #14]
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d905      	bls.n	8000b3e <menuMEF_update+0x7e>
				command = EXECUTE;
 8000b32:	2303      	movs	r3, #3
 8000b34:	71fb      	strb	r3, [r7, #7]
				uartSendString("EXECUTE\r\n");
 8000b36:	480a      	ldr	r0, [pc, #40]	; (8000b60 <menuMEF_update+0xa0>)
 8000b38:	f000 fa90 	bl	800105c <uartSendString>
 8000b3c:	e004      	b.n	8000b48 <menuMEF_update+0x88>
			} else{
				command = NONE;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	71fb      	strb	r3, [r7, #7]
 8000b42:	e001      	b.n	8000b48 <menuMEF_update+0x88>
			}
		} else{
			command = STOP;
 8000b44:	2304      	movs	r3, #4
 8000b46:	71fb      	strb	r3, [r7, #7]
		}
	}
	return command;
 8000b48:	79fb      	ldrb	r3, [r7, #7]
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	200001a8 	.word	0x200001a8
 8000b58:	200001b8 	.word	0x200001b8
 8000b5c:	08003958 	.word	0x08003958
 8000b60:	08003960 	.word	0x08003960

08000b64 <menuMEF_set_state>:

// Actualiza el estado actual del menu (MEF)
void menuMEF_set_state(action_t command){
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]

	if(command == STOP){
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	2b04      	cmp	r3, #4
 8000b72:	d105      	bne.n	8000b80 <menuMEF_set_state+0x1c>
		blink_stop(LED_PORT,LED_PIN);
 8000b74:	2120      	movs	r1, #32
 8000b76:	4819      	ldr	r0, [pc, #100]	; (8000bdc <menuMEF_set_state+0x78>)
 8000b78:	f000 f976 	bl	8000e68 <blink_stop>
		motor_stop();
 8000b7c:	f000 f990 	bl	8000ea0 <motor_stop>
	}

	if(command == NEXT){
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d10d      	bne.n	8000ba2 <menuMEF_set_state+0x3e>
		if(currentState == OPTION_6){ // volver al inicio
 8000b86:	4b16      	ldr	r3, [pc, #88]	; (8000be0 <menuMEF_set_state+0x7c>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b05      	cmp	r3, #5
 8000b8c:	d103      	bne.n	8000b96 <menuMEF_set_state+0x32>
			currentState = OPTION_1;
 8000b8e:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <menuMEF_set_state+0x7c>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	701a      	strb	r2, [r3, #0]
 8000b94:	e005      	b.n	8000ba2 <menuMEF_set_state+0x3e>
		} else {
			currentState++; // avanzar a la siguiente opcion
 8000b96:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <menuMEF_set_state+0x7c>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	b2da      	uxtb	r2, r3
 8000b9e:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <menuMEF_set_state+0x7c>)
 8000ba0:	701a      	strb	r2, [r3, #0]
		}
	}
	// si hubo un pulso indicando NEXT o EXECUTE, actualizar LCD y ejecutar la rutina correspondiente
	// actualizar solo cuando hay un cambio
	if((command == EXECUTE) || (command == NEXT)){
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	2b03      	cmp	r3, #3
 8000ba6:	d002      	beq.n	8000bae <menuMEF_set_state+0x4a>
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	d103      	bne.n	8000bb6 <menuMEF_set_state+0x52>
		menuMEF_update_display(command); // actualizar display LCD
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f000 f817 	bl	8000be4 <menuMEF_update_display>
	}
	if(command == EXECUTE){
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	2b03      	cmp	r3, #3
 8000bba:	d105      	bne.n	8000bc8 <menuMEF_set_state+0x64>
		currentState = currentState + OPTION_OFFSET; // pasar a estado EXECUTE_x
 8000bbc:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <menuMEF_set_state+0x7c>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	3306      	adds	r3, #6
 8000bc2:	b2da      	uxtb	r2, r3
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <menuMEF_set_state+0x7c>)
 8000bc6:	701a      	strb	r2, [r3, #0]
	}
	menuMEF_execute(currentState); // iniciar/continuar rutina si corresponde
 8000bc8:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <menuMEF_set_state+0x7c>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f000 f857 	bl	8000c80 <menuMEF_execute>
}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40010800 	.word	0x40010800
 8000be0:	200001a4 	.word	0x200001a4

08000be4 <menuMEF_update_display>:

void menuMEF_update_display( action_t command){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b086      	sub	sp, #24
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
	char buffer[16];
	// Escribir al LCD
	if((command == NEXT) || (command == BACK)){
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d002      	beq.n	8000bfa <menuMEF_update_display+0x16>
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	2b02      	cmp	r3, #2
 8000bf8:	d11a      	bne.n	8000c30 <menuMEF_update_display+0x4c>
		// enviar estado actual 'Opcion x' al LCD
		sprintf(buffer, "Opcion %d\r\n", currentState+1);
 8000bfa:	4b1c      	ldr	r3, [pc, #112]	; (8000c6c <menuMEF_update_display+0x88>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	1c5a      	adds	r2, r3, #1
 8000c00:	f107 0308 	add.w	r3, r7, #8
 8000c04:	491a      	ldr	r1, [pc, #104]	; (8000c70 <menuMEF_update_display+0x8c>)
 8000c06:	4618      	mov	r0, r3
 8000c08:	f002 f9a2 	bl	8002f50 <siprintf>
		uartSendString(buffer);
 8000c0c:	f107 0308 	add.w	r3, r7, #8
 8000c10:	4618      	mov	r0, r3
 8000c12:	f000 fa23 	bl	800105c <uartSendString>

		lcd_set_position(2, 1);
 8000c16:	2101      	movs	r1, #1
 8000c18:	2002      	movs	r0, #2
 8000c1a:	f7ff fe3b 	bl	8000894 <lcd_set_position>
		lcd_print_text(optionText[currentState], sizeof(optionText)/sizeof(optionText[0]));
 8000c1e:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <menuMEF_update_display+0x88>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	011b      	lsls	r3, r3, #4
 8000c24:	4a13      	ldr	r2, [pc, #76]	; (8000c74 <menuMEF_update_display+0x90>)
 8000c26:	4413      	add	r3, r2
 8000c28:	210c      	movs	r1, #12
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff fe68 	bl	8000900 <lcd_print_text>
	}
	if(command == EXECUTE){
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	2b03      	cmp	r3, #3
 8000c34:	d115      	bne.n	8000c62 <menuMEF_update_display+0x7e>
		// enviar estado actual 'Ejecutando x' al LCD
		sprintf(buffer, "Ejecutando %d\r\n", currentState+1);
 8000c36:	4b0d      	ldr	r3, [pc, #52]	; (8000c6c <menuMEF_update_display+0x88>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	1c5a      	adds	r2, r3, #1
 8000c3c:	f107 0308 	add.w	r3, r7, #8
 8000c40:	490d      	ldr	r1, [pc, #52]	; (8000c78 <menuMEF_update_display+0x94>)
 8000c42:	4618      	mov	r0, r3
 8000c44:	f002 f984 	bl	8002f50 <siprintf>
		uartSendString(buffer);
 8000c48:	f107 0308 	add.w	r3, r7, #8
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f000 fa05 	bl	800105c <uartSendString>

		lcd_set_position(2, 1);
 8000c52:	2101      	movs	r1, #1
 8000c54:	2002      	movs	r0, #2
 8000c56:	f7ff fe1d 	bl	8000894 <lcd_set_position>
		//lcd_print_text(optionText[currentState+OPTION_OFFSET], sizeof(optionText)/sizeof(optionText[0]));
		lcd_print_text("EJECUTANDO 3", 13);
 8000c5a:	210d      	movs	r1, #13
 8000c5c:	4807      	ldr	r0, [pc, #28]	; (8000c7c <menuMEF_update_display+0x98>)
 8000c5e:	f7ff fe4f 	bl	8000900 <lcd_print_text>
	}

}
 8000c62:	bf00      	nop
 8000c64:	3718      	adds	r7, #24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	200001a4 	.word	0x200001a4
 8000c70:	0800396c 	.word	0x0800396c
 8000c74:	20000008 	.word	0x20000008
 8000c78:	08003978 	.word	0x08003978
 8000c7c:	08003988 	.word	0x08003988

08000c80 <menuMEF_execute>:

void menuMEF_execute(){
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
	// ejecutar la opcion seleccionada
	//blink_led(LED_PORT, LED_PIN, 500, 10);
	switch (currentState){
 8000c84:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <menuMEF_execute+0x5c>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	3b06      	subs	r3, #6
 8000c8a:	2b05      	cmp	r3, #5
 8000c8c:	d822      	bhi.n	8000cd4 <menuMEF_execute+0x54>
 8000c8e:	a201      	add	r2, pc, #4	; (adr r2, 8000c94 <menuMEF_execute+0x14>)
 8000c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c94:	08000cad 	.word	0x08000cad
 8000c98:	08000cb7 	.word	0x08000cb7
 8000c9c:	08000cc1 	.word	0x08000cc1
 8000ca0:	08000cd5 	.word	0x08000cd5
 8000ca4:	08000cd5 	.word	0x08000cd5
 8000ca8:	08000cd5 	.word	0x08000cd5
	case EXECUTE_1:
		// ejecutar 1
		led_on(LED_PORT, LED_PIN);
 8000cac:	2120      	movs	r1, #32
 8000cae:	480c      	ldr	r0, [pc, #48]	; (8000ce0 <menuMEF_execute+0x60>)
 8000cb0:	f000 f84a 	bl	8000d48 <led_on>
		break;
 8000cb4:	e00f      	b.n	8000cd6 <menuMEF_execute+0x56>
	case EXECUTE_2:
		// ejecutar 2
		led_off(LED_PORT, LED_PIN);
 8000cb6:	2120      	movs	r1, #32
 8000cb8:	4809      	ldr	r0, [pc, #36]	; (8000ce0 <menuMEF_execute+0x60>)
 8000cba:	f000 f85f 	bl	8000d7c <led_off>
		break;
 8000cbe:	e00a      	b.n	8000cd6 <menuMEF_execute+0x56>
	case EXECUTE_3:
		// ejecutar 3
		blink_led(LED_PORT, LED_PIN, blinkPeriod, blinkRepeat);
 8000cc0:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <menuMEF_execute+0x64>)
 8000cc2:	881a      	ldrh	r2, [r3, #0]
 8000cc4:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <menuMEF_execute+0x68>)
 8000cc6:	881b      	ldrh	r3, [r3, #0]
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	2120      	movs	r1, #32
 8000ccc:	4804      	ldr	r0, [pc, #16]	; (8000ce0 <menuMEF_execute+0x60>)
 8000cce:	f000 f86f 	bl	8000db0 <blink_led>
		break;
 8000cd2:	e000      	b.n	8000cd6 <menuMEF_execute+0x56>
	case EXECUTE_6:
		// ejecutar 6
		break;
	default:
		// error
		break;
 8000cd4:	bf00      	nop
	}


}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	200001a4 	.word	0x200001a4
 8000ce0:	40010800 	.word	0x40010800
 8000ce4:	20000004 	.word	0x20000004
 8000ce8:	20000006 	.word	0x20000006

08000cec <menuMEF_reset_state>:

void menuMEF_reset_state(){
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
	if((currentState >= EXECUTE_1) & (currentState <= EXECUTE_6) & (executingRoutine == false)){
 8000cf0:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <menuMEF_reset_state+0x54>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	2b05      	cmp	r3, #5
 8000cf6:	bf8c      	ite	hi
 8000cf8:	2301      	movhi	r3, #1
 8000cfa:	2300      	movls	r3, #0
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <menuMEF_reset_state+0x54>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	2b0b      	cmp	r3, #11
 8000d04:	bf94      	ite	ls
 8000d06:	2301      	movls	r3, #1
 8000d08:	2300      	movhi	r3, #0
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	461a      	mov	r2, r3
 8000d12:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <menuMEF_reset_state+0x58>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	f083 0301 	eor.w	r3, r3, #1
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d005      	beq.n	8000d2e <menuMEF_reset_state+0x42>
		currentState = currentState - OPTION_OFFSET;
 8000d22:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <menuMEF_reset_state+0x54>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	3b06      	subs	r3, #6
 8000d28:	b2da      	uxtb	r2, r3
 8000d2a:	4b05      	ldr	r3, [pc, #20]	; (8000d40 <menuMEF_reset_state+0x54>)
 8000d2c:	701a      	strb	r2, [r3, #0]
	}
	executingRoutine = false;
 8000d2e:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <menuMEF_reset_state+0x58>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	701a      	strb	r2, [r3, #0]
	menuMEF_update_display(BACK);
 8000d34:	2002      	movs	r0, #2
 8000d36:	f7ff ff55 	bl	8000be4 <menuMEF_update_display>
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	200001a4 	.word	0x200001a4
 8000d44:	200001b8 	.word	0x200001b8

08000d48 <led_on>:

void led_on(GPIO_TypeDef * port, uint16_t pin ){
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	460b      	mov	r3, r1
 8000d52:	807b      	strh	r3, [r7, #2]
	executingRoutine = true;
 8000d54:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <led_on+0x30>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(port, pin, SET);
 8000d5a:	887b      	ldrh	r3, [r7, #2]
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	4619      	mov	r1, r3
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f000 fd08 	bl	8001776 <HAL_GPIO_WritePin>
	executingRoutine = false;
 8000d66:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <led_on+0x30>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	701a      	strb	r2, [r3, #0]
	menuMEF_reset_state();
 8000d6c:	f7ff ffbe 	bl	8000cec <menuMEF_reset_state>
}
 8000d70:	bf00      	nop
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	200001b8 	.word	0x200001b8

08000d7c <led_off>:

void led_off(GPIO_TypeDef * port, uint16_t pin ){
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	460b      	mov	r3, r1
 8000d86:	807b      	strh	r3, [r7, #2]
	executingRoutine = true;
 8000d88:	4b08      	ldr	r3, [pc, #32]	; (8000dac <led_off+0x30>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(port, pin, RESET);
 8000d8e:	887b      	ldrh	r3, [r7, #2]
 8000d90:	2200      	movs	r2, #0
 8000d92:	4619      	mov	r1, r3
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f000 fcee 	bl	8001776 <HAL_GPIO_WritePin>
	executingRoutine = false;
 8000d9a:	4b04      	ldr	r3, [pc, #16]	; (8000dac <led_off+0x30>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	701a      	strb	r2, [r3, #0]
	menuMEF_reset_state();
 8000da0:	f7ff ffa4 	bl	8000cec <menuMEF_reset_state>
}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	200001b8 	.word	0x200001b8

08000db0 <blink_led>:

void blink_led(GPIO_TypeDef * port, uint16_t pin, uint16_t period, uint8_t repeat){
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	4608      	mov	r0, r1
 8000dba:	4611      	mov	r1, r2
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	817b      	strh	r3, [r7, #10]
 8000dc2:	460b      	mov	r3, r1
 8000dc4:	813b      	strh	r3, [r7, #8]
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	71fb      	strb	r3, [r7, #7]

	if((count == 0) & (executingRoutine == false)){
 8000dca:	4b24      	ldr	r3, [pc, #144]	; (8000e5c <blink_led+0xac>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	bf0c      	ite	eq
 8000dd2:	2301      	moveq	r3, #1
 8000dd4:	2300      	movne	r3, #0
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	461a      	mov	r2, r3
 8000dda:	4b21      	ldr	r3, [pc, #132]	; (8000e60 <blink_led+0xb0>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	f083 0301 	eor.w	r3, r3, #1
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	4013      	ands	r3, r2
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d00d      	beq.n	8000e06 <blink_led+0x56>
		//count = 0;
		executingRoutine = true;
 8000dea:	4b1d      	ldr	r3, [pc, #116]	; (8000e60 <blink_led+0xb0>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(port, pin, SET);
 8000df0:	897b      	ldrh	r3, [r7, #10]
 8000df2:	2201      	movs	r2, #1
 8000df4:	4619      	mov	r1, r3
 8000df6:	68f8      	ldr	r0, [r7, #12]
 8000df8:	f000 fcbd 	bl	8001776 <HAL_GPIO_WritePin>
		delayInit(&delayBlinkHandle, period );
 8000dfc:	893b      	ldrh	r3, [r7, #8]
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4818      	ldr	r0, [pc, #96]	; (8000e64 <blink_led+0xb4>)
 8000e02:	f7ff fc81 	bl	8000708 <delayInit>
	}
	// repetir
	if(delayRead(&delayBlinkHandle) == true){
 8000e06:	4817      	ldr	r0, [pc, #92]	; (8000e64 <blink_led+0xb4>)
 8000e08:	f7ff fc9b 	bl	8000742 <delayRead>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d00a      	beq.n	8000e28 <blink_led+0x78>
		HAL_GPIO_TogglePin(port, pin);
 8000e12:	897b      	ldrh	r3, [r7, #10]
 8000e14:	4619      	mov	r1, r3
 8000e16:	68f8      	ldr	r0, [r7, #12]
 8000e18:	f000 fcc5 	bl	80017a6 <HAL_GPIO_TogglePin>
		count++;
 8000e1c:	4b0f      	ldr	r3, [pc, #60]	; (8000e5c <blink_led+0xac>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	3301      	adds	r3, #1
 8000e22:	b2da      	uxtb	r2, r3
 8000e24:	4b0d      	ldr	r3, [pc, #52]	; (8000e5c <blink_led+0xac>)
 8000e26:	701a      	strb	r2, [r3, #0]
	}
	// blink stop
	if(count >= repeat*2){
 8000e28:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <blink_led+0xac>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	429a      	cmp	r2, r3
 8000e34:	db0d      	blt.n	8000e52 <blink_led+0xa2>
		HAL_GPIO_WritePin(port, pin, RESET);
 8000e36:	897b      	ldrh	r3, [r7, #10]
 8000e38:	2200      	movs	r2, #0
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	68f8      	ldr	r0, [r7, #12]
 8000e3e:	f000 fc9a 	bl	8001776 <HAL_GPIO_WritePin>
		count = 0;
 8000e42:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <blink_led+0xac>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	701a      	strb	r2, [r3, #0]
		executingRoutine = false;
 8000e48:	4b05      	ldr	r3, [pc, #20]	; (8000e60 <blink_led+0xb0>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	701a      	strb	r2, [r3, #0]
		menuMEF_reset_state();
 8000e4e:	f7ff ff4d 	bl	8000cec <menuMEF_reset_state>
//		HAL_GPIO_TogglePin(port, pin);
//		HAL_Delay(period);
//	}
//	executingRoutine = false;
//	menuMEF_reset_state();
}
 8000e52:	bf00      	nop
 8000e54:	3710      	adds	r7, #16
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	200001b9 	.word	0x200001b9
 8000e60:	200001b8 	.word	0x200001b8
 8000e64:	200001bc 	.word	0x200001bc

08000e68 <blink_stop>:

void blink_stop(GPIO_TypeDef * port, uint16_t pin){
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	460b      	mov	r3, r1
 8000e72:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(port, pin, RESET);
 8000e74:	887b      	ldrh	r3, [r7, #2]
 8000e76:	2200      	movs	r2, #0
 8000e78:	4619      	mov	r1, r3
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f000 fc7b 	bl	8001776 <HAL_GPIO_WritePin>
	count = 0;
 8000e80:	4b05      	ldr	r3, [pc, #20]	; (8000e98 <blink_stop+0x30>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	701a      	strb	r2, [r3, #0]
	executingRoutine = false;
 8000e86:	4b05      	ldr	r3, [pc, #20]	; (8000e9c <blink_stop+0x34>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	701a      	strb	r2, [r3, #0]
	menuMEF_reset_state();
 8000e8c:	f7ff ff2e 	bl	8000cec <menuMEF_reset_state>
}
 8000e90:	bf00      	nop
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	200001b9 	.word	0x200001b9
 8000e9c:	200001b8 	.word	0x200001b8

08000ea0 <motor_stop>:

void motor_stop(){
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0

}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr

08000eac <menuMEF_user_input>:

void menuMEF_user_input(){
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b0d0      	sub	sp, #320	; 0x140
 8000eb0:	af02      	add	r7, sp, #8
	uint8_t intro[] = "Ingrese a continuacion los parametros del parpadeo del led en ms"
 8000eb2:	4a29      	ldr	r2, [pc, #164]	; (8000f58 <menuMEF_user_input+0xac>)
 8000eb4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000eb8:	4611      	mov	r1, r2
 8000eba:	2274      	movs	r2, #116	; 0x74
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f002 f89b 	bl	8002ff8 <memcpy>
			"\r\nO presione ENTER para utilizar el valor en []\r\n\r\n";
	uint8_t periodPrompt[64];
	uint8_t repeatPrompt[64];
	sprintf(periodPrompt,"[%d-%d] Ingrese el Periodo [%d]: ", BLINK_PERIOD_MIN, BLINK_PERIOD_MAX, blinkPeriod);
 8000ec2:	4b26      	ldr	r3, [pc, #152]	; (8000f5c <menuMEF_user_input+0xb0>)
 8000ec4:	881b      	ldrh	r3, [r3, #0]
 8000ec6:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8000eca:	9300      	str	r3, [sp, #0]
 8000ecc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000ed0:	2264      	movs	r2, #100	; 0x64
 8000ed2:	4923      	ldr	r1, [pc, #140]	; (8000f60 <menuMEF_user_input+0xb4>)
 8000ed4:	f002 f83c 	bl	8002f50 <siprintf>
	sprintf(repeatPrompt,"[%d-%d]Ingrese las repeticiones [%d]: ", BLINK_REPEAT_MIN, BLINK_REPEAT_MAX, blinkRepeat);
 8000ed8:	4b22      	ldr	r3, [pc, #136]	; (8000f64 <menuMEF_user_input+0xb8>)
 8000eda:	881b      	ldrh	r3, [r3, #0]
 8000edc:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000ee0:	9300      	str	r3, [sp, #0]
 8000ee2:	2314      	movs	r3, #20
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	4920      	ldr	r1, [pc, #128]	; (8000f68 <menuMEF_user_input+0xbc>)
 8000ee8:	f002 f832 	bl	8002f50 <siprintf>

	uartSendString(intro);
 8000eec:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f000 f8b3 	bl	800105c <uartSendString>

	uartSendString(periodPrompt);
 8000ef6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000efa:	4618      	mov	r0, r3
 8000efc:	f000 f8ae 	bl	800105c <uartSendString>
	blinkPeriod = get_value(BLINK_PERIOD_MIN, BLINK_PERIOD_MAX, BLINK_PERIOD_DEFAULT);
 8000f00:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f04:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000f08:	2064      	movs	r0, #100	; 0x64
 8000f0a:	f000 f831 	bl	8000f70 <get_value>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	461a      	mov	r2, r3
 8000f12:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <menuMEF_user_input+0xb0>)
 8000f14:	801a      	strh	r2, [r3, #0]

	uartSendString(repeatPrompt);
 8000f16:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f000 f89e 	bl	800105c <uartSendString>
	blinkRepeat = get_value(BLINK_REPEAT_MIN, BLINK_REPEAT_MAX, BLINK_REPEAT_DEFAULT);
 8000f20:	220a      	movs	r2, #10
 8000f22:	2114      	movs	r1, #20
 8000f24:	2001      	movs	r0, #1
 8000f26:	f000 f823 	bl	8000f70 <get_value>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <menuMEF_user_input+0xb8>)
 8000f30:	801a      	strh	r2, [r3, #0]

	uint8_t parameters[64];
	sprintf(parameters,"Parametros blinky: periodo [%d], Repecitiones [%d]\r\n-*-*-*-*\r\n", blinkPeriod, blinkRepeat );
 8000f32:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <menuMEF_user_input+0xb0>)
 8000f34:	881b      	ldrh	r3, [r3, #0]
 8000f36:	461a      	mov	r2, r3
 8000f38:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <menuMEF_user_input+0xb8>)
 8000f3a:	881b      	ldrh	r3, [r3, #0]
 8000f3c:	1d38      	adds	r0, r7, #4
 8000f3e:	490b      	ldr	r1, [pc, #44]	; (8000f6c <menuMEF_user_input+0xc0>)
 8000f40:	f002 f806 	bl	8002f50 <siprintf>
	uartSendString(parameters);
 8000f44:	1d3b      	adds	r3, r7, #4
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 f888 	bl	800105c <uartSendString>
}
 8000f4c:	bf00      	nop
 8000f4e:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	08003a24 	.word	0x08003a24
 8000f5c:	20000004 	.word	0x20000004
 8000f60:	08003998 	.word	0x08003998
 8000f64:	20000006 	.word	0x20000006
 8000f68:	080039bc 	.word	0x080039bc
 8000f6c:	080039e4 	.word	0x080039e4

08000f70 <get_value>:


uint16_t get_value(uint16_t min, uint16_t max, uint16_t defaultValue){
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	80fb      	strh	r3, [r7, #6]
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	80bb      	strh	r3, [r7, #4]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	807b      	strh	r3, [r7, #2]
	uint8_t inputBuffer[10];
	uint16_t value;

	while(1){
		uartReceiveString(inputBuffer, sizeof(inputBuffer)/sizeof(inputBuffer[0]));
 8000f82:	f107 030c 	add.w	r3, r7, #12
 8000f86:	210a      	movs	r1, #10
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f000 f889 	bl	80010a0 <uartReceiveString>
		if(inputBuffer[0] == '\0'){
 8000f8e:	7b3b      	ldrb	r3, [r7, #12]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d105      	bne.n	8000fa0 <get_value+0x30>
			value = defaultValue;
 8000f94:	887b      	ldrh	r3, [r7, #2]
 8000f96:	82fb      	strh	r3, [r7, #22]
			uartSendString("\r\n");
 8000f98:	4814      	ldr	r0, [pc, #80]	; (8000fec <get_value+0x7c>)
 8000f9a:	f000 f85f 	bl	800105c <uartSendString>
			break;
 8000f9e:	e020      	b.n	8000fe2 <get_value+0x72>
		}
		//uartSendString(periodBuffer);
		uartSendString("\r\n");
 8000fa0:	4812      	ldr	r0, [pc, #72]	; (8000fec <get_value+0x7c>)
 8000fa2:	f000 f85b 	bl	800105c <uartSendString>
		value = (uint16_t) atoi(inputBuffer);
 8000fa6:	f107 030c 	add.w	r3, r7, #12
 8000faa:	4618      	mov	r0, r3
 8000fac:	f001 ff44 	bl	8002e38 <atoi>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	82fb      	strh	r3, [r7, #22]
		if( (value <= max) & (value >= min) ){
 8000fb4:	8afa      	ldrh	r2, [r7, #22]
 8000fb6:	88bb      	ldrh	r3, [r7, #4]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	bf94      	ite	ls
 8000fbc:	2301      	movls	r3, #1
 8000fbe:	2300      	movhi	r3, #0
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	8af9      	ldrh	r1, [r7, #22]
 8000fc4:	88fb      	ldrh	r3, [r7, #6]
 8000fc6:	4299      	cmp	r1, r3
 8000fc8:	bf2c      	ite	cs
 8000fca:	2301      	movcs	r3, #1
 8000fcc:	2300      	movcc	r3, #0
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d103      	bne.n	8000fe0 <get_value+0x70>
			break;
		} else{
			uartSendString("\r\nValor fuera de rango!\r\nIngresar nuevamente: ");
 8000fd8:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <get_value+0x80>)
 8000fda:	f000 f83f 	bl	800105c <uartSendString>
	while(1){
 8000fde:	e7d0      	b.n	8000f82 <get_value+0x12>
			break;
 8000fe0:	bf00      	nop
		}
	}
	return value;
 8000fe2:	8afb      	ldrh	r3, [r7, #22]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3718      	adds	r7, #24
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	08003a98 	.word	0x08003a98
 8000ff0:	08003a9c 	.word	0x08003a9c

08000ff4 <uartInit>:

/* > Descripcion: Inicializa la uart con la configuracion preestablecida y envia dicha config a la terminal
 * > Parametro: ninguno
 * > Retorno: retorna un boolt_t true en caso exito o false caso contrario
 */
bool_t uartInit(){
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
	// uartHandle >> estructura de dato UART_HandleTypeDef declarada en API_uart.h
	bool_t returnFlag = false;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	71fb      	strb	r3, [r7, #7]

	uartHandle.Instance = USE_USART; // instancia de la uart >> usb conectado a usart2
 8000ffe:	4b14      	ldr	r3, [pc, #80]	; (8001050 <uartInit+0x5c>)
 8001000:	4a14      	ldr	r2, [pc, #80]	; (8001054 <uartInit+0x60>)
 8001002:	601a      	str	r2, [r3, #0]
	uartHandle.Init.BaudRate = 9600; // baudrate tipico
 8001004:	4b12      	ldr	r3, [pc, #72]	; (8001050 <uartInit+0x5c>)
 8001006:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800100a:	605a      	str	r2, [r3, #4]
	uartHandle.Init.WordLength = UART_WORDLENGTH_8B; // tamano de los datos >> 8 bits
 800100c:	4b10      	ldr	r3, [pc, #64]	; (8001050 <uartInit+0x5c>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
	uartHandle.Init.StopBits = UART_STOPBITS_1; // cantidad de stop bits >> 1 solo
 8001012:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <uartInit+0x5c>)
 8001014:	2200      	movs	r2, #0
 8001016:	60da      	str	r2, [r3, #12]
	uartHandle.Init.Parity = UART_PARITY_NONE; // tipo de paridad >> ninguno
 8001018:	4b0d      	ldr	r3, [pc, #52]	; (8001050 <uartInit+0x5c>)
 800101a:	2200      	movs	r2, #0
 800101c:	611a      	str	r2, [r3, #16]
	uartHandle.Init.Mode = UART_MODE_TX_RX; // modo recepcion/recepcion habilitado
 800101e:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <uartInit+0x5c>)
 8001020:	220c      	movs	r2, #12
 8001022:	615a      	str	r2, [r3, #20]
	uartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE; // sin control de flujo por hardware
 8001024:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <uartInit+0x5c>)
 8001026:	2200      	movs	r2, #0
 8001028:	619a      	str	r2, [r3, #24]
	uartHandle.Init.OverSampling = UART_OVERSAMPLING_16; // cantidad de muestras por tiempo de bit
 800102a:	4b09      	ldr	r3, [pc, #36]	; (8001050 <uartInit+0x5c>)
 800102c:	2200      	movs	r2, #0
 800102e:	61da      	str	r2, [r3, #28]

	if (HAL_UART_Init(&uartHandle) == HAL_OK){ // retornar true si es exitosa la configuracion
 8001030:	4807      	ldr	r0, [pc, #28]	; (8001050 <uartInit+0x5c>)
 8001032:	f001 fc9f 	bl	8002974 <HAL_UART_Init>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d104      	bne.n	8001046 <uartInit+0x52>
		//print_uart_config(uartHandle); // imprimir configuracion si la config fue exitosa
		uartSendString("\r\nUART inicializada\r\n");
 800103c:	4806      	ldr	r0, [pc, #24]	; (8001058 <uartInit+0x64>)
 800103e:	f000 f80d 	bl	800105c <uartSendString>
		returnFlag = true;
 8001042:	2301      	movs	r3, #1
 8001044:	71fb      	strb	r3, [r7, #7]
	}

	return returnFlag;
 8001046:	79fb      	ldrb	r3, [r7, #7]
}
 8001048:	4618      	mov	r0, r3
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	200001c8 	.word	0x200001c8
 8001054:	40004400 	.word	0x40004400
 8001058:	08003acc 	.word	0x08003acc

0800105c <uartSendString>:
/* > Descripcion: envia un string (buffer <pstring>) por la uart, finalizando en el caracter NULL
 * > Parametro: <pstring> puntero del tipo uint8_t
 * 				El buffer de envio tendra una cantidad maxima de caracteres definida en <SEND_BUFFER_MAX_SIZE>
 * > Retorno: ninguno
 */
void uartSendString(uint8_t * pstring){
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
	// pstring se envia sin tamano debe recorrerse incrementando la direccion por aritmetica de pointers
	uint16_t index = 0; // indice para recorrer array pstring, admite hasta 2^16 caracteres
 8001064:	2300      	movs	r3, #0
 8001066:	81fb      	strh	r3, [r7, #14]
	while(1){
		if( (*(pstring+index) == '\0') || (index > SEND_BUFFER_MAX_SIZE) ) break; // al encontrarse el NULL salir de funcion
 8001068:	89fb      	ldrh	r3, [r7, #14]
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	4413      	add	r3, r2
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d00e      	beq.n	8001092 <uartSendString+0x36>
 8001074:	89fb      	ldrh	r3, [r7, #14]
 8001076:	2bc8      	cmp	r3, #200	; 0xc8
 8001078:	d80b      	bhi.n	8001092 <uartSendString+0x36>
		HAL_UART_Transmit(&uartHandle, (pstring+index), 1, 100); // enviar caracter x caracter
 800107a:	89fb      	ldrh	r3, [r7, #14]
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	18d1      	adds	r1, r2, r3
 8001080:	2364      	movs	r3, #100	; 0x64
 8001082:	2201      	movs	r2, #1
 8001084:	4805      	ldr	r0, [pc, #20]	; (800109c <uartSendString+0x40>)
 8001086:	f001 fcc5 	bl	8002a14 <HAL_UART_Transmit>
		index++;
 800108a:	89fb      	ldrh	r3, [r7, #14]
 800108c:	3301      	adds	r3, #1
 800108e:	81fb      	strh	r3, [r7, #14]
		if( (*(pstring+index) == '\0') || (index > SEND_BUFFER_MAX_SIZE) ) break; // al encontrarse el NULL salir de funcion
 8001090:	e7ea      	b.n	8001068 <uartSendString+0xc>
	}
}
 8001092:	bf00      	nop
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	200001c8 	.word	0x200001c8

080010a0 <uartReceiveString>:
 * 				  y detiene la coleccion de caracteres al encontrarse un '\r' (se ha presionado ENTER)
 * > Parametro: <pstring> puntero del tipo uint8_t / <size> tamano del buffer de recepcion
 * > 			El buffer de recepcion tendra una cantidad maxima de caracteres definida en <RECEIVE_BUFFER_MAX_SIZE>
 * > Retorno: ninguno
 */
void uartReceiveString(uint8_t * pstring, uint16_t size){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	460b      	mov	r3, r1
 80010aa:	807b      	strh	r3, [r7, #2]
	if(size > RECEIVE_BUFFER_MAX_SIZE) size = RECEIVE_BUFFER_MAX_SIZE;
 80010ac:	887b      	ldrh	r3, [r7, #2]
 80010ae:	2bc8      	cmp	r3, #200	; 0xc8
 80010b0:	d901      	bls.n	80010b6 <uartReceiveString+0x16>
 80010b2:	23c8      	movs	r3, #200	; 0xc8
 80010b4:	807b      	strh	r3, [r7, #2]
	if(size < 1 ) size = 1;
 80010b6:	887b      	ldrh	r3, [r7, #2]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d101      	bne.n	80010c0 <uartReceiveString+0x20>
 80010bc:	2301      	movs	r3, #1
 80010be:	807b      	strh	r3, [r7, #2]

	uint16_t index = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	81fb      	strh	r3, [r7, #14]
	while(1){
		HAL_UART_Receive(&uartHandle, (pstring+index), 1, HAL_MAX_DELAY); // recibir y esperar cada caracter hasta <size>
 80010c4:	89fb      	ldrh	r3, [r7, #14]
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	18d1      	adds	r1, r2, r3
 80010ca:	f04f 33ff 	mov.w	r3, #4294967295
 80010ce:	2201      	movs	r2, #1
 80010d0:	4810      	ldr	r0, [pc, #64]	; (8001114 <uartReceiveString+0x74>)
 80010d2:	f001 fd22 	bl	8002b1a <HAL_UART_Receive>
		if( (index == size) ||  ( (*(pstring+index)) == '\r') ) break; // finalizar while al alzancar la cant de caracteres indicada
 80010d6:	89fa      	ldrh	r2, [r7, #14]
 80010d8:	887b      	ldrh	r3, [r7, #2]
 80010da:	429a      	cmp	r2, r3
 80010dc:	d011      	beq.n	8001102 <uartReceiveString+0x62>
 80010de:	89fb      	ldrh	r3, [r7, #14]
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	4413      	add	r3, r2
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	2b0d      	cmp	r3, #13
 80010e8:	d00b      	beq.n	8001102 <uartReceiveString+0x62>
		HAL_UART_Transmit(&uartHandle, (pstring+index), 1, 10);
 80010ea:	89fb      	ldrh	r3, [r7, #14]
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	18d1      	adds	r1, r2, r3
 80010f0:	230a      	movs	r3, #10
 80010f2:	2201      	movs	r2, #1
 80010f4:	4807      	ldr	r0, [pc, #28]	; (8001114 <uartReceiveString+0x74>)
 80010f6:	f001 fc8d 	bl	8002a14 <HAL_UART_Transmit>
		index++;
 80010fa:	89fb      	ldrh	r3, [r7, #14]
 80010fc:	3301      	adds	r3, #1
 80010fe:	81fb      	strh	r3, [r7, #14]
		HAL_UART_Receive(&uartHandle, (pstring+index), 1, HAL_MAX_DELAY); // recibir y esperar cada caracter hasta <size>
 8001100:	e7e0      	b.n	80010c4 <uartReceiveString+0x24>
	}

	*(pstring+index) = '\0'; // agregar el NULL al final para conformar el string
 8001102:	89fb      	ldrh	r3, [r7, #14]
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	4413      	add	r3, r2
 8001108:	2200      	movs	r2, #0
 800110a:	701a      	strb	r2, [r3, #0]
}
 800110c:	bf00      	nop
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	200001c8 	.word	0x200001c8

08001118 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800111c:	4b08      	ldr	r3, [pc, #32]	; (8001140 <HAL_Init+0x28>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a07      	ldr	r2, [pc, #28]	; (8001140 <HAL_Init+0x28>)
 8001122:	f043 0310 	orr.w	r3, r3, #16
 8001126:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001128:	2003      	movs	r0, #3
 800112a:	f000 f947 	bl	80013bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800112e:	2000      	movs	r0, #0
 8001130:	f000 f808 	bl	8001144 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001134:	f7ff f8d8 	bl	80002e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40022000 	.word	0x40022000

08001144 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <HAL_InitTick+0x54>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4b12      	ldr	r3, [pc, #72]	; (800119c <HAL_InitTick+0x58>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	4619      	mov	r1, r3
 8001156:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800115a:	fbb3 f3f1 	udiv	r3, r3, r1
 800115e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001162:	4618      	mov	r0, r3
 8001164:	f000 f95f 	bl	8001426 <HAL_SYSTICK_Config>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e00e      	b.n	8001190 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2b0f      	cmp	r3, #15
 8001176:	d80a      	bhi.n	800118e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001178:	2200      	movs	r2, #0
 800117a:	6879      	ldr	r1, [r7, #4]
 800117c:	f04f 30ff 	mov.w	r0, #4294967295
 8001180:	f000 f927 	bl	80013d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001184:	4a06      	ldr	r2, [pc, #24]	; (80011a0 <HAL_InitTick+0x5c>)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800118a:	2300      	movs	r3, #0
 800118c:	e000      	b.n	8001190 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
}
 8001190:	4618      	mov	r0, r3
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000000 	.word	0x20000000
 800119c:	200000cc 	.word	0x200000cc
 80011a0:	200000c8 	.word	0x200000c8

080011a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011a8:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <HAL_IncTick+0x1c>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	461a      	mov	r2, r3
 80011ae:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <HAL_IncTick+0x20>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4413      	add	r3, r2
 80011b4:	4a03      	ldr	r2, [pc, #12]	; (80011c4 <HAL_IncTick+0x20>)
 80011b6:	6013      	str	r3, [r2, #0]
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr
 80011c0:	200000cc 	.word	0x200000cc
 80011c4:	20000210 	.word	0x20000210

080011c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  return uwTick;
 80011cc:	4b02      	ldr	r3, [pc, #8]	; (80011d8 <HAL_GetTick+0x10>)
 80011ce:	681b      	ldr	r3, [r3, #0]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr
 80011d8:	20000210 	.word	0x20000210

080011dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011e4:	f7ff fff0 	bl	80011c8 <HAL_GetTick>
 80011e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011f4:	d005      	beq.n	8001202 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011f6:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <HAL_Delay+0x44>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	461a      	mov	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	4413      	add	r3, r2
 8001200:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001202:	bf00      	nop
 8001204:	f7ff ffe0 	bl	80011c8 <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	68fa      	ldr	r2, [r7, #12]
 8001210:	429a      	cmp	r2, r3
 8001212:	d8f7      	bhi.n	8001204 <HAL_Delay+0x28>
  {
  }
}
 8001214:	bf00      	nop
 8001216:	bf00      	nop
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	200000cc 	.word	0x200000cc

08001224 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f003 0307 	and.w	r3, r3, #7
 8001232:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001234:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <__NVIC_SetPriorityGrouping+0x44>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001240:	4013      	ands	r3, r2
 8001242:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800124c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001250:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001254:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001256:	4a04      	ldr	r2, [pc, #16]	; (8001268 <__NVIC_SetPriorityGrouping+0x44>)
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	60d3      	str	r3, [r2, #12]
}
 800125c:	bf00      	nop
 800125e:	3714      	adds	r7, #20
 8001260:	46bd      	mov	sp, r7
 8001262:	bc80      	pop	{r7}
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001270:	4b04      	ldr	r3, [pc, #16]	; (8001284 <__NVIC_GetPriorityGrouping+0x18>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	0a1b      	lsrs	r3, r3, #8
 8001276:	f003 0307 	and.w	r3, r3, #7
}
 800127a:	4618      	mov	r0, r3
 800127c:	46bd      	mov	sp, r7
 800127e:	bc80      	pop	{r7}
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001296:	2b00      	cmp	r3, #0
 8001298:	db0b      	blt.n	80012b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	f003 021f 	and.w	r2, r3, #31
 80012a0:	4906      	ldr	r1, [pc, #24]	; (80012bc <__NVIC_EnableIRQ+0x34>)
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	095b      	lsrs	r3, r3, #5
 80012a8:	2001      	movs	r0, #1
 80012aa:	fa00 f202 	lsl.w	r2, r0, r2
 80012ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr
 80012bc:	e000e100 	.word	0xe000e100

080012c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	6039      	str	r1, [r7, #0]
 80012ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	db0a      	blt.n	80012ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	490c      	ldr	r1, [pc, #48]	; (800130c <__NVIC_SetPriority+0x4c>)
 80012da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012de:	0112      	lsls	r2, r2, #4
 80012e0:	b2d2      	uxtb	r2, r2
 80012e2:	440b      	add	r3, r1
 80012e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012e8:	e00a      	b.n	8001300 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	4908      	ldr	r1, [pc, #32]	; (8001310 <__NVIC_SetPriority+0x50>)
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	f003 030f 	and.w	r3, r3, #15
 80012f6:	3b04      	subs	r3, #4
 80012f8:	0112      	lsls	r2, r2, #4
 80012fa:	b2d2      	uxtb	r2, r2
 80012fc:	440b      	add	r3, r1
 80012fe:	761a      	strb	r2, [r3, #24]
}
 8001300:	bf00      	nop
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	bc80      	pop	{r7}
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	e000e100 	.word	0xe000e100
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001314:	b480      	push	{r7}
 8001316:	b089      	sub	sp, #36	; 0x24
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	f1c3 0307 	rsb	r3, r3, #7
 800132e:	2b04      	cmp	r3, #4
 8001330:	bf28      	it	cs
 8001332:	2304      	movcs	r3, #4
 8001334:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	3304      	adds	r3, #4
 800133a:	2b06      	cmp	r3, #6
 800133c:	d902      	bls.n	8001344 <NVIC_EncodePriority+0x30>
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	3b03      	subs	r3, #3
 8001342:	e000      	b.n	8001346 <NVIC_EncodePriority+0x32>
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001348:	f04f 32ff 	mov.w	r2, #4294967295
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43da      	mvns	r2, r3
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	401a      	ands	r2, r3
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800135c:	f04f 31ff 	mov.w	r1, #4294967295
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	fa01 f303 	lsl.w	r3, r1, r3
 8001366:	43d9      	mvns	r1, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800136c:	4313      	orrs	r3, r2
         );
}
 800136e:	4618      	mov	r0, r3
 8001370:	3724      	adds	r7, #36	; 0x24
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr

08001378 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3b01      	subs	r3, #1
 8001384:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001388:	d301      	bcc.n	800138e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800138a:	2301      	movs	r3, #1
 800138c:	e00f      	b.n	80013ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800138e:	4a0a      	ldr	r2, [pc, #40]	; (80013b8 <SysTick_Config+0x40>)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3b01      	subs	r3, #1
 8001394:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001396:	210f      	movs	r1, #15
 8001398:	f04f 30ff 	mov.w	r0, #4294967295
 800139c:	f7ff ff90 	bl	80012c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013a0:	4b05      	ldr	r3, [pc, #20]	; (80013b8 <SysTick_Config+0x40>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013a6:	4b04      	ldr	r3, [pc, #16]	; (80013b8 <SysTick_Config+0x40>)
 80013a8:	2207      	movs	r2, #7
 80013aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	e000e010 	.word	0xe000e010

080013bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff ff2d 	bl	8001224 <__NVIC_SetPriorityGrouping>
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b086      	sub	sp, #24
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	4603      	mov	r3, r0
 80013da:	60b9      	str	r1, [r7, #8]
 80013dc:	607a      	str	r2, [r7, #4]
 80013de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013e4:	f7ff ff42 	bl	800126c <__NVIC_GetPriorityGrouping>
 80013e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	68b9      	ldr	r1, [r7, #8]
 80013ee:	6978      	ldr	r0, [r7, #20]
 80013f0:	f7ff ff90 	bl	8001314 <NVIC_EncodePriority>
 80013f4:	4602      	mov	r2, r0
 80013f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013fa:	4611      	mov	r1, r2
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff ff5f 	bl	80012c0 <__NVIC_SetPriority>
}
 8001402:	bf00      	nop
 8001404:	3718      	adds	r7, #24
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b082      	sub	sp, #8
 800140e:	af00      	add	r7, sp, #0
 8001410:	4603      	mov	r3, r0
 8001412:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff ff35 	bl	8001288 <__NVIC_EnableIRQ>
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f7ff ffa2 	bl	8001378 <SysTick_Config>
 8001434:	4603      	mov	r3, r0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001440:	b480      	push	{r7}
 8001442:	b08b      	sub	sp, #44	; 0x2c
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800144a:	2300      	movs	r3, #0
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800144e:	2300      	movs	r3, #0
 8001450:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001452:	e169      	b.n	8001728 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001454:	2201      	movs	r2, #1
 8001456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	69fa      	ldr	r2, [r7, #28]
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	429a      	cmp	r2, r3
 800146e:	f040 8158 	bne.w	8001722 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	4a9a      	ldr	r2, [pc, #616]	; (80016e0 <HAL_GPIO_Init+0x2a0>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d05e      	beq.n	800153a <HAL_GPIO_Init+0xfa>
 800147c:	4a98      	ldr	r2, [pc, #608]	; (80016e0 <HAL_GPIO_Init+0x2a0>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d875      	bhi.n	800156e <HAL_GPIO_Init+0x12e>
 8001482:	4a98      	ldr	r2, [pc, #608]	; (80016e4 <HAL_GPIO_Init+0x2a4>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d058      	beq.n	800153a <HAL_GPIO_Init+0xfa>
 8001488:	4a96      	ldr	r2, [pc, #600]	; (80016e4 <HAL_GPIO_Init+0x2a4>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d86f      	bhi.n	800156e <HAL_GPIO_Init+0x12e>
 800148e:	4a96      	ldr	r2, [pc, #600]	; (80016e8 <HAL_GPIO_Init+0x2a8>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d052      	beq.n	800153a <HAL_GPIO_Init+0xfa>
 8001494:	4a94      	ldr	r2, [pc, #592]	; (80016e8 <HAL_GPIO_Init+0x2a8>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d869      	bhi.n	800156e <HAL_GPIO_Init+0x12e>
 800149a:	4a94      	ldr	r2, [pc, #592]	; (80016ec <HAL_GPIO_Init+0x2ac>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d04c      	beq.n	800153a <HAL_GPIO_Init+0xfa>
 80014a0:	4a92      	ldr	r2, [pc, #584]	; (80016ec <HAL_GPIO_Init+0x2ac>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d863      	bhi.n	800156e <HAL_GPIO_Init+0x12e>
 80014a6:	4a92      	ldr	r2, [pc, #584]	; (80016f0 <HAL_GPIO_Init+0x2b0>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d046      	beq.n	800153a <HAL_GPIO_Init+0xfa>
 80014ac:	4a90      	ldr	r2, [pc, #576]	; (80016f0 <HAL_GPIO_Init+0x2b0>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d85d      	bhi.n	800156e <HAL_GPIO_Init+0x12e>
 80014b2:	2b12      	cmp	r3, #18
 80014b4:	d82a      	bhi.n	800150c <HAL_GPIO_Init+0xcc>
 80014b6:	2b12      	cmp	r3, #18
 80014b8:	d859      	bhi.n	800156e <HAL_GPIO_Init+0x12e>
 80014ba:	a201      	add	r2, pc, #4	; (adr r2, 80014c0 <HAL_GPIO_Init+0x80>)
 80014bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c0:	0800153b 	.word	0x0800153b
 80014c4:	08001515 	.word	0x08001515
 80014c8:	08001527 	.word	0x08001527
 80014cc:	08001569 	.word	0x08001569
 80014d0:	0800156f 	.word	0x0800156f
 80014d4:	0800156f 	.word	0x0800156f
 80014d8:	0800156f 	.word	0x0800156f
 80014dc:	0800156f 	.word	0x0800156f
 80014e0:	0800156f 	.word	0x0800156f
 80014e4:	0800156f 	.word	0x0800156f
 80014e8:	0800156f 	.word	0x0800156f
 80014ec:	0800156f 	.word	0x0800156f
 80014f0:	0800156f 	.word	0x0800156f
 80014f4:	0800156f 	.word	0x0800156f
 80014f8:	0800156f 	.word	0x0800156f
 80014fc:	0800156f 	.word	0x0800156f
 8001500:	0800156f 	.word	0x0800156f
 8001504:	0800151d 	.word	0x0800151d
 8001508:	08001531 	.word	0x08001531
 800150c:	4a79      	ldr	r2, [pc, #484]	; (80016f4 <HAL_GPIO_Init+0x2b4>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d013      	beq.n	800153a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001512:	e02c      	b.n	800156e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	623b      	str	r3, [r7, #32]
          break;
 800151a:	e029      	b.n	8001570 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	3304      	adds	r3, #4
 8001522:	623b      	str	r3, [r7, #32]
          break;
 8001524:	e024      	b.n	8001570 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	3308      	adds	r3, #8
 800152c:	623b      	str	r3, [r7, #32]
          break;
 800152e:	e01f      	b.n	8001570 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	330c      	adds	r3, #12
 8001536:	623b      	str	r3, [r7, #32]
          break;
 8001538:	e01a      	b.n	8001570 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d102      	bne.n	8001548 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001542:	2304      	movs	r3, #4
 8001544:	623b      	str	r3, [r7, #32]
          break;
 8001546:	e013      	b.n	8001570 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d105      	bne.n	800155c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001550:	2308      	movs	r3, #8
 8001552:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	69fa      	ldr	r2, [r7, #28]
 8001558:	611a      	str	r2, [r3, #16]
          break;
 800155a:	e009      	b.n	8001570 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800155c:	2308      	movs	r3, #8
 800155e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	69fa      	ldr	r2, [r7, #28]
 8001564:	615a      	str	r2, [r3, #20]
          break;
 8001566:	e003      	b.n	8001570 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001568:	2300      	movs	r3, #0
 800156a:	623b      	str	r3, [r7, #32]
          break;
 800156c:	e000      	b.n	8001570 <HAL_GPIO_Init+0x130>
          break;
 800156e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	2bff      	cmp	r3, #255	; 0xff
 8001574:	d801      	bhi.n	800157a <HAL_GPIO_Init+0x13a>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	e001      	b.n	800157e <HAL_GPIO_Init+0x13e>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	3304      	adds	r3, #4
 800157e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	2bff      	cmp	r3, #255	; 0xff
 8001584:	d802      	bhi.n	800158c <HAL_GPIO_Init+0x14c>
 8001586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	e002      	b.n	8001592 <HAL_GPIO_Init+0x152>
 800158c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158e:	3b08      	subs	r3, #8
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	210f      	movs	r1, #15
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	fa01 f303 	lsl.w	r3, r1, r3
 80015a0:	43db      	mvns	r3, r3
 80015a2:	401a      	ands	r2, r3
 80015a4:	6a39      	ldr	r1, [r7, #32]
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	fa01 f303 	lsl.w	r3, r1, r3
 80015ac:	431a      	orrs	r2, r3
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f000 80b1 	beq.w	8001722 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015c0:	4b4d      	ldr	r3, [pc, #308]	; (80016f8 <HAL_GPIO_Init+0x2b8>)
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	4a4c      	ldr	r2, [pc, #304]	; (80016f8 <HAL_GPIO_Init+0x2b8>)
 80015c6:	f043 0301 	orr.w	r3, r3, #1
 80015ca:	6193      	str	r3, [r2, #24]
 80015cc:	4b4a      	ldr	r3, [pc, #296]	; (80016f8 <HAL_GPIO_Init+0x2b8>)
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	60bb      	str	r3, [r7, #8]
 80015d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015d8:	4a48      	ldr	r2, [pc, #288]	; (80016fc <HAL_GPIO_Init+0x2bc>)
 80015da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015dc:	089b      	lsrs	r3, r3, #2
 80015de:	3302      	adds	r3, #2
 80015e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e8:	f003 0303 	and.w	r3, r3, #3
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	220f      	movs	r2, #15
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	4013      	ands	r3, r2
 80015fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a40      	ldr	r2, [pc, #256]	; (8001700 <HAL_GPIO_Init+0x2c0>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d013      	beq.n	800162c <HAL_GPIO_Init+0x1ec>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a3f      	ldr	r2, [pc, #252]	; (8001704 <HAL_GPIO_Init+0x2c4>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d00d      	beq.n	8001628 <HAL_GPIO_Init+0x1e8>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a3e      	ldr	r2, [pc, #248]	; (8001708 <HAL_GPIO_Init+0x2c8>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d007      	beq.n	8001624 <HAL_GPIO_Init+0x1e4>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4a3d      	ldr	r2, [pc, #244]	; (800170c <HAL_GPIO_Init+0x2cc>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d101      	bne.n	8001620 <HAL_GPIO_Init+0x1e0>
 800161c:	2303      	movs	r3, #3
 800161e:	e006      	b.n	800162e <HAL_GPIO_Init+0x1ee>
 8001620:	2304      	movs	r3, #4
 8001622:	e004      	b.n	800162e <HAL_GPIO_Init+0x1ee>
 8001624:	2302      	movs	r3, #2
 8001626:	e002      	b.n	800162e <HAL_GPIO_Init+0x1ee>
 8001628:	2301      	movs	r3, #1
 800162a:	e000      	b.n	800162e <HAL_GPIO_Init+0x1ee>
 800162c:	2300      	movs	r3, #0
 800162e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001630:	f002 0203 	and.w	r2, r2, #3
 8001634:	0092      	lsls	r2, r2, #2
 8001636:	4093      	lsls	r3, r2
 8001638:	68fa      	ldr	r2, [r7, #12]
 800163a:	4313      	orrs	r3, r2
 800163c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800163e:	492f      	ldr	r1, [pc, #188]	; (80016fc <HAL_GPIO_Init+0x2bc>)
 8001640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001642:	089b      	lsrs	r3, r3, #2
 8001644:	3302      	adds	r3, #2
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d006      	beq.n	8001666 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001658:	4b2d      	ldr	r3, [pc, #180]	; (8001710 <HAL_GPIO_Init+0x2d0>)
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	492c      	ldr	r1, [pc, #176]	; (8001710 <HAL_GPIO_Init+0x2d0>)
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	4313      	orrs	r3, r2
 8001662:	608b      	str	r3, [r1, #8]
 8001664:	e006      	b.n	8001674 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001666:	4b2a      	ldr	r3, [pc, #168]	; (8001710 <HAL_GPIO_Init+0x2d0>)
 8001668:	689a      	ldr	r2, [r3, #8]
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	43db      	mvns	r3, r3
 800166e:	4928      	ldr	r1, [pc, #160]	; (8001710 <HAL_GPIO_Init+0x2d0>)
 8001670:	4013      	ands	r3, r2
 8001672:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d006      	beq.n	800168e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001680:	4b23      	ldr	r3, [pc, #140]	; (8001710 <HAL_GPIO_Init+0x2d0>)
 8001682:	68da      	ldr	r2, [r3, #12]
 8001684:	4922      	ldr	r1, [pc, #136]	; (8001710 <HAL_GPIO_Init+0x2d0>)
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	4313      	orrs	r3, r2
 800168a:	60cb      	str	r3, [r1, #12]
 800168c:	e006      	b.n	800169c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800168e:	4b20      	ldr	r3, [pc, #128]	; (8001710 <HAL_GPIO_Init+0x2d0>)
 8001690:	68da      	ldr	r2, [r3, #12]
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	43db      	mvns	r3, r3
 8001696:	491e      	ldr	r1, [pc, #120]	; (8001710 <HAL_GPIO_Init+0x2d0>)
 8001698:	4013      	ands	r3, r2
 800169a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d006      	beq.n	80016b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016a8:	4b19      	ldr	r3, [pc, #100]	; (8001710 <HAL_GPIO_Init+0x2d0>)
 80016aa:	685a      	ldr	r2, [r3, #4]
 80016ac:	4918      	ldr	r1, [pc, #96]	; (8001710 <HAL_GPIO_Init+0x2d0>)
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	604b      	str	r3, [r1, #4]
 80016b4:	e006      	b.n	80016c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016b6:	4b16      	ldr	r3, [pc, #88]	; (8001710 <HAL_GPIO_Init+0x2d0>)
 80016b8:	685a      	ldr	r2, [r3, #4]
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	43db      	mvns	r3, r3
 80016be:	4914      	ldr	r1, [pc, #80]	; (8001710 <HAL_GPIO_Init+0x2d0>)
 80016c0:	4013      	ands	r3, r2
 80016c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d021      	beq.n	8001714 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016d0:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <HAL_GPIO_Init+0x2d0>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	490e      	ldr	r1, [pc, #56]	; (8001710 <HAL_GPIO_Init+0x2d0>)
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	4313      	orrs	r3, r2
 80016da:	600b      	str	r3, [r1, #0]
 80016dc:	e021      	b.n	8001722 <HAL_GPIO_Init+0x2e2>
 80016de:	bf00      	nop
 80016e0:	10320000 	.word	0x10320000
 80016e4:	10310000 	.word	0x10310000
 80016e8:	10220000 	.word	0x10220000
 80016ec:	10210000 	.word	0x10210000
 80016f0:	10120000 	.word	0x10120000
 80016f4:	10110000 	.word	0x10110000
 80016f8:	40021000 	.word	0x40021000
 80016fc:	40010000 	.word	0x40010000
 8001700:	40010800 	.word	0x40010800
 8001704:	40010c00 	.word	0x40010c00
 8001708:	40011000 	.word	0x40011000
 800170c:	40011400 	.word	0x40011400
 8001710:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001714:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <HAL_GPIO_Init+0x304>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	43db      	mvns	r3, r3
 800171c:	4909      	ldr	r1, [pc, #36]	; (8001744 <HAL_GPIO_Init+0x304>)
 800171e:	4013      	ands	r3, r2
 8001720:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001724:	3301      	adds	r3, #1
 8001726:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172e:	fa22 f303 	lsr.w	r3, r2, r3
 8001732:	2b00      	cmp	r3, #0
 8001734:	f47f ae8e 	bne.w	8001454 <HAL_GPIO_Init+0x14>
  }
}
 8001738:	bf00      	nop
 800173a:	bf00      	nop
 800173c:	372c      	adds	r7, #44	; 0x2c
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr
 8001744:	40010400 	.word	0x40010400

08001748 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	460b      	mov	r3, r1
 8001752:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689a      	ldr	r2, [r3, #8]
 8001758:	887b      	ldrh	r3, [r7, #2]
 800175a:	4013      	ands	r3, r2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d002      	beq.n	8001766 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001760:	2301      	movs	r3, #1
 8001762:	73fb      	strb	r3, [r7, #15]
 8001764:	e001      	b.n	800176a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001766:	2300      	movs	r3, #0
 8001768:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800176a:	7bfb      	ldrb	r3, [r7, #15]
}
 800176c:	4618      	mov	r0, r3
 800176e:	3714      	adds	r7, #20
 8001770:	46bd      	mov	sp, r7
 8001772:	bc80      	pop	{r7}
 8001774:	4770      	bx	lr

08001776 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001776:	b480      	push	{r7}
 8001778:	b083      	sub	sp, #12
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
 800177e:	460b      	mov	r3, r1
 8001780:	807b      	strh	r3, [r7, #2]
 8001782:	4613      	mov	r3, r2
 8001784:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001786:	787b      	ldrb	r3, [r7, #1]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d003      	beq.n	8001794 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800178c:	887a      	ldrh	r2, [r7, #2]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001792:	e003      	b.n	800179c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001794:	887b      	ldrh	r3, [r7, #2]
 8001796:	041a      	lsls	r2, r3, #16
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	611a      	str	r2, [r3, #16]
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bc80      	pop	{r7}
 80017a4:	4770      	bx	lr

080017a6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017a6:	b480      	push	{r7}
 80017a8:	b085      	sub	sp, #20
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
 80017ae:	460b      	mov	r3, r1
 80017b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017b8:	887a      	ldrh	r2, [r7, #2]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	4013      	ands	r3, r2
 80017be:	041a      	lsls	r2, r3, #16
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	43d9      	mvns	r1, r3
 80017c4:	887b      	ldrh	r3, [r7, #2]
 80017c6:	400b      	ands	r3, r1
 80017c8:	431a      	orrs	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	611a      	str	r2, [r3, #16]
}
 80017ce:	bf00      	nop
 80017d0:	3714      	adds	r7, #20
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bc80      	pop	{r7}
 80017d6:	4770      	bx	lr

080017d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017e2:	4b08      	ldr	r3, [pc, #32]	; (8001804 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017e4:	695a      	ldr	r2, [r3, #20]
 80017e6:	88fb      	ldrh	r3, [r7, #6]
 80017e8:	4013      	ands	r3, r2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d006      	beq.n	80017fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017ee:	4a05      	ldr	r2, [pc, #20]	; (8001804 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017f0:	88fb      	ldrh	r3, [r7, #6]
 80017f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017f4:	88fb      	ldrh	r3, [r7, #6]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f000 f806 	bl	8001808 <HAL_GPIO_EXTI_Callback>
  }
}
 80017fc:	bf00      	nop
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40010400 	.word	0x40010400

08001808 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr

0800181c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d101      	bne.n	800182e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e12b      	b.n	8001a86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b00      	cmp	r3, #0
 8001838:	d106      	bne.n	8001848 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f7fe fd82 	bl	800034c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2224      	movs	r2, #36	; 0x24
 800184c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f022 0201 	bic.w	r2, r2, #1
 800185e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800186e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800187e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001880:	f001 f832 	bl	80028e8 <HAL_RCC_GetPCLK1Freq>
 8001884:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	4a81      	ldr	r2, [pc, #516]	; (8001a90 <HAL_I2C_Init+0x274>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d807      	bhi.n	80018a0 <HAL_I2C_Init+0x84>
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	4a80      	ldr	r2, [pc, #512]	; (8001a94 <HAL_I2C_Init+0x278>)
 8001894:	4293      	cmp	r3, r2
 8001896:	bf94      	ite	ls
 8001898:	2301      	movls	r3, #1
 800189a:	2300      	movhi	r3, #0
 800189c:	b2db      	uxtb	r3, r3
 800189e:	e006      	b.n	80018ae <HAL_I2C_Init+0x92>
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	4a7d      	ldr	r2, [pc, #500]	; (8001a98 <HAL_I2C_Init+0x27c>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	bf94      	ite	ls
 80018a8:	2301      	movls	r3, #1
 80018aa:	2300      	movhi	r3, #0
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e0e7      	b.n	8001a86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	4a78      	ldr	r2, [pc, #480]	; (8001a9c <HAL_I2C_Init+0x280>)
 80018ba:	fba2 2303 	umull	r2, r3, r2, r3
 80018be:	0c9b      	lsrs	r3, r3, #18
 80018c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	68ba      	ldr	r2, [r7, #8]
 80018d2:	430a      	orrs	r2, r1
 80018d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	6a1b      	ldr	r3, [r3, #32]
 80018dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	4a6a      	ldr	r2, [pc, #424]	; (8001a90 <HAL_I2C_Init+0x274>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d802      	bhi.n	80018f0 <HAL_I2C_Init+0xd4>
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	3301      	adds	r3, #1
 80018ee:	e009      	b.n	8001904 <HAL_I2C_Init+0xe8>
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80018f6:	fb02 f303 	mul.w	r3, r2, r3
 80018fa:	4a69      	ldr	r2, [pc, #420]	; (8001aa0 <HAL_I2C_Init+0x284>)
 80018fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001900:	099b      	lsrs	r3, r3, #6
 8001902:	3301      	adds	r3, #1
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	6812      	ldr	r2, [r2, #0]
 8001908:	430b      	orrs	r3, r1
 800190a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	69db      	ldr	r3, [r3, #28]
 8001912:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001916:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	495c      	ldr	r1, [pc, #368]	; (8001a90 <HAL_I2C_Init+0x274>)
 8001920:	428b      	cmp	r3, r1
 8001922:	d819      	bhi.n	8001958 <HAL_I2C_Init+0x13c>
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	1e59      	subs	r1, r3, #1
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001932:	1c59      	adds	r1, r3, #1
 8001934:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001938:	400b      	ands	r3, r1
 800193a:	2b00      	cmp	r3, #0
 800193c:	d00a      	beq.n	8001954 <HAL_I2C_Init+0x138>
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	1e59      	subs	r1, r3, #1
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	fbb1 f3f3 	udiv	r3, r1, r3
 800194c:	3301      	adds	r3, #1
 800194e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001952:	e051      	b.n	80019f8 <HAL_I2C_Init+0x1dc>
 8001954:	2304      	movs	r3, #4
 8001956:	e04f      	b.n	80019f8 <HAL_I2C_Init+0x1dc>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d111      	bne.n	8001984 <HAL_I2C_Init+0x168>
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	1e58      	subs	r0, r3, #1
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6859      	ldr	r1, [r3, #4]
 8001968:	460b      	mov	r3, r1
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	440b      	add	r3, r1
 800196e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001972:	3301      	adds	r3, #1
 8001974:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001978:	2b00      	cmp	r3, #0
 800197a:	bf0c      	ite	eq
 800197c:	2301      	moveq	r3, #1
 800197e:	2300      	movne	r3, #0
 8001980:	b2db      	uxtb	r3, r3
 8001982:	e012      	b.n	80019aa <HAL_I2C_Init+0x18e>
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	1e58      	subs	r0, r3, #1
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6859      	ldr	r1, [r3, #4]
 800198c:	460b      	mov	r3, r1
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	440b      	add	r3, r1
 8001992:	0099      	lsls	r1, r3, #2
 8001994:	440b      	add	r3, r1
 8001996:	fbb0 f3f3 	udiv	r3, r0, r3
 800199a:	3301      	adds	r3, #1
 800199c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	bf0c      	ite	eq
 80019a4:	2301      	moveq	r3, #1
 80019a6:	2300      	movne	r3, #0
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <HAL_I2C_Init+0x196>
 80019ae:	2301      	movs	r3, #1
 80019b0:	e022      	b.n	80019f8 <HAL_I2C_Init+0x1dc>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d10e      	bne.n	80019d8 <HAL_I2C_Init+0x1bc>
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	1e58      	subs	r0, r3, #1
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6859      	ldr	r1, [r3, #4]
 80019c2:	460b      	mov	r3, r1
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	440b      	add	r3, r1
 80019c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80019cc:	3301      	adds	r3, #1
 80019ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019d6:	e00f      	b.n	80019f8 <HAL_I2C_Init+0x1dc>
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	1e58      	subs	r0, r3, #1
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6859      	ldr	r1, [r3, #4]
 80019e0:	460b      	mov	r3, r1
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	440b      	add	r3, r1
 80019e6:	0099      	lsls	r1, r3, #2
 80019e8:	440b      	add	r3, r1
 80019ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80019ee:	3301      	adds	r3, #1
 80019f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019f8:	6879      	ldr	r1, [r7, #4]
 80019fa:	6809      	ldr	r1, [r1, #0]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	69da      	ldr	r2, [r3, #28]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a1b      	ldr	r3, [r3, #32]
 8001a12:	431a      	orrs	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001a26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	6911      	ldr	r1, [r2, #16]
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	68d2      	ldr	r2, [r2, #12]
 8001a32:	4311      	orrs	r1, r2
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	6812      	ldr	r2, [r2, #0]
 8001a38:	430b      	orrs	r3, r1
 8001a3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	695a      	ldr	r2, [r3, #20]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	699b      	ldr	r3, [r3, #24]
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	430a      	orrs	r2, r1
 8001a56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f042 0201 	orr.w	r2, r2, #1
 8001a66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2220      	movs	r2, #32
 8001a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	000186a0 	.word	0x000186a0
 8001a94:	001e847f 	.word	0x001e847f
 8001a98:	003d08ff 	.word	0x003d08ff
 8001a9c:	431bde83 	.word	0x431bde83
 8001aa0:	10624dd3 	.word	0x10624dd3

08001aa4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b088      	sub	sp, #32
 8001aa8:	af02      	add	r7, sp, #8
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	607a      	str	r2, [r7, #4]
 8001aae:	461a      	mov	r2, r3
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	817b      	strh	r3, [r7, #10]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ab8:	f7ff fb86 	bl	80011c8 <HAL_GetTick>
 8001abc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b20      	cmp	r3, #32
 8001ac8:	f040 80e0 	bne.w	8001c8c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	9300      	str	r3, [sp, #0]
 8001ad0:	2319      	movs	r3, #25
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	4970      	ldr	r1, [pc, #448]	; (8001c98 <HAL_I2C_Master_Transmit+0x1f4>)
 8001ad6:	68f8      	ldr	r0, [r7, #12]
 8001ad8:	f000 f964 	bl	8001da4 <I2C_WaitOnFlagUntilTimeout>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	e0d3      	b.n	8001c8e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d101      	bne.n	8001af4 <HAL_I2C_Master_Transmit+0x50>
 8001af0:	2302      	movs	r3, #2
 8001af2:	e0cc      	b.n	8001c8e <HAL_I2C_Master_Transmit+0x1ea>
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d007      	beq.n	8001b1a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f042 0201 	orr.w	r2, r2, #1
 8001b18:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b28:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2221      	movs	r2, #33	; 0x21
 8001b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2210      	movs	r2, #16
 8001b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	893a      	ldrh	r2, [r7, #8]
 8001b4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b50:	b29a      	uxth	r2, r3
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	4a50      	ldr	r2, [pc, #320]	; (8001c9c <HAL_I2C_Master_Transmit+0x1f8>)
 8001b5a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001b5c:	8979      	ldrh	r1, [r7, #10]
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	6a3a      	ldr	r2, [r7, #32]
 8001b62:	68f8      	ldr	r0, [r7, #12]
 8001b64:	f000 f89c 	bl	8001ca0 <I2C_MasterRequestWrite>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e08d      	b.n	8001c8e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b72:	2300      	movs	r3, #0
 8001b74:	613b      	str	r3, [r7, #16]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	695b      	ldr	r3, [r3, #20]
 8001b7c:	613b      	str	r3, [r7, #16]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	613b      	str	r3, [r7, #16]
 8001b86:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001b88:	e066      	b.n	8001c58 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b8a:	697a      	ldr	r2, [r7, #20]
 8001b8c:	6a39      	ldr	r1, [r7, #32]
 8001b8e:	68f8      	ldr	r0, [r7, #12]
 8001b90:	f000 fa22 	bl	8001fd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d00d      	beq.n	8001bb6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	d107      	bne.n	8001bb2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bb0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e06b      	b.n	8001c8e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bba:	781a      	ldrb	r2, [r3, #0]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc6:	1c5a      	adds	r2, r3, #1
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bde:	3b01      	subs	r3, #1
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	695b      	ldr	r3, [r3, #20]
 8001bec:	f003 0304 	and.w	r3, r3, #4
 8001bf0:	2b04      	cmp	r3, #4
 8001bf2:	d11b      	bne.n	8001c2c <HAL_I2C_Master_Transmit+0x188>
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d017      	beq.n	8001c2c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c00:	781a      	ldrb	r2, [r3, #0]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0c:	1c5a      	adds	r2, r3, #1
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c24:	3b01      	subs	r3, #1
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c2c:	697a      	ldr	r2, [r7, #20]
 8001c2e:	6a39      	ldr	r1, [r7, #32]
 8001c30:	68f8      	ldr	r0, [r7, #12]
 8001c32:	f000 fa19 	bl	8002068 <I2C_WaitOnBTFFlagUntilTimeout>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d00d      	beq.n	8001c58 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c40:	2b04      	cmp	r3, #4
 8001c42:	d107      	bne.n	8001c54 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c52:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e01a      	b.n	8001c8e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d194      	bne.n	8001b8a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2220      	movs	r2, #32
 8001c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	e000      	b.n	8001c8e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001c8c:	2302      	movs	r3, #2
  }
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3718      	adds	r7, #24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	00100002 	.word	0x00100002
 8001c9c:	ffff0000 	.word	0xffff0000

08001ca0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b088      	sub	sp, #32
 8001ca4:	af02      	add	r7, sp, #8
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	607a      	str	r2, [r7, #4]
 8001caa:	603b      	str	r3, [r7, #0]
 8001cac:	460b      	mov	r3, r1
 8001cae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	2b08      	cmp	r3, #8
 8001cba:	d006      	beq.n	8001cca <I2C_MasterRequestWrite+0x2a>
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d003      	beq.n	8001cca <I2C_MasterRequestWrite+0x2a>
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001cc8:	d108      	bne.n	8001cdc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	e00b      	b.n	8001cf4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce0:	2b12      	cmp	r3, #18
 8001ce2:	d107      	bne.n	8001cf4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cf2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	9300      	str	r3, [sp, #0]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d00:	68f8      	ldr	r0, [r7, #12]
 8001d02:	f000 f84f 	bl	8001da4 <I2C_WaitOnFlagUntilTimeout>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d00d      	beq.n	8001d28 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d1a:	d103      	bne.n	8001d24 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d22:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e035      	b.n	8001d94 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d30:	d108      	bne.n	8001d44 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d32:	897b      	ldrh	r3, [r7, #10]
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	461a      	mov	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001d40:	611a      	str	r2, [r3, #16]
 8001d42:	e01b      	b.n	8001d7c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001d44:	897b      	ldrh	r3, [r7, #10]
 8001d46:	11db      	asrs	r3, r3, #7
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	f003 0306 	and.w	r3, r3, #6
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	f063 030f 	orn	r3, r3, #15
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	490e      	ldr	r1, [pc, #56]	; (8001d9c <I2C_MasterRequestWrite+0xfc>)
 8001d62:	68f8      	ldr	r0, [r7, #12]
 8001d64:	f000 f898 	bl	8001e98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e010      	b.n	8001d94 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001d72:	897b      	ldrh	r3, [r7, #10]
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	4907      	ldr	r1, [pc, #28]	; (8001da0 <I2C_MasterRequestWrite+0x100>)
 8001d82:	68f8      	ldr	r0, [r7, #12]
 8001d84:	f000 f888 	bl	8001e98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e000      	b.n	8001d94 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3718      	adds	r7, #24
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	00010008 	.word	0x00010008
 8001da0:	00010002 	.word	0x00010002

08001da4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	603b      	str	r3, [r7, #0]
 8001db0:	4613      	mov	r3, r2
 8001db2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001db4:	e048      	b.n	8001e48 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dbc:	d044      	beq.n	8001e48 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dbe:	f7ff fa03 	bl	80011c8 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d302      	bcc.n	8001dd4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d139      	bne.n	8001e48 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	0c1b      	lsrs	r3, r3, #16
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d10d      	bne.n	8001dfa <I2C_WaitOnFlagUntilTimeout+0x56>
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	695b      	ldr	r3, [r3, #20]
 8001de4:	43da      	mvns	r2, r3
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	4013      	ands	r3, r2
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	bf0c      	ite	eq
 8001df0:	2301      	moveq	r3, #1
 8001df2:	2300      	movne	r3, #0
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	461a      	mov	r2, r3
 8001df8:	e00c      	b.n	8001e14 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	43da      	mvns	r2, r3
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	4013      	ands	r3, r2
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	bf0c      	ite	eq
 8001e0c:	2301      	moveq	r3, #1
 8001e0e:	2300      	movne	r3, #0
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	461a      	mov	r2, r3
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d116      	bne.n	8001e48 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2220      	movs	r2, #32
 8001e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e34:	f043 0220 	orr.w	r2, r3, #32
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e023      	b.n	8001e90 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	0c1b      	lsrs	r3, r3, #16
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d10d      	bne.n	8001e6e <I2C_WaitOnFlagUntilTimeout+0xca>
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	695b      	ldr	r3, [r3, #20]
 8001e58:	43da      	mvns	r2, r3
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	bf0c      	ite	eq
 8001e64:	2301      	moveq	r3, #1
 8001e66:	2300      	movne	r3, #0
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	e00c      	b.n	8001e88 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	43da      	mvns	r2, r3
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	bf0c      	ite	eq
 8001e80:	2301      	moveq	r3, #1
 8001e82:	2300      	movne	r3, #0
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	461a      	mov	r2, r3
 8001e88:	79fb      	ldrb	r3, [r7, #7]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d093      	beq.n	8001db6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3710      	adds	r7, #16
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	607a      	str	r2, [r7, #4]
 8001ea4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ea6:	e071      	b.n	8001f8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	695b      	ldr	r3, [r3, #20]
 8001eae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eb6:	d123      	bne.n	8001f00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ec6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ed0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2220      	movs	r2, #32
 8001edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eec:	f043 0204 	orr.w	r2, r3, #4
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e067      	b.n	8001fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f06:	d041      	beq.n	8001f8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f08:	f7ff f95e 	bl	80011c8 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d302      	bcc.n	8001f1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d136      	bne.n	8001f8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	0c1b      	lsrs	r3, r3, #16
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d10c      	bne.n	8001f42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	43da      	mvns	r2, r3
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	4013      	ands	r3, r2
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	bf14      	ite	ne
 8001f3a:	2301      	movne	r3, #1
 8001f3c:	2300      	moveq	r3, #0
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	e00b      	b.n	8001f5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	43da      	mvns	r2, r3
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	bf14      	ite	ne
 8001f54:	2301      	movne	r3, #1
 8001f56:	2300      	moveq	r3, #0
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d016      	beq.n	8001f8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2200      	movs	r2, #0
 8001f62:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2220      	movs	r2, #32
 8001f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f78:	f043 0220 	orr.w	r2, r3, #32
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e021      	b.n	8001fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	0c1b      	lsrs	r3, r3, #16
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d10c      	bne.n	8001fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	695b      	ldr	r3, [r3, #20]
 8001f9c:	43da      	mvns	r2, r3
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	bf14      	ite	ne
 8001fa8:	2301      	movne	r3, #1
 8001faa:	2300      	moveq	r3, #0
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	e00b      	b.n	8001fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	43da      	mvns	r2, r3
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	bf14      	ite	ne
 8001fc2:	2301      	movne	r3, #1
 8001fc4:	2300      	moveq	r3, #0
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	f47f af6d 	bne.w	8001ea8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3710      	adds	r7, #16
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fe4:	e034      	b.n	8002050 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	f000 f886 	bl	80020f8 <I2C_IsAcknowledgeFailed>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e034      	b.n	8002060 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ffc:	d028      	beq.n	8002050 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ffe:	f7ff f8e3 	bl	80011c8 <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	68ba      	ldr	r2, [r7, #8]
 800200a:	429a      	cmp	r2, r3
 800200c:	d302      	bcc.n	8002014 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d11d      	bne.n	8002050 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800201e:	2b80      	cmp	r3, #128	; 0x80
 8002020:	d016      	beq.n	8002050 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2200      	movs	r2, #0
 8002026:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2220      	movs	r2, #32
 800202c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203c:	f043 0220 	orr.w	r2, r3, #32
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e007      	b.n	8002060 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800205a:	2b80      	cmp	r3, #128	; 0x80
 800205c:	d1c3      	bne.n	8001fe6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	3710      	adds	r7, #16
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002074:	e034      	b.n	80020e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002076:	68f8      	ldr	r0, [r7, #12]
 8002078:	f000 f83e 	bl	80020f8 <I2C_IsAcknowledgeFailed>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e034      	b.n	80020f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800208c:	d028      	beq.n	80020e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800208e:	f7ff f89b 	bl	80011c8 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	68ba      	ldr	r2, [r7, #8]
 800209a:	429a      	cmp	r2, r3
 800209c:	d302      	bcc.n	80020a4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d11d      	bne.n	80020e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	f003 0304 	and.w	r3, r3, #4
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	d016      	beq.n	80020e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2200      	movs	r2, #0
 80020b6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2220      	movs	r2, #32
 80020bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020cc:	f043 0220 	orr.w	r2, r3, #32
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e007      	b.n	80020f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	f003 0304 	and.w	r3, r3, #4
 80020ea:	2b04      	cmp	r3, #4
 80020ec:	d1c3      	bne.n	8002076 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800210a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800210e:	d11b      	bne.n	8002148 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002118:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2220      	movs	r2, #32
 8002124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002134:	f043 0204 	orr.w	r2, r3, #4
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e000      	b.n	800214a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	bc80      	pop	{r7}
 8002152:	4770      	bx	lr

08002154 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e272      	b.n	800264c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	2b00      	cmp	r3, #0
 8002170:	f000 8087 	beq.w	8002282 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002174:	4b92      	ldr	r3, [pc, #584]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f003 030c 	and.w	r3, r3, #12
 800217c:	2b04      	cmp	r3, #4
 800217e:	d00c      	beq.n	800219a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002180:	4b8f      	ldr	r3, [pc, #572]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f003 030c 	and.w	r3, r3, #12
 8002188:	2b08      	cmp	r3, #8
 800218a:	d112      	bne.n	80021b2 <HAL_RCC_OscConfig+0x5e>
 800218c:	4b8c      	ldr	r3, [pc, #560]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002198:	d10b      	bne.n	80021b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800219a:	4b89      	ldr	r3, [pc, #548]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d06c      	beq.n	8002280 <HAL_RCC_OscConfig+0x12c>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d168      	bne.n	8002280 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e24c      	b.n	800264c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021ba:	d106      	bne.n	80021ca <HAL_RCC_OscConfig+0x76>
 80021bc:	4b80      	ldr	r3, [pc, #512]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a7f      	ldr	r2, [pc, #508]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 80021c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021c6:	6013      	str	r3, [r2, #0]
 80021c8:	e02e      	b.n	8002228 <HAL_RCC_OscConfig+0xd4>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10c      	bne.n	80021ec <HAL_RCC_OscConfig+0x98>
 80021d2:	4b7b      	ldr	r3, [pc, #492]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a7a      	ldr	r2, [pc, #488]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 80021d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021dc:	6013      	str	r3, [r2, #0]
 80021de:	4b78      	ldr	r3, [pc, #480]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a77      	ldr	r2, [pc, #476]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 80021e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021e8:	6013      	str	r3, [r2, #0]
 80021ea:	e01d      	b.n	8002228 <HAL_RCC_OscConfig+0xd4>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021f4:	d10c      	bne.n	8002210 <HAL_RCC_OscConfig+0xbc>
 80021f6:	4b72      	ldr	r3, [pc, #456]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a71      	ldr	r2, [pc, #452]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 80021fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002200:	6013      	str	r3, [r2, #0]
 8002202:	4b6f      	ldr	r3, [pc, #444]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a6e      	ldr	r2, [pc, #440]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 8002208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800220c:	6013      	str	r3, [r2, #0]
 800220e:	e00b      	b.n	8002228 <HAL_RCC_OscConfig+0xd4>
 8002210:	4b6b      	ldr	r3, [pc, #428]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a6a      	ldr	r2, [pc, #424]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 8002216:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800221a:	6013      	str	r3, [r2, #0]
 800221c:	4b68      	ldr	r3, [pc, #416]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a67      	ldr	r2, [pc, #412]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 8002222:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002226:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d013      	beq.n	8002258 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002230:	f7fe ffca 	bl	80011c8 <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002238:	f7fe ffc6 	bl	80011c8 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b64      	cmp	r3, #100	; 0x64
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e200      	b.n	800264c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800224a:	4b5d      	ldr	r3, [pc, #372]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d0f0      	beq.n	8002238 <HAL_RCC_OscConfig+0xe4>
 8002256:	e014      	b.n	8002282 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002258:	f7fe ffb6 	bl	80011c8 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002260:	f7fe ffb2 	bl	80011c8 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b64      	cmp	r3, #100	; 0x64
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e1ec      	b.n	800264c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002272:	4b53      	ldr	r3, [pc, #332]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1f0      	bne.n	8002260 <HAL_RCC_OscConfig+0x10c>
 800227e:	e000      	b.n	8002282 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002280:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d063      	beq.n	8002356 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800228e:	4b4c      	ldr	r3, [pc, #304]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f003 030c 	and.w	r3, r3, #12
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00b      	beq.n	80022b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800229a:	4b49      	ldr	r3, [pc, #292]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f003 030c 	and.w	r3, r3, #12
 80022a2:	2b08      	cmp	r3, #8
 80022a4:	d11c      	bne.n	80022e0 <HAL_RCC_OscConfig+0x18c>
 80022a6:	4b46      	ldr	r3, [pc, #280]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d116      	bne.n	80022e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022b2:	4b43      	ldr	r3, [pc, #268]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d005      	beq.n	80022ca <HAL_RCC_OscConfig+0x176>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d001      	beq.n	80022ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e1c0      	b.n	800264c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ca:	4b3d      	ldr	r3, [pc, #244]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	4939      	ldr	r1, [pc, #228]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022de:	e03a      	b.n	8002356 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d020      	beq.n	800232a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022e8:	4b36      	ldr	r3, [pc, #216]	; (80023c4 <HAL_RCC_OscConfig+0x270>)
 80022ea:	2201      	movs	r2, #1
 80022ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ee:	f7fe ff6b 	bl	80011c8 <HAL_GetTick>
 80022f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f4:	e008      	b.n	8002308 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022f6:	f7fe ff67 	bl	80011c8 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e1a1      	b.n	800264c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002308:	4b2d      	ldr	r3, [pc, #180]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d0f0      	beq.n	80022f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002314:	4b2a      	ldr	r3, [pc, #168]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	695b      	ldr	r3, [r3, #20]
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	4927      	ldr	r1, [pc, #156]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 8002324:	4313      	orrs	r3, r2
 8002326:	600b      	str	r3, [r1, #0]
 8002328:	e015      	b.n	8002356 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800232a:	4b26      	ldr	r3, [pc, #152]	; (80023c4 <HAL_RCC_OscConfig+0x270>)
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002330:	f7fe ff4a 	bl	80011c8 <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002338:	f7fe ff46 	bl	80011c8 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e180      	b.n	800264c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800234a:	4b1d      	ldr	r3, [pc, #116]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1f0      	bne.n	8002338 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0308 	and.w	r3, r3, #8
 800235e:	2b00      	cmp	r3, #0
 8002360:	d03a      	beq.n	80023d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d019      	beq.n	800239e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800236a:	4b17      	ldr	r3, [pc, #92]	; (80023c8 <HAL_RCC_OscConfig+0x274>)
 800236c:	2201      	movs	r2, #1
 800236e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002370:	f7fe ff2a 	bl	80011c8 <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002378:	f7fe ff26 	bl	80011c8 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e160      	b.n	800264c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800238a:	4b0d      	ldr	r3, [pc, #52]	; (80023c0 <HAL_RCC_OscConfig+0x26c>)
 800238c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d0f0      	beq.n	8002378 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002396:	2001      	movs	r0, #1
 8002398:	f000 face 	bl	8002938 <RCC_Delay>
 800239c:	e01c      	b.n	80023d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800239e:	4b0a      	ldr	r3, [pc, #40]	; (80023c8 <HAL_RCC_OscConfig+0x274>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a4:	f7fe ff10 	bl	80011c8 <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023aa:	e00f      	b.n	80023cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023ac:	f7fe ff0c 	bl	80011c8 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d908      	bls.n	80023cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e146      	b.n	800264c <HAL_RCC_OscConfig+0x4f8>
 80023be:	bf00      	nop
 80023c0:	40021000 	.word	0x40021000
 80023c4:	42420000 	.word	0x42420000
 80023c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023cc:	4b92      	ldr	r3, [pc, #584]	; (8002618 <HAL_RCC_OscConfig+0x4c4>)
 80023ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d1e9      	bne.n	80023ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f000 80a6 	beq.w	8002532 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023e6:	2300      	movs	r3, #0
 80023e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ea:	4b8b      	ldr	r3, [pc, #556]	; (8002618 <HAL_RCC_OscConfig+0x4c4>)
 80023ec:	69db      	ldr	r3, [r3, #28]
 80023ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d10d      	bne.n	8002412 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023f6:	4b88      	ldr	r3, [pc, #544]	; (8002618 <HAL_RCC_OscConfig+0x4c4>)
 80023f8:	69db      	ldr	r3, [r3, #28]
 80023fa:	4a87      	ldr	r2, [pc, #540]	; (8002618 <HAL_RCC_OscConfig+0x4c4>)
 80023fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002400:	61d3      	str	r3, [r2, #28]
 8002402:	4b85      	ldr	r3, [pc, #532]	; (8002618 <HAL_RCC_OscConfig+0x4c4>)
 8002404:	69db      	ldr	r3, [r3, #28]
 8002406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800240a:	60bb      	str	r3, [r7, #8]
 800240c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800240e:	2301      	movs	r3, #1
 8002410:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002412:	4b82      	ldr	r3, [pc, #520]	; (800261c <HAL_RCC_OscConfig+0x4c8>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800241a:	2b00      	cmp	r3, #0
 800241c:	d118      	bne.n	8002450 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800241e:	4b7f      	ldr	r3, [pc, #508]	; (800261c <HAL_RCC_OscConfig+0x4c8>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a7e      	ldr	r2, [pc, #504]	; (800261c <HAL_RCC_OscConfig+0x4c8>)
 8002424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002428:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800242a:	f7fe fecd 	bl	80011c8 <HAL_GetTick>
 800242e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002430:	e008      	b.n	8002444 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002432:	f7fe fec9 	bl	80011c8 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b64      	cmp	r3, #100	; 0x64
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e103      	b.n	800264c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002444:	4b75      	ldr	r3, [pc, #468]	; (800261c <HAL_RCC_OscConfig+0x4c8>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800244c:	2b00      	cmp	r3, #0
 800244e:	d0f0      	beq.n	8002432 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d106      	bne.n	8002466 <HAL_RCC_OscConfig+0x312>
 8002458:	4b6f      	ldr	r3, [pc, #444]	; (8002618 <HAL_RCC_OscConfig+0x4c4>)
 800245a:	6a1b      	ldr	r3, [r3, #32]
 800245c:	4a6e      	ldr	r2, [pc, #440]	; (8002618 <HAL_RCC_OscConfig+0x4c4>)
 800245e:	f043 0301 	orr.w	r3, r3, #1
 8002462:	6213      	str	r3, [r2, #32]
 8002464:	e02d      	b.n	80024c2 <HAL_RCC_OscConfig+0x36e>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d10c      	bne.n	8002488 <HAL_RCC_OscConfig+0x334>
 800246e:	4b6a      	ldr	r3, [pc, #424]	; (8002618 <HAL_RCC_OscConfig+0x4c4>)
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	4a69      	ldr	r2, [pc, #420]	; (8002618 <HAL_RCC_OscConfig+0x4c4>)
 8002474:	f023 0301 	bic.w	r3, r3, #1
 8002478:	6213      	str	r3, [r2, #32]
 800247a:	4b67      	ldr	r3, [pc, #412]	; (8002618 <HAL_RCC_OscConfig+0x4c4>)
 800247c:	6a1b      	ldr	r3, [r3, #32]
 800247e:	4a66      	ldr	r2, [pc, #408]	; (8002618 <HAL_RCC_OscConfig+0x4c4>)
 8002480:	f023 0304 	bic.w	r3, r3, #4
 8002484:	6213      	str	r3, [r2, #32]
 8002486:	e01c      	b.n	80024c2 <HAL_RCC_OscConfig+0x36e>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	2b05      	cmp	r3, #5
 800248e:	d10c      	bne.n	80024aa <HAL_RCC_OscConfig+0x356>
 8002490:	4b61      	ldr	r3, [pc, #388]	; (8002618 <HAL_RCC_OscConfig+0x4c4>)
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	4a60      	ldr	r2, [pc, #384]	; (8002618 <HAL_RCC_OscConfig+0x4c4>)
 8002496:	f043 0304 	orr.w	r3, r3, #4
 800249a:	6213      	str	r3, [r2, #32]
 800249c:	4b5e      	ldr	r3, [pc, #376]	; (8002618 <HAL_RCC_OscConfig+0x4c4>)
 800249e:	6a1b      	ldr	r3, [r3, #32]
 80024a0:	4a5d      	ldr	r2, [pc, #372]	; (8002618 <HAL_RCC_OscConfig+0x4c4>)
 80024a2:	f043 0301 	orr.w	r3, r3, #1
 80024a6:	6213      	str	r3, [r2, #32]
 80024a8:	e00b      	b.n	80024c2 <HAL_RCC_OscConfig+0x36e>
 80024aa:	4b5b      	ldr	r3, [pc, #364]	; (8002618 <HAL_RCC_OscConfig+0x4c4>)
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	4a5a      	ldr	r2, [pc, #360]	; (8002618 <HAL_RCC_OscConfig+0x4c4>)
 80024b0:	f023 0301 	bic.w	r3, r3, #1
 80024b4:	6213      	str	r3, [r2, #32]
 80024b6:	4b58      	ldr	r3, [pc, #352]	; (8002618 <HAL_RCC_OscConfig+0x4c4>)
 80024b8:	6a1b      	ldr	r3, [r3, #32]
 80024ba:	4a57      	ldr	r2, [pc, #348]	; (8002618 <HAL_RCC_OscConfig+0x4c4>)
 80024bc:	f023 0304 	bic.w	r3, r3, #4
 80024c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d015      	beq.n	80024f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ca:	f7fe fe7d 	bl	80011c8 <HAL_GetTick>
 80024ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024d0:	e00a      	b.n	80024e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024d2:	f7fe fe79 	bl	80011c8 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e0b1      	b.n	800264c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024e8:	4b4b      	ldr	r3, [pc, #300]	; (8002618 <HAL_RCC_OscConfig+0x4c4>)
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d0ee      	beq.n	80024d2 <HAL_RCC_OscConfig+0x37e>
 80024f4:	e014      	b.n	8002520 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f6:	f7fe fe67 	bl	80011c8 <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024fc:	e00a      	b.n	8002514 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024fe:	f7fe fe63 	bl	80011c8 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	f241 3288 	movw	r2, #5000	; 0x1388
 800250c:	4293      	cmp	r3, r2
 800250e:	d901      	bls.n	8002514 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e09b      	b.n	800264c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002514:	4b40      	ldr	r3, [pc, #256]	; (8002618 <HAL_RCC_OscConfig+0x4c4>)
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d1ee      	bne.n	80024fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002520:	7dfb      	ldrb	r3, [r7, #23]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d105      	bne.n	8002532 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002526:	4b3c      	ldr	r3, [pc, #240]	; (8002618 <HAL_RCC_OscConfig+0x4c4>)
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	4a3b      	ldr	r2, [pc, #236]	; (8002618 <HAL_RCC_OscConfig+0x4c4>)
 800252c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002530:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	69db      	ldr	r3, [r3, #28]
 8002536:	2b00      	cmp	r3, #0
 8002538:	f000 8087 	beq.w	800264a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800253c:	4b36      	ldr	r3, [pc, #216]	; (8002618 <HAL_RCC_OscConfig+0x4c4>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f003 030c 	and.w	r3, r3, #12
 8002544:	2b08      	cmp	r3, #8
 8002546:	d061      	beq.n	800260c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	69db      	ldr	r3, [r3, #28]
 800254c:	2b02      	cmp	r3, #2
 800254e:	d146      	bne.n	80025de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002550:	4b33      	ldr	r3, [pc, #204]	; (8002620 <HAL_RCC_OscConfig+0x4cc>)
 8002552:	2200      	movs	r2, #0
 8002554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002556:	f7fe fe37 	bl	80011c8 <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800255c:	e008      	b.n	8002570 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800255e:	f7fe fe33 	bl	80011c8 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e06d      	b.n	800264c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002570:	4b29      	ldr	r3, [pc, #164]	; (8002618 <HAL_RCC_OscConfig+0x4c4>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1f0      	bne.n	800255e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002584:	d108      	bne.n	8002598 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002586:	4b24      	ldr	r3, [pc, #144]	; (8002618 <HAL_RCC_OscConfig+0x4c4>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	4921      	ldr	r1, [pc, #132]	; (8002618 <HAL_RCC_OscConfig+0x4c4>)
 8002594:	4313      	orrs	r3, r2
 8002596:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002598:	4b1f      	ldr	r3, [pc, #124]	; (8002618 <HAL_RCC_OscConfig+0x4c4>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a19      	ldr	r1, [r3, #32]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a8:	430b      	orrs	r3, r1
 80025aa:	491b      	ldr	r1, [pc, #108]	; (8002618 <HAL_RCC_OscConfig+0x4c4>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025b0:	4b1b      	ldr	r3, [pc, #108]	; (8002620 <HAL_RCC_OscConfig+0x4cc>)
 80025b2:	2201      	movs	r2, #1
 80025b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b6:	f7fe fe07 	bl	80011c8 <HAL_GetTick>
 80025ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025bc:	e008      	b.n	80025d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025be:	f7fe fe03 	bl	80011c8 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e03d      	b.n	800264c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025d0:	4b11      	ldr	r3, [pc, #68]	; (8002618 <HAL_RCC_OscConfig+0x4c4>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d0f0      	beq.n	80025be <HAL_RCC_OscConfig+0x46a>
 80025dc:	e035      	b.n	800264a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025de:	4b10      	ldr	r3, [pc, #64]	; (8002620 <HAL_RCC_OscConfig+0x4cc>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e4:	f7fe fdf0 	bl	80011c8 <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ec:	f7fe fdec 	bl	80011c8 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e026      	b.n	800264c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025fe:	4b06      	ldr	r3, [pc, #24]	; (8002618 <HAL_RCC_OscConfig+0x4c4>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1f0      	bne.n	80025ec <HAL_RCC_OscConfig+0x498>
 800260a:	e01e      	b.n	800264a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	69db      	ldr	r3, [r3, #28]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d107      	bne.n	8002624 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e019      	b.n	800264c <HAL_RCC_OscConfig+0x4f8>
 8002618:	40021000 	.word	0x40021000
 800261c:	40007000 	.word	0x40007000
 8002620:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002624:	4b0b      	ldr	r3, [pc, #44]	; (8002654 <HAL_RCC_OscConfig+0x500>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	429a      	cmp	r2, r3
 8002636:	d106      	bne.n	8002646 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002642:	429a      	cmp	r2, r3
 8002644:	d001      	beq.n	800264a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e000      	b.n	800264c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	3718      	adds	r7, #24
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	40021000 	.word	0x40021000

08002658 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d101      	bne.n	800266c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e0d0      	b.n	800280e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800266c:	4b6a      	ldr	r3, [pc, #424]	; (8002818 <HAL_RCC_ClockConfig+0x1c0>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0307 	and.w	r3, r3, #7
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	429a      	cmp	r2, r3
 8002678:	d910      	bls.n	800269c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800267a:	4b67      	ldr	r3, [pc, #412]	; (8002818 <HAL_RCC_ClockConfig+0x1c0>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f023 0207 	bic.w	r2, r3, #7
 8002682:	4965      	ldr	r1, [pc, #404]	; (8002818 <HAL_RCC_ClockConfig+0x1c0>)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	4313      	orrs	r3, r2
 8002688:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800268a:	4b63      	ldr	r3, [pc, #396]	; (8002818 <HAL_RCC_ClockConfig+0x1c0>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0307 	and.w	r3, r3, #7
 8002692:	683a      	ldr	r2, [r7, #0]
 8002694:	429a      	cmp	r2, r3
 8002696:	d001      	beq.n	800269c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e0b8      	b.n	800280e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d020      	beq.n	80026ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0304 	and.w	r3, r3, #4
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d005      	beq.n	80026c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026b4:	4b59      	ldr	r3, [pc, #356]	; (800281c <HAL_RCC_ClockConfig+0x1c4>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	4a58      	ldr	r2, [pc, #352]	; (800281c <HAL_RCC_ClockConfig+0x1c4>)
 80026ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0308 	and.w	r3, r3, #8
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d005      	beq.n	80026d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026cc:	4b53      	ldr	r3, [pc, #332]	; (800281c <HAL_RCC_ClockConfig+0x1c4>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	4a52      	ldr	r2, [pc, #328]	; (800281c <HAL_RCC_ClockConfig+0x1c4>)
 80026d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80026d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026d8:	4b50      	ldr	r3, [pc, #320]	; (800281c <HAL_RCC_ClockConfig+0x1c4>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	494d      	ldr	r1, [pc, #308]	; (800281c <HAL_RCC_ClockConfig+0x1c4>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d040      	beq.n	8002778 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d107      	bne.n	800270e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026fe:	4b47      	ldr	r3, [pc, #284]	; (800281c <HAL_RCC_ClockConfig+0x1c4>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d115      	bne.n	8002736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e07f      	b.n	800280e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2b02      	cmp	r3, #2
 8002714:	d107      	bne.n	8002726 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002716:	4b41      	ldr	r3, [pc, #260]	; (800281c <HAL_RCC_ClockConfig+0x1c4>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d109      	bne.n	8002736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e073      	b.n	800280e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002726:	4b3d      	ldr	r3, [pc, #244]	; (800281c <HAL_RCC_ClockConfig+0x1c4>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e06b      	b.n	800280e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002736:	4b39      	ldr	r3, [pc, #228]	; (800281c <HAL_RCC_ClockConfig+0x1c4>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f023 0203 	bic.w	r2, r3, #3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	4936      	ldr	r1, [pc, #216]	; (800281c <HAL_RCC_ClockConfig+0x1c4>)
 8002744:	4313      	orrs	r3, r2
 8002746:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002748:	f7fe fd3e 	bl	80011c8 <HAL_GetTick>
 800274c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800274e:	e00a      	b.n	8002766 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002750:	f7fe fd3a 	bl	80011c8 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	f241 3288 	movw	r2, #5000	; 0x1388
 800275e:	4293      	cmp	r3, r2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e053      	b.n	800280e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002766:	4b2d      	ldr	r3, [pc, #180]	; (800281c <HAL_RCC_ClockConfig+0x1c4>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f003 020c 	and.w	r2, r3, #12
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	429a      	cmp	r2, r3
 8002776:	d1eb      	bne.n	8002750 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002778:	4b27      	ldr	r3, [pc, #156]	; (8002818 <HAL_RCC_ClockConfig+0x1c0>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0307 	and.w	r3, r3, #7
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	429a      	cmp	r2, r3
 8002784:	d210      	bcs.n	80027a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002786:	4b24      	ldr	r3, [pc, #144]	; (8002818 <HAL_RCC_ClockConfig+0x1c0>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f023 0207 	bic.w	r2, r3, #7
 800278e:	4922      	ldr	r1, [pc, #136]	; (8002818 <HAL_RCC_ClockConfig+0x1c0>)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	4313      	orrs	r3, r2
 8002794:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002796:	4b20      	ldr	r3, [pc, #128]	; (8002818 <HAL_RCC_ClockConfig+0x1c0>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0307 	and.w	r3, r3, #7
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d001      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e032      	b.n	800280e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0304 	and.w	r3, r3, #4
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d008      	beq.n	80027c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027b4:	4b19      	ldr	r3, [pc, #100]	; (800281c <HAL_RCC_ClockConfig+0x1c4>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	4916      	ldr	r1, [pc, #88]	; (800281c <HAL_RCC_ClockConfig+0x1c4>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0308 	and.w	r3, r3, #8
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d009      	beq.n	80027e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027d2:	4b12      	ldr	r3, [pc, #72]	; (800281c <HAL_RCC_ClockConfig+0x1c4>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	490e      	ldr	r1, [pc, #56]	; (800281c <HAL_RCC_ClockConfig+0x1c4>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027e6:	f000 f821 	bl	800282c <HAL_RCC_GetSysClockFreq>
 80027ea:	4602      	mov	r2, r0
 80027ec:	4b0b      	ldr	r3, [pc, #44]	; (800281c <HAL_RCC_ClockConfig+0x1c4>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	091b      	lsrs	r3, r3, #4
 80027f2:	f003 030f 	and.w	r3, r3, #15
 80027f6:	490a      	ldr	r1, [pc, #40]	; (8002820 <HAL_RCC_ClockConfig+0x1c8>)
 80027f8:	5ccb      	ldrb	r3, [r1, r3]
 80027fa:	fa22 f303 	lsr.w	r3, r2, r3
 80027fe:	4a09      	ldr	r2, [pc, #36]	; (8002824 <HAL_RCC_ClockConfig+0x1cc>)
 8002800:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002802:	4b09      	ldr	r3, [pc, #36]	; (8002828 <HAL_RCC_ClockConfig+0x1d0>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4618      	mov	r0, r3
 8002808:	f7fe fc9c 	bl	8001144 <HAL_InitTick>

  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	40022000 	.word	0x40022000
 800281c:	40021000 	.word	0x40021000
 8002820:	08003e6c 	.word	0x08003e6c
 8002824:	20000000 	.word	0x20000000
 8002828:	200000c8 	.word	0x200000c8

0800282c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800282c:	b480      	push	{r7}
 800282e:	b087      	sub	sp, #28
 8002830:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002832:	2300      	movs	r3, #0
 8002834:	60fb      	str	r3, [r7, #12]
 8002836:	2300      	movs	r3, #0
 8002838:	60bb      	str	r3, [r7, #8]
 800283a:	2300      	movs	r3, #0
 800283c:	617b      	str	r3, [r7, #20]
 800283e:	2300      	movs	r3, #0
 8002840:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002842:	2300      	movs	r3, #0
 8002844:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002846:	4b1e      	ldr	r3, [pc, #120]	; (80028c0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f003 030c 	and.w	r3, r3, #12
 8002852:	2b04      	cmp	r3, #4
 8002854:	d002      	beq.n	800285c <HAL_RCC_GetSysClockFreq+0x30>
 8002856:	2b08      	cmp	r3, #8
 8002858:	d003      	beq.n	8002862 <HAL_RCC_GetSysClockFreq+0x36>
 800285a:	e027      	b.n	80028ac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800285c:	4b19      	ldr	r3, [pc, #100]	; (80028c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800285e:	613b      	str	r3, [r7, #16]
      break;
 8002860:	e027      	b.n	80028b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	0c9b      	lsrs	r3, r3, #18
 8002866:	f003 030f 	and.w	r3, r3, #15
 800286a:	4a17      	ldr	r2, [pc, #92]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800286c:	5cd3      	ldrb	r3, [r2, r3]
 800286e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d010      	beq.n	800289c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800287a:	4b11      	ldr	r3, [pc, #68]	; (80028c0 <HAL_RCC_GetSysClockFreq+0x94>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	0c5b      	lsrs	r3, r3, #17
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	4a11      	ldr	r2, [pc, #68]	; (80028cc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002886:	5cd3      	ldrb	r3, [r2, r3]
 8002888:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a0d      	ldr	r2, [pc, #52]	; (80028c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800288e:	fb03 f202 	mul.w	r2, r3, r2
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	fbb2 f3f3 	udiv	r3, r2, r3
 8002898:	617b      	str	r3, [r7, #20]
 800289a:	e004      	b.n	80028a6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a0c      	ldr	r2, [pc, #48]	; (80028d0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80028a0:	fb02 f303 	mul.w	r3, r2, r3
 80028a4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	613b      	str	r3, [r7, #16]
      break;
 80028aa:	e002      	b.n	80028b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028ac:	4b05      	ldr	r3, [pc, #20]	; (80028c4 <HAL_RCC_GetSysClockFreq+0x98>)
 80028ae:	613b      	str	r3, [r7, #16]
      break;
 80028b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028b2:	693b      	ldr	r3, [r7, #16]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	371c      	adds	r7, #28
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc80      	pop	{r7}
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	40021000 	.word	0x40021000
 80028c4:	007a1200 	.word	0x007a1200
 80028c8:	08003ea4 	.word	0x08003ea4
 80028cc:	08003eb4 	.word	0x08003eb4
 80028d0:	003d0900 	.word	0x003d0900

080028d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028d8:	4b02      	ldr	r3, [pc, #8]	; (80028e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80028da:	681b      	ldr	r3, [r3, #0]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr
 80028e4:	20000000 	.word	0x20000000

080028e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028ec:	f7ff fff2 	bl	80028d4 <HAL_RCC_GetHCLKFreq>
 80028f0:	4602      	mov	r2, r0
 80028f2:	4b05      	ldr	r3, [pc, #20]	; (8002908 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	0a1b      	lsrs	r3, r3, #8
 80028f8:	f003 0307 	and.w	r3, r3, #7
 80028fc:	4903      	ldr	r1, [pc, #12]	; (800290c <HAL_RCC_GetPCLK1Freq+0x24>)
 80028fe:	5ccb      	ldrb	r3, [r1, r3]
 8002900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002904:	4618      	mov	r0, r3
 8002906:	bd80      	pop	{r7, pc}
 8002908:	40021000 	.word	0x40021000
 800290c:	08003e7c 	.word	0x08003e7c

08002910 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002914:	f7ff ffde 	bl	80028d4 <HAL_RCC_GetHCLKFreq>
 8002918:	4602      	mov	r2, r0
 800291a:	4b05      	ldr	r3, [pc, #20]	; (8002930 <HAL_RCC_GetPCLK2Freq+0x20>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	0adb      	lsrs	r3, r3, #11
 8002920:	f003 0307 	and.w	r3, r3, #7
 8002924:	4903      	ldr	r1, [pc, #12]	; (8002934 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002926:	5ccb      	ldrb	r3, [r1, r3]
 8002928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800292c:	4618      	mov	r0, r3
 800292e:	bd80      	pop	{r7, pc}
 8002930:	40021000 	.word	0x40021000
 8002934:	08003e7c 	.word	0x08003e7c

08002938 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002940:	4b0a      	ldr	r3, [pc, #40]	; (800296c <RCC_Delay+0x34>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a0a      	ldr	r2, [pc, #40]	; (8002970 <RCC_Delay+0x38>)
 8002946:	fba2 2303 	umull	r2, r3, r2, r3
 800294a:	0a5b      	lsrs	r3, r3, #9
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	fb02 f303 	mul.w	r3, r2, r3
 8002952:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002954:	bf00      	nop
  }
  while (Delay --);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	1e5a      	subs	r2, r3, #1
 800295a:	60fa      	str	r2, [r7, #12]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1f9      	bne.n	8002954 <RCC_Delay+0x1c>
}
 8002960:	bf00      	nop
 8002962:	bf00      	nop
 8002964:	3714      	adds	r7, #20
 8002966:	46bd      	mov	sp, r7
 8002968:	bc80      	pop	{r7}
 800296a:	4770      	bx	lr
 800296c:	20000000 	.word	0x20000000
 8002970:	10624dd3 	.word	0x10624dd3

08002974 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e042      	b.n	8002a0c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d106      	bne.n	80029a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7fd fd26 	bl	80003ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2224      	movs	r2, #36	; 0x24
 80029a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68da      	ldr	r2, [r3, #12]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 f9af 	bl	8002d1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	691a      	ldr	r2, [r3, #16]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	695a      	ldr	r2, [r3, #20]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68da      	ldr	r2, [r3, #12]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2220      	movs	r2, #32
 80029f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2220      	movs	r2, #32
 8002a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3708      	adds	r7, #8
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b08a      	sub	sp, #40	; 0x28
 8002a18:	af02      	add	r7, sp, #8
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	603b      	str	r3, [r7, #0]
 8002a20:	4613      	mov	r3, r2
 8002a22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a24:	2300      	movs	r3, #0
 8002a26:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	2b20      	cmp	r3, #32
 8002a32:	d16d      	bne.n	8002b10 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d002      	beq.n	8002a40 <HAL_UART_Transmit+0x2c>
 8002a3a:	88fb      	ldrh	r3, [r7, #6]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d101      	bne.n	8002a44 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e066      	b.n	8002b12 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2200      	movs	r2, #0
 8002a48:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2221      	movs	r2, #33	; 0x21
 8002a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a52:	f7fe fbb9 	bl	80011c8 <HAL_GetTick>
 8002a56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	88fa      	ldrh	r2, [r7, #6]
 8002a5c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	88fa      	ldrh	r2, [r7, #6]
 8002a62:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a6c:	d108      	bne.n	8002a80 <HAL_UART_Transmit+0x6c>
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d104      	bne.n	8002a80 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002a76:	2300      	movs	r3, #0
 8002a78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	61bb      	str	r3, [r7, #24]
 8002a7e:	e003      	b.n	8002a88 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a84:	2300      	movs	r3, #0
 8002a86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a88:	e02a      	b.n	8002ae0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	9300      	str	r3, [sp, #0]
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	2200      	movs	r2, #0
 8002a92:	2180      	movs	r1, #128	; 0x80
 8002a94:	68f8      	ldr	r0, [r7, #12]
 8002a96:	f000 f8d2 	bl	8002c3e <UART_WaitOnFlagUntilTimeout>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e036      	b.n	8002b12 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10b      	bne.n	8002ac2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	881b      	ldrh	r3, [r3, #0]
 8002aae:	461a      	mov	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ab8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	3302      	adds	r3, #2
 8002abe:	61bb      	str	r3, [r7, #24]
 8002ac0:	e007      	b.n	8002ad2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	781a      	ldrb	r2, [r3, #0]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	3301      	adds	r3, #1
 8002ad0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	b29a      	uxth	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1cf      	bne.n	8002a8a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	9300      	str	r3, [sp, #0]
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	2200      	movs	r2, #0
 8002af2:	2140      	movs	r1, #64	; 0x40
 8002af4:	68f8      	ldr	r0, [r7, #12]
 8002af6:	f000 f8a2 	bl	8002c3e <UART_WaitOnFlagUntilTimeout>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e006      	b.n	8002b12 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2220      	movs	r2, #32
 8002b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	e000      	b.n	8002b12 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002b10:	2302      	movs	r3, #2
  }
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3720      	adds	r7, #32
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b08a      	sub	sp, #40	; 0x28
 8002b1e:	af02      	add	r7, sp, #8
 8002b20:	60f8      	str	r0, [r7, #12]
 8002b22:	60b9      	str	r1, [r7, #8]
 8002b24:	603b      	str	r3, [r7, #0]
 8002b26:	4613      	mov	r3, r2
 8002b28:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b20      	cmp	r3, #32
 8002b38:	d17c      	bne.n	8002c34 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d002      	beq.n	8002b46 <HAL_UART_Receive+0x2c>
 8002b40:	88fb      	ldrh	r3, [r7, #6]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e075      	b.n	8002c36 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2222      	movs	r2, #34	; 0x22
 8002b54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b5e:	f7fe fb33 	bl	80011c8 <HAL_GetTick>
 8002b62:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	88fa      	ldrh	r2, [r7, #6]
 8002b68:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	88fa      	ldrh	r2, [r7, #6]
 8002b6e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b78:	d108      	bne.n	8002b8c <HAL_UART_Receive+0x72>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d104      	bne.n	8002b8c <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8002b82:	2300      	movs	r3, #0
 8002b84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	61bb      	str	r3, [r7, #24]
 8002b8a:	e003      	b.n	8002b94 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b90:	2300      	movs	r3, #0
 8002b92:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002b94:	e043      	b.n	8002c1e <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	9300      	str	r3, [sp, #0]
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	2120      	movs	r1, #32
 8002ba0:	68f8      	ldr	r0, [r7, #12]
 8002ba2:	f000 f84c 	bl	8002c3e <UART_WaitOnFlagUntilTimeout>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e042      	b.n	8002c36 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10c      	bne.n	8002bd0 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	3302      	adds	r3, #2
 8002bcc:	61bb      	str	r3, [r7, #24]
 8002bce:	e01f      	b.n	8002c10 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bd8:	d007      	beq.n	8002bea <HAL_UART_Receive+0xd0>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d10a      	bne.n	8002bf8 <HAL_UART_Receive+0xde>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d106      	bne.n	8002bf8 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	b2da      	uxtb	r2, r3
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	701a      	strb	r2, [r3, #0]
 8002bf6:	e008      	b.n	8002c0a <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	3b01      	subs	r3, #1
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d1b6      	bne.n	8002b96 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2220      	movs	r2, #32
 8002c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8002c30:	2300      	movs	r3, #0
 8002c32:	e000      	b.n	8002c36 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002c34:	2302      	movs	r3, #2
  }
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3720      	adds	r7, #32
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b090      	sub	sp, #64	; 0x40
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	60f8      	str	r0, [r7, #12]
 8002c46:	60b9      	str	r1, [r7, #8]
 8002c48:	603b      	str	r3, [r7, #0]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c4e:	e050      	b.n	8002cf2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c56:	d04c      	beq.n	8002cf2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d007      	beq.n	8002c6e <UART_WaitOnFlagUntilTimeout+0x30>
 8002c5e:	f7fe fab3 	bl	80011c8 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d241      	bcs.n	8002cf2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	330c      	adds	r3, #12
 8002c74:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c78:	e853 3f00 	ldrex	r3, [r3]
 8002c7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002c84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	330c      	adds	r3, #12
 8002c8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c8e:	637a      	str	r2, [r7, #52]	; 0x34
 8002c90:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c96:	e841 2300 	strex	r3, r2, [r1]
 8002c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1e5      	bne.n	8002c6e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	3314      	adds	r3, #20
 8002ca8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	e853 3f00 	ldrex	r3, [r3]
 8002cb0:	613b      	str	r3, [r7, #16]
   return(result);
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	f023 0301 	bic.w	r3, r3, #1
 8002cb8:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	3314      	adds	r3, #20
 8002cc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cc2:	623a      	str	r2, [r7, #32]
 8002cc4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc6:	69f9      	ldr	r1, [r7, #28]
 8002cc8:	6a3a      	ldr	r2, [r7, #32]
 8002cca:	e841 2300 	strex	r3, r2, [r1]
 8002cce:	61bb      	str	r3, [r7, #24]
   return(result);
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1e5      	bne.n	8002ca2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2220      	movs	r2, #32
 8002cda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e00f      	b.n	8002d12 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	68ba      	ldr	r2, [r7, #8]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	bf0c      	ite	eq
 8002d02:	2301      	moveq	r3, #1
 8002d04:	2300      	movne	r3, #0
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	461a      	mov	r2, r3
 8002d0a:	79fb      	ldrb	r3, [r7, #7]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d09f      	beq.n	8002c50 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3740      	adds	r7, #64	; 0x40
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
	...

08002d1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	68da      	ldr	r2, [r3, #12]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	430a      	orrs	r2, r1
 8002d38:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689a      	ldr	r2, [r3, #8]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	431a      	orrs	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	695b      	ldr	r3, [r3, #20]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002d56:	f023 030c 	bic.w	r3, r3, #12
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	6812      	ldr	r2, [r2, #0]
 8002d5e:	68b9      	ldr	r1, [r7, #8]
 8002d60:	430b      	orrs	r3, r1
 8002d62:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	699a      	ldr	r2, [r3, #24]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a2c      	ldr	r2, [pc, #176]	; (8002e30 <UART_SetConfig+0x114>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d103      	bne.n	8002d8c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002d84:	f7ff fdc4 	bl	8002910 <HAL_RCC_GetPCLK2Freq>
 8002d88:	60f8      	str	r0, [r7, #12]
 8002d8a:	e002      	b.n	8002d92 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002d8c:	f7ff fdac 	bl	80028e8 <HAL_RCC_GetPCLK1Freq>
 8002d90:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	4613      	mov	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	4413      	add	r3, r2
 8002d9a:	009a      	lsls	r2, r3, #2
 8002d9c:	441a      	add	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da8:	4a22      	ldr	r2, [pc, #136]	; (8002e34 <UART_SetConfig+0x118>)
 8002daa:	fba2 2303 	umull	r2, r3, r2, r3
 8002dae:	095b      	lsrs	r3, r3, #5
 8002db0:	0119      	lsls	r1, r3, #4
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	4613      	mov	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	009a      	lsls	r2, r3, #2
 8002dbc:	441a      	add	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002dc8:	4b1a      	ldr	r3, [pc, #104]	; (8002e34 <UART_SetConfig+0x118>)
 8002dca:	fba3 0302 	umull	r0, r3, r3, r2
 8002dce:	095b      	lsrs	r3, r3, #5
 8002dd0:	2064      	movs	r0, #100	; 0x64
 8002dd2:	fb00 f303 	mul.w	r3, r0, r3
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	011b      	lsls	r3, r3, #4
 8002dda:	3332      	adds	r3, #50	; 0x32
 8002ddc:	4a15      	ldr	r2, [pc, #84]	; (8002e34 <UART_SetConfig+0x118>)
 8002dde:	fba2 2303 	umull	r2, r3, r2, r3
 8002de2:	095b      	lsrs	r3, r3, #5
 8002de4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002de8:	4419      	add	r1, r3
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	4613      	mov	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	4413      	add	r3, r2
 8002df2:	009a      	lsls	r2, r3, #2
 8002df4:	441a      	add	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e00:	4b0c      	ldr	r3, [pc, #48]	; (8002e34 <UART_SetConfig+0x118>)
 8002e02:	fba3 0302 	umull	r0, r3, r3, r2
 8002e06:	095b      	lsrs	r3, r3, #5
 8002e08:	2064      	movs	r0, #100	; 0x64
 8002e0a:	fb00 f303 	mul.w	r3, r0, r3
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	011b      	lsls	r3, r3, #4
 8002e12:	3332      	adds	r3, #50	; 0x32
 8002e14:	4a07      	ldr	r2, [pc, #28]	; (8002e34 <UART_SetConfig+0x118>)
 8002e16:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1a:	095b      	lsrs	r3, r3, #5
 8002e1c:	f003 020f 	and.w	r2, r3, #15
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	440a      	add	r2, r1
 8002e26:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002e28:	bf00      	nop
 8002e2a:	3710      	adds	r7, #16
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	40013800 	.word	0x40013800
 8002e34:	51eb851f 	.word	0x51eb851f

08002e38 <atoi>:
 8002e38:	220a      	movs	r2, #10
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	f000 b87e 	b.w	8002f3c <strtol>

08002e40 <_strtol_l.constprop.0>:
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e46:	4686      	mov	lr, r0
 8002e48:	4690      	mov	r8, r2
 8002e4a:	d001      	beq.n	8002e50 <_strtol_l.constprop.0+0x10>
 8002e4c:	2b24      	cmp	r3, #36	; 0x24
 8002e4e:	d906      	bls.n	8002e5e <_strtol_l.constprop.0+0x1e>
 8002e50:	f000 f8a6 	bl	8002fa0 <__errno>
 8002e54:	2316      	movs	r3, #22
 8002e56:	6003      	str	r3, [r0, #0]
 8002e58:	2000      	movs	r0, #0
 8002e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e5e:	460d      	mov	r5, r1
 8002e60:	4835      	ldr	r0, [pc, #212]	; (8002f38 <_strtol_l.constprop.0+0xf8>)
 8002e62:	462a      	mov	r2, r5
 8002e64:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002e68:	5d06      	ldrb	r6, [r0, r4]
 8002e6a:	f016 0608 	ands.w	r6, r6, #8
 8002e6e:	d1f8      	bne.n	8002e62 <_strtol_l.constprop.0+0x22>
 8002e70:	2c2d      	cmp	r4, #45	; 0x2d
 8002e72:	d12e      	bne.n	8002ed2 <_strtol_l.constprop.0+0x92>
 8002e74:	2601      	movs	r6, #1
 8002e76:	782c      	ldrb	r4, [r5, #0]
 8002e78:	1c95      	adds	r5, r2, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d057      	beq.n	8002f2e <_strtol_l.constprop.0+0xee>
 8002e7e:	2b10      	cmp	r3, #16
 8002e80:	d109      	bne.n	8002e96 <_strtol_l.constprop.0+0x56>
 8002e82:	2c30      	cmp	r4, #48	; 0x30
 8002e84:	d107      	bne.n	8002e96 <_strtol_l.constprop.0+0x56>
 8002e86:	782a      	ldrb	r2, [r5, #0]
 8002e88:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8002e8c:	2a58      	cmp	r2, #88	; 0x58
 8002e8e:	d149      	bne.n	8002f24 <_strtol_l.constprop.0+0xe4>
 8002e90:	2310      	movs	r3, #16
 8002e92:	786c      	ldrb	r4, [r5, #1]
 8002e94:	3502      	adds	r5, #2
 8002e96:	2200      	movs	r2, #0
 8002e98:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8002e9c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8002ea0:	fbbc f9f3 	udiv	r9, ip, r3
 8002ea4:	4610      	mov	r0, r2
 8002ea6:	fb03 ca19 	mls	sl, r3, r9, ip
 8002eaa:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8002eae:	2f09      	cmp	r7, #9
 8002eb0:	d814      	bhi.n	8002edc <_strtol_l.constprop.0+0x9c>
 8002eb2:	463c      	mov	r4, r7
 8002eb4:	42a3      	cmp	r3, r4
 8002eb6:	dd20      	ble.n	8002efa <_strtol_l.constprop.0+0xba>
 8002eb8:	1c57      	adds	r7, r2, #1
 8002eba:	d007      	beq.n	8002ecc <_strtol_l.constprop.0+0x8c>
 8002ebc:	4581      	cmp	r9, r0
 8002ebe:	d319      	bcc.n	8002ef4 <_strtol_l.constprop.0+0xb4>
 8002ec0:	d101      	bne.n	8002ec6 <_strtol_l.constprop.0+0x86>
 8002ec2:	45a2      	cmp	sl, r4
 8002ec4:	db16      	blt.n	8002ef4 <_strtol_l.constprop.0+0xb4>
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	fb00 4003 	mla	r0, r0, r3, r4
 8002ecc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002ed0:	e7eb      	b.n	8002eaa <_strtol_l.constprop.0+0x6a>
 8002ed2:	2c2b      	cmp	r4, #43	; 0x2b
 8002ed4:	bf04      	itt	eq
 8002ed6:	782c      	ldrbeq	r4, [r5, #0]
 8002ed8:	1c95      	addeq	r5, r2, #2
 8002eda:	e7ce      	b.n	8002e7a <_strtol_l.constprop.0+0x3a>
 8002edc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8002ee0:	2f19      	cmp	r7, #25
 8002ee2:	d801      	bhi.n	8002ee8 <_strtol_l.constprop.0+0xa8>
 8002ee4:	3c37      	subs	r4, #55	; 0x37
 8002ee6:	e7e5      	b.n	8002eb4 <_strtol_l.constprop.0+0x74>
 8002ee8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8002eec:	2f19      	cmp	r7, #25
 8002eee:	d804      	bhi.n	8002efa <_strtol_l.constprop.0+0xba>
 8002ef0:	3c57      	subs	r4, #87	; 0x57
 8002ef2:	e7df      	b.n	8002eb4 <_strtol_l.constprop.0+0x74>
 8002ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ef8:	e7e8      	b.n	8002ecc <_strtol_l.constprop.0+0x8c>
 8002efa:	1c53      	adds	r3, r2, #1
 8002efc:	d108      	bne.n	8002f10 <_strtol_l.constprop.0+0xd0>
 8002efe:	2322      	movs	r3, #34	; 0x22
 8002f00:	4660      	mov	r0, ip
 8002f02:	f8ce 3000 	str.w	r3, [lr]
 8002f06:	f1b8 0f00 	cmp.w	r8, #0
 8002f0a:	d0a6      	beq.n	8002e5a <_strtol_l.constprop.0+0x1a>
 8002f0c:	1e69      	subs	r1, r5, #1
 8002f0e:	e006      	b.n	8002f1e <_strtol_l.constprop.0+0xde>
 8002f10:	b106      	cbz	r6, 8002f14 <_strtol_l.constprop.0+0xd4>
 8002f12:	4240      	negs	r0, r0
 8002f14:	f1b8 0f00 	cmp.w	r8, #0
 8002f18:	d09f      	beq.n	8002e5a <_strtol_l.constprop.0+0x1a>
 8002f1a:	2a00      	cmp	r2, #0
 8002f1c:	d1f6      	bne.n	8002f0c <_strtol_l.constprop.0+0xcc>
 8002f1e:	f8c8 1000 	str.w	r1, [r8]
 8002f22:	e79a      	b.n	8002e5a <_strtol_l.constprop.0+0x1a>
 8002f24:	2430      	movs	r4, #48	; 0x30
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1b5      	bne.n	8002e96 <_strtol_l.constprop.0+0x56>
 8002f2a:	2308      	movs	r3, #8
 8002f2c:	e7b3      	b.n	8002e96 <_strtol_l.constprop.0+0x56>
 8002f2e:	2c30      	cmp	r4, #48	; 0x30
 8002f30:	d0a9      	beq.n	8002e86 <_strtol_l.constprop.0+0x46>
 8002f32:	230a      	movs	r3, #10
 8002f34:	e7af      	b.n	8002e96 <_strtol_l.constprop.0+0x56>
 8002f36:	bf00      	nop
 8002f38:	08003eb7 	.word	0x08003eb7

08002f3c <strtol>:
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	460a      	mov	r2, r1
 8002f40:	4601      	mov	r1, r0
 8002f42:	4802      	ldr	r0, [pc, #8]	; (8002f4c <strtol+0x10>)
 8002f44:	6800      	ldr	r0, [r0, #0]
 8002f46:	f7ff bf7b 	b.w	8002e40 <_strtol_l.constprop.0>
 8002f4a:	bf00      	nop
 8002f4c:	2000011c 	.word	0x2000011c

08002f50 <siprintf>:
 8002f50:	b40e      	push	{r1, r2, r3}
 8002f52:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002f56:	b500      	push	{lr}
 8002f58:	b09c      	sub	sp, #112	; 0x70
 8002f5a:	ab1d      	add	r3, sp, #116	; 0x74
 8002f5c:	9002      	str	r0, [sp, #8]
 8002f5e:	9006      	str	r0, [sp, #24]
 8002f60:	9107      	str	r1, [sp, #28]
 8002f62:	9104      	str	r1, [sp, #16]
 8002f64:	4808      	ldr	r0, [pc, #32]	; (8002f88 <siprintf+0x38>)
 8002f66:	4909      	ldr	r1, [pc, #36]	; (8002f8c <siprintf+0x3c>)
 8002f68:	f853 2b04 	ldr.w	r2, [r3], #4
 8002f6c:	9105      	str	r1, [sp, #20]
 8002f6e:	6800      	ldr	r0, [r0, #0]
 8002f70:	a902      	add	r1, sp, #8
 8002f72:	9301      	str	r3, [sp, #4]
 8002f74:	f000 f99c 	bl	80032b0 <_svfiprintf_r>
 8002f78:	2200      	movs	r2, #0
 8002f7a:	9b02      	ldr	r3, [sp, #8]
 8002f7c:	701a      	strb	r2, [r3, #0]
 8002f7e:	b01c      	add	sp, #112	; 0x70
 8002f80:	f85d eb04 	ldr.w	lr, [sp], #4
 8002f84:	b003      	add	sp, #12
 8002f86:	4770      	bx	lr
 8002f88:	2000011c 	.word	0x2000011c
 8002f8c:	ffff0208 	.word	0xffff0208

08002f90 <memset>:
 8002f90:	4603      	mov	r3, r0
 8002f92:	4402      	add	r2, r0
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d100      	bne.n	8002f9a <memset+0xa>
 8002f98:	4770      	bx	lr
 8002f9a:	f803 1b01 	strb.w	r1, [r3], #1
 8002f9e:	e7f9      	b.n	8002f94 <memset+0x4>

08002fa0 <__errno>:
 8002fa0:	4b01      	ldr	r3, [pc, #4]	; (8002fa8 <__errno+0x8>)
 8002fa2:	6818      	ldr	r0, [r3, #0]
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	2000011c 	.word	0x2000011c

08002fac <__libc_init_array>:
 8002fac:	b570      	push	{r4, r5, r6, lr}
 8002fae:	2600      	movs	r6, #0
 8002fb0:	4d0c      	ldr	r5, [pc, #48]	; (8002fe4 <__libc_init_array+0x38>)
 8002fb2:	4c0d      	ldr	r4, [pc, #52]	; (8002fe8 <__libc_init_array+0x3c>)
 8002fb4:	1b64      	subs	r4, r4, r5
 8002fb6:	10a4      	asrs	r4, r4, #2
 8002fb8:	42a6      	cmp	r6, r4
 8002fba:	d109      	bne.n	8002fd0 <__libc_init_array+0x24>
 8002fbc:	f000 fc7a 	bl	80038b4 <_init>
 8002fc0:	2600      	movs	r6, #0
 8002fc2:	4d0a      	ldr	r5, [pc, #40]	; (8002fec <__libc_init_array+0x40>)
 8002fc4:	4c0a      	ldr	r4, [pc, #40]	; (8002ff0 <__libc_init_array+0x44>)
 8002fc6:	1b64      	subs	r4, r4, r5
 8002fc8:	10a4      	asrs	r4, r4, #2
 8002fca:	42a6      	cmp	r6, r4
 8002fcc:	d105      	bne.n	8002fda <__libc_init_array+0x2e>
 8002fce:	bd70      	pop	{r4, r5, r6, pc}
 8002fd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fd4:	4798      	blx	r3
 8002fd6:	3601      	adds	r6, #1
 8002fd8:	e7ee      	b.n	8002fb8 <__libc_init_array+0xc>
 8002fda:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fde:	4798      	blx	r3
 8002fe0:	3601      	adds	r6, #1
 8002fe2:	e7f2      	b.n	8002fca <__libc_init_array+0x1e>
 8002fe4:	08003fec 	.word	0x08003fec
 8002fe8:	08003fec 	.word	0x08003fec
 8002fec:	08003fec 	.word	0x08003fec
 8002ff0:	08003ff0 	.word	0x08003ff0

08002ff4 <__retarget_lock_acquire_recursive>:
 8002ff4:	4770      	bx	lr

08002ff6 <__retarget_lock_release_recursive>:
 8002ff6:	4770      	bx	lr

08002ff8 <memcpy>:
 8002ff8:	440a      	add	r2, r1
 8002ffa:	4291      	cmp	r1, r2
 8002ffc:	f100 33ff 	add.w	r3, r0, #4294967295
 8003000:	d100      	bne.n	8003004 <memcpy+0xc>
 8003002:	4770      	bx	lr
 8003004:	b510      	push	{r4, lr}
 8003006:	f811 4b01 	ldrb.w	r4, [r1], #1
 800300a:	4291      	cmp	r1, r2
 800300c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003010:	d1f9      	bne.n	8003006 <memcpy+0xe>
 8003012:	bd10      	pop	{r4, pc}

08003014 <_free_r>:
 8003014:	b538      	push	{r3, r4, r5, lr}
 8003016:	4605      	mov	r5, r0
 8003018:	2900      	cmp	r1, #0
 800301a:	d040      	beq.n	800309e <_free_r+0x8a>
 800301c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003020:	1f0c      	subs	r4, r1, #4
 8003022:	2b00      	cmp	r3, #0
 8003024:	bfb8      	it	lt
 8003026:	18e4      	addlt	r4, r4, r3
 8003028:	f000 f8dc 	bl	80031e4 <__malloc_lock>
 800302c:	4a1c      	ldr	r2, [pc, #112]	; (80030a0 <_free_r+0x8c>)
 800302e:	6813      	ldr	r3, [r2, #0]
 8003030:	b933      	cbnz	r3, 8003040 <_free_r+0x2c>
 8003032:	6063      	str	r3, [r4, #4]
 8003034:	6014      	str	r4, [r2, #0]
 8003036:	4628      	mov	r0, r5
 8003038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800303c:	f000 b8d8 	b.w	80031f0 <__malloc_unlock>
 8003040:	42a3      	cmp	r3, r4
 8003042:	d908      	bls.n	8003056 <_free_r+0x42>
 8003044:	6820      	ldr	r0, [r4, #0]
 8003046:	1821      	adds	r1, r4, r0
 8003048:	428b      	cmp	r3, r1
 800304a:	bf01      	itttt	eq
 800304c:	6819      	ldreq	r1, [r3, #0]
 800304e:	685b      	ldreq	r3, [r3, #4]
 8003050:	1809      	addeq	r1, r1, r0
 8003052:	6021      	streq	r1, [r4, #0]
 8003054:	e7ed      	b.n	8003032 <_free_r+0x1e>
 8003056:	461a      	mov	r2, r3
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	b10b      	cbz	r3, 8003060 <_free_r+0x4c>
 800305c:	42a3      	cmp	r3, r4
 800305e:	d9fa      	bls.n	8003056 <_free_r+0x42>
 8003060:	6811      	ldr	r1, [r2, #0]
 8003062:	1850      	adds	r0, r2, r1
 8003064:	42a0      	cmp	r0, r4
 8003066:	d10b      	bne.n	8003080 <_free_r+0x6c>
 8003068:	6820      	ldr	r0, [r4, #0]
 800306a:	4401      	add	r1, r0
 800306c:	1850      	adds	r0, r2, r1
 800306e:	4283      	cmp	r3, r0
 8003070:	6011      	str	r1, [r2, #0]
 8003072:	d1e0      	bne.n	8003036 <_free_r+0x22>
 8003074:	6818      	ldr	r0, [r3, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	4408      	add	r0, r1
 800307a:	6010      	str	r0, [r2, #0]
 800307c:	6053      	str	r3, [r2, #4]
 800307e:	e7da      	b.n	8003036 <_free_r+0x22>
 8003080:	d902      	bls.n	8003088 <_free_r+0x74>
 8003082:	230c      	movs	r3, #12
 8003084:	602b      	str	r3, [r5, #0]
 8003086:	e7d6      	b.n	8003036 <_free_r+0x22>
 8003088:	6820      	ldr	r0, [r4, #0]
 800308a:	1821      	adds	r1, r4, r0
 800308c:	428b      	cmp	r3, r1
 800308e:	bf01      	itttt	eq
 8003090:	6819      	ldreq	r1, [r3, #0]
 8003092:	685b      	ldreq	r3, [r3, #4]
 8003094:	1809      	addeq	r1, r1, r0
 8003096:	6021      	streq	r1, [r4, #0]
 8003098:	6063      	str	r3, [r4, #4]
 800309a:	6054      	str	r4, [r2, #4]
 800309c:	e7cb      	b.n	8003036 <_free_r+0x22>
 800309e:	bd38      	pop	{r3, r4, r5, pc}
 80030a0:	20000354 	.word	0x20000354

080030a4 <sbrk_aligned>:
 80030a4:	b570      	push	{r4, r5, r6, lr}
 80030a6:	4e0e      	ldr	r6, [pc, #56]	; (80030e0 <sbrk_aligned+0x3c>)
 80030a8:	460c      	mov	r4, r1
 80030aa:	6831      	ldr	r1, [r6, #0]
 80030ac:	4605      	mov	r5, r0
 80030ae:	b911      	cbnz	r1, 80030b6 <sbrk_aligned+0x12>
 80030b0:	f000 fbaa 	bl	8003808 <_sbrk_r>
 80030b4:	6030      	str	r0, [r6, #0]
 80030b6:	4621      	mov	r1, r4
 80030b8:	4628      	mov	r0, r5
 80030ba:	f000 fba5 	bl	8003808 <_sbrk_r>
 80030be:	1c43      	adds	r3, r0, #1
 80030c0:	d00a      	beq.n	80030d8 <sbrk_aligned+0x34>
 80030c2:	1cc4      	adds	r4, r0, #3
 80030c4:	f024 0403 	bic.w	r4, r4, #3
 80030c8:	42a0      	cmp	r0, r4
 80030ca:	d007      	beq.n	80030dc <sbrk_aligned+0x38>
 80030cc:	1a21      	subs	r1, r4, r0
 80030ce:	4628      	mov	r0, r5
 80030d0:	f000 fb9a 	bl	8003808 <_sbrk_r>
 80030d4:	3001      	adds	r0, #1
 80030d6:	d101      	bne.n	80030dc <sbrk_aligned+0x38>
 80030d8:	f04f 34ff 	mov.w	r4, #4294967295
 80030dc:	4620      	mov	r0, r4
 80030de:	bd70      	pop	{r4, r5, r6, pc}
 80030e0:	20000358 	.word	0x20000358

080030e4 <_malloc_r>:
 80030e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80030e8:	1ccd      	adds	r5, r1, #3
 80030ea:	f025 0503 	bic.w	r5, r5, #3
 80030ee:	3508      	adds	r5, #8
 80030f0:	2d0c      	cmp	r5, #12
 80030f2:	bf38      	it	cc
 80030f4:	250c      	movcc	r5, #12
 80030f6:	2d00      	cmp	r5, #0
 80030f8:	4607      	mov	r7, r0
 80030fa:	db01      	blt.n	8003100 <_malloc_r+0x1c>
 80030fc:	42a9      	cmp	r1, r5
 80030fe:	d905      	bls.n	800310c <_malloc_r+0x28>
 8003100:	230c      	movs	r3, #12
 8003102:	2600      	movs	r6, #0
 8003104:	603b      	str	r3, [r7, #0]
 8003106:	4630      	mov	r0, r6
 8003108:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800310c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80031e0 <_malloc_r+0xfc>
 8003110:	f000 f868 	bl	80031e4 <__malloc_lock>
 8003114:	f8d8 3000 	ldr.w	r3, [r8]
 8003118:	461c      	mov	r4, r3
 800311a:	bb5c      	cbnz	r4, 8003174 <_malloc_r+0x90>
 800311c:	4629      	mov	r1, r5
 800311e:	4638      	mov	r0, r7
 8003120:	f7ff ffc0 	bl	80030a4 <sbrk_aligned>
 8003124:	1c43      	adds	r3, r0, #1
 8003126:	4604      	mov	r4, r0
 8003128:	d155      	bne.n	80031d6 <_malloc_r+0xf2>
 800312a:	f8d8 4000 	ldr.w	r4, [r8]
 800312e:	4626      	mov	r6, r4
 8003130:	2e00      	cmp	r6, #0
 8003132:	d145      	bne.n	80031c0 <_malloc_r+0xdc>
 8003134:	2c00      	cmp	r4, #0
 8003136:	d048      	beq.n	80031ca <_malloc_r+0xe6>
 8003138:	6823      	ldr	r3, [r4, #0]
 800313a:	4631      	mov	r1, r6
 800313c:	4638      	mov	r0, r7
 800313e:	eb04 0903 	add.w	r9, r4, r3
 8003142:	f000 fb61 	bl	8003808 <_sbrk_r>
 8003146:	4581      	cmp	r9, r0
 8003148:	d13f      	bne.n	80031ca <_malloc_r+0xe6>
 800314a:	6821      	ldr	r1, [r4, #0]
 800314c:	4638      	mov	r0, r7
 800314e:	1a6d      	subs	r5, r5, r1
 8003150:	4629      	mov	r1, r5
 8003152:	f7ff ffa7 	bl	80030a4 <sbrk_aligned>
 8003156:	3001      	adds	r0, #1
 8003158:	d037      	beq.n	80031ca <_malloc_r+0xe6>
 800315a:	6823      	ldr	r3, [r4, #0]
 800315c:	442b      	add	r3, r5
 800315e:	6023      	str	r3, [r4, #0]
 8003160:	f8d8 3000 	ldr.w	r3, [r8]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d038      	beq.n	80031da <_malloc_r+0xf6>
 8003168:	685a      	ldr	r2, [r3, #4]
 800316a:	42a2      	cmp	r2, r4
 800316c:	d12b      	bne.n	80031c6 <_malloc_r+0xe2>
 800316e:	2200      	movs	r2, #0
 8003170:	605a      	str	r2, [r3, #4]
 8003172:	e00f      	b.n	8003194 <_malloc_r+0xb0>
 8003174:	6822      	ldr	r2, [r4, #0]
 8003176:	1b52      	subs	r2, r2, r5
 8003178:	d41f      	bmi.n	80031ba <_malloc_r+0xd6>
 800317a:	2a0b      	cmp	r2, #11
 800317c:	d917      	bls.n	80031ae <_malloc_r+0xca>
 800317e:	1961      	adds	r1, r4, r5
 8003180:	42a3      	cmp	r3, r4
 8003182:	6025      	str	r5, [r4, #0]
 8003184:	bf18      	it	ne
 8003186:	6059      	strne	r1, [r3, #4]
 8003188:	6863      	ldr	r3, [r4, #4]
 800318a:	bf08      	it	eq
 800318c:	f8c8 1000 	streq.w	r1, [r8]
 8003190:	5162      	str	r2, [r4, r5]
 8003192:	604b      	str	r3, [r1, #4]
 8003194:	4638      	mov	r0, r7
 8003196:	f104 060b 	add.w	r6, r4, #11
 800319a:	f000 f829 	bl	80031f0 <__malloc_unlock>
 800319e:	f026 0607 	bic.w	r6, r6, #7
 80031a2:	1d23      	adds	r3, r4, #4
 80031a4:	1af2      	subs	r2, r6, r3
 80031a6:	d0ae      	beq.n	8003106 <_malloc_r+0x22>
 80031a8:	1b9b      	subs	r3, r3, r6
 80031aa:	50a3      	str	r3, [r4, r2]
 80031ac:	e7ab      	b.n	8003106 <_malloc_r+0x22>
 80031ae:	42a3      	cmp	r3, r4
 80031b0:	6862      	ldr	r2, [r4, #4]
 80031b2:	d1dd      	bne.n	8003170 <_malloc_r+0x8c>
 80031b4:	f8c8 2000 	str.w	r2, [r8]
 80031b8:	e7ec      	b.n	8003194 <_malloc_r+0xb0>
 80031ba:	4623      	mov	r3, r4
 80031bc:	6864      	ldr	r4, [r4, #4]
 80031be:	e7ac      	b.n	800311a <_malloc_r+0x36>
 80031c0:	4634      	mov	r4, r6
 80031c2:	6876      	ldr	r6, [r6, #4]
 80031c4:	e7b4      	b.n	8003130 <_malloc_r+0x4c>
 80031c6:	4613      	mov	r3, r2
 80031c8:	e7cc      	b.n	8003164 <_malloc_r+0x80>
 80031ca:	230c      	movs	r3, #12
 80031cc:	4638      	mov	r0, r7
 80031ce:	603b      	str	r3, [r7, #0]
 80031d0:	f000 f80e 	bl	80031f0 <__malloc_unlock>
 80031d4:	e797      	b.n	8003106 <_malloc_r+0x22>
 80031d6:	6025      	str	r5, [r4, #0]
 80031d8:	e7dc      	b.n	8003194 <_malloc_r+0xb0>
 80031da:	605b      	str	r3, [r3, #4]
 80031dc:	deff      	udf	#255	; 0xff
 80031de:	bf00      	nop
 80031e0:	20000354 	.word	0x20000354

080031e4 <__malloc_lock>:
 80031e4:	4801      	ldr	r0, [pc, #4]	; (80031ec <__malloc_lock+0x8>)
 80031e6:	f7ff bf05 	b.w	8002ff4 <__retarget_lock_acquire_recursive>
 80031ea:	bf00      	nop
 80031ec:	20000350 	.word	0x20000350

080031f0 <__malloc_unlock>:
 80031f0:	4801      	ldr	r0, [pc, #4]	; (80031f8 <__malloc_unlock+0x8>)
 80031f2:	f7ff bf00 	b.w	8002ff6 <__retarget_lock_release_recursive>
 80031f6:	bf00      	nop
 80031f8:	20000350 	.word	0x20000350

080031fc <__ssputs_r>:
 80031fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003200:	461f      	mov	r7, r3
 8003202:	688e      	ldr	r6, [r1, #8]
 8003204:	4682      	mov	sl, r0
 8003206:	42be      	cmp	r6, r7
 8003208:	460c      	mov	r4, r1
 800320a:	4690      	mov	r8, r2
 800320c:	680b      	ldr	r3, [r1, #0]
 800320e:	d82c      	bhi.n	800326a <__ssputs_r+0x6e>
 8003210:	898a      	ldrh	r2, [r1, #12]
 8003212:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003216:	d026      	beq.n	8003266 <__ssputs_r+0x6a>
 8003218:	6965      	ldr	r5, [r4, #20]
 800321a:	6909      	ldr	r1, [r1, #16]
 800321c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003220:	eba3 0901 	sub.w	r9, r3, r1
 8003224:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003228:	1c7b      	adds	r3, r7, #1
 800322a:	444b      	add	r3, r9
 800322c:	106d      	asrs	r5, r5, #1
 800322e:	429d      	cmp	r5, r3
 8003230:	bf38      	it	cc
 8003232:	461d      	movcc	r5, r3
 8003234:	0553      	lsls	r3, r2, #21
 8003236:	d527      	bpl.n	8003288 <__ssputs_r+0x8c>
 8003238:	4629      	mov	r1, r5
 800323a:	f7ff ff53 	bl	80030e4 <_malloc_r>
 800323e:	4606      	mov	r6, r0
 8003240:	b360      	cbz	r0, 800329c <__ssputs_r+0xa0>
 8003242:	464a      	mov	r2, r9
 8003244:	6921      	ldr	r1, [r4, #16]
 8003246:	f7ff fed7 	bl	8002ff8 <memcpy>
 800324a:	89a3      	ldrh	r3, [r4, #12]
 800324c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003254:	81a3      	strh	r3, [r4, #12]
 8003256:	6126      	str	r6, [r4, #16]
 8003258:	444e      	add	r6, r9
 800325a:	6026      	str	r6, [r4, #0]
 800325c:	463e      	mov	r6, r7
 800325e:	6165      	str	r5, [r4, #20]
 8003260:	eba5 0509 	sub.w	r5, r5, r9
 8003264:	60a5      	str	r5, [r4, #8]
 8003266:	42be      	cmp	r6, r7
 8003268:	d900      	bls.n	800326c <__ssputs_r+0x70>
 800326a:	463e      	mov	r6, r7
 800326c:	4632      	mov	r2, r6
 800326e:	4641      	mov	r1, r8
 8003270:	6820      	ldr	r0, [r4, #0]
 8003272:	f000 faaf 	bl	80037d4 <memmove>
 8003276:	2000      	movs	r0, #0
 8003278:	68a3      	ldr	r3, [r4, #8]
 800327a:	1b9b      	subs	r3, r3, r6
 800327c:	60a3      	str	r3, [r4, #8]
 800327e:	6823      	ldr	r3, [r4, #0]
 8003280:	4433      	add	r3, r6
 8003282:	6023      	str	r3, [r4, #0]
 8003284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003288:	462a      	mov	r2, r5
 800328a:	f000 fadb 	bl	8003844 <_realloc_r>
 800328e:	4606      	mov	r6, r0
 8003290:	2800      	cmp	r0, #0
 8003292:	d1e0      	bne.n	8003256 <__ssputs_r+0x5a>
 8003294:	4650      	mov	r0, sl
 8003296:	6921      	ldr	r1, [r4, #16]
 8003298:	f7ff febc 	bl	8003014 <_free_r>
 800329c:	230c      	movs	r3, #12
 800329e:	f8ca 3000 	str.w	r3, [sl]
 80032a2:	89a3      	ldrh	r3, [r4, #12]
 80032a4:	f04f 30ff 	mov.w	r0, #4294967295
 80032a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032ac:	81a3      	strh	r3, [r4, #12]
 80032ae:	e7e9      	b.n	8003284 <__ssputs_r+0x88>

080032b0 <_svfiprintf_r>:
 80032b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032b4:	4698      	mov	r8, r3
 80032b6:	898b      	ldrh	r3, [r1, #12]
 80032b8:	4607      	mov	r7, r0
 80032ba:	061b      	lsls	r3, r3, #24
 80032bc:	460d      	mov	r5, r1
 80032be:	4614      	mov	r4, r2
 80032c0:	b09d      	sub	sp, #116	; 0x74
 80032c2:	d50e      	bpl.n	80032e2 <_svfiprintf_r+0x32>
 80032c4:	690b      	ldr	r3, [r1, #16]
 80032c6:	b963      	cbnz	r3, 80032e2 <_svfiprintf_r+0x32>
 80032c8:	2140      	movs	r1, #64	; 0x40
 80032ca:	f7ff ff0b 	bl	80030e4 <_malloc_r>
 80032ce:	6028      	str	r0, [r5, #0]
 80032d0:	6128      	str	r0, [r5, #16]
 80032d2:	b920      	cbnz	r0, 80032de <_svfiprintf_r+0x2e>
 80032d4:	230c      	movs	r3, #12
 80032d6:	603b      	str	r3, [r7, #0]
 80032d8:	f04f 30ff 	mov.w	r0, #4294967295
 80032dc:	e0d0      	b.n	8003480 <_svfiprintf_r+0x1d0>
 80032de:	2340      	movs	r3, #64	; 0x40
 80032e0:	616b      	str	r3, [r5, #20]
 80032e2:	2300      	movs	r3, #0
 80032e4:	9309      	str	r3, [sp, #36]	; 0x24
 80032e6:	2320      	movs	r3, #32
 80032e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80032ec:	2330      	movs	r3, #48	; 0x30
 80032ee:	f04f 0901 	mov.w	r9, #1
 80032f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80032f6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003498 <_svfiprintf_r+0x1e8>
 80032fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80032fe:	4623      	mov	r3, r4
 8003300:	469a      	mov	sl, r3
 8003302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003306:	b10a      	cbz	r2, 800330c <_svfiprintf_r+0x5c>
 8003308:	2a25      	cmp	r2, #37	; 0x25
 800330a:	d1f9      	bne.n	8003300 <_svfiprintf_r+0x50>
 800330c:	ebba 0b04 	subs.w	fp, sl, r4
 8003310:	d00b      	beq.n	800332a <_svfiprintf_r+0x7a>
 8003312:	465b      	mov	r3, fp
 8003314:	4622      	mov	r2, r4
 8003316:	4629      	mov	r1, r5
 8003318:	4638      	mov	r0, r7
 800331a:	f7ff ff6f 	bl	80031fc <__ssputs_r>
 800331e:	3001      	adds	r0, #1
 8003320:	f000 80a9 	beq.w	8003476 <_svfiprintf_r+0x1c6>
 8003324:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003326:	445a      	add	r2, fp
 8003328:	9209      	str	r2, [sp, #36]	; 0x24
 800332a:	f89a 3000 	ldrb.w	r3, [sl]
 800332e:	2b00      	cmp	r3, #0
 8003330:	f000 80a1 	beq.w	8003476 <_svfiprintf_r+0x1c6>
 8003334:	2300      	movs	r3, #0
 8003336:	f04f 32ff 	mov.w	r2, #4294967295
 800333a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800333e:	f10a 0a01 	add.w	sl, sl, #1
 8003342:	9304      	str	r3, [sp, #16]
 8003344:	9307      	str	r3, [sp, #28]
 8003346:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800334a:	931a      	str	r3, [sp, #104]	; 0x68
 800334c:	4654      	mov	r4, sl
 800334e:	2205      	movs	r2, #5
 8003350:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003354:	4850      	ldr	r0, [pc, #320]	; (8003498 <_svfiprintf_r+0x1e8>)
 8003356:	f000 fa67 	bl	8003828 <memchr>
 800335a:	9a04      	ldr	r2, [sp, #16]
 800335c:	b9d8      	cbnz	r0, 8003396 <_svfiprintf_r+0xe6>
 800335e:	06d0      	lsls	r0, r2, #27
 8003360:	bf44      	itt	mi
 8003362:	2320      	movmi	r3, #32
 8003364:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003368:	0711      	lsls	r1, r2, #28
 800336a:	bf44      	itt	mi
 800336c:	232b      	movmi	r3, #43	; 0x2b
 800336e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003372:	f89a 3000 	ldrb.w	r3, [sl]
 8003376:	2b2a      	cmp	r3, #42	; 0x2a
 8003378:	d015      	beq.n	80033a6 <_svfiprintf_r+0xf6>
 800337a:	4654      	mov	r4, sl
 800337c:	2000      	movs	r0, #0
 800337e:	f04f 0c0a 	mov.w	ip, #10
 8003382:	9a07      	ldr	r2, [sp, #28]
 8003384:	4621      	mov	r1, r4
 8003386:	f811 3b01 	ldrb.w	r3, [r1], #1
 800338a:	3b30      	subs	r3, #48	; 0x30
 800338c:	2b09      	cmp	r3, #9
 800338e:	d94d      	bls.n	800342c <_svfiprintf_r+0x17c>
 8003390:	b1b0      	cbz	r0, 80033c0 <_svfiprintf_r+0x110>
 8003392:	9207      	str	r2, [sp, #28]
 8003394:	e014      	b.n	80033c0 <_svfiprintf_r+0x110>
 8003396:	eba0 0308 	sub.w	r3, r0, r8
 800339a:	fa09 f303 	lsl.w	r3, r9, r3
 800339e:	4313      	orrs	r3, r2
 80033a0:	46a2      	mov	sl, r4
 80033a2:	9304      	str	r3, [sp, #16]
 80033a4:	e7d2      	b.n	800334c <_svfiprintf_r+0x9c>
 80033a6:	9b03      	ldr	r3, [sp, #12]
 80033a8:	1d19      	adds	r1, r3, #4
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	9103      	str	r1, [sp, #12]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	bfbb      	ittet	lt
 80033b2:	425b      	neglt	r3, r3
 80033b4:	f042 0202 	orrlt.w	r2, r2, #2
 80033b8:	9307      	strge	r3, [sp, #28]
 80033ba:	9307      	strlt	r3, [sp, #28]
 80033bc:	bfb8      	it	lt
 80033be:	9204      	strlt	r2, [sp, #16]
 80033c0:	7823      	ldrb	r3, [r4, #0]
 80033c2:	2b2e      	cmp	r3, #46	; 0x2e
 80033c4:	d10c      	bne.n	80033e0 <_svfiprintf_r+0x130>
 80033c6:	7863      	ldrb	r3, [r4, #1]
 80033c8:	2b2a      	cmp	r3, #42	; 0x2a
 80033ca:	d134      	bne.n	8003436 <_svfiprintf_r+0x186>
 80033cc:	9b03      	ldr	r3, [sp, #12]
 80033ce:	3402      	adds	r4, #2
 80033d0:	1d1a      	adds	r2, r3, #4
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	9203      	str	r2, [sp, #12]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	bfb8      	it	lt
 80033da:	f04f 33ff 	movlt.w	r3, #4294967295
 80033de:	9305      	str	r3, [sp, #20]
 80033e0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800349c <_svfiprintf_r+0x1ec>
 80033e4:	2203      	movs	r2, #3
 80033e6:	4650      	mov	r0, sl
 80033e8:	7821      	ldrb	r1, [r4, #0]
 80033ea:	f000 fa1d 	bl	8003828 <memchr>
 80033ee:	b138      	cbz	r0, 8003400 <_svfiprintf_r+0x150>
 80033f0:	2240      	movs	r2, #64	; 0x40
 80033f2:	9b04      	ldr	r3, [sp, #16]
 80033f4:	eba0 000a 	sub.w	r0, r0, sl
 80033f8:	4082      	lsls	r2, r0
 80033fa:	4313      	orrs	r3, r2
 80033fc:	3401      	adds	r4, #1
 80033fe:	9304      	str	r3, [sp, #16]
 8003400:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003404:	2206      	movs	r2, #6
 8003406:	4826      	ldr	r0, [pc, #152]	; (80034a0 <_svfiprintf_r+0x1f0>)
 8003408:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800340c:	f000 fa0c 	bl	8003828 <memchr>
 8003410:	2800      	cmp	r0, #0
 8003412:	d038      	beq.n	8003486 <_svfiprintf_r+0x1d6>
 8003414:	4b23      	ldr	r3, [pc, #140]	; (80034a4 <_svfiprintf_r+0x1f4>)
 8003416:	bb1b      	cbnz	r3, 8003460 <_svfiprintf_r+0x1b0>
 8003418:	9b03      	ldr	r3, [sp, #12]
 800341a:	3307      	adds	r3, #7
 800341c:	f023 0307 	bic.w	r3, r3, #7
 8003420:	3308      	adds	r3, #8
 8003422:	9303      	str	r3, [sp, #12]
 8003424:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003426:	4433      	add	r3, r6
 8003428:	9309      	str	r3, [sp, #36]	; 0x24
 800342a:	e768      	b.n	80032fe <_svfiprintf_r+0x4e>
 800342c:	460c      	mov	r4, r1
 800342e:	2001      	movs	r0, #1
 8003430:	fb0c 3202 	mla	r2, ip, r2, r3
 8003434:	e7a6      	b.n	8003384 <_svfiprintf_r+0xd4>
 8003436:	2300      	movs	r3, #0
 8003438:	f04f 0c0a 	mov.w	ip, #10
 800343c:	4619      	mov	r1, r3
 800343e:	3401      	adds	r4, #1
 8003440:	9305      	str	r3, [sp, #20]
 8003442:	4620      	mov	r0, r4
 8003444:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003448:	3a30      	subs	r2, #48	; 0x30
 800344a:	2a09      	cmp	r2, #9
 800344c:	d903      	bls.n	8003456 <_svfiprintf_r+0x1a6>
 800344e:	2b00      	cmp	r3, #0
 8003450:	d0c6      	beq.n	80033e0 <_svfiprintf_r+0x130>
 8003452:	9105      	str	r1, [sp, #20]
 8003454:	e7c4      	b.n	80033e0 <_svfiprintf_r+0x130>
 8003456:	4604      	mov	r4, r0
 8003458:	2301      	movs	r3, #1
 800345a:	fb0c 2101 	mla	r1, ip, r1, r2
 800345e:	e7f0      	b.n	8003442 <_svfiprintf_r+0x192>
 8003460:	ab03      	add	r3, sp, #12
 8003462:	9300      	str	r3, [sp, #0]
 8003464:	462a      	mov	r2, r5
 8003466:	4638      	mov	r0, r7
 8003468:	4b0f      	ldr	r3, [pc, #60]	; (80034a8 <_svfiprintf_r+0x1f8>)
 800346a:	a904      	add	r1, sp, #16
 800346c:	f3af 8000 	nop.w
 8003470:	1c42      	adds	r2, r0, #1
 8003472:	4606      	mov	r6, r0
 8003474:	d1d6      	bne.n	8003424 <_svfiprintf_r+0x174>
 8003476:	89ab      	ldrh	r3, [r5, #12]
 8003478:	065b      	lsls	r3, r3, #25
 800347a:	f53f af2d 	bmi.w	80032d8 <_svfiprintf_r+0x28>
 800347e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003480:	b01d      	add	sp, #116	; 0x74
 8003482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003486:	ab03      	add	r3, sp, #12
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	462a      	mov	r2, r5
 800348c:	4638      	mov	r0, r7
 800348e:	4b06      	ldr	r3, [pc, #24]	; (80034a8 <_svfiprintf_r+0x1f8>)
 8003490:	a904      	add	r1, sp, #16
 8003492:	f000 f87d 	bl	8003590 <_printf_i>
 8003496:	e7eb      	b.n	8003470 <_svfiprintf_r+0x1c0>
 8003498:	08003fb7 	.word	0x08003fb7
 800349c:	08003fbd 	.word	0x08003fbd
 80034a0:	08003fc1 	.word	0x08003fc1
 80034a4:	00000000 	.word	0x00000000
 80034a8:	080031fd 	.word	0x080031fd

080034ac <_printf_common>:
 80034ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034b0:	4616      	mov	r6, r2
 80034b2:	4699      	mov	r9, r3
 80034b4:	688a      	ldr	r2, [r1, #8]
 80034b6:	690b      	ldr	r3, [r1, #16]
 80034b8:	4607      	mov	r7, r0
 80034ba:	4293      	cmp	r3, r2
 80034bc:	bfb8      	it	lt
 80034be:	4613      	movlt	r3, r2
 80034c0:	6033      	str	r3, [r6, #0]
 80034c2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80034c6:	460c      	mov	r4, r1
 80034c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80034cc:	b10a      	cbz	r2, 80034d2 <_printf_common+0x26>
 80034ce:	3301      	adds	r3, #1
 80034d0:	6033      	str	r3, [r6, #0]
 80034d2:	6823      	ldr	r3, [r4, #0]
 80034d4:	0699      	lsls	r1, r3, #26
 80034d6:	bf42      	ittt	mi
 80034d8:	6833      	ldrmi	r3, [r6, #0]
 80034da:	3302      	addmi	r3, #2
 80034dc:	6033      	strmi	r3, [r6, #0]
 80034de:	6825      	ldr	r5, [r4, #0]
 80034e0:	f015 0506 	ands.w	r5, r5, #6
 80034e4:	d106      	bne.n	80034f4 <_printf_common+0x48>
 80034e6:	f104 0a19 	add.w	sl, r4, #25
 80034ea:	68e3      	ldr	r3, [r4, #12]
 80034ec:	6832      	ldr	r2, [r6, #0]
 80034ee:	1a9b      	subs	r3, r3, r2
 80034f0:	42ab      	cmp	r3, r5
 80034f2:	dc2b      	bgt.n	800354c <_printf_common+0xa0>
 80034f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80034f8:	1e13      	subs	r3, r2, #0
 80034fa:	6822      	ldr	r2, [r4, #0]
 80034fc:	bf18      	it	ne
 80034fe:	2301      	movne	r3, #1
 8003500:	0692      	lsls	r2, r2, #26
 8003502:	d430      	bmi.n	8003566 <_printf_common+0xba>
 8003504:	4649      	mov	r1, r9
 8003506:	4638      	mov	r0, r7
 8003508:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800350c:	47c0      	blx	r8
 800350e:	3001      	adds	r0, #1
 8003510:	d023      	beq.n	800355a <_printf_common+0xae>
 8003512:	6823      	ldr	r3, [r4, #0]
 8003514:	6922      	ldr	r2, [r4, #16]
 8003516:	f003 0306 	and.w	r3, r3, #6
 800351a:	2b04      	cmp	r3, #4
 800351c:	bf14      	ite	ne
 800351e:	2500      	movne	r5, #0
 8003520:	6833      	ldreq	r3, [r6, #0]
 8003522:	f04f 0600 	mov.w	r6, #0
 8003526:	bf08      	it	eq
 8003528:	68e5      	ldreq	r5, [r4, #12]
 800352a:	f104 041a 	add.w	r4, r4, #26
 800352e:	bf08      	it	eq
 8003530:	1aed      	subeq	r5, r5, r3
 8003532:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003536:	bf08      	it	eq
 8003538:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800353c:	4293      	cmp	r3, r2
 800353e:	bfc4      	itt	gt
 8003540:	1a9b      	subgt	r3, r3, r2
 8003542:	18ed      	addgt	r5, r5, r3
 8003544:	42b5      	cmp	r5, r6
 8003546:	d11a      	bne.n	800357e <_printf_common+0xd2>
 8003548:	2000      	movs	r0, #0
 800354a:	e008      	b.n	800355e <_printf_common+0xb2>
 800354c:	2301      	movs	r3, #1
 800354e:	4652      	mov	r2, sl
 8003550:	4649      	mov	r1, r9
 8003552:	4638      	mov	r0, r7
 8003554:	47c0      	blx	r8
 8003556:	3001      	adds	r0, #1
 8003558:	d103      	bne.n	8003562 <_printf_common+0xb6>
 800355a:	f04f 30ff 	mov.w	r0, #4294967295
 800355e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003562:	3501      	adds	r5, #1
 8003564:	e7c1      	b.n	80034ea <_printf_common+0x3e>
 8003566:	2030      	movs	r0, #48	; 0x30
 8003568:	18e1      	adds	r1, r4, r3
 800356a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800356e:	1c5a      	adds	r2, r3, #1
 8003570:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003574:	4422      	add	r2, r4
 8003576:	3302      	adds	r3, #2
 8003578:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800357c:	e7c2      	b.n	8003504 <_printf_common+0x58>
 800357e:	2301      	movs	r3, #1
 8003580:	4622      	mov	r2, r4
 8003582:	4649      	mov	r1, r9
 8003584:	4638      	mov	r0, r7
 8003586:	47c0      	blx	r8
 8003588:	3001      	adds	r0, #1
 800358a:	d0e6      	beq.n	800355a <_printf_common+0xae>
 800358c:	3601      	adds	r6, #1
 800358e:	e7d9      	b.n	8003544 <_printf_common+0x98>

08003590 <_printf_i>:
 8003590:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003594:	7e0f      	ldrb	r7, [r1, #24]
 8003596:	4691      	mov	r9, r2
 8003598:	2f78      	cmp	r7, #120	; 0x78
 800359a:	4680      	mov	r8, r0
 800359c:	460c      	mov	r4, r1
 800359e:	469a      	mov	sl, r3
 80035a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80035a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80035a6:	d807      	bhi.n	80035b8 <_printf_i+0x28>
 80035a8:	2f62      	cmp	r7, #98	; 0x62
 80035aa:	d80a      	bhi.n	80035c2 <_printf_i+0x32>
 80035ac:	2f00      	cmp	r7, #0
 80035ae:	f000 80d5 	beq.w	800375c <_printf_i+0x1cc>
 80035b2:	2f58      	cmp	r7, #88	; 0x58
 80035b4:	f000 80c1 	beq.w	800373a <_printf_i+0x1aa>
 80035b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80035c0:	e03a      	b.n	8003638 <_printf_i+0xa8>
 80035c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80035c6:	2b15      	cmp	r3, #21
 80035c8:	d8f6      	bhi.n	80035b8 <_printf_i+0x28>
 80035ca:	a101      	add	r1, pc, #4	; (adr r1, 80035d0 <_printf_i+0x40>)
 80035cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80035d0:	08003629 	.word	0x08003629
 80035d4:	0800363d 	.word	0x0800363d
 80035d8:	080035b9 	.word	0x080035b9
 80035dc:	080035b9 	.word	0x080035b9
 80035e0:	080035b9 	.word	0x080035b9
 80035e4:	080035b9 	.word	0x080035b9
 80035e8:	0800363d 	.word	0x0800363d
 80035ec:	080035b9 	.word	0x080035b9
 80035f0:	080035b9 	.word	0x080035b9
 80035f4:	080035b9 	.word	0x080035b9
 80035f8:	080035b9 	.word	0x080035b9
 80035fc:	08003743 	.word	0x08003743
 8003600:	08003669 	.word	0x08003669
 8003604:	080036fd 	.word	0x080036fd
 8003608:	080035b9 	.word	0x080035b9
 800360c:	080035b9 	.word	0x080035b9
 8003610:	08003765 	.word	0x08003765
 8003614:	080035b9 	.word	0x080035b9
 8003618:	08003669 	.word	0x08003669
 800361c:	080035b9 	.word	0x080035b9
 8003620:	080035b9 	.word	0x080035b9
 8003624:	08003705 	.word	0x08003705
 8003628:	682b      	ldr	r3, [r5, #0]
 800362a:	1d1a      	adds	r2, r3, #4
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	602a      	str	r2, [r5, #0]
 8003630:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003634:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003638:	2301      	movs	r3, #1
 800363a:	e0a0      	b.n	800377e <_printf_i+0x1ee>
 800363c:	6820      	ldr	r0, [r4, #0]
 800363e:	682b      	ldr	r3, [r5, #0]
 8003640:	0607      	lsls	r7, r0, #24
 8003642:	f103 0104 	add.w	r1, r3, #4
 8003646:	6029      	str	r1, [r5, #0]
 8003648:	d501      	bpl.n	800364e <_printf_i+0xbe>
 800364a:	681e      	ldr	r6, [r3, #0]
 800364c:	e003      	b.n	8003656 <_printf_i+0xc6>
 800364e:	0646      	lsls	r6, r0, #25
 8003650:	d5fb      	bpl.n	800364a <_printf_i+0xba>
 8003652:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003656:	2e00      	cmp	r6, #0
 8003658:	da03      	bge.n	8003662 <_printf_i+0xd2>
 800365a:	232d      	movs	r3, #45	; 0x2d
 800365c:	4276      	negs	r6, r6
 800365e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003662:	230a      	movs	r3, #10
 8003664:	4859      	ldr	r0, [pc, #356]	; (80037cc <_printf_i+0x23c>)
 8003666:	e012      	b.n	800368e <_printf_i+0xfe>
 8003668:	682b      	ldr	r3, [r5, #0]
 800366a:	6820      	ldr	r0, [r4, #0]
 800366c:	1d19      	adds	r1, r3, #4
 800366e:	6029      	str	r1, [r5, #0]
 8003670:	0605      	lsls	r5, r0, #24
 8003672:	d501      	bpl.n	8003678 <_printf_i+0xe8>
 8003674:	681e      	ldr	r6, [r3, #0]
 8003676:	e002      	b.n	800367e <_printf_i+0xee>
 8003678:	0641      	lsls	r1, r0, #25
 800367a:	d5fb      	bpl.n	8003674 <_printf_i+0xe4>
 800367c:	881e      	ldrh	r6, [r3, #0]
 800367e:	2f6f      	cmp	r7, #111	; 0x6f
 8003680:	bf0c      	ite	eq
 8003682:	2308      	moveq	r3, #8
 8003684:	230a      	movne	r3, #10
 8003686:	4851      	ldr	r0, [pc, #324]	; (80037cc <_printf_i+0x23c>)
 8003688:	2100      	movs	r1, #0
 800368a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800368e:	6865      	ldr	r5, [r4, #4]
 8003690:	2d00      	cmp	r5, #0
 8003692:	bfa8      	it	ge
 8003694:	6821      	ldrge	r1, [r4, #0]
 8003696:	60a5      	str	r5, [r4, #8]
 8003698:	bfa4      	itt	ge
 800369a:	f021 0104 	bicge.w	r1, r1, #4
 800369e:	6021      	strge	r1, [r4, #0]
 80036a0:	b90e      	cbnz	r6, 80036a6 <_printf_i+0x116>
 80036a2:	2d00      	cmp	r5, #0
 80036a4:	d04b      	beq.n	800373e <_printf_i+0x1ae>
 80036a6:	4615      	mov	r5, r2
 80036a8:	fbb6 f1f3 	udiv	r1, r6, r3
 80036ac:	fb03 6711 	mls	r7, r3, r1, r6
 80036b0:	5dc7      	ldrb	r7, [r0, r7]
 80036b2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80036b6:	4637      	mov	r7, r6
 80036b8:	42bb      	cmp	r3, r7
 80036ba:	460e      	mov	r6, r1
 80036bc:	d9f4      	bls.n	80036a8 <_printf_i+0x118>
 80036be:	2b08      	cmp	r3, #8
 80036c0:	d10b      	bne.n	80036da <_printf_i+0x14a>
 80036c2:	6823      	ldr	r3, [r4, #0]
 80036c4:	07de      	lsls	r6, r3, #31
 80036c6:	d508      	bpl.n	80036da <_printf_i+0x14a>
 80036c8:	6923      	ldr	r3, [r4, #16]
 80036ca:	6861      	ldr	r1, [r4, #4]
 80036cc:	4299      	cmp	r1, r3
 80036ce:	bfde      	ittt	le
 80036d0:	2330      	movle	r3, #48	; 0x30
 80036d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80036d6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80036da:	1b52      	subs	r2, r2, r5
 80036dc:	6122      	str	r2, [r4, #16]
 80036de:	464b      	mov	r3, r9
 80036e0:	4621      	mov	r1, r4
 80036e2:	4640      	mov	r0, r8
 80036e4:	f8cd a000 	str.w	sl, [sp]
 80036e8:	aa03      	add	r2, sp, #12
 80036ea:	f7ff fedf 	bl	80034ac <_printf_common>
 80036ee:	3001      	adds	r0, #1
 80036f0:	d14a      	bne.n	8003788 <_printf_i+0x1f8>
 80036f2:	f04f 30ff 	mov.w	r0, #4294967295
 80036f6:	b004      	add	sp, #16
 80036f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036fc:	6823      	ldr	r3, [r4, #0]
 80036fe:	f043 0320 	orr.w	r3, r3, #32
 8003702:	6023      	str	r3, [r4, #0]
 8003704:	2778      	movs	r7, #120	; 0x78
 8003706:	4832      	ldr	r0, [pc, #200]	; (80037d0 <_printf_i+0x240>)
 8003708:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800370c:	6823      	ldr	r3, [r4, #0]
 800370e:	6829      	ldr	r1, [r5, #0]
 8003710:	061f      	lsls	r7, r3, #24
 8003712:	f851 6b04 	ldr.w	r6, [r1], #4
 8003716:	d402      	bmi.n	800371e <_printf_i+0x18e>
 8003718:	065f      	lsls	r7, r3, #25
 800371a:	bf48      	it	mi
 800371c:	b2b6      	uxthmi	r6, r6
 800371e:	07df      	lsls	r7, r3, #31
 8003720:	bf48      	it	mi
 8003722:	f043 0320 	orrmi.w	r3, r3, #32
 8003726:	6029      	str	r1, [r5, #0]
 8003728:	bf48      	it	mi
 800372a:	6023      	strmi	r3, [r4, #0]
 800372c:	b91e      	cbnz	r6, 8003736 <_printf_i+0x1a6>
 800372e:	6823      	ldr	r3, [r4, #0]
 8003730:	f023 0320 	bic.w	r3, r3, #32
 8003734:	6023      	str	r3, [r4, #0]
 8003736:	2310      	movs	r3, #16
 8003738:	e7a6      	b.n	8003688 <_printf_i+0xf8>
 800373a:	4824      	ldr	r0, [pc, #144]	; (80037cc <_printf_i+0x23c>)
 800373c:	e7e4      	b.n	8003708 <_printf_i+0x178>
 800373e:	4615      	mov	r5, r2
 8003740:	e7bd      	b.n	80036be <_printf_i+0x12e>
 8003742:	682b      	ldr	r3, [r5, #0]
 8003744:	6826      	ldr	r6, [r4, #0]
 8003746:	1d18      	adds	r0, r3, #4
 8003748:	6961      	ldr	r1, [r4, #20]
 800374a:	6028      	str	r0, [r5, #0]
 800374c:	0635      	lsls	r5, r6, #24
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	d501      	bpl.n	8003756 <_printf_i+0x1c6>
 8003752:	6019      	str	r1, [r3, #0]
 8003754:	e002      	b.n	800375c <_printf_i+0x1cc>
 8003756:	0670      	lsls	r0, r6, #25
 8003758:	d5fb      	bpl.n	8003752 <_printf_i+0x1c2>
 800375a:	8019      	strh	r1, [r3, #0]
 800375c:	2300      	movs	r3, #0
 800375e:	4615      	mov	r5, r2
 8003760:	6123      	str	r3, [r4, #16]
 8003762:	e7bc      	b.n	80036de <_printf_i+0x14e>
 8003764:	682b      	ldr	r3, [r5, #0]
 8003766:	2100      	movs	r1, #0
 8003768:	1d1a      	adds	r2, r3, #4
 800376a:	602a      	str	r2, [r5, #0]
 800376c:	681d      	ldr	r5, [r3, #0]
 800376e:	6862      	ldr	r2, [r4, #4]
 8003770:	4628      	mov	r0, r5
 8003772:	f000 f859 	bl	8003828 <memchr>
 8003776:	b108      	cbz	r0, 800377c <_printf_i+0x1ec>
 8003778:	1b40      	subs	r0, r0, r5
 800377a:	6060      	str	r0, [r4, #4]
 800377c:	6863      	ldr	r3, [r4, #4]
 800377e:	6123      	str	r3, [r4, #16]
 8003780:	2300      	movs	r3, #0
 8003782:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003786:	e7aa      	b.n	80036de <_printf_i+0x14e>
 8003788:	462a      	mov	r2, r5
 800378a:	4649      	mov	r1, r9
 800378c:	4640      	mov	r0, r8
 800378e:	6923      	ldr	r3, [r4, #16]
 8003790:	47d0      	blx	sl
 8003792:	3001      	adds	r0, #1
 8003794:	d0ad      	beq.n	80036f2 <_printf_i+0x162>
 8003796:	6823      	ldr	r3, [r4, #0]
 8003798:	079b      	lsls	r3, r3, #30
 800379a:	d413      	bmi.n	80037c4 <_printf_i+0x234>
 800379c:	68e0      	ldr	r0, [r4, #12]
 800379e:	9b03      	ldr	r3, [sp, #12]
 80037a0:	4298      	cmp	r0, r3
 80037a2:	bfb8      	it	lt
 80037a4:	4618      	movlt	r0, r3
 80037a6:	e7a6      	b.n	80036f6 <_printf_i+0x166>
 80037a8:	2301      	movs	r3, #1
 80037aa:	4632      	mov	r2, r6
 80037ac:	4649      	mov	r1, r9
 80037ae:	4640      	mov	r0, r8
 80037b0:	47d0      	blx	sl
 80037b2:	3001      	adds	r0, #1
 80037b4:	d09d      	beq.n	80036f2 <_printf_i+0x162>
 80037b6:	3501      	adds	r5, #1
 80037b8:	68e3      	ldr	r3, [r4, #12]
 80037ba:	9903      	ldr	r1, [sp, #12]
 80037bc:	1a5b      	subs	r3, r3, r1
 80037be:	42ab      	cmp	r3, r5
 80037c0:	dcf2      	bgt.n	80037a8 <_printf_i+0x218>
 80037c2:	e7eb      	b.n	800379c <_printf_i+0x20c>
 80037c4:	2500      	movs	r5, #0
 80037c6:	f104 0619 	add.w	r6, r4, #25
 80037ca:	e7f5      	b.n	80037b8 <_printf_i+0x228>
 80037cc:	08003fc8 	.word	0x08003fc8
 80037d0:	08003fd9 	.word	0x08003fd9

080037d4 <memmove>:
 80037d4:	4288      	cmp	r0, r1
 80037d6:	b510      	push	{r4, lr}
 80037d8:	eb01 0402 	add.w	r4, r1, r2
 80037dc:	d902      	bls.n	80037e4 <memmove+0x10>
 80037de:	4284      	cmp	r4, r0
 80037e0:	4623      	mov	r3, r4
 80037e2:	d807      	bhi.n	80037f4 <memmove+0x20>
 80037e4:	1e43      	subs	r3, r0, #1
 80037e6:	42a1      	cmp	r1, r4
 80037e8:	d008      	beq.n	80037fc <memmove+0x28>
 80037ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80037ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80037f2:	e7f8      	b.n	80037e6 <memmove+0x12>
 80037f4:	4601      	mov	r1, r0
 80037f6:	4402      	add	r2, r0
 80037f8:	428a      	cmp	r2, r1
 80037fa:	d100      	bne.n	80037fe <memmove+0x2a>
 80037fc:	bd10      	pop	{r4, pc}
 80037fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003802:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003806:	e7f7      	b.n	80037f8 <memmove+0x24>

08003808 <_sbrk_r>:
 8003808:	b538      	push	{r3, r4, r5, lr}
 800380a:	2300      	movs	r3, #0
 800380c:	4d05      	ldr	r5, [pc, #20]	; (8003824 <_sbrk_r+0x1c>)
 800380e:	4604      	mov	r4, r0
 8003810:	4608      	mov	r0, r1
 8003812:	602b      	str	r3, [r5, #0]
 8003814:	f7fc fe58 	bl	80004c8 <_sbrk>
 8003818:	1c43      	adds	r3, r0, #1
 800381a:	d102      	bne.n	8003822 <_sbrk_r+0x1a>
 800381c:	682b      	ldr	r3, [r5, #0]
 800381e:	b103      	cbz	r3, 8003822 <_sbrk_r+0x1a>
 8003820:	6023      	str	r3, [r4, #0]
 8003822:	bd38      	pop	{r3, r4, r5, pc}
 8003824:	2000034c 	.word	0x2000034c

08003828 <memchr>:
 8003828:	4603      	mov	r3, r0
 800382a:	b510      	push	{r4, lr}
 800382c:	b2c9      	uxtb	r1, r1
 800382e:	4402      	add	r2, r0
 8003830:	4293      	cmp	r3, r2
 8003832:	4618      	mov	r0, r3
 8003834:	d101      	bne.n	800383a <memchr+0x12>
 8003836:	2000      	movs	r0, #0
 8003838:	e003      	b.n	8003842 <memchr+0x1a>
 800383a:	7804      	ldrb	r4, [r0, #0]
 800383c:	3301      	adds	r3, #1
 800383e:	428c      	cmp	r4, r1
 8003840:	d1f6      	bne.n	8003830 <memchr+0x8>
 8003842:	bd10      	pop	{r4, pc}

08003844 <_realloc_r>:
 8003844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003848:	4680      	mov	r8, r0
 800384a:	4614      	mov	r4, r2
 800384c:	460e      	mov	r6, r1
 800384e:	b921      	cbnz	r1, 800385a <_realloc_r+0x16>
 8003850:	4611      	mov	r1, r2
 8003852:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003856:	f7ff bc45 	b.w	80030e4 <_malloc_r>
 800385a:	b92a      	cbnz	r2, 8003868 <_realloc_r+0x24>
 800385c:	f7ff fbda 	bl	8003014 <_free_r>
 8003860:	4625      	mov	r5, r4
 8003862:	4628      	mov	r0, r5
 8003864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003868:	f000 f81b 	bl	80038a2 <_malloc_usable_size_r>
 800386c:	4284      	cmp	r4, r0
 800386e:	4607      	mov	r7, r0
 8003870:	d802      	bhi.n	8003878 <_realloc_r+0x34>
 8003872:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003876:	d812      	bhi.n	800389e <_realloc_r+0x5a>
 8003878:	4621      	mov	r1, r4
 800387a:	4640      	mov	r0, r8
 800387c:	f7ff fc32 	bl	80030e4 <_malloc_r>
 8003880:	4605      	mov	r5, r0
 8003882:	2800      	cmp	r0, #0
 8003884:	d0ed      	beq.n	8003862 <_realloc_r+0x1e>
 8003886:	42bc      	cmp	r4, r7
 8003888:	4622      	mov	r2, r4
 800388a:	4631      	mov	r1, r6
 800388c:	bf28      	it	cs
 800388e:	463a      	movcs	r2, r7
 8003890:	f7ff fbb2 	bl	8002ff8 <memcpy>
 8003894:	4631      	mov	r1, r6
 8003896:	4640      	mov	r0, r8
 8003898:	f7ff fbbc 	bl	8003014 <_free_r>
 800389c:	e7e1      	b.n	8003862 <_realloc_r+0x1e>
 800389e:	4635      	mov	r5, r6
 80038a0:	e7df      	b.n	8003862 <_realloc_r+0x1e>

080038a2 <_malloc_usable_size_r>:
 80038a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038a6:	1f18      	subs	r0, r3, #4
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	bfbc      	itt	lt
 80038ac:	580b      	ldrlt	r3, [r1, r0]
 80038ae:	18c0      	addlt	r0, r0, r3
 80038b0:	4770      	bx	lr
	...

080038b4 <_init>:
 80038b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038b6:	bf00      	nop
 80038b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ba:	bc08      	pop	{r3}
 80038bc:	469e      	mov	lr, r3
 80038be:	4770      	bx	lr

080038c0 <_fini>:
 80038c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038c2:	bf00      	nop
 80038c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038c6:	bc08      	pop	{r3}
 80038c8:	469e      	mov	lr, r3
 80038ca:	4770      	bx	lr
