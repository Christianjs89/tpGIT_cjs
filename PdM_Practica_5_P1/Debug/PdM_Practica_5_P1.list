
PdM_Practica_5_P1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002534  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  08002640  08002640  00012640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a50  08002a50  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08002a50  08002a50  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a50  08002a50  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a50  08002a50  00012a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a54  08002a54  00012a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002a58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  2000005c  08002ab4  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08002ab4  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006a58  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000014ce  00000000  00000000  00026b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000650  00000000  00000000  00027ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004c8  00000000  00000000  00028640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001630e  00000000  00000000  00028b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008204  00000000  00000000  0003ee16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00080470  00000000  00000000  0004701a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001d48  00000000  00000000  000c748c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000c91d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002628 	.word	0x08002628

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08002628 	.word	0x08002628

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b5b0      	push	{r4, r5, r7, lr}
 800014e:	b08c      	sub	sp, #48	; 0x30
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fbd9 	bl	8000908 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f863 	bl	8000220 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f8a3 	bl	80002a4 <MX_GPIO_Init>
  //MX_USART2_UART_Init(); // no utilizar
  /* USER CODE BEGIN 2 */
  uartInit(); // inicializar uart / usar uartState para dar aviso?
 800015e:	f000 fa17 	bl	8000590 <uartInit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t crlf[] = "\r\n";
 8000162:	4a2a      	ldr	r2, [pc, #168]	; (800020c <main+0xc0>)
 8000164:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000168:	6812      	ldr	r2, [r2, #0]
 800016a:	4611      	mov	r1, r2
 800016c:	8019      	strh	r1, [r3, #0]
 800016e:	3302      	adds	r3, #2
 8000170:	0c12      	lsrs	r2, r2, #16
 8000172:	701a      	strb	r2, [r3, #0]

  uint8_t texto1[] = "TEXTO";
 8000174:	4a26      	ldr	r2, [pc, #152]	; (8000210 <main+0xc4>)
 8000176:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800017a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800017e:	6018      	str	r0, [r3, #0]
 8000180:	3304      	adds	r3, #4
 8000182:	8019      	strh	r1, [r3, #0]
  uartSendString(&texto1);
 8000184:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000188:	4618      	mov	r0, r3
 800018a:	f000 fa43 	bl	8000614 <uartSendString>
  uartSendString(&crlf);
 800018e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000192:	4618      	mov	r0, r3
 8000194:	f000 fa3e 	bl	8000614 <uartSendString>

  uint8_t texto2[] = "STRING";
 8000198:	4a1e      	ldr	r2, [pc, #120]	; (8000214 <main+0xc8>)
 800019a:	f107 031c 	add.w	r3, r7, #28
 800019e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80001a2:	6018      	str	r0, [r3, #0]
 80001a4:	3304      	adds	r3, #4
 80001a6:	8019      	strh	r1, [r3, #0]
 80001a8:	3302      	adds	r3, #2
 80001aa:	0c0a      	lsrs	r2, r1, #16
 80001ac:	701a      	strb	r2, [r3, #0]
  uartSendStringSize(&texto2, 3);
 80001ae:	f107 031c 	add.w	r3, r7, #28
 80001b2:	2103      	movs	r1, #3
 80001b4:	4618      	mov	r0, r3
 80001b6:	f000 fa4f 	bl	8000658 <uartSendStringSize>
  uartSendString(&crlf);
 80001ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80001be:	4618      	mov	r0, r3
 80001c0:	f000 fa28 	bl	8000614 <uartSendString>

  uint8_t texto4[] = "\r\nIngresar texto: ";
 80001c4:	4b14      	ldr	r3, [pc, #80]	; (8000218 <main+0xcc>)
 80001c6:	f107 0408 	add.w	r4, r7, #8
 80001ca:	461d      	mov	r5, r3
 80001cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001d0:	682b      	ldr	r3, [r5, #0]
 80001d2:	461a      	mov	r2, r3
 80001d4:	8022      	strh	r2, [r4, #0]
 80001d6:	3402      	adds	r4, #2
 80001d8:	0c1b      	lsrs	r3, r3, #16
 80001da:	7023      	strb	r3, [r4, #0]
  uartSendString(&texto4);
 80001dc:	f107 0308 	add.w	r3, r7, #8
 80001e0:	4618      	mov	r0, r3
 80001e2:	f000 fa17 	bl	8000614 <uartSendString>

  uint8_t texto3[RECEIVE_SIZE];
  uartReceiveStringSize(&texto3, RECEIVE_SIZE);
 80001e6:	1d3b      	adds	r3, r7, #4
 80001e8:	2104      	movs	r1, #4
 80001ea:	4618      	mov	r0, r3
 80001ec:	f000 fa62 	bl	80006b4 <uartReceiveStringSize>
  uartSendString(&texto3);
 80001f0:	1d3b      	adds	r3, r7, #4
 80001f2:	4618      	mov	r0, r3
 80001f4:	f000 fa0e 	bl	8000614 <uartSendString>

  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80001f8:	2120      	movs	r1, #32
 80001fa:	4808      	ldr	r0, [pc, #32]	; (800021c <main+0xd0>)
 80001fc:	f000 feb4 	bl	8000f68 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000200:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000204:	f000 fbe2 	bl	80009cc <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000208:	e7f6      	b.n	80001f8 <main+0xac>
 800020a:	bf00      	nop
 800020c:	08002640 	.word	0x08002640
 8000210:	08002644 	.word	0x08002644
 8000214:	0800264c 	.word	0x0800264c
 8000218:	08002654 	.word	0x08002654
 800021c:	40010800 	.word	0x40010800

08000220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b090      	sub	sp, #64	; 0x40
 8000224:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000226:	f107 0318 	add.w	r3, r7, #24
 800022a:	2228      	movs	r2, #40	; 0x28
 800022c:	2100      	movs	r1, #0
 800022e:	4618      	mov	r0, r3
 8000230:	f001 fd68 	bl	8001d04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000234:	1d3b      	adds	r3, r7, #4
 8000236:	2200      	movs	r2, #0
 8000238:	601a      	str	r2, [r3, #0]
 800023a:	605a      	str	r2, [r3, #4]
 800023c:	609a      	str	r2, [r3, #8]
 800023e:	60da      	str	r2, [r3, #12]
 8000240:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000242:	2302      	movs	r3, #2
 8000244:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000246:	2301      	movs	r3, #1
 8000248:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800024a:	2310      	movs	r3, #16
 800024c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800024e:	2302      	movs	r3, #2
 8000250:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000252:	2300      	movs	r3, #0
 8000254:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000256:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800025a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025c:	f107 0318 	add.w	r3, r7, #24
 8000260:	4618      	mov	r0, r3
 8000262:	f000 febd 	bl	8000fe0 <HAL_RCC_OscConfig>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d001      	beq.n	8000270 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800026c:	f000 f888 	bl	8000380 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000270:	230f      	movs	r3, #15
 8000272:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000274:	2302      	movs	r3, #2
 8000276:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000278:	2300      	movs	r3, #0
 800027a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800027c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000280:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	2102      	movs	r1, #2
 800028a:	4618      	mov	r0, r3
 800028c:	f001 f92a 	bl	80014e4 <HAL_RCC_ClockConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000296:	f000 f873 	bl	8000380 <Error_Handler>
  }
}
 800029a:	bf00      	nop
 800029c:	3740      	adds	r7, #64	; 0x40
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
	...

080002a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b088      	sub	sp, #32
 80002a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002aa:	f107 0310 	add.w	r3, r7, #16
 80002ae:	2200      	movs	r2, #0
 80002b0:	601a      	str	r2, [r3, #0]
 80002b2:	605a      	str	r2, [r3, #4]
 80002b4:	609a      	str	r2, [r3, #8]
 80002b6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002b8:	4b2d      	ldr	r3, [pc, #180]	; (8000370 <MX_GPIO_Init+0xcc>)
 80002ba:	699b      	ldr	r3, [r3, #24]
 80002bc:	4a2c      	ldr	r2, [pc, #176]	; (8000370 <MX_GPIO_Init+0xcc>)
 80002be:	f043 0310 	orr.w	r3, r3, #16
 80002c2:	6193      	str	r3, [r2, #24]
 80002c4:	4b2a      	ldr	r3, [pc, #168]	; (8000370 <MX_GPIO_Init+0xcc>)
 80002c6:	699b      	ldr	r3, [r3, #24]
 80002c8:	f003 0310 	and.w	r3, r3, #16
 80002cc:	60fb      	str	r3, [r7, #12]
 80002ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002d0:	4b27      	ldr	r3, [pc, #156]	; (8000370 <MX_GPIO_Init+0xcc>)
 80002d2:	699b      	ldr	r3, [r3, #24]
 80002d4:	4a26      	ldr	r2, [pc, #152]	; (8000370 <MX_GPIO_Init+0xcc>)
 80002d6:	f043 0320 	orr.w	r3, r3, #32
 80002da:	6193      	str	r3, [r2, #24]
 80002dc:	4b24      	ldr	r3, [pc, #144]	; (8000370 <MX_GPIO_Init+0xcc>)
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	f003 0320 	and.w	r3, r3, #32
 80002e4:	60bb      	str	r3, [r7, #8]
 80002e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e8:	4b21      	ldr	r3, [pc, #132]	; (8000370 <MX_GPIO_Init+0xcc>)
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	4a20      	ldr	r2, [pc, #128]	; (8000370 <MX_GPIO_Init+0xcc>)
 80002ee:	f043 0304 	orr.w	r3, r3, #4
 80002f2:	6193      	str	r3, [r2, #24]
 80002f4:	4b1e      	ldr	r3, [pc, #120]	; (8000370 <MX_GPIO_Init+0xcc>)
 80002f6:	699b      	ldr	r3, [r3, #24]
 80002f8:	f003 0304 	and.w	r3, r3, #4
 80002fc:	607b      	str	r3, [r7, #4]
 80002fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000300:	4b1b      	ldr	r3, [pc, #108]	; (8000370 <MX_GPIO_Init+0xcc>)
 8000302:	699b      	ldr	r3, [r3, #24]
 8000304:	4a1a      	ldr	r2, [pc, #104]	; (8000370 <MX_GPIO_Init+0xcc>)
 8000306:	f043 0308 	orr.w	r3, r3, #8
 800030a:	6193      	str	r3, [r2, #24]
 800030c:	4b18      	ldr	r3, [pc, #96]	; (8000370 <MX_GPIO_Init+0xcc>)
 800030e:	699b      	ldr	r3, [r3, #24]
 8000310:	f003 0308 	and.w	r3, r3, #8
 8000314:	603b      	str	r3, [r7, #0]
 8000316:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000318:	2200      	movs	r2, #0
 800031a:	2120      	movs	r1, #32
 800031c:	4815      	ldr	r0, [pc, #84]	; (8000374 <MX_GPIO_Init+0xd0>)
 800031e:	f000 fe0b 	bl	8000f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000322:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000326:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000328:	4b13      	ldr	r3, [pc, #76]	; (8000378 <MX_GPIO_Init+0xd4>)
 800032a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800032c:	2300      	movs	r3, #0
 800032e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000330:	f107 0310 	add.w	r3, r7, #16
 8000334:	4619      	mov	r1, r3
 8000336:	4811      	ldr	r0, [pc, #68]	; (800037c <MX_GPIO_Init+0xd8>)
 8000338:	f000 fc7a 	bl	8000c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800033c:	2320      	movs	r3, #32
 800033e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000340:	2301      	movs	r3, #1
 8000342:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000344:	2300      	movs	r3, #0
 8000346:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000348:	2302      	movs	r3, #2
 800034a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800034c:	f107 0310 	add.w	r3, r7, #16
 8000350:	4619      	mov	r1, r3
 8000352:	4808      	ldr	r0, [pc, #32]	; (8000374 <MX_GPIO_Init+0xd0>)
 8000354:	f000 fc6c 	bl	8000c30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000358:	2200      	movs	r2, #0
 800035a:	2100      	movs	r1, #0
 800035c:	2028      	movs	r0, #40	; 0x28
 800035e:	f000 fc30 	bl	8000bc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000362:	2028      	movs	r0, #40	; 0x28
 8000364:	f000 fc49 	bl	8000bfa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000368:	bf00      	nop
 800036a:	3720      	adds	r7, #32
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}
 8000370:	40021000 	.word	0x40021000
 8000374:	40010800 	.word	0x40010800
 8000378:	10110000 	.word	0x10110000
 800037c:	40011000 	.word	0x40011000

08000380 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000384:	b672      	cpsid	i
}
 8000386:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000388:	e7fe      	b.n	8000388 <Error_Handler+0x8>
	...

0800038c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800038c:	b480      	push	{r7}
 800038e:	b085      	sub	sp, #20
 8000390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000392:	4b15      	ldr	r3, [pc, #84]	; (80003e8 <HAL_MspInit+0x5c>)
 8000394:	699b      	ldr	r3, [r3, #24]
 8000396:	4a14      	ldr	r2, [pc, #80]	; (80003e8 <HAL_MspInit+0x5c>)
 8000398:	f043 0301 	orr.w	r3, r3, #1
 800039c:	6193      	str	r3, [r2, #24]
 800039e:	4b12      	ldr	r3, [pc, #72]	; (80003e8 <HAL_MspInit+0x5c>)
 80003a0:	699b      	ldr	r3, [r3, #24]
 80003a2:	f003 0301 	and.w	r3, r3, #1
 80003a6:	60bb      	str	r3, [r7, #8]
 80003a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003aa:	4b0f      	ldr	r3, [pc, #60]	; (80003e8 <HAL_MspInit+0x5c>)
 80003ac:	69db      	ldr	r3, [r3, #28]
 80003ae:	4a0e      	ldr	r2, [pc, #56]	; (80003e8 <HAL_MspInit+0x5c>)
 80003b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003b4:	61d3      	str	r3, [r2, #28]
 80003b6:	4b0c      	ldr	r3, [pc, #48]	; (80003e8 <HAL_MspInit+0x5c>)
 80003b8:	69db      	ldr	r3, [r3, #28]
 80003ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003be:	607b      	str	r3, [r7, #4]
 80003c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003c2:	4b0a      	ldr	r3, [pc, #40]	; (80003ec <HAL_MspInit+0x60>)
 80003c4:	685b      	ldr	r3, [r3, #4]
 80003c6:	60fb      	str	r3, [r7, #12]
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003ce:	60fb      	str	r3, [r7, #12]
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003d6:	60fb      	str	r3, [r7, #12]
 80003d8:	4a04      	ldr	r2, [pc, #16]	; (80003ec <HAL_MspInit+0x60>)
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003de:	bf00      	nop
 80003e0:	3714      	adds	r7, #20
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bc80      	pop	{r7}
 80003e6:	4770      	bx	lr
 80003e8:	40021000 	.word	0x40021000
 80003ec:	40010000 	.word	0x40010000

080003f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b088      	sub	sp, #32
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f8:	f107 0310 	add.w	r3, r7, #16
 80003fc:	2200      	movs	r2, #0
 80003fe:	601a      	str	r2, [r3, #0]
 8000400:	605a      	str	r2, [r3, #4]
 8000402:	609a      	str	r2, [r3, #8]
 8000404:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	4a15      	ldr	r2, [pc, #84]	; (8000460 <HAL_UART_MspInit+0x70>)
 800040c:	4293      	cmp	r3, r2
 800040e:	d123      	bne.n	8000458 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000410:	4b14      	ldr	r3, [pc, #80]	; (8000464 <HAL_UART_MspInit+0x74>)
 8000412:	69db      	ldr	r3, [r3, #28]
 8000414:	4a13      	ldr	r2, [pc, #76]	; (8000464 <HAL_UART_MspInit+0x74>)
 8000416:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800041a:	61d3      	str	r3, [r2, #28]
 800041c:	4b11      	ldr	r3, [pc, #68]	; (8000464 <HAL_UART_MspInit+0x74>)
 800041e:	69db      	ldr	r3, [r3, #28]
 8000420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000424:	60fb      	str	r3, [r7, #12]
 8000426:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000428:	4b0e      	ldr	r3, [pc, #56]	; (8000464 <HAL_UART_MspInit+0x74>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	4a0d      	ldr	r2, [pc, #52]	; (8000464 <HAL_UART_MspInit+0x74>)
 800042e:	f043 0304 	orr.w	r3, r3, #4
 8000432:	6193      	str	r3, [r2, #24]
 8000434:	4b0b      	ldr	r3, [pc, #44]	; (8000464 <HAL_UART_MspInit+0x74>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	f003 0304 	and.w	r3, r3, #4
 800043c:	60bb      	str	r3, [r7, #8]
 800043e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000440:	230c      	movs	r3, #12
 8000442:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000444:	2302      	movs	r3, #2
 8000446:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000448:	2302      	movs	r3, #2
 800044a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800044c:	f107 0310 	add.w	r3, r7, #16
 8000450:	4619      	mov	r1, r3
 8000452:	4805      	ldr	r0, [pc, #20]	; (8000468 <HAL_UART_MspInit+0x78>)
 8000454:	f000 fbec 	bl	8000c30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000458:	bf00      	nop
 800045a:	3720      	adds	r7, #32
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	40004400 	.word	0x40004400
 8000464:	40021000 	.word	0x40021000
 8000468:	40010800 	.word	0x40010800

0800046c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000470:	e7fe      	b.n	8000470 <NMI_Handler+0x4>

08000472 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000472:	b480      	push	{r7}
 8000474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000476:	e7fe      	b.n	8000476 <HardFault_Handler+0x4>

08000478 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800047c:	e7fe      	b.n	800047c <MemManage_Handler+0x4>

0800047e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800047e:	b480      	push	{r7}
 8000480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000482:	e7fe      	b.n	8000482 <BusFault_Handler+0x4>

08000484 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000488:	e7fe      	b.n	8000488 <UsageFault_Handler+0x4>

0800048a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800048a:	b480      	push	{r7}
 800048c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800048e:	bf00      	nop
 8000490:	46bd      	mov	sp, r7
 8000492:	bc80      	pop	{r7}
 8000494:	4770      	bx	lr

08000496 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000496:	b480      	push	{r7}
 8000498:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800049a:	bf00      	nop
 800049c:	46bd      	mov	sp, r7
 800049e:	bc80      	pop	{r7}
 80004a0:	4770      	bx	lr

080004a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004a2:	b480      	push	{r7}
 80004a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004a6:	bf00      	nop
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bc80      	pop	{r7}
 80004ac:	4770      	bx	lr

080004ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004ae:	b580      	push	{r7, lr}
 80004b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004b2:	f000 fa6f 	bl	8000994 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004b6:	bf00      	nop
 80004b8:	bd80      	pop	{r7, pc}

080004ba <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80004ba:	b580      	push	{r7, lr}
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80004be:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80004c2:	f000 fd6b 	bl	8000f9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
	...

080004cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b086      	sub	sp, #24
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004d4:	4a14      	ldr	r2, [pc, #80]	; (8000528 <_sbrk+0x5c>)
 80004d6:	4b15      	ldr	r3, [pc, #84]	; (800052c <_sbrk+0x60>)
 80004d8:	1ad3      	subs	r3, r2, r3
 80004da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004dc:	697b      	ldr	r3, [r7, #20]
 80004de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004e0:	4b13      	ldr	r3, [pc, #76]	; (8000530 <_sbrk+0x64>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d102      	bne.n	80004ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004e8:	4b11      	ldr	r3, [pc, #68]	; (8000530 <_sbrk+0x64>)
 80004ea:	4a12      	ldr	r2, [pc, #72]	; (8000534 <_sbrk+0x68>)
 80004ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004ee:	4b10      	ldr	r3, [pc, #64]	; (8000530 <_sbrk+0x64>)
 80004f0:	681a      	ldr	r2, [r3, #0]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	4413      	add	r3, r2
 80004f6:	693a      	ldr	r2, [r7, #16]
 80004f8:	429a      	cmp	r2, r3
 80004fa:	d207      	bcs.n	800050c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004fc:	f001 fc0a 	bl	8001d14 <__errno>
 8000500:	4603      	mov	r3, r0
 8000502:	220c      	movs	r2, #12
 8000504:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000506:	f04f 33ff 	mov.w	r3, #4294967295
 800050a:	e009      	b.n	8000520 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800050c:	4b08      	ldr	r3, [pc, #32]	; (8000530 <_sbrk+0x64>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000512:	4b07      	ldr	r3, [pc, #28]	; (8000530 <_sbrk+0x64>)
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	4413      	add	r3, r2
 800051a:	4a05      	ldr	r2, [pc, #20]	; (8000530 <_sbrk+0x64>)
 800051c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800051e:	68fb      	ldr	r3, [r7, #12]
}
 8000520:	4618      	mov	r0, r3
 8000522:	3718      	adds	r7, #24
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	20005000 	.word	0x20005000
 800052c:	00000400 	.word	0x00000400
 8000530:	20000078 	.word	0x20000078
 8000534:	20000210 	.word	0x20000210

08000538 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800053c:	bf00      	nop
 800053e:	46bd      	mov	sp, r7
 8000540:	bc80      	pop	{r7}
 8000542:	4770      	bx	lr

08000544 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000544:	f7ff fff8 	bl	8000538 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000548:	480b      	ldr	r0, [pc, #44]	; (8000578 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800054a:	490c      	ldr	r1, [pc, #48]	; (800057c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800054c:	4a0c      	ldr	r2, [pc, #48]	; (8000580 <LoopFillZerobss+0x16>)
  movs r3, #0
 800054e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000550:	e002      	b.n	8000558 <LoopCopyDataInit>

08000552 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000552:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000554:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000556:	3304      	adds	r3, #4

08000558 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000558:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800055a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800055c:	d3f9      	bcc.n	8000552 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800055e:	4a09      	ldr	r2, [pc, #36]	; (8000584 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000560:	4c09      	ldr	r4, [pc, #36]	; (8000588 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000562:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000564:	e001      	b.n	800056a <LoopFillZerobss>

08000566 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000566:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000568:	3204      	adds	r2, #4

0800056a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800056a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800056c:	d3fb      	bcc.n	8000566 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800056e:	f001 fbd7 	bl	8001d20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000572:	f7ff fdeb 	bl	800014c <main>
  bx lr
 8000576:	4770      	bx	lr
  ldr r0, =_sdata
 8000578:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800057c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000580:	08002a58 	.word	0x08002a58
  ldr r2, =_sbss
 8000584:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000588:	20000210 	.word	0x20000210

0800058c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800058c:	e7fe      	b.n	800058c <ADC1_2_IRQHandler>
	...

08000590 <uartInit>:

/* > Descripcion: Inicializa la uart con la configuracion preestablecida y envia dicha config a la terminal
 * > Parametro: ninguno
 * > Retorno: retorna un boolt_t true en caso exito o false caso contrario
 */
bool_t uartInit(){
 8000590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000592:	b091      	sub	sp, #68	; 0x44
 8000594:	af0e      	add	r7, sp, #56	; 0x38
	// uartHandle >> estructura de dato UART_HandleTypeDef declarada en API_uart.h
	bool_t returnFlag = false;
 8000596:	2300      	movs	r3, #0
 8000598:	71fb      	strb	r3, [r7, #7]

	uartHandle.Instance = USE_USART; // instancia de la uart >> usb conectado a usart2
 800059a:	4b1c      	ldr	r3, [pc, #112]	; (800060c <uartInit+0x7c>)
 800059c:	4a1c      	ldr	r2, [pc, #112]	; (8000610 <uartInit+0x80>)
 800059e:	601a      	str	r2, [r3, #0]
	uartHandle.Init.BaudRate = 9600; // baudrate tipico
 80005a0:	4b1a      	ldr	r3, [pc, #104]	; (800060c <uartInit+0x7c>)
 80005a2:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80005a6:	605a      	str	r2, [r3, #4]
	uartHandle.Init.WordLength = UART_WORDLENGTH_8B; // tamano de los datos >> 8 bits
 80005a8:	4b18      	ldr	r3, [pc, #96]	; (800060c <uartInit+0x7c>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	609a      	str	r2, [r3, #8]
	uartHandle.Init.StopBits = UART_STOPBITS_1; // cantidad de stop bits >> 1 solo
 80005ae:	4b17      	ldr	r3, [pc, #92]	; (800060c <uartInit+0x7c>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	60da      	str	r2, [r3, #12]
	uartHandle.Init.Parity = UART_PARITY_NONE; // tipo de paridad >> ninguno
 80005b4:	4b15      	ldr	r3, [pc, #84]	; (800060c <uartInit+0x7c>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	611a      	str	r2, [r3, #16]
	uartHandle.Init.Mode = UART_MODE_TX_RX; // modo recepcion/recepcion habilitado
 80005ba:	4b14      	ldr	r3, [pc, #80]	; (800060c <uartInit+0x7c>)
 80005bc:	220c      	movs	r2, #12
 80005be:	615a      	str	r2, [r3, #20]
	uartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE; // sin control de flujo por hardware
 80005c0:	4b12      	ldr	r3, [pc, #72]	; (800060c <uartInit+0x7c>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	619a      	str	r2, [r3, #24]
	uartHandle.Init.OverSampling = UART_OVERSAMPLING_16; // cantidad de muestras por tiempo de bit
 80005c6:	4b11      	ldr	r3, [pc, #68]	; (800060c <uartInit+0x7c>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	61da      	str	r2, [r3, #28]

	if (HAL_UART_Init(&uartHandle) == HAL_OK){ // retornar true si es exitosa la configuracion
 80005cc:	480f      	ldr	r0, [pc, #60]	; (800060c <uartInit+0x7c>)
 80005ce:	f001 f917 	bl	8001800 <HAL_UART_Init>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d113      	bne.n	8000600 <uartInit+0x70>
		print_uart_config(uartHandle); // imprimir configuracion si la config fue exitosa
 80005d8:	4e0c      	ldr	r6, [pc, #48]	; (800060c <uartInit+0x7c>)
 80005da:	466d      	mov	r5, sp
 80005dc:	f106 0410 	add.w	r4, r6, #16
 80005e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80005f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80005f4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80005f8:	f000 f88c 	bl	8000714 <print_uart_config>
		returnFlag = true;
 80005fc:	2301      	movs	r3, #1
 80005fe:	71fb      	strb	r3, [r7, #7]
	}

	return returnFlag;
 8000600:	79fb      	ldrb	r3, [r7, #7]
}
 8000602:	4618      	mov	r0, r3
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800060a:	bf00      	nop
 800060c:	2000007c 	.word	0x2000007c
 8000610:	40004400 	.word	0x40004400

08000614 <uartSendString>:
/* > Descripcion: envia un string (buffer <pstring>) por la uart, finalizando en el caracter NULL
 * > Parametro: <pstring> puntero del tipo uint8_t
 * 				El buffer de envio tendra una cantidad maxima de caracteres definida en <SEND_BUFFER_MAX_SIZE>
 * > Retorno: ninguno
 */
void uartSendString(uint8_t * pstring){
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	// pstring se envia sin tamano debe recorrerse incrementando la direccion por aritmetica de pointers
	uint16_t index = 0; // indice para recorrer array pstring, admite hasta 2^16 caracteres
 800061c:	2300      	movs	r3, #0
 800061e:	81fb      	strh	r3, [r7, #14]
	while(1){
		if( (*(pstring+index) == '\0') || (index > SEND_BUFFER_MAX_SIZE) ) break; // al encontrarse el NULL salir de funcion
 8000620:	89fb      	ldrh	r3, [r7, #14]
 8000622:	687a      	ldr	r2, [r7, #4]
 8000624:	4413      	add	r3, r2
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d00e      	beq.n	800064a <uartSendString+0x36>
 800062c:	89fb      	ldrh	r3, [r7, #14]
 800062e:	2b7f      	cmp	r3, #127	; 0x7f
 8000630:	d80b      	bhi.n	800064a <uartSendString+0x36>
		HAL_UART_Transmit(&uartHandle, (pstring+index), 1, 100); // enviar caracter x caracter
 8000632:	89fb      	ldrh	r3, [r7, #14]
 8000634:	687a      	ldr	r2, [r7, #4]
 8000636:	18d1      	adds	r1, r2, r3
 8000638:	2364      	movs	r3, #100	; 0x64
 800063a:	2201      	movs	r2, #1
 800063c:	4805      	ldr	r0, [pc, #20]	; (8000654 <uartSendString+0x40>)
 800063e:	f001 f92f 	bl	80018a0 <HAL_UART_Transmit>
		index++;
 8000642:	89fb      	ldrh	r3, [r7, #14]
 8000644:	3301      	adds	r3, #1
 8000646:	81fb      	strh	r3, [r7, #14]
		if( (*(pstring+index) == '\0') || (index > SEND_BUFFER_MAX_SIZE) ) break; // al encontrarse el NULL salir de funcion
 8000648:	e7ea      	b.n	8000620 <uartSendString+0xc>
	}
}
 800064a:	bf00      	nop
 800064c:	3710      	adds	r7, #16
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	2000007c 	.word	0x2000007c

08000658 <uartSendStringSize>:
/* > Descripcion: envia una cantidad de caracteres contenidas en un string (buffer <pstring>) por la uart
 * > Parametro: <pstring> puntero del tipo uint8_t / <size> cantidad de caracteres a enviar rango [1-2^16]
 * 				El buffer de envio tendra una cantidad maxima de caracteres definida en <SEND_BUFFER_MAX_SIZE>
 * > Retorno: ninguno
 */
void uartSendStringSize(uint8_t * pstring, uint16_t size){
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	460b      	mov	r3, r1
 8000662:	807b      	strh	r3, [r7, #2]
	if( size > SEND_BUFFER_MAX_SIZE) size = SEND_BUFFER_MAX_SIZE;
 8000664:	887b      	ldrh	r3, [r7, #2]
 8000666:	2b7f      	cmp	r3, #127	; 0x7f
 8000668:	d901      	bls.n	800066e <uartSendStringSize+0x16>
 800066a:	237f      	movs	r3, #127	; 0x7f
 800066c:	807b      	strh	r3, [r7, #2]
	if( size < 1) size = 1;
 800066e:	887b      	ldrh	r3, [r7, #2]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d101      	bne.n	8000678 <uartSendStringSize+0x20>
 8000674:	2301      	movs	r3, #1
 8000676:	807b      	strh	r3, [r7, #2]

	uint16_t index = 0;
 8000678:	2300      	movs	r3, #0
 800067a:	81fb      	strh	r3, [r7, #14]
	while(1){
		if(( *(pstring+index) == '\0') || (index == size) ) break; // finalizar while al encontrar NULL o alzancar la cant de caracteres indicada
 800067c:	89fb      	ldrh	r3, [r7, #14]
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	4413      	add	r3, r2
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d00f      	beq.n	80006a8 <uartSendStringSize+0x50>
 8000688:	89fa      	ldrh	r2, [r7, #14]
 800068a:	887b      	ldrh	r3, [r7, #2]
 800068c:	429a      	cmp	r2, r3
 800068e:	d00b      	beq.n	80006a8 <uartSendStringSize+0x50>
		HAL_UART_Transmit(&uartHandle, (pstring+index), 1, 100); // enviar caracter x caracter
 8000690:	89fb      	ldrh	r3, [r7, #14]
 8000692:	687a      	ldr	r2, [r7, #4]
 8000694:	18d1      	adds	r1, r2, r3
 8000696:	2364      	movs	r3, #100	; 0x64
 8000698:	2201      	movs	r2, #1
 800069a:	4805      	ldr	r0, [pc, #20]	; (80006b0 <uartSendStringSize+0x58>)
 800069c:	f001 f900 	bl	80018a0 <HAL_UART_Transmit>
		index++;
 80006a0:	89fb      	ldrh	r3, [r7, #14]
 80006a2:	3301      	adds	r3, #1
 80006a4:	81fb      	strh	r3, [r7, #14]
		if(( *(pstring+index) == '\0') || (index == size) ) break; // finalizar while al encontrar NULL o alzancar la cant de caracteres indicada
 80006a6:	e7e9      	b.n	800067c <uartSendStringSize+0x24>
	}
}
 80006a8:	bf00      	nop
 80006aa:	3710      	adds	r7, #16
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	2000007c 	.word	0x2000007c

080006b4 <uartReceiveStringSize>:
/* > Descripcion: recibe una cantidad de caracteres contenidas en un string por la uart y las almacena en el buffer <pstring>
 * > Parametro: <pstring> puntero del tipo uint8_t / <size> cantidad de caracteres a recibir rango [1-2^16]
 * > 			El buffer de recepcion tendra una cantidad maxima de caracteres definida en <RECEIVE_BUFFER_MAX_SIZE>
 * > Retorno: ninguno
 */
void uartReceiveStringSize(uint8_t * pstring, uint16_t size){
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	460b      	mov	r3, r1
 80006be:	807b      	strh	r3, [r7, #2]
	// limitar el rango del buffer de entrada
	if(size > RECEIVE_BUFFER_MAX_SIZE) size = RECEIVE_BUFFER_MAX_SIZE;
 80006c0:	887b      	ldrh	r3, [r7, #2]
 80006c2:	2b3f      	cmp	r3, #63	; 0x3f
 80006c4:	d901      	bls.n	80006ca <uartReceiveStringSize+0x16>
 80006c6:	233f      	movs	r3, #63	; 0x3f
 80006c8:	807b      	strh	r3, [r7, #2]
	if(size < 1 ) size = 1;
 80006ca:	887b      	ldrh	r3, [r7, #2]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d101      	bne.n	80006d4 <uartReceiveStringSize+0x20>
 80006d0:	2301      	movs	r3, #1
 80006d2:	807b      	strh	r3, [r7, #2]

	uint16_t index = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	81fb      	strh	r3, [r7, #14]
	while(1){
		if( index == size ) break; // finalizar while al alzancar la cant de caracteres indicada
 80006d8:	89fa      	ldrh	r2, [r7, #14]
 80006da:	887b      	ldrh	r3, [r7, #2]
 80006dc:	429a      	cmp	r2, r3
 80006de:	d00c      	beq.n	80006fa <uartReceiveStringSize+0x46>
		HAL_UART_Receive(&uartHandle, (pstring+index), 1, HAL_MAX_DELAY); // recibir y esperar cada caracter hasta <size>
 80006e0:	89fb      	ldrh	r3, [r7, #14]
 80006e2:	687a      	ldr	r2, [r7, #4]
 80006e4:	18d1      	adds	r1, r2, r3
 80006e6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ea:	2201      	movs	r2, #1
 80006ec:	4808      	ldr	r0, [pc, #32]	; (8000710 <uartReceiveStringSize+0x5c>)
 80006ee:	f001 f95a 	bl	80019a6 <HAL_UART_Receive>
		index++;
 80006f2:	89fb      	ldrh	r3, [r7, #14]
 80006f4:	3301      	adds	r3, #1
 80006f6:	81fb      	strh	r3, [r7, #14]
		if( index == size ) break; // finalizar while al alzancar la cant de caracteres indicada
 80006f8:	e7ee      	b.n	80006d8 <uartReceiveStringSize+0x24>
 80006fa:	bf00      	nop
	}

	*(pstring+index) = '\0'; // agregar el NULL al final para conformar el string
 80006fc:	89fb      	ldrh	r3, [r7, #14]
 80006fe:	687a      	ldr	r2, [r7, #4]
 8000700:	4413      	add	r3, r2
 8000702:	2200      	movs	r2, #0
 8000704:	701a      	strb	r2, [r3, #0]
}
 8000706:	bf00      	nop
 8000708:	3710      	adds	r7, #16
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	2000007c 	.word	0x2000007c

08000714 <print_uart_config>:

/* > Descripcion: imprime a la terminal serie la configuracion de la UART
 * > Parametro: <uart> handler de la uart
 * > Retorno: ninguno
 */
static void print_uart_config(UART_HandleTypeDef uart){
 8000714:	b084      	sub	sp, #16
 8000716:	b580      	push	{r7, lr}
 8000718:	b088      	sub	sp, #32
 800071a:	af00      	add	r7, sp, #0
 800071c:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8000720:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uartSendString("\r\n**************************** INICIO ****************************\r\n");
 8000724:	4859      	ldr	r0, [pc, #356]	; (800088c <print_uart_config+0x178>)
 8000726:	f7ff ff75 	bl	8000614 <uartSendString>
	// Instance
	if (uart.Instance == USART1){
 800072a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800072c:	4a58      	ldr	r2, [pc, #352]	; (8000890 <print_uart_config+0x17c>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d103      	bne.n	800073a <print_uart_config+0x26>
		uartSendString("* Instance:		USART1\r\n");
 8000732:	4858      	ldr	r0, [pc, #352]	; (8000894 <print_uart_config+0x180>)
 8000734:	f7ff ff6e 	bl	8000614 <uartSendString>
 8000738:	e012      	b.n	8000760 <print_uart_config+0x4c>
	}
	else if (uart.Instance == USART2){
 800073a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800073c:	4a56      	ldr	r2, [pc, #344]	; (8000898 <print_uart_config+0x184>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d103      	bne.n	800074a <print_uart_config+0x36>
		uartSendString("* Instance:		USART2\r\n");
 8000742:	4856      	ldr	r0, [pc, #344]	; (800089c <print_uart_config+0x188>)
 8000744:	f7ff ff66 	bl	8000614 <uartSendString>
 8000748:	e00a      	b.n	8000760 <print_uart_config+0x4c>
	}
	else if (uart.Instance == USART3) {
 800074a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800074c:	4a54      	ldr	r2, [pc, #336]	; (80008a0 <print_uart_config+0x18c>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d103      	bne.n	800075a <print_uart_config+0x46>
		uartSendString("* Instance:		USART3\r\n");
 8000752:	4854      	ldr	r0, [pc, #336]	; (80008a4 <print_uart_config+0x190>)
 8000754:	f7ff ff5e 	bl	8000614 <uartSendString>
 8000758:	e002      	b.n	8000760 <print_uart_config+0x4c>
	}
	else {
		uartSendString("* Instance:		ERROR\r\n");
 800075a:	4853      	ldr	r0, [pc, #332]	; (80008a8 <print_uart_config+0x194>)
 800075c:	f7ff ff5a 	bl	8000614 <uartSendString>
	}

	// baudrate
	char br[32];
	sprintf(br,"* BaudRate:		%d\r\n", uart.Init.BaudRate);
 8000760:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000762:	463b      	mov	r3, r7
 8000764:	4951      	ldr	r1, [pc, #324]	; (80008ac <print_uart_config+0x198>)
 8000766:	4618      	mov	r0, r3
 8000768:	f001 faac 	bl	8001cc4 <siprintf>
	uartSendString(br);
 800076c:	463b      	mov	r3, r7
 800076e:	4618      	mov	r0, r3
 8000770:	f7ff ff50 	bl	8000614 <uartSendString>

	// WordLength
	if (uart.Init.WordLength == UART_WORDLENGTH_8B){
 8000774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000776:	2b00      	cmp	r3, #0
 8000778:	d103      	bne.n	8000782 <print_uart_config+0x6e>
		uartSendString("* WordLength:		UART_WORDLENGTH_8B\r\n");
 800077a:	484d      	ldr	r0, [pc, #308]	; (80008b0 <print_uart_config+0x19c>)
 800077c:	f7ff ff4a 	bl	8000614 <uartSendString>
 8000780:	e00a      	b.n	8000798 <print_uart_config+0x84>
	}
	else if (uart.Init.WordLength == UART_WORDLENGTH_9B){
 8000782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000784:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000788:	d103      	bne.n	8000792 <print_uart_config+0x7e>
		uartSendString("* WordLength:		UART_WORDLENGTH_9B\r\n");
 800078a:	484a      	ldr	r0, [pc, #296]	; (80008b4 <print_uart_config+0x1a0>)
 800078c:	f7ff ff42 	bl	8000614 <uartSendString>
 8000790:	e002      	b.n	8000798 <print_uart_config+0x84>
	}
	else{
		uartSendString("* WordLength:		ERROR\r\n");
 8000792:	4849      	ldr	r0, [pc, #292]	; (80008b8 <print_uart_config+0x1a4>)
 8000794:	f7ff ff3e 	bl	8000614 <uartSendString>
	}

	// stopbits
	if ( uart.Init.StopBits == UART_STOPBITS_1){
 8000798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800079a:	2b00      	cmp	r3, #0
 800079c:	d103      	bne.n	80007a6 <print_uart_config+0x92>
		uartSendString("* StopBits:		UART_STOPBITS_1\r\n");
 800079e:	4847      	ldr	r0, [pc, #284]	; (80008bc <print_uart_config+0x1a8>)
 80007a0:	f7ff ff38 	bl	8000614 <uartSendString>
 80007a4:	e00a      	b.n	80007bc <print_uart_config+0xa8>
	}
	else if (uart.Init.StopBits == UART_STOPBITS_2){
 80007a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007ac:	d103      	bne.n	80007b6 <print_uart_config+0xa2>
		uartSendString("* StopBits:		UART_STOPBITS_2\r\n");
 80007ae:	4844      	ldr	r0, [pc, #272]	; (80008c0 <print_uart_config+0x1ac>)
 80007b0:	f7ff ff30 	bl	8000614 <uartSendString>
 80007b4:	e002      	b.n	80007bc <print_uart_config+0xa8>
	}
	else{
		uartSendString("* StopBits:		ERROR\r\n");
 80007b6:	4843      	ldr	r0, [pc, #268]	; (80008c4 <print_uart_config+0x1b0>)
 80007b8:	f7ff ff2c 	bl	8000614 <uartSendString>
	}

	// Parity
	if (uart.Init.Parity == UART_PARITY_NONE){
 80007bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d103      	bne.n	80007ca <print_uart_config+0xb6>
		uartSendString("* Parity:		UART_PARITY_NONE\r\n");
 80007c2:	4841      	ldr	r0, [pc, #260]	; (80008c8 <print_uart_config+0x1b4>)
 80007c4:	f7ff ff26 	bl	8000614 <uartSendString>
 80007c8:	e012      	b.n	80007f0 <print_uart_config+0xdc>
	}
	else if (uart.Init.Parity == UART_PARITY_EVEN){
 80007ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80007cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80007d0:	d103      	bne.n	80007da <print_uart_config+0xc6>
		uartSendString("* Parity:		UART_PARITY_EVEN\r\n");
 80007d2:	483e      	ldr	r0, [pc, #248]	; (80008cc <print_uart_config+0x1b8>)
 80007d4:	f7ff ff1e 	bl	8000614 <uartSendString>
 80007d8:	e00a      	b.n	80007f0 <print_uart_config+0xdc>
	}
	else if (uart.Init.Parity == UART_PARITY_ODD){
 80007da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80007dc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80007e0:	d103      	bne.n	80007ea <print_uart_config+0xd6>
		uartSendString("* Parity:		UART_PARITY_ODD\r\n");
 80007e2:	483b      	ldr	r0, [pc, #236]	; (80008d0 <print_uart_config+0x1bc>)
 80007e4:	f7ff ff16 	bl	8000614 <uartSendString>
 80007e8:	e002      	b.n	80007f0 <print_uart_config+0xdc>
	}
	else{
		uartSendString("* Parity:		ERROR\r\n");
 80007ea:	483a      	ldr	r0, [pc, #232]	; (80008d4 <print_uart_config+0x1c0>)
 80007ec:	f7ff ff12 	bl	8000614 <uartSendString>
	}

	// mode
	if (uart.Init.Mode == UART_MODE_TX_RX){
 80007f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007f2:	2b0c      	cmp	r3, #12
 80007f4:	d103      	bne.n	80007fe <print_uart_config+0xea>
		uartSendString("* Mode:			UART_MODE_TX_RX\r\n");
 80007f6:	4838      	ldr	r0, [pc, #224]	; (80008d8 <print_uart_config+0x1c4>)
 80007f8:	f7ff ff0c 	bl	8000614 <uartSendString>
 80007fc:	e010      	b.n	8000820 <print_uart_config+0x10c>
	}
	else if (uart.Init.Mode == UART_MODE_RX){
 80007fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000800:	2b04      	cmp	r3, #4
 8000802:	d103      	bne.n	800080c <print_uart_config+0xf8>
		uartSendString("* Mode:			UART_MODE_RX\r\n");
 8000804:	4835      	ldr	r0, [pc, #212]	; (80008dc <print_uart_config+0x1c8>)
 8000806:	f7ff ff05 	bl	8000614 <uartSendString>
 800080a:	e009      	b.n	8000820 <print_uart_config+0x10c>
	}
	else if (uart.Init.Mode == UART_MODE_TX){
 800080c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800080e:	2b08      	cmp	r3, #8
 8000810:	d103      	bne.n	800081a <print_uart_config+0x106>
		uartSendString("* Mode:			UART_MODE_TX\r\n");
 8000812:	4833      	ldr	r0, [pc, #204]	; (80008e0 <print_uart_config+0x1cc>)
 8000814:	f7ff fefe 	bl	8000614 <uartSendString>
 8000818:	e002      	b.n	8000820 <print_uart_config+0x10c>
	}
	else{
		uartSendString("* Mode:			ERROR\r\n");
 800081a:	4832      	ldr	r0, [pc, #200]	; (80008e4 <print_uart_config+0x1d0>)
 800081c:	f7ff fefa 	bl	8000614 <uartSendString>
	}

	// flow control
	if (uart.Init.HwFlowCtl == UART_HWCONTROL_NONE){
 8000820:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000822:	2b00      	cmp	r3, #0
 8000824:	d103      	bne.n	800082e <print_uart_config+0x11a>
		uartSendString("* HwFlowCtl:		UART_HWCONTROL_NONE\r\n");
 8000826:	4830      	ldr	r0, [pc, #192]	; (80008e8 <print_uart_config+0x1d4>)
 8000828:	f7ff fef4 	bl	8000614 <uartSendString>
 800082c:	e01a      	b.n	8000864 <print_uart_config+0x150>
	}
	else if (uart.Init.HwFlowCtl == UART_HWCONTROL_RTS){
 800082e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000830:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000834:	d103      	bne.n	800083e <print_uart_config+0x12a>
		uartSendString("* HwFlowCtl:		UART_HWCONTROL_RTS\r\n");
 8000836:	482d      	ldr	r0, [pc, #180]	; (80008ec <print_uart_config+0x1d8>)
 8000838:	f7ff feec 	bl	8000614 <uartSendString>
 800083c:	e012      	b.n	8000864 <print_uart_config+0x150>
	}
	else if (uart.Init.HwFlowCtl == UART_HWCONTROL_CTS){
 800083e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000840:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000844:	d103      	bne.n	800084e <print_uart_config+0x13a>
		uartSendString("* HwFlowCtl:		UART_HWCONTROL_CTS\r\n");
 8000846:	482a      	ldr	r0, [pc, #168]	; (80008f0 <print_uart_config+0x1dc>)
 8000848:	f7ff fee4 	bl	8000614 <uartSendString>
 800084c:	e00a      	b.n	8000864 <print_uart_config+0x150>
	}
	else if (uart.Init.HwFlowCtl == UART_HWCONTROL_RTS_CTS){
 800084e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000850:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000854:	d103      	bne.n	800085e <print_uart_config+0x14a>
		uartSendString("* HwFlowCtl:		UART_HWCONTROL_RTS_CTS\r\n");
 8000856:	4827      	ldr	r0, [pc, #156]	; (80008f4 <print_uart_config+0x1e0>)
 8000858:	f7ff fedc 	bl	8000614 <uartSendString>
 800085c:	e002      	b.n	8000864 <print_uart_config+0x150>
	}
	else{
		uartSendString("* HwFlowCtl:		ERROR\r\n");
 800085e:	4826      	ldr	r0, [pc, #152]	; (80008f8 <print_uart_config+0x1e4>)
 8000860:	f7ff fed8 	bl	8000614 <uartSendString>
	}

	// oversampling
	if (uart.Init.OverSampling == UART_OVERSAMPLING_16){
 8000864:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000866:	2b00      	cmp	r3, #0
 8000868:	d103      	bne.n	8000872 <print_uart_config+0x15e>
		uartSendString("* OverSampling:		UART_OVERSAMPLING_16\r\n");
 800086a:	4824      	ldr	r0, [pc, #144]	; (80008fc <print_uart_config+0x1e8>)
 800086c:	f7ff fed2 	bl	8000614 <uartSendString>
 8000870:	e002      	b.n	8000878 <print_uart_config+0x164>
	}
	else{
		uartSendString("* OverSampling:		ERROR\r\n");
 8000872:	4823      	ldr	r0, [pc, #140]	; (8000900 <print_uart_config+0x1ec>)
 8000874:	f7ff fece 	bl	8000614 <uartSendString>
	}

	uartSendString("****************************************************************\r\n\r\n");
 8000878:	4822      	ldr	r0, [pc, #136]	; (8000904 <print_uart_config+0x1f0>)
 800087a:	f7ff fecb 	bl	8000614 <uartSendString>
}
 800087e:	bf00      	nop
 8000880:	3720      	adds	r7, #32
 8000882:	46bd      	mov	sp, r7
 8000884:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000888:	b004      	add	sp, #16
 800088a:	4770      	bx	lr
 800088c:	08002668 	.word	0x08002668
 8000890:	40013800 	.word	0x40013800
 8000894:	080026b0 	.word	0x080026b0
 8000898:	40004400 	.word	0x40004400
 800089c:	080026c8 	.word	0x080026c8
 80008a0:	40004800 	.word	0x40004800
 80008a4:	080026e0 	.word	0x080026e0
 80008a8:	080026f8 	.word	0x080026f8
 80008ac:	08002710 	.word	0x08002710
 80008b0:	08002724 	.word	0x08002724
 80008b4:	08002748 	.word	0x08002748
 80008b8:	0800276c 	.word	0x0800276c
 80008bc:	08002784 	.word	0x08002784
 80008c0:	080027a4 	.word	0x080027a4
 80008c4:	080027c4 	.word	0x080027c4
 80008c8:	080027dc 	.word	0x080027dc
 80008cc:	080027fc 	.word	0x080027fc
 80008d0:	0800281c 	.word	0x0800281c
 80008d4:	0800283c 	.word	0x0800283c
 80008d8:	08002850 	.word	0x08002850
 80008dc:	0800286c 	.word	0x0800286c
 80008e0:	08002888 	.word	0x08002888
 80008e4:	080028a4 	.word	0x080028a4
 80008e8:	080028b8 	.word	0x080028b8
 80008ec:	080028dc 	.word	0x080028dc
 80008f0:	08002900 	.word	0x08002900
 80008f4:	08002924 	.word	0x08002924
 80008f8:	0800294c 	.word	0x0800294c
 80008fc:	08002964 	.word	0x08002964
 8000900:	0800298c 	.word	0x0800298c
 8000904:	080029a8 	.word	0x080029a8

08000908 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800090c:	4b08      	ldr	r3, [pc, #32]	; (8000930 <HAL_Init+0x28>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a07      	ldr	r2, [pc, #28]	; (8000930 <HAL_Init+0x28>)
 8000912:	f043 0310 	orr.w	r3, r3, #16
 8000916:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000918:	2003      	movs	r0, #3
 800091a:	f000 f947 	bl	8000bac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800091e:	2000      	movs	r0, #0
 8000920:	f000 f808 	bl	8000934 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000924:	f7ff fd32 	bl	800038c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000928:	2300      	movs	r3, #0
}
 800092a:	4618      	mov	r0, r3
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40022000 	.word	0x40022000

08000934 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800093c:	4b12      	ldr	r3, [pc, #72]	; (8000988 <HAL_InitTick+0x54>)
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	4b12      	ldr	r3, [pc, #72]	; (800098c <HAL_InitTick+0x58>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	4619      	mov	r1, r3
 8000946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800094a:	fbb3 f3f1 	udiv	r3, r3, r1
 800094e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000952:	4618      	mov	r0, r3
 8000954:	f000 f95f 	bl	8000c16 <HAL_SYSTICK_Config>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800095e:	2301      	movs	r3, #1
 8000960:	e00e      	b.n	8000980 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2b0f      	cmp	r3, #15
 8000966:	d80a      	bhi.n	800097e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000968:	2200      	movs	r2, #0
 800096a:	6879      	ldr	r1, [r7, #4]
 800096c:	f04f 30ff 	mov.w	r0, #4294967295
 8000970:	f000 f927 	bl	8000bc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000974:	4a06      	ldr	r2, [pc, #24]	; (8000990 <HAL_InitTick+0x5c>)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800097a:	2300      	movs	r3, #0
 800097c:	e000      	b.n	8000980 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800097e:	2301      	movs	r3, #1
}
 8000980:	4618      	mov	r0, r3
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20000000 	.word	0x20000000
 800098c:	20000008 	.word	0x20000008
 8000990:	20000004 	.word	0x20000004

08000994 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000998:	4b05      	ldr	r3, [pc, #20]	; (80009b0 <HAL_IncTick+0x1c>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	461a      	mov	r2, r3
 800099e:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <HAL_IncTick+0x20>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4413      	add	r3, r2
 80009a4:	4a03      	ldr	r2, [pc, #12]	; (80009b4 <HAL_IncTick+0x20>)
 80009a6:	6013      	str	r3, [r2, #0]
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr
 80009b0:	20000008 	.word	0x20000008
 80009b4:	200000c4 	.word	0x200000c4

080009b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  return uwTick;
 80009bc:	4b02      	ldr	r3, [pc, #8]	; (80009c8 <HAL_GetTick+0x10>)
 80009be:	681b      	ldr	r3, [r3, #0]
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bc80      	pop	{r7}
 80009c6:	4770      	bx	lr
 80009c8:	200000c4 	.word	0x200000c4

080009cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009d4:	f7ff fff0 	bl	80009b8 <HAL_GetTick>
 80009d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009e4:	d005      	beq.n	80009f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009e6:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <HAL_Delay+0x44>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	461a      	mov	r2, r3
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	4413      	add	r3, r2
 80009f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009f2:	bf00      	nop
 80009f4:	f7ff ffe0 	bl	80009b8 <HAL_GetTick>
 80009f8:	4602      	mov	r2, r0
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	1ad3      	subs	r3, r2, r3
 80009fe:	68fa      	ldr	r2, [r7, #12]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d8f7      	bhi.n	80009f4 <HAL_Delay+0x28>
  {
  }
}
 8000a04:	bf00      	nop
 8000a06:	bf00      	nop
 8000a08:	3710      	adds	r7, #16
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000008 	.word	0x20000008

08000a14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b085      	sub	sp, #20
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	f003 0307 	and.w	r3, r3, #7
 8000a22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a24:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <__NVIC_SetPriorityGrouping+0x44>)
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a2a:	68ba      	ldr	r2, [r7, #8]
 8000a2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a30:	4013      	ands	r3, r2
 8000a32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a46:	4a04      	ldr	r2, [pc, #16]	; (8000a58 <__NVIC_SetPriorityGrouping+0x44>)
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	60d3      	str	r3, [r2, #12]
}
 8000a4c:	bf00      	nop
 8000a4e:	3714      	adds	r7, #20
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bc80      	pop	{r7}
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	e000ed00 	.word	0xe000ed00

08000a5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a60:	4b04      	ldr	r3, [pc, #16]	; (8000a74 <__NVIC_GetPriorityGrouping+0x18>)
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	0a1b      	lsrs	r3, r3, #8
 8000a66:	f003 0307 	and.w	r3, r3, #7
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bc80      	pop	{r7}
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	db0b      	blt.n	8000aa2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	f003 021f 	and.w	r2, r3, #31
 8000a90:	4906      	ldr	r1, [pc, #24]	; (8000aac <__NVIC_EnableIRQ+0x34>)
 8000a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a96:	095b      	lsrs	r3, r3, #5
 8000a98:	2001      	movs	r0, #1
 8000a9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr
 8000aac:	e000e100 	.word	0xe000e100

08000ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	6039      	str	r1, [r7, #0]
 8000aba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	db0a      	blt.n	8000ada <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	490c      	ldr	r1, [pc, #48]	; (8000afc <__NVIC_SetPriority+0x4c>)
 8000aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ace:	0112      	lsls	r2, r2, #4
 8000ad0:	b2d2      	uxtb	r2, r2
 8000ad2:	440b      	add	r3, r1
 8000ad4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ad8:	e00a      	b.n	8000af0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	b2da      	uxtb	r2, r3
 8000ade:	4908      	ldr	r1, [pc, #32]	; (8000b00 <__NVIC_SetPriority+0x50>)
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	f003 030f 	and.w	r3, r3, #15
 8000ae6:	3b04      	subs	r3, #4
 8000ae8:	0112      	lsls	r2, r2, #4
 8000aea:	b2d2      	uxtb	r2, r2
 8000aec:	440b      	add	r3, r1
 8000aee:	761a      	strb	r2, [r3, #24]
}
 8000af0:	bf00      	nop
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bc80      	pop	{r7}
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	e000e100 	.word	0xe000e100
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b089      	sub	sp, #36	; 0x24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	f003 0307 	and.w	r3, r3, #7
 8000b16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b18:	69fb      	ldr	r3, [r7, #28]
 8000b1a:	f1c3 0307 	rsb	r3, r3, #7
 8000b1e:	2b04      	cmp	r3, #4
 8000b20:	bf28      	it	cs
 8000b22:	2304      	movcs	r3, #4
 8000b24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	3304      	adds	r3, #4
 8000b2a:	2b06      	cmp	r3, #6
 8000b2c:	d902      	bls.n	8000b34 <NVIC_EncodePriority+0x30>
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	3b03      	subs	r3, #3
 8000b32:	e000      	b.n	8000b36 <NVIC_EncodePriority+0x32>
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b38:	f04f 32ff 	mov.w	r2, #4294967295
 8000b3c:	69bb      	ldr	r3, [r7, #24]
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	43da      	mvns	r2, r3
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	401a      	ands	r2, r3
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	fa01 f303 	lsl.w	r3, r1, r3
 8000b56:	43d9      	mvns	r1, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b5c:	4313      	orrs	r3, r2
         );
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3724      	adds	r7, #36	; 0x24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bc80      	pop	{r7}
 8000b66:	4770      	bx	lr

08000b68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3b01      	subs	r3, #1
 8000b74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b78:	d301      	bcc.n	8000b7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e00f      	b.n	8000b9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ba8 <SysTick_Config+0x40>)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3b01      	subs	r3, #1
 8000b84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b86:	210f      	movs	r1, #15
 8000b88:	f04f 30ff 	mov.w	r0, #4294967295
 8000b8c:	f7ff ff90 	bl	8000ab0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b90:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <SysTick_Config+0x40>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b96:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <SysTick_Config+0x40>)
 8000b98:	2207      	movs	r2, #7
 8000b9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b9c:	2300      	movs	r3, #0
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	e000e010 	.word	0xe000e010

08000bac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f7ff ff2d 	bl	8000a14 <__NVIC_SetPriorityGrouping>
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b086      	sub	sp, #24
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	4603      	mov	r3, r0
 8000bca:	60b9      	str	r1, [r7, #8]
 8000bcc:	607a      	str	r2, [r7, #4]
 8000bce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bd4:	f7ff ff42 	bl	8000a5c <__NVIC_GetPriorityGrouping>
 8000bd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	68b9      	ldr	r1, [r7, #8]
 8000bde:	6978      	ldr	r0, [r7, #20]
 8000be0:	f7ff ff90 	bl	8000b04 <NVIC_EncodePriority>
 8000be4:	4602      	mov	r2, r0
 8000be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bea:	4611      	mov	r1, r2
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff ff5f 	bl	8000ab0 <__NVIC_SetPriority>
}
 8000bf2:	bf00      	nop
 8000bf4:	3718      	adds	r7, #24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b082      	sub	sp, #8
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	4603      	mov	r3, r0
 8000c02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff ff35 	bl	8000a78 <__NVIC_EnableIRQ>
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b082      	sub	sp, #8
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f7ff ffa2 	bl	8000b68 <SysTick_Config>
 8000c24:	4603      	mov	r3, r0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
	...

08000c30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b08b      	sub	sp, #44	; 0x2c
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c42:	e169      	b.n	8000f18 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c44:	2201      	movs	r2, #1
 8000c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c48:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	69fa      	ldr	r2, [r7, #28]
 8000c54:	4013      	ands	r3, r2
 8000c56:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c58:	69ba      	ldr	r2, [r7, #24]
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	f040 8158 	bne.w	8000f12 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	4a9a      	ldr	r2, [pc, #616]	; (8000ed0 <HAL_GPIO_Init+0x2a0>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d05e      	beq.n	8000d2a <HAL_GPIO_Init+0xfa>
 8000c6c:	4a98      	ldr	r2, [pc, #608]	; (8000ed0 <HAL_GPIO_Init+0x2a0>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d875      	bhi.n	8000d5e <HAL_GPIO_Init+0x12e>
 8000c72:	4a98      	ldr	r2, [pc, #608]	; (8000ed4 <HAL_GPIO_Init+0x2a4>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d058      	beq.n	8000d2a <HAL_GPIO_Init+0xfa>
 8000c78:	4a96      	ldr	r2, [pc, #600]	; (8000ed4 <HAL_GPIO_Init+0x2a4>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d86f      	bhi.n	8000d5e <HAL_GPIO_Init+0x12e>
 8000c7e:	4a96      	ldr	r2, [pc, #600]	; (8000ed8 <HAL_GPIO_Init+0x2a8>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d052      	beq.n	8000d2a <HAL_GPIO_Init+0xfa>
 8000c84:	4a94      	ldr	r2, [pc, #592]	; (8000ed8 <HAL_GPIO_Init+0x2a8>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d869      	bhi.n	8000d5e <HAL_GPIO_Init+0x12e>
 8000c8a:	4a94      	ldr	r2, [pc, #592]	; (8000edc <HAL_GPIO_Init+0x2ac>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d04c      	beq.n	8000d2a <HAL_GPIO_Init+0xfa>
 8000c90:	4a92      	ldr	r2, [pc, #584]	; (8000edc <HAL_GPIO_Init+0x2ac>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d863      	bhi.n	8000d5e <HAL_GPIO_Init+0x12e>
 8000c96:	4a92      	ldr	r2, [pc, #584]	; (8000ee0 <HAL_GPIO_Init+0x2b0>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d046      	beq.n	8000d2a <HAL_GPIO_Init+0xfa>
 8000c9c:	4a90      	ldr	r2, [pc, #576]	; (8000ee0 <HAL_GPIO_Init+0x2b0>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d85d      	bhi.n	8000d5e <HAL_GPIO_Init+0x12e>
 8000ca2:	2b12      	cmp	r3, #18
 8000ca4:	d82a      	bhi.n	8000cfc <HAL_GPIO_Init+0xcc>
 8000ca6:	2b12      	cmp	r3, #18
 8000ca8:	d859      	bhi.n	8000d5e <HAL_GPIO_Init+0x12e>
 8000caa:	a201      	add	r2, pc, #4	; (adr r2, 8000cb0 <HAL_GPIO_Init+0x80>)
 8000cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cb0:	08000d2b 	.word	0x08000d2b
 8000cb4:	08000d05 	.word	0x08000d05
 8000cb8:	08000d17 	.word	0x08000d17
 8000cbc:	08000d59 	.word	0x08000d59
 8000cc0:	08000d5f 	.word	0x08000d5f
 8000cc4:	08000d5f 	.word	0x08000d5f
 8000cc8:	08000d5f 	.word	0x08000d5f
 8000ccc:	08000d5f 	.word	0x08000d5f
 8000cd0:	08000d5f 	.word	0x08000d5f
 8000cd4:	08000d5f 	.word	0x08000d5f
 8000cd8:	08000d5f 	.word	0x08000d5f
 8000cdc:	08000d5f 	.word	0x08000d5f
 8000ce0:	08000d5f 	.word	0x08000d5f
 8000ce4:	08000d5f 	.word	0x08000d5f
 8000ce8:	08000d5f 	.word	0x08000d5f
 8000cec:	08000d5f 	.word	0x08000d5f
 8000cf0:	08000d5f 	.word	0x08000d5f
 8000cf4:	08000d0d 	.word	0x08000d0d
 8000cf8:	08000d21 	.word	0x08000d21
 8000cfc:	4a79      	ldr	r2, [pc, #484]	; (8000ee4 <HAL_GPIO_Init+0x2b4>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d013      	beq.n	8000d2a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d02:	e02c      	b.n	8000d5e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	623b      	str	r3, [r7, #32]
          break;
 8000d0a:	e029      	b.n	8000d60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	3304      	adds	r3, #4
 8000d12:	623b      	str	r3, [r7, #32]
          break;
 8000d14:	e024      	b.n	8000d60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	68db      	ldr	r3, [r3, #12]
 8000d1a:	3308      	adds	r3, #8
 8000d1c:	623b      	str	r3, [r7, #32]
          break;
 8000d1e:	e01f      	b.n	8000d60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	330c      	adds	r3, #12
 8000d26:	623b      	str	r3, [r7, #32]
          break;
 8000d28:	e01a      	b.n	8000d60 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d102      	bne.n	8000d38 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d32:	2304      	movs	r3, #4
 8000d34:	623b      	str	r3, [r7, #32]
          break;
 8000d36:	e013      	b.n	8000d60 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	689b      	ldr	r3, [r3, #8]
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d105      	bne.n	8000d4c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d40:	2308      	movs	r3, #8
 8000d42:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	69fa      	ldr	r2, [r7, #28]
 8000d48:	611a      	str	r2, [r3, #16]
          break;
 8000d4a:	e009      	b.n	8000d60 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d4c:	2308      	movs	r3, #8
 8000d4e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	69fa      	ldr	r2, [r7, #28]
 8000d54:	615a      	str	r2, [r3, #20]
          break;
 8000d56:	e003      	b.n	8000d60 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	623b      	str	r3, [r7, #32]
          break;
 8000d5c:	e000      	b.n	8000d60 <HAL_GPIO_Init+0x130>
          break;
 8000d5e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	2bff      	cmp	r3, #255	; 0xff
 8000d64:	d801      	bhi.n	8000d6a <HAL_GPIO_Init+0x13a>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	e001      	b.n	8000d6e <HAL_GPIO_Init+0x13e>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	3304      	adds	r3, #4
 8000d6e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	2bff      	cmp	r3, #255	; 0xff
 8000d74:	d802      	bhi.n	8000d7c <HAL_GPIO_Init+0x14c>
 8000d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	e002      	b.n	8000d82 <HAL_GPIO_Init+0x152>
 8000d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d7e:	3b08      	subs	r3, #8
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	210f      	movs	r1, #15
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d90:	43db      	mvns	r3, r3
 8000d92:	401a      	ands	r2, r3
 8000d94:	6a39      	ldr	r1, [r7, #32]
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9c:	431a      	orrs	r2, r3
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	f000 80b1 	beq.w	8000f12 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000db0:	4b4d      	ldr	r3, [pc, #308]	; (8000ee8 <HAL_GPIO_Init+0x2b8>)
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	4a4c      	ldr	r2, [pc, #304]	; (8000ee8 <HAL_GPIO_Init+0x2b8>)
 8000db6:	f043 0301 	orr.w	r3, r3, #1
 8000dba:	6193      	str	r3, [r2, #24]
 8000dbc:	4b4a      	ldr	r3, [pc, #296]	; (8000ee8 <HAL_GPIO_Init+0x2b8>)
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	f003 0301 	and.w	r3, r3, #1
 8000dc4:	60bb      	str	r3, [r7, #8]
 8000dc6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000dc8:	4a48      	ldr	r2, [pc, #288]	; (8000eec <HAL_GPIO_Init+0x2bc>)
 8000dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dcc:	089b      	lsrs	r3, r3, #2
 8000dce:	3302      	adds	r3, #2
 8000dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dd4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd8:	f003 0303 	and.w	r3, r3, #3
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	220f      	movs	r2, #15
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	43db      	mvns	r3, r3
 8000de6:	68fa      	ldr	r2, [r7, #12]
 8000de8:	4013      	ands	r3, r2
 8000dea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	4a40      	ldr	r2, [pc, #256]	; (8000ef0 <HAL_GPIO_Init+0x2c0>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d013      	beq.n	8000e1c <HAL_GPIO_Init+0x1ec>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4a3f      	ldr	r2, [pc, #252]	; (8000ef4 <HAL_GPIO_Init+0x2c4>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d00d      	beq.n	8000e18 <HAL_GPIO_Init+0x1e8>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4a3e      	ldr	r2, [pc, #248]	; (8000ef8 <HAL_GPIO_Init+0x2c8>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d007      	beq.n	8000e14 <HAL_GPIO_Init+0x1e4>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4a3d      	ldr	r2, [pc, #244]	; (8000efc <HAL_GPIO_Init+0x2cc>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d101      	bne.n	8000e10 <HAL_GPIO_Init+0x1e0>
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	e006      	b.n	8000e1e <HAL_GPIO_Init+0x1ee>
 8000e10:	2304      	movs	r3, #4
 8000e12:	e004      	b.n	8000e1e <HAL_GPIO_Init+0x1ee>
 8000e14:	2302      	movs	r3, #2
 8000e16:	e002      	b.n	8000e1e <HAL_GPIO_Init+0x1ee>
 8000e18:	2301      	movs	r3, #1
 8000e1a:	e000      	b.n	8000e1e <HAL_GPIO_Init+0x1ee>
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e20:	f002 0203 	and.w	r2, r2, #3
 8000e24:	0092      	lsls	r2, r2, #2
 8000e26:	4093      	lsls	r3, r2
 8000e28:	68fa      	ldr	r2, [r7, #12]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e2e:	492f      	ldr	r1, [pc, #188]	; (8000eec <HAL_GPIO_Init+0x2bc>)
 8000e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e32:	089b      	lsrs	r3, r3, #2
 8000e34:	3302      	adds	r3, #2
 8000e36:	68fa      	ldr	r2, [r7, #12]
 8000e38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d006      	beq.n	8000e56 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e48:	4b2d      	ldr	r3, [pc, #180]	; (8000f00 <HAL_GPIO_Init+0x2d0>)
 8000e4a:	689a      	ldr	r2, [r3, #8]
 8000e4c:	492c      	ldr	r1, [pc, #176]	; (8000f00 <HAL_GPIO_Init+0x2d0>)
 8000e4e:	69bb      	ldr	r3, [r7, #24]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	608b      	str	r3, [r1, #8]
 8000e54:	e006      	b.n	8000e64 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e56:	4b2a      	ldr	r3, [pc, #168]	; (8000f00 <HAL_GPIO_Init+0x2d0>)
 8000e58:	689a      	ldr	r2, [r3, #8]
 8000e5a:	69bb      	ldr	r3, [r7, #24]
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	4928      	ldr	r1, [pc, #160]	; (8000f00 <HAL_GPIO_Init+0x2d0>)
 8000e60:	4013      	ands	r3, r2
 8000e62:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d006      	beq.n	8000e7e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e70:	4b23      	ldr	r3, [pc, #140]	; (8000f00 <HAL_GPIO_Init+0x2d0>)
 8000e72:	68da      	ldr	r2, [r3, #12]
 8000e74:	4922      	ldr	r1, [pc, #136]	; (8000f00 <HAL_GPIO_Init+0x2d0>)
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	60cb      	str	r3, [r1, #12]
 8000e7c:	e006      	b.n	8000e8c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e7e:	4b20      	ldr	r3, [pc, #128]	; (8000f00 <HAL_GPIO_Init+0x2d0>)
 8000e80:	68da      	ldr	r2, [r3, #12]
 8000e82:	69bb      	ldr	r3, [r7, #24]
 8000e84:	43db      	mvns	r3, r3
 8000e86:	491e      	ldr	r1, [pc, #120]	; (8000f00 <HAL_GPIO_Init+0x2d0>)
 8000e88:	4013      	ands	r3, r2
 8000e8a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d006      	beq.n	8000ea6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e98:	4b19      	ldr	r3, [pc, #100]	; (8000f00 <HAL_GPIO_Init+0x2d0>)
 8000e9a:	685a      	ldr	r2, [r3, #4]
 8000e9c:	4918      	ldr	r1, [pc, #96]	; (8000f00 <HAL_GPIO_Init+0x2d0>)
 8000e9e:	69bb      	ldr	r3, [r7, #24]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	604b      	str	r3, [r1, #4]
 8000ea4:	e006      	b.n	8000eb4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ea6:	4b16      	ldr	r3, [pc, #88]	; (8000f00 <HAL_GPIO_Init+0x2d0>)
 8000ea8:	685a      	ldr	r2, [r3, #4]
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	43db      	mvns	r3, r3
 8000eae:	4914      	ldr	r1, [pc, #80]	; (8000f00 <HAL_GPIO_Init+0x2d0>)
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d021      	beq.n	8000f04 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ec0:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <HAL_GPIO_Init+0x2d0>)
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	490e      	ldr	r1, [pc, #56]	; (8000f00 <HAL_GPIO_Init+0x2d0>)
 8000ec6:	69bb      	ldr	r3, [r7, #24]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	600b      	str	r3, [r1, #0]
 8000ecc:	e021      	b.n	8000f12 <HAL_GPIO_Init+0x2e2>
 8000ece:	bf00      	nop
 8000ed0:	10320000 	.word	0x10320000
 8000ed4:	10310000 	.word	0x10310000
 8000ed8:	10220000 	.word	0x10220000
 8000edc:	10210000 	.word	0x10210000
 8000ee0:	10120000 	.word	0x10120000
 8000ee4:	10110000 	.word	0x10110000
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	40010000 	.word	0x40010000
 8000ef0:	40010800 	.word	0x40010800
 8000ef4:	40010c00 	.word	0x40010c00
 8000ef8:	40011000 	.word	0x40011000
 8000efc:	40011400 	.word	0x40011400
 8000f00:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f04:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <HAL_GPIO_Init+0x304>)
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	43db      	mvns	r3, r3
 8000f0c:	4909      	ldr	r1, [pc, #36]	; (8000f34 <HAL_GPIO_Init+0x304>)
 8000f0e:	4013      	ands	r3, r2
 8000f10:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f14:	3301      	adds	r3, #1
 8000f16:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	f47f ae8e 	bne.w	8000c44 <HAL_GPIO_Init+0x14>
  }
}
 8000f28:	bf00      	nop
 8000f2a:	bf00      	nop
 8000f2c:	372c      	adds	r7, #44	; 0x2c
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bc80      	pop	{r7}
 8000f32:	4770      	bx	lr
 8000f34:	40010400 	.word	0x40010400

08000f38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	460b      	mov	r3, r1
 8000f42:	807b      	strh	r3, [r7, #2]
 8000f44:	4613      	mov	r3, r2
 8000f46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f48:	787b      	ldrb	r3, [r7, #1]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d003      	beq.n	8000f56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f4e:	887a      	ldrh	r2, [r7, #2]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f54:	e003      	b.n	8000f5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f56:	887b      	ldrh	r3, [r7, #2]
 8000f58:	041a      	lsls	r2, r3, #16
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	611a      	str	r2, [r3, #16]
}
 8000f5e:	bf00      	nop
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr

08000f68 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	460b      	mov	r3, r1
 8000f72:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f7a:	887a      	ldrh	r2, [r7, #2]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	041a      	lsls	r2, r3, #16
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	43d9      	mvns	r1, r3
 8000f86:	887b      	ldrh	r3, [r7, #2]
 8000f88:	400b      	ands	r3, r1
 8000f8a:	431a      	orrs	r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	611a      	str	r2, [r3, #16]
}
 8000f90:	bf00      	nop
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bc80      	pop	{r7}
 8000f98:	4770      	bx	lr
	...

08000f9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000fa6:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fa8:	695a      	ldr	r2, [r3, #20]
 8000faa:	88fb      	ldrh	r3, [r7, #6]
 8000fac:	4013      	ands	r3, r2
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d006      	beq.n	8000fc0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000fb2:	4a05      	ldr	r2, [pc, #20]	; (8000fc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fb4:	88fb      	ldrh	r3, [r7, #6]
 8000fb6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000fb8:	88fb      	ldrh	r3, [r7, #6]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 f806 	bl	8000fcc <HAL_GPIO_EXTI_Callback>
  }
}
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40010400 	.word	0x40010400

08000fcc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000fd6:	bf00      	nop
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bc80      	pop	{r7}
 8000fde:	4770      	bx	lr

08000fe0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d101      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e272      	b.n	80014d8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	f000 8087 	beq.w	800110e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001000:	4b92      	ldr	r3, [pc, #584]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 030c 	and.w	r3, r3, #12
 8001008:	2b04      	cmp	r3, #4
 800100a:	d00c      	beq.n	8001026 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800100c:	4b8f      	ldr	r3, [pc, #572]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f003 030c 	and.w	r3, r3, #12
 8001014:	2b08      	cmp	r3, #8
 8001016:	d112      	bne.n	800103e <HAL_RCC_OscConfig+0x5e>
 8001018:	4b8c      	ldr	r3, [pc, #560]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001024:	d10b      	bne.n	800103e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001026:	4b89      	ldr	r3, [pc, #548]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d06c      	beq.n	800110c <HAL_RCC_OscConfig+0x12c>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d168      	bne.n	800110c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e24c      	b.n	80014d8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001046:	d106      	bne.n	8001056 <HAL_RCC_OscConfig+0x76>
 8001048:	4b80      	ldr	r3, [pc, #512]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a7f      	ldr	r2, [pc, #508]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 800104e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001052:	6013      	str	r3, [r2, #0]
 8001054:	e02e      	b.n	80010b4 <HAL_RCC_OscConfig+0xd4>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d10c      	bne.n	8001078 <HAL_RCC_OscConfig+0x98>
 800105e:	4b7b      	ldr	r3, [pc, #492]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a7a      	ldr	r2, [pc, #488]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001064:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001068:	6013      	str	r3, [r2, #0]
 800106a:	4b78      	ldr	r3, [pc, #480]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a77      	ldr	r2, [pc, #476]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001070:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001074:	6013      	str	r3, [r2, #0]
 8001076:	e01d      	b.n	80010b4 <HAL_RCC_OscConfig+0xd4>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001080:	d10c      	bne.n	800109c <HAL_RCC_OscConfig+0xbc>
 8001082:	4b72      	ldr	r3, [pc, #456]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a71      	ldr	r2, [pc, #452]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001088:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800108c:	6013      	str	r3, [r2, #0]
 800108e:	4b6f      	ldr	r3, [pc, #444]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a6e      	ldr	r2, [pc, #440]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001098:	6013      	str	r3, [r2, #0]
 800109a:	e00b      	b.n	80010b4 <HAL_RCC_OscConfig+0xd4>
 800109c:	4b6b      	ldr	r3, [pc, #428]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a6a      	ldr	r2, [pc, #424]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 80010a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010a6:	6013      	str	r3, [r2, #0]
 80010a8:	4b68      	ldr	r3, [pc, #416]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a67      	ldr	r2, [pc, #412]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 80010ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d013      	beq.n	80010e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010bc:	f7ff fc7c 	bl	80009b8 <HAL_GetTick>
 80010c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010c2:	e008      	b.n	80010d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010c4:	f7ff fc78 	bl	80009b8 <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	2b64      	cmp	r3, #100	; 0x64
 80010d0:	d901      	bls.n	80010d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80010d2:	2303      	movs	r3, #3
 80010d4:	e200      	b.n	80014d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010d6:	4b5d      	ldr	r3, [pc, #372]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d0f0      	beq.n	80010c4 <HAL_RCC_OscConfig+0xe4>
 80010e2:	e014      	b.n	800110e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e4:	f7ff fc68 	bl	80009b8 <HAL_GetTick>
 80010e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ea:	e008      	b.n	80010fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010ec:	f7ff fc64 	bl	80009b8 <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	2b64      	cmp	r3, #100	; 0x64
 80010f8:	d901      	bls.n	80010fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80010fa:	2303      	movs	r3, #3
 80010fc:	e1ec      	b.n	80014d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010fe:	4b53      	ldr	r3, [pc, #332]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d1f0      	bne.n	80010ec <HAL_RCC_OscConfig+0x10c>
 800110a:	e000      	b.n	800110e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800110c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	2b00      	cmp	r3, #0
 8001118:	d063      	beq.n	80011e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800111a:	4b4c      	ldr	r3, [pc, #304]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f003 030c 	and.w	r3, r3, #12
 8001122:	2b00      	cmp	r3, #0
 8001124:	d00b      	beq.n	800113e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001126:	4b49      	ldr	r3, [pc, #292]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f003 030c 	and.w	r3, r3, #12
 800112e:	2b08      	cmp	r3, #8
 8001130:	d11c      	bne.n	800116c <HAL_RCC_OscConfig+0x18c>
 8001132:	4b46      	ldr	r3, [pc, #280]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d116      	bne.n	800116c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800113e:	4b43      	ldr	r3, [pc, #268]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	2b00      	cmp	r3, #0
 8001148:	d005      	beq.n	8001156 <HAL_RCC_OscConfig+0x176>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	691b      	ldr	r3, [r3, #16]
 800114e:	2b01      	cmp	r3, #1
 8001150:	d001      	beq.n	8001156 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e1c0      	b.n	80014d8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001156:	4b3d      	ldr	r3, [pc, #244]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	695b      	ldr	r3, [r3, #20]
 8001162:	00db      	lsls	r3, r3, #3
 8001164:	4939      	ldr	r1, [pc, #228]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001166:	4313      	orrs	r3, r2
 8001168:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800116a:	e03a      	b.n	80011e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	691b      	ldr	r3, [r3, #16]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d020      	beq.n	80011b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001174:	4b36      	ldr	r3, [pc, #216]	; (8001250 <HAL_RCC_OscConfig+0x270>)
 8001176:	2201      	movs	r2, #1
 8001178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800117a:	f7ff fc1d 	bl	80009b8 <HAL_GetTick>
 800117e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001180:	e008      	b.n	8001194 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001182:	f7ff fc19 	bl	80009b8 <HAL_GetTick>
 8001186:	4602      	mov	r2, r0
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	2b02      	cmp	r3, #2
 800118e:	d901      	bls.n	8001194 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001190:	2303      	movs	r3, #3
 8001192:	e1a1      	b.n	80014d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001194:	4b2d      	ldr	r3, [pc, #180]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0302 	and.w	r3, r3, #2
 800119c:	2b00      	cmp	r3, #0
 800119e:	d0f0      	beq.n	8001182 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011a0:	4b2a      	ldr	r3, [pc, #168]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	695b      	ldr	r3, [r3, #20]
 80011ac:	00db      	lsls	r3, r3, #3
 80011ae:	4927      	ldr	r1, [pc, #156]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 80011b0:	4313      	orrs	r3, r2
 80011b2:	600b      	str	r3, [r1, #0]
 80011b4:	e015      	b.n	80011e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011b6:	4b26      	ldr	r3, [pc, #152]	; (8001250 <HAL_RCC_OscConfig+0x270>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011bc:	f7ff fbfc 	bl	80009b8 <HAL_GetTick>
 80011c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011c2:	e008      	b.n	80011d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011c4:	f7ff fbf8 	bl	80009b8 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d901      	bls.n	80011d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80011d2:	2303      	movs	r3, #3
 80011d4:	e180      	b.n	80014d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011d6:	4b1d      	ldr	r3, [pc, #116]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d1f0      	bne.n	80011c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0308 	and.w	r3, r3, #8
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d03a      	beq.n	8001264 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	699b      	ldr	r3, [r3, #24]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d019      	beq.n	800122a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011f6:	4b17      	ldr	r3, [pc, #92]	; (8001254 <HAL_RCC_OscConfig+0x274>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011fc:	f7ff fbdc 	bl	80009b8 <HAL_GetTick>
 8001200:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001202:	e008      	b.n	8001216 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001204:	f7ff fbd8 	bl	80009b8 <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	2b02      	cmp	r3, #2
 8001210:	d901      	bls.n	8001216 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e160      	b.n	80014d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001216:	4b0d      	ldr	r3, [pc, #52]	; (800124c <HAL_RCC_OscConfig+0x26c>)
 8001218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	2b00      	cmp	r3, #0
 8001220:	d0f0      	beq.n	8001204 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001222:	2001      	movs	r0, #1
 8001224:	f000 face 	bl	80017c4 <RCC_Delay>
 8001228:	e01c      	b.n	8001264 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800122a:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <HAL_RCC_OscConfig+0x274>)
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001230:	f7ff fbc2 	bl	80009b8 <HAL_GetTick>
 8001234:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001236:	e00f      	b.n	8001258 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001238:	f7ff fbbe 	bl	80009b8 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b02      	cmp	r3, #2
 8001244:	d908      	bls.n	8001258 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e146      	b.n	80014d8 <HAL_RCC_OscConfig+0x4f8>
 800124a:	bf00      	nop
 800124c:	40021000 	.word	0x40021000
 8001250:	42420000 	.word	0x42420000
 8001254:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001258:	4b92      	ldr	r3, [pc, #584]	; (80014a4 <HAL_RCC_OscConfig+0x4c4>)
 800125a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800125c:	f003 0302 	and.w	r3, r3, #2
 8001260:	2b00      	cmp	r3, #0
 8001262:	d1e9      	bne.n	8001238 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0304 	and.w	r3, r3, #4
 800126c:	2b00      	cmp	r3, #0
 800126e:	f000 80a6 	beq.w	80013be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001272:	2300      	movs	r3, #0
 8001274:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001276:	4b8b      	ldr	r3, [pc, #556]	; (80014a4 <HAL_RCC_OscConfig+0x4c4>)
 8001278:	69db      	ldr	r3, [r3, #28]
 800127a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d10d      	bne.n	800129e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001282:	4b88      	ldr	r3, [pc, #544]	; (80014a4 <HAL_RCC_OscConfig+0x4c4>)
 8001284:	69db      	ldr	r3, [r3, #28]
 8001286:	4a87      	ldr	r2, [pc, #540]	; (80014a4 <HAL_RCC_OscConfig+0x4c4>)
 8001288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800128c:	61d3      	str	r3, [r2, #28]
 800128e:	4b85      	ldr	r3, [pc, #532]	; (80014a4 <HAL_RCC_OscConfig+0x4c4>)
 8001290:	69db      	ldr	r3, [r3, #28]
 8001292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800129a:	2301      	movs	r3, #1
 800129c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800129e:	4b82      	ldr	r3, [pc, #520]	; (80014a8 <HAL_RCC_OscConfig+0x4c8>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d118      	bne.n	80012dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012aa:	4b7f      	ldr	r3, [pc, #508]	; (80014a8 <HAL_RCC_OscConfig+0x4c8>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a7e      	ldr	r2, [pc, #504]	; (80014a8 <HAL_RCC_OscConfig+0x4c8>)
 80012b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012b6:	f7ff fb7f 	bl	80009b8 <HAL_GetTick>
 80012ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012bc:	e008      	b.n	80012d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012be:	f7ff fb7b 	bl	80009b8 <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	2b64      	cmp	r3, #100	; 0x64
 80012ca:	d901      	bls.n	80012d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80012cc:	2303      	movs	r3, #3
 80012ce:	e103      	b.n	80014d8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012d0:	4b75      	ldr	r3, [pc, #468]	; (80014a8 <HAL_RCC_OscConfig+0x4c8>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d0f0      	beq.n	80012be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d106      	bne.n	80012f2 <HAL_RCC_OscConfig+0x312>
 80012e4:	4b6f      	ldr	r3, [pc, #444]	; (80014a4 <HAL_RCC_OscConfig+0x4c4>)
 80012e6:	6a1b      	ldr	r3, [r3, #32]
 80012e8:	4a6e      	ldr	r2, [pc, #440]	; (80014a4 <HAL_RCC_OscConfig+0x4c4>)
 80012ea:	f043 0301 	orr.w	r3, r3, #1
 80012ee:	6213      	str	r3, [r2, #32]
 80012f0:	e02d      	b.n	800134e <HAL_RCC_OscConfig+0x36e>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d10c      	bne.n	8001314 <HAL_RCC_OscConfig+0x334>
 80012fa:	4b6a      	ldr	r3, [pc, #424]	; (80014a4 <HAL_RCC_OscConfig+0x4c4>)
 80012fc:	6a1b      	ldr	r3, [r3, #32]
 80012fe:	4a69      	ldr	r2, [pc, #420]	; (80014a4 <HAL_RCC_OscConfig+0x4c4>)
 8001300:	f023 0301 	bic.w	r3, r3, #1
 8001304:	6213      	str	r3, [r2, #32]
 8001306:	4b67      	ldr	r3, [pc, #412]	; (80014a4 <HAL_RCC_OscConfig+0x4c4>)
 8001308:	6a1b      	ldr	r3, [r3, #32]
 800130a:	4a66      	ldr	r2, [pc, #408]	; (80014a4 <HAL_RCC_OscConfig+0x4c4>)
 800130c:	f023 0304 	bic.w	r3, r3, #4
 8001310:	6213      	str	r3, [r2, #32]
 8001312:	e01c      	b.n	800134e <HAL_RCC_OscConfig+0x36e>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	2b05      	cmp	r3, #5
 800131a:	d10c      	bne.n	8001336 <HAL_RCC_OscConfig+0x356>
 800131c:	4b61      	ldr	r3, [pc, #388]	; (80014a4 <HAL_RCC_OscConfig+0x4c4>)
 800131e:	6a1b      	ldr	r3, [r3, #32]
 8001320:	4a60      	ldr	r2, [pc, #384]	; (80014a4 <HAL_RCC_OscConfig+0x4c4>)
 8001322:	f043 0304 	orr.w	r3, r3, #4
 8001326:	6213      	str	r3, [r2, #32]
 8001328:	4b5e      	ldr	r3, [pc, #376]	; (80014a4 <HAL_RCC_OscConfig+0x4c4>)
 800132a:	6a1b      	ldr	r3, [r3, #32]
 800132c:	4a5d      	ldr	r2, [pc, #372]	; (80014a4 <HAL_RCC_OscConfig+0x4c4>)
 800132e:	f043 0301 	orr.w	r3, r3, #1
 8001332:	6213      	str	r3, [r2, #32]
 8001334:	e00b      	b.n	800134e <HAL_RCC_OscConfig+0x36e>
 8001336:	4b5b      	ldr	r3, [pc, #364]	; (80014a4 <HAL_RCC_OscConfig+0x4c4>)
 8001338:	6a1b      	ldr	r3, [r3, #32]
 800133a:	4a5a      	ldr	r2, [pc, #360]	; (80014a4 <HAL_RCC_OscConfig+0x4c4>)
 800133c:	f023 0301 	bic.w	r3, r3, #1
 8001340:	6213      	str	r3, [r2, #32]
 8001342:	4b58      	ldr	r3, [pc, #352]	; (80014a4 <HAL_RCC_OscConfig+0x4c4>)
 8001344:	6a1b      	ldr	r3, [r3, #32]
 8001346:	4a57      	ldr	r2, [pc, #348]	; (80014a4 <HAL_RCC_OscConfig+0x4c4>)
 8001348:	f023 0304 	bic.w	r3, r3, #4
 800134c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d015      	beq.n	8001382 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001356:	f7ff fb2f 	bl	80009b8 <HAL_GetTick>
 800135a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800135c:	e00a      	b.n	8001374 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800135e:	f7ff fb2b 	bl	80009b8 <HAL_GetTick>
 8001362:	4602      	mov	r2, r0
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	f241 3288 	movw	r2, #5000	; 0x1388
 800136c:	4293      	cmp	r3, r2
 800136e:	d901      	bls.n	8001374 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e0b1      	b.n	80014d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001374:	4b4b      	ldr	r3, [pc, #300]	; (80014a4 <HAL_RCC_OscConfig+0x4c4>)
 8001376:	6a1b      	ldr	r3, [r3, #32]
 8001378:	f003 0302 	and.w	r3, r3, #2
 800137c:	2b00      	cmp	r3, #0
 800137e:	d0ee      	beq.n	800135e <HAL_RCC_OscConfig+0x37e>
 8001380:	e014      	b.n	80013ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001382:	f7ff fb19 	bl	80009b8 <HAL_GetTick>
 8001386:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001388:	e00a      	b.n	80013a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800138a:	f7ff fb15 	bl	80009b8 <HAL_GetTick>
 800138e:	4602      	mov	r2, r0
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	f241 3288 	movw	r2, #5000	; 0x1388
 8001398:	4293      	cmp	r3, r2
 800139a:	d901      	bls.n	80013a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e09b      	b.n	80014d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013a0:	4b40      	ldr	r3, [pc, #256]	; (80014a4 <HAL_RCC_OscConfig+0x4c4>)
 80013a2:	6a1b      	ldr	r3, [r3, #32]
 80013a4:	f003 0302 	and.w	r3, r3, #2
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d1ee      	bne.n	800138a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80013ac:	7dfb      	ldrb	r3, [r7, #23]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d105      	bne.n	80013be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013b2:	4b3c      	ldr	r3, [pc, #240]	; (80014a4 <HAL_RCC_OscConfig+0x4c4>)
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	4a3b      	ldr	r2, [pc, #236]	; (80014a4 <HAL_RCC_OscConfig+0x4c4>)
 80013b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	f000 8087 	beq.w	80014d6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013c8:	4b36      	ldr	r3, [pc, #216]	; (80014a4 <HAL_RCC_OscConfig+0x4c4>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f003 030c 	and.w	r3, r3, #12
 80013d0:	2b08      	cmp	r3, #8
 80013d2:	d061      	beq.n	8001498 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	69db      	ldr	r3, [r3, #28]
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d146      	bne.n	800146a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013dc:	4b33      	ldr	r3, [pc, #204]	; (80014ac <HAL_RCC_OscConfig+0x4cc>)
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e2:	f7ff fae9 	bl	80009b8 <HAL_GetTick>
 80013e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013e8:	e008      	b.n	80013fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ea:	f7ff fae5 	bl	80009b8 <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e06d      	b.n	80014d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013fc:	4b29      	ldr	r3, [pc, #164]	; (80014a4 <HAL_RCC_OscConfig+0x4c4>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d1f0      	bne.n	80013ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a1b      	ldr	r3, [r3, #32]
 800140c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001410:	d108      	bne.n	8001424 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001412:	4b24      	ldr	r3, [pc, #144]	; (80014a4 <HAL_RCC_OscConfig+0x4c4>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	4921      	ldr	r1, [pc, #132]	; (80014a4 <HAL_RCC_OscConfig+0x4c4>)
 8001420:	4313      	orrs	r3, r2
 8001422:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001424:	4b1f      	ldr	r3, [pc, #124]	; (80014a4 <HAL_RCC_OscConfig+0x4c4>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a19      	ldr	r1, [r3, #32]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001434:	430b      	orrs	r3, r1
 8001436:	491b      	ldr	r1, [pc, #108]	; (80014a4 <HAL_RCC_OscConfig+0x4c4>)
 8001438:	4313      	orrs	r3, r2
 800143a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800143c:	4b1b      	ldr	r3, [pc, #108]	; (80014ac <HAL_RCC_OscConfig+0x4cc>)
 800143e:	2201      	movs	r2, #1
 8001440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001442:	f7ff fab9 	bl	80009b8 <HAL_GetTick>
 8001446:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001448:	e008      	b.n	800145c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800144a:	f7ff fab5 	bl	80009b8 <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	2b02      	cmp	r3, #2
 8001456:	d901      	bls.n	800145c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e03d      	b.n	80014d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800145c:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <HAL_RCC_OscConfig+0x4c4>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d0f0      	beq.n	800144a <HAL_RCC_OscConfig+0x46a>
 8001468:	e035      	b.n	80014d6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800146a:	4b10      	ldr	r3, [pc, #64]	; (80014ac <HAL_RCC_OscConfig+0x4cc>)
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001470:	f7ff faa2 	bl	80009b8 <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001478:	f7ff fa9e 	bl	80009b8 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b02      	cmp	r3, #2
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e026      	b.n	80014d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800148a:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <HAL_RCC_OscConfig+0x4c4>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1f0      	bne.n	8001478 <HAL_RCC_OscConfig+0x498>
 8001496:	e01e      	b.n	80014d6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	69db      	ldr	r3, [r3, #28]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d107      	bne.n	80014b0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e019      	b.n	80014d8 <HAL_RCC_OscConfig+0x4f8>
 80014a4:	40021000 	.word	0x40021000
 80014a8:	40007000 	.word	0x40007000
 80014ac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80014b0:	4b0b      	ldr	r3, [pc, #44]	; (80014e0 <HAL_RCC_OscConfig+0x500>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a1b      	ldr	r3, [r3, #32]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d106      	bne.n	80014d2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d001      	beq.n	80014d6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e000      	b.n	80014d8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80014d6:	2300      	movs	r3, #0
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3718      	adds	r7, #24
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40021000 	.word	0x40021000

080014e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d101      	bne.n	80014f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e0d0      	b.n	800169a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014f8:	4b6a      	ldr	r3, [pc, #424]	; (80016a4 <HAL_RCC_ClockConfig+0x1c0>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0307 	and.w	r3, r3, #7
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	429a      	cmp	r2, r3
 8001504:	d910      	bls.n	8001528 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001506:	4b67      	ldr	r3, [pc, #412]	; (80016a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f023 0207 	bic.w	r2, r3, #7
 800150e:	4965      	ldr	r1, [pc, #404]	; (80016a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	4313      	orrs	r3, r2
 8001514:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001516:	4b63      	ldr	r3, [pc, #396]	; (80016a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0307 	and.w	r3, r3, #7
 800151e:	683a      	ldr	r2, [r7, #0]
 8001520:	429a      	cmp	r2, r3
 8001522:	d001      	beq.n	8001528 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e0b8      	b.n	800169a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0302 	and.w	r3, r3, #2
 8001530:	2b00      	cmp	r3, #0
 8001532:	d020      	beq.n	8001576 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0304 	and.w	r3, r3, #4
 800153c:	2b00      	cmp	r3, #0
 800153e:	d005      	beq.n	800154c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001540:	4b59      	ldr	r3, [pc, #356]	; (80016a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	4a58      	ldr	r2, [pc, #352]	; (80016a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001546:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800154a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0308 	and.w	r3, r3, #8
 8001554:	2b00      	cmp	r3, #0
 8001556:	d005      	beq.n	8001564 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001558:	4b53      	ldr	r3, [pc, #332]	; (80016a8 <HAL_RCC_ClockConfig+0x1c4>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	4a52      	ldr	r2, [pc, #328]	; (80016a8 <HAL_RCC_ClockConfig+0x1c4>)
 800155e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001562:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001564:	4b50      	ldr	r3, [pc, #320]	; (80016a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	494d      	ldr	r1, [pc, #308]	; (80016a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001572:	4313      	orrs	r3, r2
 8001574:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	2b00      	cmp	r3, #0
 8001580:	d040      	beq.n	8001604 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	2b01      	cmp	r3, #1
 8001588:	d107      	bne.n	800159a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800158a:	4b47      	ldr	r3, [pc, #284]	; (80016a8 <HAL_RCC_ClockConfig+0x1c4>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d115      	bne.n	80015c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e07f      	b.n	800169a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d107      	bne.n	80015b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015a2:	4b41      	ldr	r3, [pc, #260]	; (80016a8 <HAL_RCC_ClockConfig+0x1c4>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d109      	bne.n	80015c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e073      	b.n	800169a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b2:	4b3d      	ldr	r3, [pc, #244]	; (80016a8 <HAL_RCC_ClockConfig+0x1c4>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d101      	bne.n	80015c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e06b      	b.n	800169a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015c2:	4b39      	ldr	r3, [pc, #228]	; (80016a8 <HAL_RCC_ClockConfig+0x1c4>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f023 0203 	bic.w	r2, r3, #3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	4936      	ldr	r1, [pc, #216]	; (80016a8 <HAL_RCC_ClockConfig+0x1c4>)
 80015d0:	4313      	orrs	r3, r2
 80015d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015d4:	f7ff f9f0 	bl	80009b8 <HAL_GetTick>
 80015d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015da:	e00a      	b.n	80015f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015dc:	f7ff f9ec 	bl	80009b8 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e053      	b.n	800169a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015f2:	4b2d      	ldr	r3, [pc, #180]	; (80016a8 <HAL_RCC_ClockConfig+0x1c4>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f003 020c 	and.w	r2, r3, #12
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	429a      	cmp	r2, r3
 8001602:	d1eb      	bne.n	80015dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001604:	4b27      	ldr	r3, [pc, #156]	; (80016a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0307 	and.w	r3, r3, #7
 800160c:	683a      	ldr	r2, [r7, #0]
 800160e:	429a      	cmp	r2, r3
 8001610:	d210      	bcs.n	8001634 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001612:	4b24      	ldr	r3, [pc, #144]	; (80016a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f023 0207 	bic.w	r2, r3, #7
 800161a:	4922      	ldr	r1, [pc, #136]	; (80016a4 <HAL_RCC_ClockConfig+0x1c0>)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	4313      	orrs	r3, r2
 8001620:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001622:	4b20      	ldr	r3, [pc, #128]	; (80016a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0307 	and.w	r3, r3, #7
 800162a:	683a      	ldr	r2, [r7, #0]
 800162c:	429a      	cmp	r2, r3
 800162e:	d001      	beq.n	8001634 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e032      	b.n	800169a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0304 	and.w	r3, r3, #4
 800163c:	2b00      	cmp	r3, #0
 800163e:	d008      	beq.n	8001652 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001640:	4b19      	ldr	r3, [pc, #100]	; (80016a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	4916      	ldr	r1, [pc, #88]	; (80016a8 <HAL_RCC_ClockConfig+0x1c4>)
 800164e:	4313      	orrs	r3, r2
 8001650:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0308 	and.w	r3, r3, #8
 800165a:	2b00      	cmp	r3, #0
 800165c:	d009      	beq.n	8001672 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800165e:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	490e      	ldr	r1, [pc, #56]	; (80016a8 <HAL_RCC_ClockConfig+0x1c4>)
 800166e:	4313      	orrs	r3, r2
 8001670:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001672:	f000 f821 	bl	80016b8 <HAL_RCC_GetSysClockFreq>
 8001676:	4602      	mov	r2, r0
 8001678:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <HAL_RCC_ClockConfig+0x1c4>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	091b      	lsrs	r3, r3, #4
 800167e:	f003 030f 	and.w	r3, r3, #15
 8001682:	490a      	ldr	r1, [pc, #40]	; (80016ac <HAL_RCC_ClockConfig+0x1c8>)
 8001684:	5ccb      	ldrb	r3, [r1, r3]
 8001686:	fa22 f303 	lsr.w	r3, r2, r3
 800168a:	4a09      	ldr	r2, [pc, #36]	; (80016b0 <HAL_RCC_ClockConfig+0x1cc>)
 800168c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800168e:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <HAL_RCC_ClockConfig+0x1d0>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff f94e 	bl	8000934 <HAL_InitTick>

  return HAL_OK;
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40022000 	.word	0x40022000
 80016a8:	40021000 	.word	0x40021000
 80016ac:	080029f0 	.word	0x080029f0
 80016b0:	20000000 	.word	0x20000000
 80016b4:	20000004 	.word	0x20000004

080016b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b087      	sub	sp, #28
 80016bc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016be:	2300      	movs	r3, #0
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	2300      	movs	r3, #0
 80016c4:	60bb      	str	r3, [r7, #8]
 80016c6:	2300      	movs	r3, #0
 80016c8:	617b      	str	r3, [r7, #20]
 80016ca:	2300      	movs	r3, #0
 80016cc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80016ce:	2300      	movs	r3, #0
 80016d0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80016d2:	4b1e      	ldr	r3, [pc, #120]	; (800174c <HAL_RCC_GetSysClockFreq+0x94>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f003 030c 	and.w	r3, r3, #12
 80016de:	2b04      	cmp	r3, #4
 80016e0:	d002      	beq.n	80016e8 <HAL_RCC_GetSysClockFreq+0x30>
 80016e2:	2b08      	cmp	r3, #8
 80016e4:	d003      	beq.n	80016ee <HAL_RCC_GetSysClockFreq+0x36>
 80016e6:	e027      	b.n	8001738 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016e8:	4b19      	ldr	r3, [pc, #100]	; (8001750 <HAL_RCC_GetSysClockFreq+0x98>)
 80016ea:	613b      	str	r3, [r7, #16]
      break;
 80016ec:	e027      	b.n	800173e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	0c9b      	lsrs	r3, r3, #18
 80016f2:	f003 030f 	and.w	r3, r3, #15
 80016f6:	4a17      	ldr	r2, [pc, #92]	; (8001754 <HAL_RCC_GetSysClockFreq+0x9c>)
 80016f8:	5cd3      	ldrb	r3, [r2, r3]
 80016fa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d010      	beq.n	8001728 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001706:	4b11      	ldr	r3, [pc, #68]	; (800174c <HAL_RCC_GetSysClockFreq+0x94>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	0c5b      	lsrs	r3, r3, #17
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	4a11      	ldr	r2, [pc, #68]	; (8001758 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001712:	5cd3      	ldrb	r3, [r2, r3]
 8001714:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a0d      	ldr	r2, [pc, #52]	; (8001750 <HAL_RCC_GetSysClockFreq+0x98>)
 800171a:	fb03 f202 	mul.w	r2, r3, r2
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	fbb2 f3f3 	udiv	r3, r2, r3
 8001724:	617b      	str	r3, [r7, #20]
 8001726:	e004      	b.n	8001732 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4a0c      	ldr	r2, [pc, #48]	; (800175c <HAL_RCC_GetSysClockFreq+0xa4>)
 800172c:	fb02 f303 	mul.w	r3, r2, r3
 8001730:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	613b      	str	r3, [r7, #16]
      break;
 8001736:	e002      	b.n	800173e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001738:	4b05      	ldr	r3, [pc, #20]	; (8001750 <HAL_RCC_GetSysClockFreq+0x98>)
 800173a:	613b      	str	r3, [r7, #16]
      break;
 800173c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800173e:	693b      	ldr	r3, [r7, #16]
}
 8001740:	4618      	mov	r0, r3
 8001742:	371c      	adds	r7, #28
 8001744:	46bd      	mov	sp, r7
 8001746:	bc80      	pop	{r7}
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	40021000 	.word	0x40021000
 8001750:	007a1200 	.word	0x007a1200
 8001754:	08002a08 	.word	0x08002a08
 8001758:	08002a18 	.word	0x08002a18
 800175c:	003d0900 	.word	0x003d0900

08001760 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001764:	4b02      	ldr	r3, [pc, #8]	; (8001770 <HAL_RCC_GetHCLKFreq+0x10>)
 8001766:	681b      	ldr	r3, [r3, #0]
}
 8001768:	4618      	mov	r0, r3
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr
 8001770:	20000000 	.word	0x20000000

08001774 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001778:	f7ff fff2 	bl	8001760 <HAL_RCC_GetHCLKFreq>
 800177c:	4602      	mov	r2, r0
 800177e:	4b05      	ldr	r3, [pc, #20]	; (8001794 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	0a1b      	lsrs	r3, r3, #8
 8001784:	f003 0307 	and.w	r3, r3, #7
 8001788:	4903      	ldr	r1, [pc, #12]	; (8001798 <HAL_RCC_GetPCLK1Freq+0x24>)
 800178a:	5ccb      	ldrb	r3, [r1, r3]
 800178c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001790:	4618      	mov	r0, r3
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40021000 	.word	0x40021000
 8001798:	08002a00 	.word	0x08002a00

0800179c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80017a0:	f7ff ffde 	bl	8001760 <HAL_RCC_GetHCLKFreq>
 80017a4:	4602      	mov	r2, r0
 80017a6:	4b05      	ldr	r3, [pc, #20]	; (80017bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	0adb      	lsrs	r3, r3, #11
 80017ac:	f003 0307 	and.w	r3, r3, #7
 80017b0:	4903      	ldr	r1, [pc, #12]	; (80017c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80017b2:	5ccb      	ldrb	r3, [r1, r3]
 80017b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40021000 	.word	0x40021000
 80017c0:	08002a00 	.word	0x08002a00

080017c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80017cc:	4b0a      	ldr	r3, [pc, #40]	; (80017f8 <RCC_Delay+0x34>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a0a      	ldr	r2, [pc, #40]	; (80017fc <RCC_Delay+0x38>)
 80017d2:	fba2 2303 	umull	r2, r3, r2, r3
 80017d6:	0a5b      	lsrs	r3, r3, #9
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	fb02 f303 	mul.w	r3, r2, r3
 80017de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80017e0:	bf00      	nop
  }
  while (Delay --);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	1e5a      	subs	r2, r3, #1
 80017e6:	60fa      	str	r2, [r7, #12]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d1f9      	bne.n	80017e0 <RCC_Delay+0x1c>
}
 80017ec:	bf00      	nop
 80017ee:	bf00      	nop
 80017f0:	3714      	adds	r7, #20
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr
 80017f8:	20000000 	.word	0x20000000
 80017fc:	10624dd3 	.word	0x10624dd3

08001800 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e042      	b.n	8001898 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001818:	b2db      	uxtb	r3, r3
 800181a:	2b00      	cmp	r3, #0
 800181c:	d106      	bne.n	800182c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7fe fde2 	bl	80003f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2224      	movs	r2, #36	; 0x24
 8001830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	68da      	ldr	r2, [r3, #12]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001842:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f000 f9af 	bl	8001ba8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	691a      	ldr	r2, [r3, #16]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001858:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	695a      	ldr	r2, [r3, #20]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001868:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	68da      	ldr	r2, [r3, #12]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001878:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2220      	movs	r2, #32
 8001884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2220      	movs	r2, #32
 800188c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001896:	2300      	movs	r3, #0
}
 8001898:	4618      	mov	r0, r3
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08a      	sub	sp, #40	; 0x28
 80018a4:	af02      	add	r7, sp, #8
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	603b      	str	r3, [r7, #0]
 80018ac:	4613      	mov	r3, r2
 80018ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	2b20      	cmp	r3, #32
 80018be:	d16d      	bne.n	800199c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d002      	beq.n	80018cc <HAL_UART_Transmit+0x2c>
 80018c6:	88fb      	ldrh	r3, [r7, #6]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d101      	bne.n	80018d0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e066      	b.n	800199e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2200      	movs	r2, #0
 80018d4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2221      	movs	r2, #33	; 0x21
 80018da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80018de:	f7ff f86b 	bl	80009b8 <HAL_GetTick>
 80018e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	88fa      	ldrh	r2, [r7, #6]
 80018e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	88fa      	ldrh	r2, [r7, #6]
 80018ee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018f8:	d108      	bne.n	800190c <HAL_UART_Transmit+0x6c>
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	691b      	ldr	r3, [r3, #16]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d104      	bne.n	800190c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001902:	2300      	movs	r3, #0
 8001904:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	61bb      	str	r3, [r7, #24]
 800190a:	e003      	b.n	8001914 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001910:	2300      	movs	r3, #0
 8001912:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001914:	e02a      	b.n	800196c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	9300      	str	r3, [sp, #0]
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	2200      	movs	r2, #0
 800191e:	2180      	movs	r1, #128	; 0x80
 8001920:	68f8      	ldr	r0, [r7, #12]
 8001922:	f000 f8d2 	bl	8001aca <UART_WaitOnFlagUntilTimeout>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e036      	b.n	800199e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d10b      	bne.n	800194e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	881b      	ldrh	r3, [r3, #0]
 800193a:	461a      	mov	r2, r3
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001944:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	3302      	adds	r3, #2
 800194a:	61bb      	str	r3, [r7, #24]
 800194c:	e007      	b.n	800195e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	781a      	ldrb	r2, [r3, #0]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	3301      	adds	r3, #1
 800195c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001962:	b29b      	uxth	r3, r3
 8001964:	3b01      	subs	r3, #1
 8001966:	b29a      	uxth	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001970:	b29b      	uxth	r3, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1cf      	bne.n	8001916 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	9300      	str	r3, [sp, #0]
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	2200      	movs	r2, #0
 800197e:	2140      	movs	r1, #64	; 0x40
 8001980:	68f8      	ldr	r0, [r7, #12]
 8001982:	f000 f8a2 	bl	8001aca <UART_WaitOnFlagUntilTimeout>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e006      	b.n	800199e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2220      	movs	r2, #32
 8001994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001998:	2300      	movs	r3, #0
 800199a:	e000      	b.n	800199e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800199c:	2302      	movs	r3, #2
  }
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3720      	adds	r7, #32
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b08a      	sub	sp, #40	; 0x28
 80019aa:	af02      	add	r7, sp, #8
 80019ac:	60f8      	str	r0, [r7, #12]
 80019ae:	60b9      	str	r1, [r7, #8]
 80019b0:	603b      	str	r3, [r7, #0]
 80019b2:	4613      	mov	r3, r2
 80019b4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80019b6:	2300      	movs	r3, #0
 80019b8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b20      	cmp	r3, #32
 80019c4:	d17c      	bne.n	8001ac0 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d002      	beq.n	80019d2 <HAL_UART_Receive+0x2c>
 80019cc:	88fb      	ldrh	r3, [r7, #6]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e075      	b.n	8001ac2 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2200      	movs	r2, #0
 80019da:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2222      	movs	r2, #34	; 0x22
 80019e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2200      	movs	r2, #0
 80019e8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80019ea:	f7fe ffe5 	bl	80009b8 <HAL_GetTick>
 80019ee:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	88fa      	ldrh	r2, [r7, #6]
 80019f4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	88fa      	ldrh	r2, [r7, #6]
 80019fa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a04:	d108      	bne.n	8001a18 <HAL_UART_Receive+0x72>
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d104      	bne.n	8001a18 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	61bb      	str	r3, [r7, #24]
 8001a16:	e003      	b.n	8001a20 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001a20:	e043      	b.n	8001aaa <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	2120      	movs	r1, #32
 8001a2c:	68f8      	ldr	r0, [r7, #12]
 8001a2e:	f000 f84c 	bl	8001aca <UART_WaitOnFlagUntilTimeout>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e042      	b.n	8001ac2 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d10c      	bne.n	8001a5c <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	3302      	adds	r3, #2
 8001a58:	61bb      	str	r3, [r7, #24]
 8001a5a:	e01f      	b.n	8001a9c <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a64:	d007      	beq.n	8001a76 <HAL_UART_Receive+0xd0>
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d10a      	bne.n	8001a84 <HAL_UART_Receive+0xde>
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	691b      	ldr	r3, [r3, #16]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d106      	bne.n	8001a84 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	b2da      	uxtb	r2, r3
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	701a      	strb	r2, [r3, #0]
 8001a82:	e008      	b.n	8001a96 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	b29a      	uxth	r2, r3
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1b6      	bne.n	8001a22 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2220      	movs	r2, #32
 8001ab8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8001abc:	2300      	movs	r3, #0
 8001abe:	e000      	b.n	8001ac2 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001ac0:	2302      	movs	r3, #2
  }
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3720      	adds	r7, #32
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b090      	sub	sp, #64	; 0x40
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	60f8      	str	r0, [r7, #12]
 8001ad2:	60b9      	str	r1, [r7, #8]
 8001ad4:	603b      	str	r3, [r7, #0]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ada:	e050      	b.n	8001b7e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001adc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae2:	d04c      	beq.n	8001b7e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001ae4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d007      	beq.n	8001afa <UART_WaitOnFlagUntilTimeout+0x30>
 8001aea:	f7fe ff65 	bl	80009b8 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d241      	bcs.n	8001b7e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	330c      	adds	r3, #12
 8001b00:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b04:	e853 3f00 	ldrex	r3, [r3]
 8001b08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001b10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	330c      	adds	r3, #12
 8001b18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b1a:	637a      	str	r2, [r7, #52]	; 0x34
 8001b1c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b22:	e841 2300 	strex	r3, r2, [r1]
 8001b26:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1e5      	bne.n	8001afa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	3314      	adds	r3, #20
 8001b34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	e853 3f00 	ldrex	r3, [r3]
 8001b3c:	613b      	str	r3, [r7, #16]
   return(result);
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	f023 0301 	bic.w	r3, r3, #1
 8001b44:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	3314      	adds	r3, #20
 8001b4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b4e:	623a      	str	r2, [r7, #32]
 8001b50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b52:	69f9      	ldr	r1, [r7, #28]
 8001b54:	6a3a      	ldr	r2, [r7, #32]
 8001b56:	e841 2300 	strex	r3, r2, [r1]
 8001b5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1e5      	bne.n	8001b2e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2220      	movs	r2, #32
 8001b66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2220      	movs	r2, #32
 8001b6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e00f      	b.n	8001b9e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	4013      	ands	r3, r2
 8001b88:	68ba      	ldr	r2, [r7, #8]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	bf0c      	ite	eq
 8001b8e:	2301      	moveq	r3, #1
 8001b90:	2300      	movne	r3, #0
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	461a      	mov	r2, r3
 8001b96:	79fb      	ldrb	r3, [r7, #7]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d09f      	beq.n	8001adc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3740      	adds	r7, #64	; 0x40
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
	...

08001ba8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	68da      	ldr	r2, [r3, #12]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689a      	ldr	r2, [r3, #8]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	431a      	orrs	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	695b      	ldr	r3, [r3, #20]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001be2:	f023 030c 	bic.w	r3, r3, #12
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	6812      	ldr	r2, [r2, #0]
 8001bea:	68b9      	ldr	r1, [r7, #8]
 8001bec:	430b      	orrs	r3, r1
 8001bee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	699a      	ldr	r2, [r3, #24]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	430a      	orrs	r2, r1
 8001c04:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a2c      	ldr	r2, [pc, #176]	; (8001cbc <UART_SetConfig+0x114>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d103      	bne.n	8001c18 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001c10:	f7ff fdc4 	bl	800179c <HAL_RCC_GetPCLK2Freq>
 8001c14:	60f8      	str	r0, [r7, #12]
 8001c16:	e002      	b.n	8001c1e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001c18:	f7ff fdac 	bl	8001774 <HAL_RCC_GetPCLK1Freq>
 8001c1c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	4613      	mov	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	4413      	add	r3, r2
 8001c26:	009a      	lsls	r2, r3, #2
 8001c28:	441a      	add	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c34:	4a22      	ldr	r2, [pc, #136]	; (8001cc0 <UART_SetConfig+0x118>)
 8001c36:	fba2 2303 	umull	r2, r3, r2, r3
 8001c3a:	095b      	lsrs	r3, r3, #5
 8001c3c:	0119      	lsls	r1, r3, #4
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	4613      	mov	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4413      	add	r3, r2
 8001c46:	009a      	lsls	r2, r3, #2
 8001c48:	441a      	add	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c54:	4b1a      	ldr	r3, [pc, #104]	; (8001cc0 <UART_SetConfig+0x118>)
 8001c56:	fba3 0302 	umull	r0, r3, r3, r2
 8001c5a:	095b      	lsrs	r3, r3, #5
 8001c5c:	2064      	movs	r0, #100	; 0x64
 8001c5e:	fb00 f303 	mul.w	r3, r0, r3
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	011b      	lsls	r3, r3, #4
 8001c66:	3332      	adds	r3, #50	; 0x32
 8001c68:	4a15      	ldr	r2, [pc, #84]	; (8001cc0 <UART_SetConfig+0x118>)
 8001c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6e:	095b      	lsrs	r3, r3, #5
 8001c70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c74:	4419      	add	r1, r3
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	4413      	add	r3, r2
 8001c7e:	009a      	lsls	r2, r3, #2
 8001c80:	441a      	add	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <UART_SetConfig+0x118>)
 8001c8e:	fba3 0302 	umull	r0, r3, r3, r2
 8001c92:	095b      	lsrs	r3, r3, #5
 8001c94:	2064      	movs	r0, #100	; 0x64
 8001c96:	fb00 f303 	mul.w	r3, r0, r3
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	011b      	lsls	r3, r3, #4
 8001c9e:	3332      	adds	r3, #50	; 0x32
 8001ca0:	4a07      	ldr	r2, [pc, #28]	; (8001cc0 <UART_SetConfig+0x118>)
 8001ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca6:	095b      	lsrs	r3, r3, #5
 8001ca8:	f003 020f 	and.w	r2, r3, #15
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	440a      	add	r2, r1
 8001cb2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001cb4:	bf00      	nop
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40013800 	.word	0x40013800
 8001cc0:	51eb851f 	.word	0x51eb851f

08001cc4 <siprintf>:
 8001cc4:	b40e      	push	{r1, r2, r3}
 8001cc6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001cca:	b500      	push	{lr}
 8001ccc:	b09c      	sub	sp, #112	; 0x70
 8001cce:	ab1d      	add	r3, sp, #116	; 0x74
 8001cd0:	9002      	str	r0, [sp, #8]
 8001cd2:	9006      	str	r0, [sp, #24]
 8001cd4:	9107      	str	r1, [sp, #28]
 8001cd6:	9104      	str	r1, [sp, #16]
 8001cd8:	4808      	ldr	r0, [pc, #32]	; (8001cfc <siprintf+0x38>)
 8001cda:	4909      	ldr	r1, [pc, #36]	; (8001d00 <siprintf+0x3c>)
 8001cdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8001ce0:	9105      	str	r1, [sp, #20]
 8001ce2:	6800      	ldr	r0, [r0, #0]
 8001ce4:	a902      	add	r1, sp, #8
 8001ce6:	9301      	str	r3, [sp, #4]
 8001ce8:	f000 f98e 	bl	8002008 <_svfiprintf_r>
 8001cec:	2200      	movs	r2, #0
 8001cee:	9b02      	ldr	r3, [sp, #8]
 8001cf0:	701a      	strb	r2, [r3, #0]
 8001cf2:	b01c      	add	sp, #112	; 0x70
 8001cf4:	f85d eb04 	ldr.w	lr, [sp], #4
 8001cf8:	b003      	add	sp, #12
 8001cfa:	4770      	bx	lr
 8001cfc:	20000058 	.word	0x20000058
 8001d00:	ffff0208 	.word	0xffff0208

08001d04 <memset>:
 8001d04:	4603      	mov	r3, r0
 8001d06:	4402      	add	r2, r0
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d100      	bne.n	8001d0e <memset+0xa>
 8001d0c:	4770      	bx	lr
 8001d0e:	f803 1b01 	strb.w	r1, [r3], #1
 8001d12:	e7f9      	b.n	8001d08 <memset+0x4>

08001d14 <__errno>:
 8001d14:	4b01      	ldr	r3, [pc, #4]	; (8001d1c <__errno+0x8>)
 8001d16:	6818      	ldr	r0, [r3, #0]
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	20000058 	.word	0x20000058

08001d20 <__libc_init_array>:
 8001d20:	b570      	push	{r4, r5, r6, lr}
 8001d22:	2600      	movs	r6, #0
 8001d24:	4d0c      	ldr	r5, [pc, #48]	; (8001d58 <__libc_init_array+0x38>)
 8001d26:	4c0d      	ldr	r4, [pc, #52]	; (8001d5c <__libc_init_array+0x3c>)
 8001d28:	1b64      	subs	r4, r4, r5
 8001d2a:	10a4      	asrs	r4, r4, #2
 8001d2c:	42a6      	cmp	r6, r4
 8001d2e:	d109      	bne.n	8001d44 <__libc_init_array+0x24>
 8001d30:	f000 fc7a 	bl	8002628 <_init>
 8001d34:	2600      	movs	r6, #0
 8001d36:	4d0a      	ldr	r5, [pc, #40]	; (8001d60 <__libc_init_array+0x40>)
 8001d38:	4c0a      	ldr	r4, [pc, #40]	; (8001d64 <__libc_init_array+0x44>)
 8001d3a:	1b64      	subs	r4, r4, r5
 8001d3c:	10a4      	asrs	r4, r4, #2
 8001d3e:	42a6      	cmp	r6, r4
 8001d40:	d105      	bne.n	8001d4e <__libc_init_array+0x2e>
 8001d42:	bd70      	pop	{r4, r5, r6, pc}
 8001d44:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d48:	4798      	blx	r3
 8001d4a:	3601      	adds	r6, #1
 8001d4c:	e7ee      	b.n	8001d2c <__libc_init_array+0xc>
 8001d4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d52:	4798      	blx	r3
 8001d54:	3601      	adds	r6, #1
 8001d56:	e7f2      	b.n	8001d3e <__libc_init_array+0x1e>
 8001d58:	08002a50 	.word	0x08002a50
 8001d5c:	08002a50 	.word	0x08002a50
 8001d60:	08002a50 	.word	0x08002a50
 8001d64:	08002a54 	.word	0x08002a54

08001d68 <__retarget_lock_acquire_recursive>:
 8001d68:	4770      	bx	lr

08001d6a <__retarget_lock_release_recursive>:
 8001d6a:	4770      	bx	lr

08001d6c <_free_r>:
 8001d6c:	b538      	push	{r3, r4, r5, lr}
 8001d6e:	4605      	mov	r5, r0
 8001d70:	2900      	cmp	r1, #0
 8001d72:	d040      	beq.n	8001df6 <_free_r+0x8a>
 8001d74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001d78:	1f0c      	subs	r4, r1, #4
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	bfb8      	it	lt
 8001d7e:	18e4      	addlt	r4, r4, r3
 8001d80:	f000 f8dc 	bl	8001f3c <__malloc_lock>
 8001d84:	4a1c      	ldr	r2, [pc, #112]	; (8001df8 <_free_r+0x8c>)
 8001d86:	6813      	ldr	r3, [r2, #0]
 8001d88:	b933      	cbnz	r3, 8001d98 <_free_r+0x2c>
 8001d8a:	6063      	str	r3, [r4, #4]
 8001d8c:	6014      	str	r4, [r2, #0]
 8001d8e:	4628      	mov	r0, r5
 8001d90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001d94:	f000 b8d8 	b.w	8001f48 <__malloc_unlock>
 8001d98:	42a3      	cmp	r3, r4
 8001d9a:	d908      	bls.n	8001dae <_free_r+0x42>
 8001d9c:	6820      	ldr	r0, [r4, #0]
 8001d9e:	1821      	adds	r1, r4, r0
 8001da0:	428b      	cmp	r3, r1
 8001da2:	bf01      	itttt	eq
 8001da4:	6819      	ldreq	r1, [r3, #0]
 8001da6:	685b      	ldreq	r3, [r3, #4]
 8001da8:	1809      	addeq	r1, r1, r0
 8001daa:	6021      	streq	r1, [r4, #0]
 8001dac:	e7ed      	b.n	8001d8a <_free_r+0x1e>
 8001dae:	461a      	mov	r2, r3
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	b10b      	cbz	r3, 8001db8 <_free_r+0x4c>
 8001db4:	42a3      	cmp	r3, r4
 8001db6:	d9fa      	bls.n	8001dae <_free_r+0x42>
 8001db8:	6811      	ldr	r1, [r2, #0]
 8001dba:	1850      	adds	r0, r2, r1
 8001dbc:	42a0      	cmp	r0, r4
 8001dbe:	d10b      	bne.n	8001dd8 <_free_r+0x6c>
 8001dc0:	6820      	ldr	r0, [r4, #0]
 8001dc2:	4401      	add	r1, r0
 8001dc4:	1850      	adds	r0, r2, r1
 8001dc6:	4283      	cmp	r3, r0
 8001dc8:	6011      	str	r1, [r2, #0]
 8001dca:	d1e0      	bne.n	8001d8e <_free_r+0x22>
 8001dcc:	6818      	ldr	r0, [r3, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	4408      	add	r0, r1
 8001dd2:	6010      	str	r0, [r2, #0]
 8001dd4:	6053      	str	r3, [r2, #4]
 8001dd6:	e7da      	b.n	8001d8e <_free_r+0x22>
 8001dd8:	d902      	bls.n	8001de0 <_free_r+0x74>
 8001dda:	230c      	movs	r3, #12
 8001ddc:	602b      	str	r3, [r5, #0]
 8001dde:	e7d6      	b.n	8001d8e <_free_r+0x22>
 8001de0:	6820      	ldr	r0, [r4, #0]
 8001de2:	1821      	adds	r1, r4, r0
 8001de4:	428b      	cmp	r3, r1
 8001de6:	bf01      	itttt	eq
 8001de8:	6819      	ldreq	r1, [r3, #0]
 8001dea:	685b      	ldreq	r3, [r3, #4]
 8001dec:	1809      	addeq	r1, r1, r0
 8001dee:	6021      	streq	r1, [r4, #0]
 8001df0:	6063      	str	r3, [r4, #4]
 8001df2:	6054      	str	r4, [r2, #4]
 8001df4:	e7cb      	b.n	8001d8e <_free_r+0x22>
 8001df6:	bd38      	pop	{r3, r4, r5, pc}
 8001df8:	20000208 	.word	0x20000208

08001dfc <sbrk_aligned>:
 8001dfc:	b570      	push	{r4, r5, r6, lr}
 8001dfe:	4e0e      	ldr	r6, [pc, #56]	; (8001e38 <sbrk_aligned+0x3c>)
 8001e00:	460c      	mov	r4, r1
 8001e02:	6831      	ldr	r1, [r6, #0]
 8001e04:	4605      	mov	r5, r0
 8001e06:	b911      	cbnz	r1, 8001e0e <sbrk_aligned+0x12>
 8001e08:	f000 fbaa 	bl	8002560 <_sbrk_r>
 8001e0c:	6030      	str	r0, [r6, #0]
 8001e0e:	4621      	mov	r1, r4
 8001e10:	4628      	mov	r0, r5
 8001e12:	f000 fba5 	bl	8002560 <_sbrk_r>
 8001e16:	1c43      	adds	r3, r0, #1
 8001e18:	d00a      	beq.n	8001e30 <sbrk_aligned+0x34>
 8001e1a:	1cc4      	adds	r4, r0, #3
 8001e1c:	f024 0403 	bic.w	r4, r4, #3
 8001e20:	42a0      	cmp	r0, r4
 8001e22:	d007      	beq.n	8001e34 <sbrk_aligned+0x38>
 8001e24:	1a21      	subs	r1, r4, r0
 8001e26:	4628      	mov	r0, r5
 8001e28:	f000 fb9a 	bl	8002560 <_sbrk_r>
 8001e2c:	3001      	adds	r0, #1
 8001e2e:	d101      	bne.n	8001e34 <sbrk_aligned+0x38>
 8001e30:	f04f 34ff 	mov.w	r4, #4294967295
 8001e34:	4620      	mov	r0, r4
 8001e36:	bd70      	pop	{r4, r5, r6, pc}
 8001e38:	2000020c 	.word	0x2000020c

08001e3c <_malloc_r>:
 8001e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001e40:	1ccd      	adds	r5, r1, #3
 8001e42:	f025 0503 	bic.w	r5, r5, #3
 8001e46:	3508      	adds	r5, #8
 8001e48:	2d0c      	cmp	r5, #12
 8001e4a:	bf38      	it	cc
 8001e4c:	250c      	movcc	r5, #12
 8001e4e:	2d00      	cmp	r5, #0
 8001e50:	4607      	mov	r7, r0
 8001e52:	db01      	blt.n	8001e58 <_malloc_r+0x1c>
 8001e54:	42a9      	cmp	r1, r5
 8001e56:	d905      	bls.n	8001e64 <_malloc_r+0x28>
 8001e58:	230c      	movs	r3, #12
 8001e5a:	2600      	movs	r6, #0
 8001e5c:	603b      	str	r3, [r7, #0]
 8001e5e:	4630      	mov	r0, r6
 8001e60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001e64:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001f38 <_malloc_r+0xfc>
 8001e68:	f000 f868 	bl	8001f3c <__malloc_lock>
 8001e6c:	f8d8 3000 	ldr.w	r3, [r8]
 8001e70:	461c      	mov	r4, r3
 8001e72:	bb5c      	cbnz	r4, 8001ecc <_malloc_r+0x90>
 8001e74:	4629      	mov	r1, r5
 8001e76:	4638      	mov	r0, r7
 8001e78:	f7ff ffc0 	bl	8001dfc <sbrk_aligned>
 8001e7c:	1c43      	adds	r3, r0, #1
 8001e7e:	4604      	mov	r4, r0
 8001e80:	d155      	bne.n	8001f2e <_malloc_r+0xf2>
 8001e82:	f8d8 4000 	ldr.w	r4, [r8]
 8001e86:	4626      	mov	r6, r4
 8001e88:	2e00      	cmp	r6, #0
 8001e8a:	d145      	bne.n	8001f18 <_malloc_r+0xdc>
 8001e8c:	2c00      	cmp	r4, #0
 8001e8e:	d048      	beq.n	8001f22 <_malloc_r+0xe6>
 8001e90:	6823      	ldr	r3, [r4, #0]
 8001e92:	4631      	mov	r1, r6
 8001e94:	4638      	mov	r0, r7
 8001e96:	eb04 0903 	add.w	r9, r4, r3
 8001e9a:	f000 fb61 	bl	8002560 <_sbrk_r>
 8001e9e:	4581      	cmp	r9, r0
 8001ea0:	d13f      	bne.n	8001f22 <_malloc_r+0xe6>
 8001ea2:	6821      	ldr	r1, [r4, #0]
 8001ea4:	4638      	mov	r0, r7
 8001ea6:	1a6d      	subs	r5, r5, r1
 8001ea8:	4629      	mov	r1, r5
 8001eaa:	f7ff ffa7 	bl	8001dfc <sbrk_aligned>
 8001eae:	3001      	adds	r0, #1
 8001eb0:	d037      	beq.n	8001f22 <_malloc_r+0xe6>
 8001eb2:	6823      	ldr	r3, [r4, #0]
 8001eb4:	442b      	add	r3, r5
 8001eb6:	6023      	str	r3, [r4, #0]
 8001eb8:	f8d8 3000 	ldr.w	r3, [r8]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d038      	beq.n	8001f32 <_malloc_r+0xf6>
 8001ec0:	685a      	ldr	r2, [r3, #4]
 8001ec2:	42a2      	cmp	r2, r4
 8001ec4:	d12b      	bne.n	8001f1e <_malloc_r+0xe2>
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	605a      	str	r2, [r3, #4]
 8001eca:	e00f      	b.n	8001eec <_malloc_r+0xb0>
 8001ecc:	6822      	ldr	r2, [r4, #0]
 8001ece:	1b52      	subs	r2, r2, r5
 8001ed0:	d41f      	bmi.n	8001f12 <_malloc_r+0xd6>
 8001ed2:	2a0b      	cmp	r2, #11
 8001ed4:	d917      	bls.n	8001f06 <_malloc_r+0xca>
 8001ed6:	1961      	adds	r1, r4, r5
 8001ed8:	42a3      	cmp	r3, r4
 8001eda:	6025      	str	r5, [r4, #0]
 8001edc:	bf18      	it	ne
 8001ede:	6059      	strne	r1, [r3, #4]
 8001ee0:	6863      	ldr	r3, [r4, #4]
 8001ee2:	bf08      	it	eq
 8001ee4:	f8c8 1000 	streq.w	r1, [r8]
 8001ee8:	5162      	str	r2, [r4, r5]
 8001eea:	604b      	str	r3, [r1, #4]
 8001eec:	4638      	mov	r0, r7
 8001eee:	f104 060b 	add.w	r6, r4, #11
 8001ef2:	f000 f829 	bl	8001f48 <__malloc_unlock>
 8001ef6:	f026 0607 	bic.w	r6, r6, #7
 8001efa:	1d23      	adds	r3, r4, #4
 8001efc:	1af2      	subs	r2, r6, r3
 8001efe:	d0ae      	beq.n	8001e5e <_malloc_r+0x22>
 8001f00:	1b9b      	subs	r3, r3, r6
 8001f02:	50a3      	str	r3, [r4, r2]
 8001f04:	e7ab      	b.n	8001e5e <_malloc_r+0x22>
 8001f06:	42a3      	cmp	r3, r4
 8001f08:	6862      	ldr	r2, [r4, #4]
 8001f0a:	d1dd      	bne.n	8001ec8 <_malloc_r+0x8c>
 8001f0c:	f8c8 2000 	str.w	r2, [r8]
 8001f10:	e7ec      	b.n	8001eec <_malloc_r+0xb0>
 8001f12:	4623      	mov	r3, r4
 8001f14:	6864      	ldr	r4, [r4, #4]
 8001f16:	e7ac      	b.n	8001e72 <_malloc_r+0x36>
 8001f18:	4634      	mov	r4, r6
 8001f1a:	6876      	ldr	r6, [r6, #4]
 8001f1c:	e7b4      	b.n	8001e88 <_malloc_r+0x4c>
 8001f1e:	4613      	mov	r3, r2
 8001f20:	e7cc      	b.n	8001ebc <_malloc_r+0x80>
 8001f22:	230c      	movs	r3, #12
 8001f24:	4638      	mov	r0, r7
 8001f26:	603b      	str	r3, [r7, #0]
 8001f28:	f000 f80e 	bl	8001f48 <__malloc_unlock>
 8001f2c:	e797      	b.n	8001e5e <_malloc_r+0x22>
 8001f2e:	6025      	str	r5, [r4, #0]
 8001f30:	e7dc      	b.n	8001eec <_malloc_r+0xb0>
 8001f32:	605b      	str	r3, [r3, #4]
 8001f34:	deff      	udf	#255	; 0xff
 8001f36:	bf00      	nop
 8001f38:	20000208 	.word	0x20000208

08001f3c <__malloc_lock>:
 8001f3c:	4801      	ldr	r0, [pc, #4]	; (8001f44 <__malloc_lock+0x8>)
 8001f3e:	f7ff bf13 	b.w	8001d68 <__retarget_lock_acquire_recursive>
 8001f42:	bf00      	nop
 8001f44:	20000204 	.word	0x20000204

08001f48 <__malloc_unlock>:
 8001f48:	4801      	ldr	r0, [pc, #4]	; (8001f50 <__malloc_unlock+0x8>)
 8001f4a:	f7ff bf0e 	b.w	8001d6a <__retarget_lock_release_recursive>
 8001f4e:	bf00      	nop
 8001f50:	20000204 	.word	0x20000204

08001f54 <__ssputs_r>:
 8001f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f58:	461f      	mov	r7, r3
 8001f5a:	688e      	ldr	r6, [r1, #8]
 8001f5c:	4682      	mov	sl, r0
 8001f5e:	42be      	cmp	r6, r7
 8001f60:	460c      	mov	r4, r1
 8001f62:	4690      	mov	r8, r2
 8001f64:	680b      	ldr	r3, [r1, #0]
 8001f66:	d82c      	bhi.n	8001fc2 <__ssputs_r+0x6e>
 8001f68:	898a      	ldrh	r2, [r1, #12]
 8001f6a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001f6e:	d026      	beq.n	8001fbe <__ssputs_r+0x6a>
 8001f70:	6965      	ldr	r5, [r4, #20]
 8001f72:	6909      	ldr	r1, [r1, #16]
 8001f74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001f78:	eba3 0901 	sub.w	r9, r3, r1
 8001f7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001f80:	1c7b      	adds	r3, r7, #1
 8001f82:	444b      	add	r3, r9
 8001f84:	106d      	asrs	r5, r5, #1
 8001f86:	429d      	cmp	r5, r3
 8001f88:	bf38      	it	cc
 8001f8a:	461d      	movcc	r5, r3
 8001f8c:	0553      	lsls	r3, r2, #21
 8001f8e:	d527      	bpl.n	8001fe0 <__ssputs_r+0x8c>
 8001f90:	4629      	mov	r1, r5
 8001f92:	f7ff ff53 	bl	8001e3c <_malloc_r>
 8001f96:	4606      	mov	r6, r0
 8001f98:	b360      	cbz	r0, 8001ff4 <__ssputs_r+0xa0>
 8001f9a:	464a      	mov	r2, r9
 8001f9c:	6921      	ldr	r1, [r4, #16]
 8001f9e:	f000 fafd 	bl	800259c <memcpy>
 8001fa2:	89a3      	ldrh	r3, [r4, #12]
 8001fa4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fac:	81a3      	strh	r3, [r4, #12]
 8001fae:	6126      	str	r6, [r4, #16]
 8001fb0:	444e      	add	r6, r9
 8001fb2:	6026      	str	r6, [r4, #0]
 8001fb4:	463e      	mov	r6, r7
 8001fb6:	6165      	str	r5, [r4, #20]
 8001fb8:	eba5 0509 	sub.w	r5, r5, r9
 8001fbc:	60a5      	str	r5, [r4, #8]
 8001fbe:	42be      	cmp	r6, r7
 8001fc0:	d900      	bls.n	8001fc4 <__ssputs_r+0x70>
 8001fc2:	463e      	mov	r6, r7
 8001fc4:	4632      	mov	r2, r6
 8001fc6:	4641      	mov	r1, r8
 8001fc8:	6820      	ldr	r0, [r4, #0]
 8001fca:	f000 faaf 	bl	800252c <memmove>
 8001fce:	2000      	movs	r0, #0
 8001fd0:	68a3      	ldr	r3, [r4, #8]
 8001fd2:	1b9b      	subs	r3, r3, r6
 8001fd4:	60a3      	str	r3, [r4, #8]
 8001fd6:	6823      	ldr	r3, [r4, #0]
 8001fd8:	4433      	add	r3, r6
 8001fda:	6023      	str	r3, [r4, #0]
 8001fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fe0:	462a      	mov	r2, r5
 8001fe2:	f000 fae9 	bl	80025b8 <_realloc_r>
 8001fe6:	4606      	mov	r6, r0
 8001fe8:	2800      	cmp	r0, #0
 8001fea:	d1e0      	bne.n	8001fae <__ssputs_r+0x5a>
 8001fec:	4650      	mov	r0, sl
 8001fee:	6921      	ldr	r1, [r4, #16]
 8001ff0:	f7ff febc 	bl	8001d6c <_free_r>
 8001ff4:	230c      	movs	r3, #12
 8001ff6:	f8ca 3000 	str.w	r3, [sl]
 8001ffa:	89a3      	ldrh	r3, [r4, #12]
 8001ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8002000:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002004:	81a3      	strh	r3, [r4, #12]
 8002006:	e7e9      	b.n	8001fdc <__ssputs_r+0x88>

08002008 <_svfiprintf_r>:
 8002008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800200c:	4698      	mov	r8, r3
 800200e:	898b      	ldrh	r3, [r1, #12]
 8002010:	4607      	mov	r7, r0
 8002012:	061b      	lsls	r3, r3, #24
 8002014:	460d      	mov	r5, r1
 8002016:	4614      	mov	r4, r2
 8002018:	b09d      	sub	sp, #116	; 0x74
 800201a:	d50e      	bpl.n	800203a <_svfiprintf_r+0x32>
 800201c:	690b      	ldr	r3, [r1, #16]
 800201e:	b963      	cbnz	r3, 800203a <_svfiprintf_r+0x32>
 8002020:	2140      	movs	r1, #64	; 0x40
 8002022:	f7ff ff0b 	bl	8001e3c <_malloc_r>
 8002026:	6028      	str	r0, [r5, #0]
 8002028:	6128      	str	r0, [r5, #16]
 800202a:	b920      	cbnz	r0, 8002036 <_svfiprintf_r+0x2e>
 800202c:	230c      	movs	r3, #12
 800202e:	603b      	str	r3, [r7, #0]
 8002030:	f04f 30ff 	mov.w	r0, #4294967295
 8002034:	e0d0      	b.n	80021d8 <_svfiprintf_r+0x1d0>
 8002036:	2340      	movs	r3, #64	; 0x40
 8002038:	616b      	str	r3, [r5, #20]
 800203a:	2300      	movs	r3, #0
 800203c:	9309      	str	r3, [sp, #36]	; 0x24
 800203e:	2320      	movs	r3, #32
 8002040:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002044:	2330      	movs	r3, #48	; 0x30
 8002046:	f04f 0901 	mov.w	r9, #1
 800204a:	f8cd 800c 	str.w	r8, [sp, #12]
 800204e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80021f0 <_svfiprintf_r+0x1e8>
 8002052:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002056:	4623      	mov	r3, r4
 8002058:	469a      	mov	sl, r3
 800205a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800205e:	b10a      	cbz	r2, 8002064 <_svfiprintf_r+0x5c>
 8002060:	2a25      	cmp	r2, #37	; 0x25
 8002062:	d1f9      	bne.n	8002058 <_svfiprintf_r+0x50>
 8002064:	ebba 0b04 	subs.w	fp, sl, r4
 8002068:	d00b      	beq.n	8002082 <_svfiprintf_r+0x7a>
 800206a:	465b      	mov	r3, fp
 800206c:	4622      	mov	r2, r4
 800206e:	4629      	mov	r1, r5
 8002070:	4638      	mov	r0, r7
 8002072:	f7ff ff6f 	bl	8001f54 <__ssputs_r>
 8002076:	3001      	adds	r0, #1
 8002078:	f000 80a9 	beq.w	80021ce <_svfiprintf_r+0x1c6>
 800207c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800207e:	445a      	add	r2, fp
 8002080:	9209      	str	r2, [sp, #36]	; 0x24
 8002082:	f89a 3000 	ldrb.w	r3, [sl]
 8002086:	2b00      	cmp	r3, #0
 8002088:	f000 80a1 	beq.w	80021ce <_svfiprintf_r+0x1c6>
 800208c:	2300      	movs	r3, #0
 800208e:	f04f 32ff 	mov.w	r2, #4294967295
 8002092:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002096:	f10a 0a01 	add.w	sl, sl, #1
 800209a:	9304      	str	r3, [sp, #16]
 800209c:	9307      	str	r3, [sp, #28]
 800209e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80020a2:	931a      	str	r3, [sp, #104]	; 0x68
 80020a4:	4654      	mov	r4, sl
 80020a6:	2205      	movs	r2, #5
 80020a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80020ac:	4850      	ldr	r0, [pc, #320]	; (80021f0 <_svfiprintf_r+0x1e8>)
 80020ae:	f000 fa67 	bl	8002580 <memchr>
 80020b2:	9a04      	ldr	r2, [sp, #16]
 80020b4:	b9d8      	cbnz	r0, 80020ee <_svfiprintf_r+0xe6>
 80020b6:	06d0      	lsls	r0, r2, #27
 80020b8:	bf44      	itt	mi
 80020ba:	2320      	movmi	r3, #32
 80020bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80020c0:	0711      	lsls	r1, r2, #28
 80020c2:	bf44      	itt	mi
 80020c4:	232b      	movmi	r3, #43	; 0x2b
 80020c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80020ca:	f89a 3000 	ldrb.w	r3, [sl]
 80020ce:	2b2a      	cmp	r3, #42	; 0x2a
 80020d0:	d015      	beq.n	80020fe <_svfiprintf_r+0xf6>
 80020d2:	4654      	mov	r4, sl
 80020d4:	2000      	movs	r0, #0
 80020d6:	f04f 0c0a 	mov.w	ip, #10
 80020da:	9a07      	ldr	r2, [sp, #28]
 80020dc:	4621      	mov	r1, r4
 80020de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80020e2:	3b30      	subs	r3, #48	; 0x30
 80020e4:	2b09      	cmp	r3, #9
 80020e6:	d94d      	bls.n	8002184 <_svfiprintf_r+0x17c>
 80020e8:	b1b0      	cbz	r0, 8002118 <_svfiprintf_r+0x110>
 80020ea:	9207      	str	r2, [sp, #28]
 80020ec:	e014      	b.n	8002118 <_svfiprintf_r+0x110>
 80020ee:	eba0 0308 	sub.w	r3, r0, r8
 80020f2:	fa09 f303 	lsl.w	r3, r9, r3
 80020f6:	4313      	orrs	r3, r2
 80020f8:	46a2      	mov	sl, r4
 80020fa:	9304      	str	r3, [sp, #16]
 80020fc:	e7d2      	b.n	80020a4 <_svfiprintf_r+0x9c>
 80020fe:	9b03      	ldr	r3, [sp, #12]
 8002100:	1d19      	adds	r1, r3, #4
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	9103      	str	r1, [sp, #12]
 8002106:	2b00      	cmp	r3, #0
 8002108:	bfbb      	ittet	lt
 800210a:	425b      	neglt	r3, r3
 800210c:	f042 0202 	orrlt.w	r2, r2, #2
 8002110:	9307      	strge	r3, [sp, #28]
 8002112:	9307      	strlt	r3, [sp, #28]
 8002114:	bfb8      	it	lt
 8002116:	9204      	strlt	r2, [sp, #16]
 8002118:	7823      	ldrb	r3, [r4, #0]
 800211a:	2b2e      	cmp	r3, #46	; 0x2e
 800211c:	d10c      	bne.n	8002138 <_svfiprintf_r+0x130>
 800211e:	7863      	ldrb	r3, [r4, #1]
 8002120:	2b2a      	cmp	r3, #42	; 0x2a
 8002122:	d134      	bne.n	800218e <_svfiprintf_r+0x186>
 8002124:	9b03      	ldr	r3, [sp, #12]
 8002126:	3402      	adds	r4, #2
 8002128:	1d1a      	adds	r2, r3, #4
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	9203      	str	r2, [sp, #12]
 800212e:	2b00      	cmp	r3, #0
 8002130:	bfb8      	it	lt
 8002132:	f04f 33ff 	movlt.w	r3, #4294967295
 8002136:	9305      	str	r3, [sp, #20]
 8002138:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80021f4 <_svfiprintf_r+0x1ec>
 800213c:	2203      	movs	r2, #3
 800213e:	4650      	mov	r0, sl
 8002140:	7821      	ldrb	r1, [r4, #0]
 8002142:	f000 fa1d 	bl	8002580 <memchr>
 8002146:	b138      	cbz	r0, 8002158 <_svfiprintf_r+0x150>
 8002148:	2240      	movs	r2, #64	; 0x40
 800214a:	9b04      	ldr	r3, [sp, #16]
 800214c:	eba0 000a 	sub.w	r0, r0, sl
 8002150:	4082      	lsls	r2, r0
 8002152:	4313      	orrs	r3, r2
 8002154:	3401      	adds	r4, #1
 8002156:	9304      	str	r3, [sp, #16]
 8002158:	f814 1b01 	ldrb.w	r1, [r4], #1
 800215c:	2206      	movs	r2, #6
 800215e:	4826      	ldr	r0, [pc, #152]	; (80021f8 <_svfiprintf_r+0x1f0>)
 8002160:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002164:	f000 fa0c 	bl	8002580 <memchr>
 8002168:	2800      	cmp	r0, #0
 800216a:	d038      	beq.n	80021de <_svfiprintf_r+0x1d6>
 800216c:	4b23      	ldr	r3, [pc, #140]	; (80021fc <_svfiprintf_r+0x1f4>)
 800216e:	bb1b      	cbnz	r3, 80021b8 <_svfiprintf_r+0x1b0>
 8002170:	9b03      	ldr	r3, [sp, #12]
 8002172:	3307      	adds	r3, #7
 8002174:	f023 0307 	bic.w	r3, r3, #7
 8002178:	3308      	adds	r3, #8
 800217a:	9303      	str	r3, [sp, #12]
 800217c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800217e:	4433      	add	r3, r6
 8002180:	9309      	str	r3, [sp, #36]	; 0x24
 8002182:	e768      	b.n	8002056 <_svfiprintf_r+0x4e>
 8002184:	460c      	mov	r4, r1
 8002186:	2001      	movs	r0, #1
 8002188:	fb0c 3202 	mla	r2, ip, r2, r3
 800218c:	e7a6      	b.n	80020dc <_svfiprintf_r+0xd4>
 800218e:	2300      	movs	r3, #0
 8002190:	f04f 0c0a 	mov.w	ip, #10
 8002194:	4619      	mov	r1, r3
 8002196:	3401      	adds	r4, #1
 8002198:	9305      	str	r3, [sp, #20]
 800219a:	4620      	mov	r0, r4
 800219c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80021a0:	3a30      	subs	r2, #48	; 0x30
 80021a2:	2a09      	cmp	r2, #9
 80021a4:	d903      	bls.n	80021ae <_svfiprintf_r+0x1a6>
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0c6      	beq.n	8002138 <_svfiprintf_r+0x130>
 80021aa:	9105      	str	r1, [sp, #20]
 80021ac:	e7c4      	b.n	8002138 <_svfiprintf_r+0x130>
 80021ae:	4604      	mov	r4, r0
 80021b0:	2301      	movs	r3, #1
 80021b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80021b6:	e7f0      	b.n	800219a <_svfiprintf_r+0x192>
 80021b8:	ab03      	add	r3, sp, #12
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	462a      	mov	r2, r5
 80021be:	4638      	mov	r0, r7
 80021c0:	4b0f      	ldr	r3, [pc, #60]	; (8002200 <_svfiprintf_r+0x1f8>)
 80021c2:	a904      	add	r1, sp, #16
 80021c4:	f3af 8000 	nop.w
 80021c8:	1c42      	adds	r2, r0, #1
 80021ca:	4606      	mov	r6, r0
 80021cc:	d1d6      	bne.n	800217c <_svfiprintf_r+0x174>
 80021ce:	89ab      	ldrh	r3, [r5, #12]
 80021d0:	065b      	lsls	r3, r3, #25
 80021d2:	f53f af2d 	bmi.w	8002030 <_svfiprintf_r+0x28>
 80021d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80021d8:	b01d      	add	sp, #116	; 0x74
 80021da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021de:	ab03      	add	r3, sp, #12
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	462a      	mov	r2, r5
 80021e4:	4638      	mov	r0, r7
 80021e6:	4b06      	ldr	r3, [pc, #24]	; (8002200 <_svfiprintf_r+0x1f8>)
 80021e8:	a904      	add	r1, sp, #16
 80021ea:	f000 f87d 	bl	80022e8 <_printf_i>
 80021ee:	e7eb      	b.n	80021c8 <_svfiprintf_r+0x1c0>
 80021f0:	08002a1a 	.word	0x08002a1a
 80021f4:	08002a20 	.word	0x08002a20
 80021f8:	08002a24 	.word	0x08002a24
 80021fc:	00000000 	.word	0x00000000
 8002200:	08001f55 	.word	0x08001f55

08002204 <_printf_common>:
 8002204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002208:	4616      	mov	r6, r2
 800220a:	4699      	mov	r9, r3
 800220c:	688a      	ldr	r2, [r1, #8]
 800220e:	690b      	ldr	r3, [r1, #16]
 8002210:	4607      	mov	r7, r0
 8002212:	4293      	cmp	r3, r2
 8002214:	bfb8      	it	lt
 8002216:	4613      	movlt	r3, r2
 8002218:	6033      	str	r3, [r6, #0]
 800221a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800221e:	460c      	mov	r4, r1
 8002220:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002224:	b10a      	cbz	r2, 800222a <_printf_common+0x26>
 8002226:	3301      	adds	r3, #1
 8002228:	6033      	str	r3, [r6, #0]
 800222a:	6823      	ldr	r3, [r4, #0]
 800222c:	0699      	lsls	r1, r3, #26
 800222e:	bf42      	ittt	mi
 8002230:	6833      	ldrmi	r3, [r6, #0]
 8002232:	3302      	addmi	r3, #2
 8002234:	6033      	strmi	r3, [r6, #0]
 8002236:	6825      	ldr	r5, [r4, #0]
 8002238:	f015 0506 	ands.w	r5, r5, #6
 800223c:	d106      	bne.n	800224c <_printf_common+0x48>
 800223e:	f104 0a19 	add.w	sl, r4, #25
 8002242:	68e3      	ldr	r3, [r4, #12]
 8002244:	6832      	ldr	r2, [r6, #0]
 8002246:	1a9b      	subs	r3, r3, r2
 8002248:	42ab      	cmp	r3, r5
 800224a:	dc2b      	bgt.n	80022a4 <_printf_common+0xa0>
 800224c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002250:	1e13      	subs	r3, r2, #0
 8002252:	6822      	ldr	r2, [r4, #0]
 8002254:	bf18      	it	ne
 8002256:	2301      	movne	r3, #1
 8002258:	0692      	lsls	r2, r2, #26
 800225a:	d430      	bmi.n	80022be <_printf_common+0xba>
 800225c:	4649      	mov	r1, r9
 800225e:	4638      	mov	r0, r7
 8002260:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002264:	47c0      	blx	r8
 8002266:	3001      	adds	r0, #1
 8002268:	d023      	beq.n	80022b2 <_printf_common+0xae>
 800226a:	6823      	ldr	r3, [r4, #0]
 800226c:	6922      	ldr	r2, [r4, #16]
 800226e:	f003 0306 	and.w	r3, r3, #6
 8002272:	2b04      	cmp	r3, #4
 8002274:	bf14      	ite	ne
 8002276:	2500      	movne	r5, #0
 8002278:	6833      	ldreq	r3, [r6, #0]
 800227a:	f04f 0600 	mov.w	r6, #0
 800227e:	bf08      	it	eq
 8002280:	68e5      	ldreq	r5, [r4, #12]
 8002282:	f104 041a 	add.w	r4, r4, #26
 8002286:	bf08      	it	eq
 8002288:	1aed      	subeq	r5, r5, r3
 800228a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800228e:	bf08      	it	eq
 8002290:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002294:	4293      	cmp	r3, r2
 8002296:	bfc4      	itt	gt
 8002298:	1a9b      	subgt	r3, r3, r2
 800229a:	18ed      	addgt	r5, r5, r3
 800229c:	42b5      	cmp	r5, r6
 800229e:	d11a      	bne.n	80022d6 <_printf_common+0xd2>
 80022a0:	2000      	movs	r0, #0
 80022a2:	e008      	b.n	80022b6 <_printf_common+0xb2>
 80022a4:	2301      	movs	r3, #1
 80022a6:	4652      	mov	r2, sl
 80022a8:	4649      	mov	r1, r9
 80022aa:	4638      	mov	r0, r7
 80022ac:	47c0      	blx	r8
 80022ae:	3001      	adds	r0, #1
 80022b0:	d103      	bne.n	80022ba <_printf_common+0xb6>
 80022b2:	f04f 30ff 	mov.w	r0, #4294967295
 80022b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022ba:	3501      	adds	r5, #1
 80022bc:	e7c1      	b.n	8002242 <_printf_common+0x3e>
 80022be:	2030      	movs	r0, #48	; 0x30
 80022c0:	18e1      	adds	r1, r4, r3
 80022c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80022c6:	1c5a      	adds	r2, r3, #1
 80022c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80022cc:	4422      	add	r2, r4
 80022ce:	3302      	adds	r3, #2
 80022d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80022d4:	e7c2      	b.n	800225c <_printf_common+0x58>
 80022d6:	2301      	movs	r3, #1
 80022d8:	4622      	mov	r2, r4
 80022da:	4649      	mov	r1, r9
 80022dc:	4638      	mov	r0, r7
 80022de:	47c0      	blx	r8
 80022e0:	3001      	adds	r0, #1
 80022e2:	d0e6      	beq.n	80022b2 <_printf_common+0xae>
 80022e4:	3601      	adds	r6, #1
 80022e6:	e7d9      	b.n	800229c <_printf_common+0x98>

080022e8 <_printf_i>:
 80022e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80022ec:	7e0f      	ldrb	r7, [r1, #24]
 80022ee:	4691      	mov	r9, r2
 80022f0:	2f78      	cmp	r7, #120	; 0x78
 80022f2:	4680      	mov	r8, r0
 80022f4:	460c      	mov	r4, r1
 80022f6:	469a      	mov	sl, r3
 80022f8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80022fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80022fe:	d807      	bhi.n	8002310 <_printf_i+0x28>
 8002300:	2f62      	cmp	r7, #98	; 0x62
 8002302:	d80a      	bhi.n	800231a <_printf_i+0x32>
 8002304:	2f00      	cmp	r7, #0
 8002306:	f000 80d5 	beq.w	80024b4 <_printf_i+0x1cc>
 800230a:	2f58      	cmp	r7, #88	; 0x58
 800230c:	f000 80c1 	beq.w	8002492 <_printf_i+0x1aa>
 8002310:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002314:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002318:	e03a      	b.n	8002390 <_printf_i+0xa8>
 800231a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800231e:	2b15      	cmp	r3, #21
 8002320:	d8f6      	bhi.n	8002310 <_printf_i+0x28>
 8002322:	a101      	add	r1, pc, #4	; (adr r1, 8002328 <_printf_i+0x40>)
 8002324:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002328:	08002381 	.word	0x08002381
 800232c:	08002395 	.word	0x08002395
 8002330:	08002311 	.word	0x08002311
 8002334:	08002311 	.word	0x08002311
 8002338:	08002311 	.word	0x08002311
 800233c:	08002311 	.word	0x08002311
 8002340:	08002395 	.word	0x08002395
 8002344:	08002311 	.word	0x08002311
 8002348:	08002311 	.word	0x08002311
 800234c:	08002311 	.word	0x08002311
 8002350:	08002311 	.word	0x08002311
 8002354:	0800249b 	.word	0x0800249b
 8002358:	080023c1 	.word	0x080023c1
 800235c:	08002455 	.word	0x08002455
 8002360:	08002311 	.word	0x08002311
 8002364:	08002311 	.word	0x08002311
 8002368:	080024bd 	.word	0x080024bd
 800236c:	08002311 	.word	0x08002311
 8002370:	080023c1 	.word	0x080023c1
 8002374:	08002311 	.word	0x08002311
 8002378:	08002311 	.word	0x08002311
 800237c:	0800245d 	.word	0x0800245d
 8002380:	682b      	ldr	r3, [r5, #0]
 8002382:	1d1a      	adds	r2, r3, #4
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	602a      	str	r2, [r5, #0]
 8002388:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800238c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002390:	2301      	movs	r3, #1
 8002392:	e0a0      	b.n	80024d6 <_printf_i+0x1ee>
 8002394:	6820      	ldr	r0, [r4, #0]
 8002396:	682b      	ldr	r3, [r5, #0]
 8002398:	0607      	lsls	r7, r0, #24
 800239a:	f103 0104 	add.w	r1, r3, #4
 800239e:	6029      	str	r1, [r5, #0]
 80023a0:	d501      	bpl.n	80023a6 <_printf_i+0xbe>
 80023a2:	681e      	ldr	r6, [r3, #0]
 80023a4:	e003      	b.n	80023ae <_printf_i+0xc6>
 80023a6:	0646      	lsls	r6, r0, #25
 80023a8:	d5fb      	bpl.n	80023a2 <_printf_i+0xba>
 80023aa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80023ae:	2e00      	cmp	r6, #0
 80023b0:	da03      	bge.n	80023ba <_printf_i+0xd2>
 80023b2:	232d      	movs	r3, #45	; 0x2d
 80023b4:	4276      	negs	r6, r6
 80023b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80023ba:	230a      	movs	r3, #10
 80023bc:	4859      	ldr	r0, [pc, #356]	; (8002524 <_printf_i+0x23c>)
 80023be:	e012      	b.n	80023e6 <_printf_i+0xfe>
 80023c0:	682b      	ldr	r3, [r5, #0]
 80023c2:	6820      	ldr	r0, [r4, #0]
 80023c4:	1d19      	adds	r1, r3, #4
 80023c6:	6029      	str	r1, [r5, #0]
 80023c8:	0605      	lsls	r5, r0, #24
 80023ca:	d501      	bpl.n	80023d0 <_printf_i+0xe8>
 80023cc:	681e      	ldr	r6, [r3, #0]
 80023ce:	e002      	b.n	80023d6 <_printf_i+0xee>
 80023d0:	0641      	lsls	r1, r0, #25
 80023d2:	d5fb      	bpl.n	80023cc <_printf_i+0xe4>
 80023d4:	881e      	ldrh	r6, [r3, #0]
 80023d6:	2f6f      	cmp	r7, #111	; 0x6f
 80023d8:	bf0c      	ite	eq
 80023da:	2308      	moveq	r3, #8
 80023dc:	230a      	movne	r3, #10
 80023de:	4851      	ldr	r0, [pc, #324]	; (8002524 <_printf_i+0x23c>)
 80023e0:	2100      	movs	r1, #0
 80023e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80023e6:	6865      	ldr	r5, [r4, #4]
 80023e8:	2d00      	cmp	r5, #0
 80023ea:	bfa8      	it	ge
 80023ec:	6821      	ldrge	r1, [r4, #0]
 80023ee:	60a5      	str	r5, [r4, #8]
 80023f0:	bfa4      	itt	ge
 80023f2:	f021 0104 	bicge.w	r1, r1, #4
 80023f6:	6021      	strge	r1, [r4, #0]
 80023f8:	b90e      	cbnz	r6, 80023fe <_printf_i+0x116>
 80023fa:	2d00      	cmp	r5, #0
 80023fc:	d04b      	beq.n	8002496 <_printf_i+0x1ae>
 80023fe:	4615      	mov	r5, r2
 8002400:	fbb6 f1f3 	udiv	r1, r6, r3
 8002404:	fb03 6711 	mls	r7, r3, r1, r6
 8002408:	5dc7      	ldrb	r7, [r0, r7]
 800240a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800240e:	4637      	mov	r7, r6
 8002410:	42bb      	cmp	r3, r7
 8002412:	460e      	mov	r6, r1
 8002414:	d9f4      	bls.n	8002400 <_printf_i+0x118>
 8002416:	2b08      	cmp	r3, #8
 8002418:	d10b      	bne.n	8002432 <_printf_i+0x14a>
 800241a:	6823      	ldr	r3, [r4, #0]
 800241c:	07de      	lsls	r6, r3, #31
 800241e:	d508      	bpl.n	8002432 <_printf_i+0x14a>
 8002420:	6923      	ldr	r3, [r4, #16]
 8002422:	6861      	ldr	r1, [r4, #4]
 8002424:	4299      	cmp	r1, r3
 8002426:	bfde      	ittt	le
 8002428:	2330      	movle	r3, #48	; 0x30
 800242a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800242e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002432:	1b52      	subs	r2, r2, r5
 8002434:	6122      	str	r2, [r4, #16]
 8002436:	464b      	mov	r3, r9
 8002438:	4621      	mov	r1, r4
 800243a:	4640      	mov	r0, r8
 800243c:	f8cd a000 	str.w	sl, [sp]
 8002440:	aa03      	add	r2, sp, #12
 8002442:	f7ff fedf 	bl	8002204 <_printf_common>
 8002446:	3001      	adds	r0, #1
 8002448:	d14a      	bne.n	80024e0 <_printf_i+0x1f8>
 800244a:	f04f 30ff 	mov.w	r0, #4294967295
 800244e:	b004      	add	sp, #16
 8002450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002454:	6823      	ldr	r3, [r4, #0]
 8002456:	f043 0320 	orr.w	r3, r3, #32
 800245a:	6023      	str	r3, [r4, #0]
 800245c:	2778      	movs	r7, #120	; 0x78
 800245e:	4832      	ldr	r0, [pc, #200]	; (8002528 <_printf_i+0x240>)
 8002460:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002464:	6823      	ldr	r3, [r4, #0]
 8002466:	6829      	ldr	r1, [r5, #0]
 8002468:	061f      	lsls	r7, r3, #24
 800246a:	f851 6b04 	ldr.w	r6, [r1], #4
 800246e:	d402      	bmi.n	8002476 <_printf_i+0x18e>
 8002470:	065f      	lsls	r7, r3, #25
 8002472:	bf48      	it	mi
 8002474:	b2b6      	uxthmi	r6, r6
 8002476:	07df      	lsls	r7, r3, #31
 8002478:	bf48      	it	mi
 800247a:	f043 0320 	orrmi.w	r3, r3, #32
 800247e:	6029      	str	r1, [r5, #0]
 8002480:	bf48      	it	mi
 8002482:	6023      	strmi	r3, [r4, #0]
 8002484:	b91e      	cbnz	r6, 800248e <_printf_i+0x1a6>
 8002486:	6823      	ldr	r3, [r4, #0]
 8002488:	f023 0320 	bic.w	r3, r3, #32
 800248c:	6023      	str	r3, [r4, #0]
 800248e:	2310      	movs	r3, #16
 8002490:	e7a6      	b.n	80023e0 <_printf_i+0xf8>
 8002492:	4824      	ldr	r0, [pc, #144]	; (8002524 <_printf_i+0x23c>)
 8002494:	e7e4      	b.n	8002460 <_printf_i+0x178>
 8002496:	4615      	mov	r5, r2
 8002498:	e7bd      	b.n	8002416 <_printf_i+0x12e>
 800249a:	682b      	ldr	r3, [r5, #0]
 800249c:	6826      	ldr	r6, [r4, #0]
 800249e:	1d18      	adds	r0, r3, #4
 80024a0:	6961      	ldr	r1, [r4, #20]
 80024a2:	6028      	str	r0, [r5, #0]
 80024a4:	0635      	lsls	r5, r6, #24
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	d501      	bpl.n	80024ae <_printf_i+0x1c6>
 80024aa:	6019      	str	r1, [r3, #0]
 80024ac:	e002      	b.n	80024b4 <_printf_i+0x1cc>
 80024ae:	0670      	lsls	r0, r6, #25
 80024b0:	d5fb      	bpl.n	80024aa <_printf_i+0x1c2>
 80024b2:	8019      	strh	r1, [r3, #0]
 80024b4:	2300      	movs	r3, #0
 80024b6:	4615      	mov	r5, r2
 80024b8:	6123      	str	r3, [r4, #16]
 80024ba:	e7bc      	b.n	8002436 <_printf_i+0x14e>
 80024bc:	682b      	ldr	r3, [r5, #0]
 80024be:	2100      	movs	r1, #0
 80024c0:	1d1a      	adds	r2, r3, #4
 80024c2:	602a      	str	r2, [r5, #0]
 80024c4:	681d      	ldr	r5, [r3, #0]
 80024c6:	6862      	ldr	r2, [r4, #4]
 80024c8:	4628      	mov	r0, r5
 80024ca:	f000 f859 	bl	8002580 <memchr>
 80024ce:	b108      	cbz	r0, 80024d4 <_printf_i+0x1ec>
 80024d0:	1b40      	subs	r0, r0, r5
 80024d2:	6060      	str	r0, [r4, #4]
 80024d4:	6863      	ldr	r3, [r4, #4]
 80024d6:	6123      	str	r3, [r4, #16]
 80024d8:	2300      	movs	r3, #0
 80024da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80024de:	e7aa      	b.n	8002436 <_printf_i+0x14e>
 80024e0:	462a      	mov	r2, r5
 80024e2:	4649      	mov	r1, r9
 80024e4:	4640      	mov	r0, r8
 80024e6:	6923      	ldr	r3, [r4, #16]
 80024e8:	47d0      	blx	sl
 80024ea:	3001      	adds	r0, #1
 80024ec:	d0ad      	beq.n	800244a <_printf_i+0x162>
 80024ee:	6823      	ldr	r3, [r4, #0]
 80024f0:	079b      	lsls	r3, r3, #30
 80024f2:	d413      	bmi.n	800251c <_printf_i+0x234>
 80024f4:	68e0      	ldr	r0, [r4, #12]
 80024f6:	9b03      	ldr	r3, [sp, #12]
 80024f8:	4298      	cmp	r0, r3
 80024fa:	bfb8      	it	lt
 80024fc:	4618      	movlt	r0, r3
 80024fe:	e7a6      	b.n	800244e <_printf_i+0x166>
 8002500:	2301      	movs	r3, #1
 8002502:	4632      	mov	r2, r6
 8002504:	4649      	mov	r1, r9
 8002506:	4640      	mov	r0, r8
 8002508:	47d0      	blx	sl
 800250a:	3001      	adds	r0, #1
 800250c:	d09d      	beq.n	800244a <_printf_i+0x162>
 800250e:	3501      	adds	r5, #1
 8002510:	68e3      	ldr	r3, [r4, #12]
 8002512:	9903      	ldr	r1, [sp, #12]
 8002514:	1a5b      	subs	r3, r3, r1
 8002516:	42ab      	cmp	r3, r5
 8002518:	dcf2      	bgt.n	8002500 <_printf_i+0x218>
 800251a:	e7eb      	b.n	80024f4 <_printf_i+0x20c>
 800251c:	2500      	movs	r5, #0
 800251e:	f104 0619 	add.w	r6, r4, #25
 8002522:	e7f5      	b.n	8002510 <_printf_i+0x228>
 8002524:	08002a2b 	.word	0x08002a2b
 8002528:	08002a3c 	.word	0x08002a3c

0800252c <memmove>:
 800252c:	4288      	cmp	r0, r1
 800252e:	b510      	push	{r4, lr}
 8002530:	eb01 0402 	add.w	r4, r1, r2
 8002534:	d902      	bls.n	800253c <memmove+0x10>
 8002536:	4284      	cmp	r4, r0
 8002538:	4623      	mov	r3, r4
 800253a:	d807      	bhi.n	800254c <memmove+0x20>
 800253c:	1e43      	subs	r3, r0, #1
 800253e:	42a1      	cmp	r1, r4
 8002540:	d008      	beq.n	8002554 <memmove+0x28>
 8002542:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002546:	f803 2f01 	strb.w	r2, [r3, #1]!
 800254a:	e7f8      	b.n	800253e <memmove+0x12>
 800254c:	4601      	mov	r1, r0
 800254e:	4402      	add	r2, r0
 8002550:	428a      	cmp	r2, r1
 8002552:	d100      	bne.n	8002556 <memmove+0x2a>
 8002554:	bd10      	pop	{r4, pc}
 8002556:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800255a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800255e:	e7f7      	b.n	8002550 <memmove+0x24>

08002560 <_sbrk_r>:
 8002560:	b538      	push	{r3, r4, r5, lr}
 8002562:	2300      	movs	r3, #0
 8002564:	4d05      	ldr	r5, [pc, #20]	; (800257c <_sbrk_r+0x1c>)
 8002566:	4604      	mov	r4, r0
 8002568:	4608      	mov	r0, r1
 800256a:	602b      	str	r3, [r5, #0]
 800256c:	f7fd ffae 	bl	80004cc <_sbrk>
 8002570:	1c43      	adds	r3, r0, #1
 8002572:	d102      	bne.n	800257a <_sbrk_r+0x1a>
 8002574:	682b      	ldr	r3, [r5, #0]
 8002576:	b103      	cbz	r3, 800257a <_sbrk_r+0x1a>
 8002578:	6023      	str	r3, [r4, #0]
 800257a:	bd38      	pop	{r3, r4, r5, pc}
 800257c:	20000200 	.word	0x20000200

08002580 <memchr>:
 8002580:	4603      	mov	r3, r0
 8002582:	b510      	push	{r4, lr}
 8002584:	b2c9      	uxtb	r1, r1
 8002586:	4402      	add	r2, r0
 8002588:	4293      	cmp	r3, r2
 800258a:	4618      	mov	r0, r3
 800258c:	d101      	bne.n	8002592 <memchr+0x12>
 800258e:	2000      	movs	r0, #0
 8002590:	e003      	b.n	800259a <memchr+0x1a>
 8002592:	7804      	ldrb	r4, [r0, #0]
 8002594:	3301      	adds	r3, #1
 8002596:	428c      	cmp	r4, r1
 8002598:	d1f6      	bne.n	8002588 <memchr+0x8>
 800259a:	bd10      	pop	{r4, pc}

0800259c <memcpy>:
 800259c:	440a      	add	r2, r1
 800259e:	4291      	cmp	r1, r2
 80025a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80025a4:	d100      	bne.n	80025a8 <memcpy+0xc>
 80025a6:	4770      	bx	lr
 80025a8:	b510      	push	{r4, lr}
 80025aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80025ae:	4291      	cmp	r1, r2
 80025b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80025b4:	d1f9      	bne.n	80025aa <memcpy+0xe>
 80025b6:	bd10      	pop	{r4, pc}

080025b8 <_realloc_r>:
 80025b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025bc:	4680      	mov	r8, r0
 80025be:	4614      	mov	r4, r2
 80025c0:	460e      	mov	r6, r1
 80025c2:	b921      	cbnz	r1, 80025ce <_realloc_r+0x16>
 80025c4:	4611      	mov	r1, r2
 80025c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80025ca:	f7ff bc37 	b.w	8001e3c <_malloc_r>
 80025ce:	b92a      	cbnz	r2, 80025dc <_realloc_r+0x24>
 80025d0:	f7ff fbcc 	bl	8001d6c <_free_r>
 80025d4:	4625      	mov	r5, r4
 80025d6:	4628      	mov	r0, r5
 80025d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80025dc:	f000 f81b 	bl	8002616 <_malloc_usable_size_r>
 80025e0:	4284      	cmp	r4, r0
 80025e2:	4607      	mov	r7, r0
 80025e4:	d802      	bhi.n	80025ec <_realloc_r+0x34>
 80025e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80025ea:	d812      	bhi.n	8002612 <_realloc_r+0x5a>
 80025ec:	4621      	mov	r1, r4
 80025ee:	4640      	mov	r0, r8
 80025f0:	f7ff fc24 	bl	8001e3c <_malloc_r>
 80025f4:	4605      	mov	r5, r0
 80025f6:	2800      	cmp	r0, #0
 80025f8:	d0ed      	beq.n	80025d6 <_realloc_r+0x1e>
 80025fa:	42bc      	cmp	r4, r7
 80025fc:	4622      	mov	r2, r4
 80025fe:	4631      	mov	r1, r6
 8002600:	bf28      	it	cs
 8002602:	463a      	movcs	r2, r7
 8002604:	f7ff ffca 	bl	800259c <memcpy>
 8002608:	4631      	mov	r1, r6
 800260a:	4640      	mov	r0, r8
 800260c:	f7ff fbae 	bl	8001d6c <_free_r>
 8002610:	e7e1      	b.n	80025d6 <_realloc_r+0x1e>
 8002612:	4635      	mov	r5, r6
 8002614:	e7df      	b.n	80025d6 <_realloc_r+0x1e>

08002616 <_malloc_usable_size_r>:
 8002616:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800261a:	1f18      	subs	r0, r3, #4
 800261c:	2b00      	cmp	r3, #0
 800261e:	bfbc      	itt	lt
 8002620:	580b      	ldrlt	r3, [r1, r0]
 8002622:	18c0      	addlt	r0, r0, r3
 8002624:	4770      	bx	lr
	...

08002628 <_init>:
 8002628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800262a:	bf00      	nop
 800262c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800262e:	bc08      	pop	{r3}
 8002630:	469e      	mov	lr, r3
 8002632:	4770      	bx	lr

08002634 <_fini>:
 8002634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002636:	bf00      	nop
 8002638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800263a:	bc08      	pop	{r3}
 800263c:	469e      	mov	lr, r3
 800263e:	4770      	bx	lr
