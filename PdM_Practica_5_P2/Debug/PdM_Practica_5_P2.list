
PdM_Practica_5_P2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024f8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000418  08002604  08002604  00012604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a1c  08002a1c  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08002a1c  08002a1c  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a1c  08002a1c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a1c  08002a1c  00012a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a20  08002a20  00012a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08002a24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  20000064  08002a88  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000234  08002a88  00020234  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006f07  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000173e  00000000  00000000  00026fd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006c0  00000000  00000000  00028718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000512  00000000  00000000  00028dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016597  00000000  00000000  000292ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008f69  00000000  00000000  0003f881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000805cc  00000000  00000000  000487ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001e70  00000000  00000000  000c8db8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000cac28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	080025ec 	.word	0x080025ec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	080025ec 	.word	0x080025ec

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fc5b 	bl	8000a0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f83b 	bl	80001d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f875 	bl	8000248 <MX_GPIO_Init>
  //MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */
  uartInit();
 800015e:	f000 faf7 	bl	8000750 <uartInit>
  debounceFSM_init();
 8000162:	f000 f9e7 	bl	8000534 <debounceFSM_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  delayInit(&delayHandle, delays[0]);
 8000166:	4b16      	ldr	r3, [pc, #88]	; (80001c0 <main+0x74>)
 8000168:	881b      	ldrh	r3, [r3, #0]
 800016a:	4619      	mov	r1, r3
 800016c:	4815      	ldr	r0, [pc, #84]	; (80001c4 <main+0x78>)
 800016e:	f000 fa8d 	bl	800068c <delayInit>
  uint8_t option = 0; // comenzar con la primer opcion de delay
 8000172:	2300      	movs	r3, #0
 8000174:	71fb      	strb	r3, [r7, #7]

  while(1){

	  // checkear el estado del pulsador y actualizar el valor que lee readKey() >> deteccion flanco descendente
	  debounceFSM_update();
 8000176:	f000 f9ed 	bl	8000554 <debounceFSM_update>

	  // si se detecto un flanco descendente, actualizar temporizado
	  if(readKey() == true){
 800017a:	f000 fa5d 	bl	8000638 <readKey>
 800017e:	4603      	mov	r3, r0
 8000180:	2b00      	cmp	r3, #0
 8000182:	d011      	beq.n	80001a8 <main+0x5c>
		  //HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		  option++; // con flanco descendente pasar al siguiente temporizado
 8000184:	79fb      	ldrb	r3, [r7, #7]
 8000186:	3301      	adds	r3, #1
 8000188:	71fb      	strb	r3, [r7, #7]
		  if(option >= delays_size){ // volver al inicio si se excede de rango
 800018a:	4b0f      	ldr	r3, [pc, #60]	; (80001c8 <main+0x7c>)
 800018c:	781b      	ldrb	r3, [r3, #0]
 800018e:	79fa      	ldrb	r2, [r7, #7]
 8000190:	429a      	cmp	r2, r3
 8000192:	d301      	bcc.n	8000198 <main+0x4c>
			  option = 0;
 8000194:	2300      	movs	r3, #0
 8000196:	71fb      	strb	r3, [r7, #7]
		  }
		  delayWrite(&delayHandle, delays[option]);
 8000198:	79fb      	ldrb	r3, [r7, #7]
 800019a:	4a09      	ldr	r2, [pc, #36]	; (80001c0 <main+0x74>)
 800019c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80001a0:	4619      	mov	r1, r3
 80001a2:	4808      	ldr	r0, [pc, #32]	; (80001c4 <main+0x78>)
 80001a4:	f000 faba 	bl	800071c <delayWrite>
	  }

	  // ejecutar el toggle con el temporizado adecuado
	  if(delayRead(&delayHandle) == true){
 80001a8:	4806      	ldr	r0, [pc, #24]	; (80001c4 <main+0x78>)
 80001aa:	f000 fa8c 	bl	80006c6 <delayRead>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d0e0      	beq.n	8000176 <main+0x2a>
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80001b4:	2120      	movs	r1, #32
 80001b6:	4805      	ldr	r0, [pc, #20]	; (80001cc <main+0x80>)
 80001b8:	f000 ff4b 	bl	8001052 <HAL_GPIO_TogglePin>
	  debounceFSM_update();
 80001bc:	e7db      	b.n	8000176 <main+0x2a>
 80001be:	bf00      	nop
 80001c0:	20000000 	.word	0x20000000
 80001c4:	20000080 	.word	0x20000080
 80001c8:	20000004 	.word	0x20000004
 80001cc:	40010800 	.word	0x40010800

080001d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b090      	sub	sp, #64	; 0x40
 80001d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001d6:	f107 0318 	add.w	r3, r7, #24
 80001da:	2228      	movs	r2, #40	; 0x28
 80001dc:	2100      	movs	r1, #0
 80001de:	4618      	mov	r0, r3
 80001e0:	f001 fd72 	bl	8001cc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001e4:	1d3b      	adds	r3, r7, #4
 80001e6:	2200      	movs	r2, #0
 80001e8:	601a      	str	r2, [r3, #0]
 80001ea:	605a      	str	r2, [r3, #4]
 80001ec:	609a      	str	r2, [r3, #8]
 80001ee:	60da      	str	r2, [r3, #12]
 80001f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001f2:	2301      	movs	r3, #1
 80001f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80001f6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80001fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001fc:	2300      	movs	r3, #0
 80001fe:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000200:	f107 0318 	add.w	r3, r7, #24
 8000204:	4618      	mov	r0, r3
 8000206:	f000 ff5f 	bl	80010c8 <HAL_RCC_OscConfig>
 800020a:	4603      	mov	r3, r0
 800020c:	2b00      	cmp	r3, #0
 800020e:	d001      	beq.n	8000214 <SystemClock_Config+0x44>
  {
    Error_Handler();
 8000210:	f000 f888 	bl	8000324 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000214:	230f      	movs	r3, #15
 8000216:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000218:	2301      	movs	r3, #1
 800021a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800021c:	2300      	movs	r3, #0
 800021e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000220:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000224:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000226:	2300      	movs	r3, #0
 8000228:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	2100      	movs	r1, #0
 800022e:	4618      	mov	r0, r3
 8000230:	f001 f9cc 	bl	80015cc <HAL_RCC_ClockConfig>
 8000234:	4603      	mov	r3, r0
 8000236:	2b00      	cmp	r3, #0
 8000238:	d001      	beq.n	800023e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800023a:	f000 f873 	bl	8000324 <Error_Handler>
  }
}
 800023e:	bf00      	nop
 8000240:	3740      	adds	r7, #64	; 0x40
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
	...

08000248 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b088      	sub	sp, #32
 800024c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800024e:	f107 0310 	add.w	r3, r7, #16
 8000252:	2200      	movs	r2, #0
 8000254:	601a      	str	r2, [r3, #0]
 8000256:	605a      	str	r2, [r3, #4]
 8000258:	609a      	str	r2, [r3, #8]
 800025a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800025c:	4b2d      	ldr	r3, [pc, #180]	; (8000314 <MX_GPIO_Init+0xcc>)
 800025e:	699b      	ldr	r3, [r3, #24]
 8000260:	4a2c      	ldr	r2, [pc, #176]	; (8000314 <MX_GPIO_Init+0xcc>)
 8000262:	f043 0310 	orr.w	r3, r3, #16
 8000266:	6193      	str	r3, [r2, #24]
 8000268:	4b2a      	ldr	r3, [pc, #168]	; (8000314 <MX_GPIO_Init+0xcc>)
 800026a:	699b      	ldr	r3, [r3, #24]
 800026c:	f003 0310 	and.w	r3, r3, #16
 8000270:	60fb      	str	r3, [r7, #12]
 8000272:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000274:	4b27      	ldr	r3, [pc, #156]	; (8000314 <MX_GPIO_Init+0xcc>)
 8000276:	699b      	ldr	r3, [r3, #24]
 8000278:	4a26      	ldr	r2, [pc, #152]	; (8000314 <MX_GPIO_Init+0xcc>)
 800027a:	f043 0320 	orr.w	r3, r3, #32
 800027e:	6193      	str	r3, [r2, #24]
 8000280:	4b24      	ldr	r3, [pc, #144]	; (8000314 <MX_GPIO_Init+0xcc>)
 8000282:	699b      	ldr	r3, [r3, #24]
 8000284:	f003 0320 	and.w	r3, r3, #32
 8000288:	60bb      	str	r3, [r7, #8]
 800028a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800028c:	4b21      	ldr	r3, [pc, #132]	; (8000314 <MX_GPIO_Init+0xcc>)
 800028e:	699b      	ldr	r3, [r3, #24]
 8000290:	4a20      	ldr	r2, [pc, #128]	; (8000314 <MX_GPIO_Init+0xcc>)
 8000292:	f043 0304 	orr.w	r3, r3, #4
 8000296:	6193      	str	r3, [r2, #24]
 8000298:	4b1e      	ldr	r3, [pc, #120]	; (8000314 <MX_GPIO_Init+0xcc>)
 800029a:	699b      	ldr	r3, [r3, #24]
 800029c:	f003 0304 	and.w	r3, r3, #4
 80002a0:	607b      	str	r3, [r7, #4]
 80002a2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002a4:	4b1b      	ldr	r3, [pc, #108]	; (8000314 <MX_GPIO_Init+0xcc>)
 80002a6:	699b      	ldr	r3, [r3, #24]
 80002a8:	4a1a      	ldr	r2, [pc, #104]	; (8000314 <MX_GPIO_Init+0xcc>)
 80002aa:	f043 0308 	orr.w	r3, r3, #8
 80002ae:	6193      	str	r3, [r2, #24]
 80002b0:	4b18      	ldr	r3, [pc, #96]	; (8000314 <MX_GPIO_Init+0xcc>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	f003 0308 	and.w	r3, r3, #8
 80002b8:	603b      	str	r3, [r7, #0]
 80002ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80002bc:	2200      	movs	r2, #0
 80002be:	2120      	movs	r1, #32
 80002c0:	4815      	ldr	r0, [pc, #84]	; (8000318 <MX_GPIO_Init+0xd0>)
 80002c2:	f000 feae 	bl	8001022 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002cc:	4b13      	ldr	r3, [pc, #76]	; (800031c <MX_GPIO_Init+0xd4>)
 80002ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d0:	2300      	movs	r3, #0
 80002d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80002d4:	f107 0310 	add.w	r3, r7, #16
 80002d8:	4619      	mov	r1, r3
 80002da:	4811      	ldr	r0, [pc, #68]	; (8000320 <MX_GPIO_Init+0xd8>)
 80002dc:	f000 fd06 	bl	8000cec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80002e0:	2320      	movs	r3, #32
 80002e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002e4:	2301      	movs	r3, #1
 80002e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002e8:	2300      	movs	r3, #0
 80002ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002ec:	2302      	movs	r3, #2
 80002ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80002f0:	f107 0310 	add.w	r3, r7, #16
 80002f4:	4619      	mov	r1, r3
 80002f6:	4808      	ldr	r0, [pc, #32]	; (8000318 <MX_GPIO_Init+0xd0>)
 80002f8:	f000 fcf8 	bl	8000cec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80002fc:	2200      	movs	r2, #0
 80002fe:	2100      	movs	r1, #0
 8000300:	2028      	movs	r0, #40	; 0x28
 8000302:	f000 fcbc 	bl	8000c7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000306:	2028      	movs	r0, #40	; 0x28
 8000308:	f000 fcd5 	bl	8000cb6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800030c:	bf00      	nop
 800030e:	3720      	adds	r7, #32
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}
 8000314:	40021000 	.word	0x40021000
 8000318:	40010800 	.word	0x40010800
 800031c:	10110000 	.word	0x10110000
 8000320:	40011000 	.word	0x40011000

08000324 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000328:	b672      	cpsid	i
}
 800032a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800032c:	e7fe      	b.n	800032c <Error_Handler+0x8>
	...

08000330 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000330:	b480      	push	{r7}
 8000332:	b085      	sub	sp, #20
 8000334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000336:	4b15      	ldr	r3, [pc, #84]	; (800038c <HAL_MspInit+0x5c>)
 8000338:	699b      	ldr	r3, [r3, #24]
 800033a:	4a14      	ldr	r2, [pc, #80]	; (800038c <HAL_MspInit+0x5c>)
 800033c:	f043 0301 	orr.w	r3, r3, #1
 8000340:	6193      	str	r3, [r2, #24]
 8000342:	4b12      	ldr	r3, [pc, #72]	; (800038c <HAL_MspInit+0x5c>)
 8000344:	699b      	ldr	r3, [r3, #24]
 8000346:	f003 0301 	and.w	r3, r3, #1
 800034a:	60bb      	str	r3, [r7, #8]
 800034c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800034e:	4b0f      	ldr	r3, [pc, #60]	; (800038c <HAL_MspInit+0x5c>)
 8000350:	69db      	ldr	r3, [r3, #28]
 8000352:	4a0e      	ldr	r2, [pc, #56]	; (800038c <HAL_MspInit+0x5c>)
 8000354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000358:	61d3      	str	r3, [r2, #28]
 800035a:	4b0c      	ldr	r3, [pc, #48]	; (800038c <HAL_MspInit+0x5c>)
 800035c:	69db      	ldr	r3, [r3, #28]
 800035e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000362:	607b      	str	r3, [r7, #4]
 8000364:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000366:	4b0a      	ldr	r3, [pc, #40]	; (8000390 <HAL_MspInit+0x60>)
 8000368:	685b      	ldr	r3, [r3, #4]
 800036a:	60fb      	str	r3, [r7, #12]
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000372:	60fb      	str	r3, [r7, #12]
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800037a:	60fb      	str	r3, [r7, #12]
 800037c:	4a04      	ldr	r2, [pc, #16]	; (8000390 <HAL_MspInit+0x60>)
 800037e:	68fb      	ldr	r3, [r7, #12]
 8000380:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000382:	bf00      	nop
 8000384:	3714      	adds	r7, #20
 8000386:	46bd      	mov	sp, r7
 8000388:	bc80      	pop	{r7}
 800038a:	4770      	bx	lr
 800038c:	40021000 	.word	0x40021000
 8000390:	40010000 	.word	0x40010000

08000394 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b088      	sub	sp, #32
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800039c:	f107 0310 	add.w	r3, r7, #16
 80003a0:	2200      	movs	r2, #0
 80003a2:	601a      	str	r2, [r3, #0]
 80003a4:	605a      	str	r2, [r3, #4]
 80003a6:	609a      	str	r2, [r3, #8]
 80003a8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	4a15      	ldr	r2, [pc, #84]	; (8000404 <HAL_UART_MspInit+0x70>)
 80003b0:	4293      	cmp	r3, r2
 80003b2:	d123      	bne.n	80003fc <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80003b4:	4b14      	ldr	r3, [pc, #80]	; (8000408 <HAL_UART_MspInit+0x74>)
 80003b6:	69db      	ldr	r3, [r3, #28]
 80003b8:	4a13      	ldr	r2, [pc, #76]	; (8000408 <HAL_UART_MspInit+0x74>)
 80003ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003be:	61d3      	str	r3, [r2, #28]
 80003c0:	4b11      	ldr	r3, [pc, #68]	; (8000408 <HAL_UART_MspInit+0x74>)
 80003c2:	69db      	ldr	r3, [r3, #28]
 80003c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003c8:	60fb      	str	r3, [r7, #12]
 80003ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003cc:	4b0e      	ldr	r3, [pc, #56]	; (8000408 <HAL_UART_MspInit+0x74>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	4a0d      	ldr	r2, [pc, #52]	; (8000408 <HAL_UART_MspInit+0x74>)
 80003d2:	f043 0304 	orr.w	r3, r3, #4
 80003d6:	6193      	str	r3, [r2, #24]
 80003d8:	4b0b      	ldr	r3, [pc, #44]	; (8000408 <HAL_UART_MspInit+0x74>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	f003 0304 	and.w	r3, r3, #4
 80003e0:	60bb      	str	r3, [r7, #8]
 80003e2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80003e4:	230c      	movs	r3, #12
 80003e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003e8:	2302      	movs	r3, #2
 80003ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ec:	2302      	movs	r3, #2
 80003ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003f0:	f107 0310 	add.w	r3, r7, #16
 80003f4:	4619      	mov	r1, r3
 80003f6:	4805      	ldr	r0, [pc, #20]	; (800040c <HAL_UART_MspInit+0x78>)
 80003f8:	f000 fc78 	bl	8000cec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80003fc:	bf00      	nop
 80003fe:	3720      	adds	r7, #32
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	40004400 	.word	0x40004400
 8000408:	40021000 	.word	0x40021000
 800040c:	40010800 	.word	0x40010800

08000410 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000414:	e7fe      	b.n	8000414 <NMI_Handler+0x4>

08000416 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000416:	b480      	push	{r7}
 8000418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800041a:	e7fe      	b.n	800041a <HardFault_Handler+0x4>

0800041c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000420:	e7fe      	b.n	8000420 <MemManage_Handler+0x4>

08000422 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000422:	b480      	push	{r7}
 8000424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000426:	e7fe      	b.n	8000426 <BusFault_Handler+0x4>

08000428 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800042c:	e7fe      	b.n	800042c <UsageFault_Handler+0x4>

0800042e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800042e:	b480      	push	{r7}
 8000430:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000432:	bf00      	nop
 8000434:	46bd      	mov	sp, r7
 8000436:	bc80      	pop	{r7}
 8000438:	4770      	bx	lr

0800043a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800043a:	b480      	push	{r7}
 800043c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800043e:	bf00      	nop
 8000440:	46bd      	mov	sp, r7
 8000442:	bc80      	pop	{r7}
 8000444:	4770      	bx	lr

08000446 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000446:	b480      	push	{r7}
 8000448:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800044a:	bf00      	nop
 800044c:	46bd      	mov	sp, r7
 800044e:	bc80      	pop	{r7}
 8000450:	4770      	bx	lr

08000452 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000452:	b580      	push	{r7, lr}
 8000454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000456:	f000 fb1f 	bl	8000a98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800045a:	bf00      	nop
 800045c:	bd80      	pop	{r7, pc}

0800045e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800045e:	b580      	push	{r7, lr}
 8000460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000462:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000466:	f000 fe0d 	bl	8001084 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800046a:	bf00      	nop
 800046c:	bd80      	pop	{r7, pc}
	...

08000470 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b086      	sub	sp, #24
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000478:	4a14      	ldr	r2, [pc, #80]	; (80004cc <_sbrk+0x5c>)
 800047a:	4b15      	ldr	r3, [pc, #84]	; (80004d0 <_sbrk+0x60>)
 800047c:	1ad3      	subs	r3, r2, r3
 800047e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000480:	697b      	ldr	r3, [r7, #20]
 8000482:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000484:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <_sbrk+0x64>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	2b00      	cmp	r3, #0
 800048a:	d102      	bne.n	8000492 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800048c:	4b11      	ldr	r3, [pc, #68]	; (80004d4 <_sbrk+0x64>)
 800048e:	4a12      	ldr	r2, [pc, #72]	; (80004d8 <_sbrk+0x68>)
 8000490:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000492:	4b10      	ldr	r3, [pc, #64]	; (80004d4 <_sbrk+0x64>)
 8000494:	681a      	ldr	r2, [r3, #0]
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	4413      	add	r3, r2
 800049a:	693a      	ldr	r2, [r7, #16]
 800049c:	429a      	cmp	r2, r3
 800049e:	d207      	bcs.n	80004b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004a0:	f001 fc1a 	bl	8001cd8 <__errno>
 80004a4:	4603      	mov	r3, r0
 80004a6:	220c      	movs	r2, #12
 80004a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004aa:	f04f 33ff 	mov.w	r3, #4294967295
 80004ae:	e009      	b.n	80004c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004b0:	4b08      	ldr	r3, [pc, #32]	; (80004d4 <_sbrk+0x64>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004b6:	4b07      	ldr	r3, [pc, #28]	; (80004d4 <_sbrk+0x64>)
 80004b8:	681a      	ldr	r2, [r3, #0]
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	4413      	add	r3, r2
 80004be:	4a05      	ldr	r2, [pc, #20]	; (80004d4 <_sbrk+0x64>)
 80004c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004c2:	68fb      	ldr	r3, [r7, #12]
}
 80004c4:	4618      	mov	r0, r3
 80004c6:	3718      	adds	r7, #24
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	20005000 	.word	0x20005000
 80004d0:	00000400 	.word	0x00000400
 80004d4:	2000008c 	.word	0x2000008c
 80004d8:	20000238 	.word	0x20000238

080004dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004e0:	bf00      	nop
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bc80      	pop	{r7}
 80004e6:	4770      	bx	lr

080004e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004e8:	f7ff fff8 	bl	80004dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004ec:	480b      	ldr	r0, [pc, #44]	; (800051c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80004ee:	490c      	ldr	r1, [pc, #48]	; (8000520 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80004f0:	4a0c      	ldr	r2, [pc, #48]	; (8000524 <LoopFillZerobss+0x16>)
  movs r3, #0
 80004f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004f4:	e002      	b.n	80004fc <LoopCopyDataInit>

080004f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004fa:	3304      	adds	r3, #4

080004fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000500:	d3f9      	bcc.n	80004f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000502:	4a09      	ldr	r2, [pc, #36]	; (8000528 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000504:	4c09      	ldr	r4, [pc, #36]	; (800052c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000506:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000508:	e001      	b.n	800050e <LoopFillZerobss>

0800050a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800050a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800050c:	3204      	adds	r2, #4

0800050e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800050e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000510:	d3fb      	bcc.n	800050a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000512:	f001 fbe7 	bl	8001ce4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000516:	f7ff fe19 	bl	800014c <main>
  bx lr
 800051a:	4770      	bx	lr
  ldr r0, =_sdata
 800051c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000520:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000524:	08002a24 	.word	0x08002a24
  ldr r2, =_sbss
 8000528:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800052c:	20000234 	.word	0x20000234

08000530 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000530:	e7fe      	b.n	8000530 <ADC1_2_IRQHandler>
	...

08000534 <debounceFSM_init>:


/* DEFINICION DE FUNCIONES */

// Definicion de inicializacion del anti rebote
void debounceFSM_init(){
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
	estado = BUTTON_UP;
 8000538:	4b04      	ldr	r3, [pc, #16]	; (800054c <debounceFSM_init+0x18>)
 800053a:	2200      	movs	r2, #0
 800053c:	701a      	strb	r2, [r3, #0]
	//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, RESET); // iniciar con led apagado (salida)
	delayInit(&delayHandle, DEBOUNCE_DELAY);
 800053e:	2128      	movs	r1, #40	; 0x28
 8000540:	4803      	ldr	r0, [pc, #12]	; (8000550 <debounceFSM_init+0x1c>)
 8000542:	f000 f8a3 	bl	800068c <delayInit>
}
 8000546:	bf00      	nop
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	20000090 	.word	0x20000090
 8000550:	20000094 	.word	0x20000094

08000554 <debounceFSM_update>:

// Definicion de actualizacion del valor del pulsador con anti rebote por software
void debounceFSM_update(){
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
	switch(estado){
 8000558:	4b33      	ldr	r3, [pc, #204]	; (8000628 <debounceFSM_update+0xd4>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	2b03      	cmp	r3, #3
 800055e:	d856      	bhi.n	800060e <debounceFSM_update+0xba>
 8000560:	a201      	add	r2, pc, #4	; (adr r2, 8000568 <debounceFSM_update+0x14>)
 8000562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000566:	bf00      	nop
 8000568:	08000579 	.word	0x08000579
 800056c:	08000591 	.word	0x08000591
 8000570:	080005c7 	.word	0x080005c7
 8000574:	080005df 	.word	0x080005df
	case BUTTON_UP:
		// si el pin esta low pasar al estado BUTTON_FALLING
		if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 0){
 8000578:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800057c:	482b      	ldr	r0, [pc, #172]	; (800062c <debounceFSM_update+0xd8>)
 800057e:	f000 fd39 	bl	8000ff4 <HAL_GPIO_ReadPin>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d145      	bne.n	8000614 <debounceFSM_update+0xc0>
			estado = BUTTON_FALLING;
 8000588:	4b27      	ldr	r3, [pc, #156]	; (8000628 <debounceFSM_update+0xd4>)
 800058a:	2201      	movs	r2, #1
 800058c:	701a      	strb	r2, [r3, #0]
		}
		break;
 800058e:	e041      	b.n	8000614 <debounceFSM_update+0xc0>
	case BUTTON_FALLING:
		// si el pin esta high luego de 40 ms, volver a BUTTON_UP
		// si el pin esta low luego de 40 ms, cambiar a BUTTON_DOWN
		if(delayRead(&delayHandle) == true){ // si transcurrio el debounceDelay, muestrear pulsador nuevamente. Iniciar delay si es llamado por 1ra vez
 8000590:	4827      	ldr	r0, [pc, #156]	; (8000630 <debounceFSM_update+0xdc>)
 8000592:	f000 f898 	bl	80006c6 <delayRead>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d03d      	beq.n	8000618 <debounceFSM_update+0xc4>
			if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 1){ // pulsador no presionado >> 1
 800059c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005a0:	4822      	ldr	r0, [pc, #136]	; (800062c <debounceFSM_update+0xd8>)
 80005a2:	f000 fd27 	bl	8000ff4 <HAL_GPIO_ReadPin>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d103      	bne.n	80005b4 <debounceFSM_update+0x60>
				estado = BUTTON_UP; // si sigue high, el estado vuelve a BUTTON_UP
 80005ac:	4b1e      	ldr	r3, [pc, #120]	; (8000628 <debounceFSM_update+0xd4>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	701a      	strb	r2, [r3, #0]
				buttonPressed();
				// Reemplazo del encendido del led por la deteccion unica del flanco descendente
				fallingState = true;
			}
		}
		break;
 80005b2:	e031      	b.n	8000618 <debounceFSM_update+0xc4>
				estado = BUTTON_DOWN;
 80005b4:	4b1c      	ldr	r3, [pc, #112]	; (8000628 <debounceFSM_update+0xd4>)
 80005b6:	2202      	movs	r2, #2
 80005b8:	701a      	strb	r2, [r3, #0]
				buttonPressed();
 80005ba:	f000 f853 	bl	8000664 <buttonPressed>
				fallingState = true;
 80005be:	4b1d      	ldr	r3, [pc, #116]	; (8000634 <debounceFSM_update+0xe0>)
 80005c0:	2201      	movs	r2, #1
 80005c2:	701a      	strb	r2, [r3, #0]
		break;
 80005c4:	e028      	b.n	8000618 <debounceFSM_update+0xc4>
	case BUTTON_DOWN:
		// si el pin esta high, pasar al estado BUTTON_RAISING
		if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 1){
 80005c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ca:	4818      	ldr	r0, [pc, #96]	; (800062c <debounceFSM_update+0xd8>)
 80005cc:	f000 fd12 	bl	8000ff4 <HAL_GPIO_ReadPin>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d122      	bne.n	800061c <debounceFSM_update+0xc8>
			estado = BUTTON_RAISING;
 80005d6:	4b14      	ldr	r3, [pc, #80]	; (8000628 <debounceFSM_update+0xd4>)
 80005d8:	2203      	movs	r2, #3
 80005da:	701a      	strb	r2, [r3, #0]
		}
		break;
 80005dc:	e01e      	b.n	800061c <debounceFSM_update+0xc8>
	case BUTTON_RAISING:
		// si el pin esta low luego de 40 ms, volver a BUTTON_DOWN
		// si el pin esta high luego de 40 ms, cambiar a BUTTON_UP
		if(delayRead(&delayHandle) == true){ // si transcurrio el debounceDelay, muestrear pulsador nuevamente
 80005de:	4814      	ldr	r0, [pc, #80]	; (8000630 <debounceFSM_update+0xdc>)
 80005e0:	f000 f871 	bl	80006c6 <delayRead>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d01a      	beq.n	8000620 <debounceFSM_update+0xcc>
			if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 0){ // pulsador presionado >> 0
 80005ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ee:	480f      	ldr	r0, [pc, #60]	; (800062c <debounceFSM_update+0xd8>)
 80005f0:	f000 fd00 	bl	8000ff4 <HAL_GPIO_ReadPin>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d103      	bne.n	8000602 <debounceFSM_update+0xae>
				estado = BUTTON_DOWN; // si sigue low, el estado vuelve a BUTTON_DOWN
 80005fa:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <debounceFSM_update+0xd4>)
 80005fc:	2202      	movs	r2, #2
 80005fe:	701a      	strb	r2, [r3, #0]
				// ejecutar buttonReleased()
				buttonReleased();
			}
		}

		break;
 8000600:	e00e      	b.n	8000620 <debounceFSM_update+0xcc>
				estado = BUTTON_UP;
 8000602:	4b09      	ldr	r3, [pc, #36]	; (8000628 <debounceFSM_update+0xd4>)
 8000604:	2200      	movs	r2, #0
 8000606:	701a      	strb	r2, [r3, #0]
				buttonReleased();
 8000608:	f000 f836 	bl	8000678 <buttonReleased>
		break;
 800060c:	e008      	b.n	8000620 <debounceFSM_update+0xcc>
	default:
		// checkear errores
		// reiniciar estado
		debounceFSM_init();
 800060e:	f7ff ff91 	bl	8000534 <debounceFSM_init>
		break;
 8000612:	e006      	b.n	8000622 <debounceFSM_update+0xce>
		break;
 8000614:	bf00      	nop
 8000616:	e004      	b.n	8000622 <debounceFSM_update+0xce>
		break;
 8000618:	bf00      	nop
 800061a:	e002      	b.n	8000622 <debounceFSM_update+0xce>
		break;
 800061c:	bf00      	nop
 800061e:	e000      	b.n	8000622 <debounceFSM_update+0xce>
		break;
 8000620:	bf00      	nop
	}
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000090 	.word	0x20000090
 800062c:	40011000 	.word	0x40011000
 8000630:	20000094 	.word	0x20000094
 8000634:	20000091 	.word	0x20000091

08000638 <readKey>:

bool_t readKey(){
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
	bool_t result = false;
 800063e:	2300      	movs	r3, #0
 8000640:	71fb      	strb	r3, [r7, #7]
	// retornar true solo si se detecta flanco descendente
	if(fallingState == true){
 8000642:	4b07      	ldr	r3, [pc, #28]	; (8000660 <readKey+0x28>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d004      	beq.n	8000654 <readKey+0x1c>
		fallingState = false; // resetear variable privada
 800064a:	4b05      	ldr	r3, [pc, #20]	; (8000660 <readKey+0x28>)
 800064c:	2200      	movs	r2, #0
 800064e:	701a      	strb	r2, [r3, #0]
		result = true;
 8000650:	2301      	movs	r3, #1
 8000652:	71fb      	strb	r3, [r7, #7]
	}
	return result;
 8000654:	79fb      	ldrb	r3, [r7, #7]
}
 8000656:	4618      	mov	r0, r3
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr
 8000660:	20000091 	.word	0x20000091

08000664 <buttonPressed>:


// Definicion de funcion para boton presionado
void buttonPressed(){
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, SET);
	// ejecutar la accion deseada al detectar pulsado
	uartSendString("\r\nFlanco descendente!\r\n");
 8000668:	4802      	ldr	r0, [pc, #8]	; (8000674 <buttonPressed+0x10>)
 800066a:	f000 f8b3 	bl	80007d4 <uartSendString>
}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	08002604 	.word	0x08002604

08000678 <buttonReleased>:

// Definicion de funcion para boton liberado
void buttonReleased(){
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, RESET);
	// ejecutar la accion deseada al detectar liberacion
	uartSendString("\r\nFlanco ascendente!\r\n");
 800067c:	4802      	ldr	r0, [pc, #8]	; (8000688 <buttonReleased+0x10>)
 800067e:	f000 f8a9 	bl	80007d4 <uartSendString>
}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	0800261c 	.word	0x0800261c

0800068c <delayInit>:
/**
	* @brief Inicializacion del temporizador
	* @param delay struct {startTime, duration, running}
	* @retval Ninguno
	*/
void delayInit( delay_t * delay, tick_t duration ){
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	6039      	str	r1, [r7, #0]
	if(duration > 10000) duration = 10000; // limitar el tiempo a 10 segundos
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	f242 7210 	movw	r2, #10000	; 0x2710
 800069c:	4293      	cmp	r3, r2
 800069e:	d902      	bls.n	80006a6 <delayInit+0x1a>
 80006a0:	f242 7310 	movw	r3, #10000	; 0x2710
 80006a4:	603b      	str	r3, [r7, #0]
	if(duration < 5) duration = 5; // limitar el tiempo minimo a 5 ms
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	2b04      	cmp	r3, #4
 80006aa:	d801      	bhi.n	80006b0 <delayInit+0x24>
 80006ac:	2305      	movs	r3, #5
 80006ae:	603b      	str	r3, [r7, #0]

	delay->duration = duration;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	683a      	ldr	r2, [r7, #0]
 80006b4:	605a      	str	r2, [r3, #4]
	delay->running = false;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2200      	movs	r2, #0
 80006ba:	721a      	strb	r2, [r3, #8]
}
 80006bc:	bf00      	nop
 80006be:	370c      	adds	r7, #12
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bc80      	pop	{r7}
 80006c4:	4770      	bx	lr

080006c6 <delayRead>:
/**
	* @brief Comparacion de delay vs contador milisegundos. Inicia timer si no esta en func
	* @param delay struct {startTime, duration, running}
	* @retval bool true si se cumplio el tiempo / false si no
	*/
bool_t delayRead( delay_t * delay ){
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b082      	sub	sp, #8
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]

	if(delay->running == false){ // activar timer
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	7a1b      	ldrb	r3, [r3, #8]
 80006d2:	f083 0301 	eor.w	r3, r3, #1
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d00a      	beq.n	80006f2 <delayRead+0x2c>
		delay->running = true;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2201      	movs	r2, #1
 80006e0:	721a      	strb	r2, [r3, #8]
		delay->startTime = HAL_GetTick(); // tomar valor de contador en [ms] actual
 80006e2:	f000 f9eb 	bl	8000abc <HAL_GetTick>
 80006e6:	4603      	mov	r3, r0
 80006e8:	461a      	mov	r2, r3
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	601a      	str	r2, [r3, #0]
		return false; // salir de la funcion
 80006ee:	2300      	movs	r3, #0
 80006f0:	e010      	b.n	8000714 <delayRead+0x4e>
	} else {
		// si running == true ya estaba activo el timer, comparar valor actual con duration
		if(HAL_GetTick() - delay->startTime > delay->duration){ // si es timeout
 80006f2:	f000 f9e3 	bl	8000abc <HAL_GetTick>
 80006f6:	4603      	mov	r3, r0
 80006f8:	461a      	mov	r2, r3
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	1ad2      	subs	r2, r2, r3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	685b      	ldr	r3, [r3, #4]
 8000704:	429a      	cmp	r2, r3
 8000706:	d904      	bls.n	8000712 <delayRead+0x4c>
			delay->running = false; // reset el flag
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	2200      	movs	r2, #0
 800070c:	721a      	strb	r2, [r3, #8]
			return true;
 800070e:	2301      	movs	r3, #1
 8000710:	e000      	b.n	8000714 <delayRead+0x4e>
		} else {
			// si no es timeout
			return false;
 8000712:	2300      	movs	r3, #0
		}
	}
}
 8000714:	4618      	mov	r0, r3
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <delayWrite>:
/**
	* @brief Cambiar valor de duration
	* @param delay struct {startTime, duration, running}
	* @retval Ninguno
	*/
void delayWrite( delay_t * delay, tick_t duration ){
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	6039      	str	r1, [r7, #0]
	if(duration > 10000) duration = 10000; // limitar el tiempo a 10 segundos
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	f242 7210 	movw	r2, #10000	; 0x2710
 800072c:	4293      	cmp	r3, r2
 800072e:	d902      	bls.n	8000736 <delayWrite+0x1a>
 8000730:	f242 7310 	movw	r3, #10000	; 0x2710
 8000734:	603b      	str	r3, [r7, #0]
	if(duration < 5) duration = 5; // limitar el tiempo minimo a 5 ms
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	2b04      	cmp	r3, #4
 800073a:	d801      	bhi.n	8000740 <delayWrite+0x24>
 800073c:	2305      	movs	r3, #5
 800073e:	603b      	str	r3, [r7, #0]

	delay->duration = duration;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	683a      	ldr	r2, [r7, #0]
 8000744:	605a      	str	r2, [r3, #4]
}
 8000746:	bf00      	nop
 8000748:	370c      	adds	r7, #12
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr

08000750 <uartInit>:

/* > Descripcion: Inicializa la uart con la configuracion preestablecida y envia dicha config a la terminal
 * > Parametro: ninguno
 * > Retorno: retorna un boolt_t true en caso exito o false caso contrario
 */
bool_t uartInit(){
 8000750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000752:	b091      	sub	sp, #68	; 0x44
 8000754:	af0e      	add	r7, sp, #56	; 0x38
	// uartHandle >> estructura de dato UART_HandleTypeDef declarada en API_uart.h
	bool_t returnFlag = false;
 8000756:	2300      	movs	r3, #0
 8000758:	71fb      	strb	r3, [r7, #7]

	uartHandle.Instance = USE_USART; // instancia de la uart >> usb conectado a usart2
 800075a:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <uartInit+0x7c>)
 800075c:	4a1c      	ldr	r2, [pc, #112]	; (80007d0 <uartInit+0x80>)
 800075e:	601a      	str	r2, [r3, #0]
	uartHandle.Init.BaudRate = 9600; // baudrate tipico
 8000760:	4b1a      	ldr	r3, [pc, #104]	; (80007cc <uartInit+0x7c>)
 8000762:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000766:	605a      	str	r2, [r3, #4]
	uartHandle.Init.WordLength = UART_WORDLENGTH_8B; // tamano de los datos >> 8 bits
 8000768:	4b18      	ldr	r3, [pc, #96]	; (80007cc <uartInit+0x7c>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
	uartHandle.Init.StopBits = UART_STOPBITS_1; // cantidad de stop bits >> 1 solo
 800076e:	4b17      	ldr	r3, [pc, #92]	; (80007cc <uartInit+0x7c>)
 8000770:	2200      	movs	r2, #0
 8000772:	60da      	str	r2, [r3, #12]
	uartHandle.Init.Parity = UART_PARITY_NONE; // tipo de paridad >> ninguno
 8000774:	4b15      	ldr	r3, [pc, #84]	; (80007cc <uartInit+0x7c>)
 8000776:	2200      	movs	r2, #0
 8000778:	611a      	str	r2, [r3, #16]
	uartHandle.Init.Mode = UART_MODE_TX_RX; // modo recepcion/recepcion habilitado
 800077a:	4b14      	ldr	r3, [pc, #80]	; (80007cc <uartInit+0x7c>)
 800077c:	220c      	movs	r2, #12
 800077e:	615a      	str	r2, [r3, #20]
	uartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE; // sin control de flujo por hardware
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <uartInit+0x7c>)
 8000782:	2200      	movs	r2, #0
 8000784:	619a      	str	r2, [r3, #24]
	uartHandle.Init.OverSampling = UART_OVERSAMPLING_16; // cantidad de muestras por tiempo de bit
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <uartInit+0x7c>)
 8000788:	2200      	movs	r2, #0
 800078a:	61da      	str	r2, [r3, #28]

	if (HAL_UART_Init(&uartHandle) == HAL_OK){ // retornar true si es exitosa la configuracion
 800078c:	480f      	ldr	r0, [pc, #60]	; (80007cc <uartInit+0x7c>)
 800078e:	f001 f8ab 	bl	80018e8 <HAL_UART_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d113      	bne.n	80007c0 <uartInit+0x70>
		print_uart_config(uartHandle); // imprimir configuracion si la config fue exitosa
 8000798:	4e0c      	ldr	r6, [pc, #48]	; (80007cc <uartInit+0x7c>)
 800079a:	466d      	mov	r5, sp
 800079c:	f106 0410 	add.w	r4, r6, #16
 80007a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007ac:	e894 0003 	ldmia.w	r4, {r0, r1}
 80007b0:	e885 0003 	stmia.w	r5, {r0, r1}
 80007b4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80007b8:	f000 f82e 	bl	8000818 <print_uart_config>
		returnFlag = true;
 80007bc:	2301      	movs	r3, #1
 80007be:	71fb      	strb	r3, [r7, #7]
	}

	return returnFlag;
 80007c0:	79fb      	ldrb	r3, [r7, #7]
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007ca:	bf00      	nop
 80007cc:	200000a0 	.word	0x200000a0
 80007d0:	40004400 	.word	0x40004400

080007d4 <uartSendString>:
/* > Descripcion: envia un string (buffer <pstring>) por la uart, finalizando en el caracter NULL
 * > Parametro: <pstring> puntero del tipo uint8_t
 * 				El buffer de envio tendra una cantidad maxima de caracteres definida en <SEND_BUFFER_MAX_SIZE>
 * > Retorno: ninguno
 */
void uartSendString(uint8_t * pstring){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
	// pstring se envia sin tamano debe recorrerse incrementando la direccion por aritmetica de pointers
	uint16_t index = 0; // indice para recorrer array pstring, admite hasta 2^16 caracteres
 80007dc:	2300      	movs	r3, #0
 80007de:	81fb      	strh	r3, [r7, #14]
	while(1){
		if( (*(pstring+index) == '\0') || (index > SEND_BUFFER_MAX_SIZE) ) break; // al encontrarse el NULL salir de funcion
 80007e0:	89fb      	ldrh	r3, [r7, #14]
 80007e2:	687a      	ldr	r2, [r7, #4]
 80007e4:	4413      	add	r3, r2
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d00e      	beq.n	800080a <uartSendString+0x36>
 80007ec:	89fb      	ldrh	r3, [r7, #14]
 80007ee:	2b7f      	cmp	r3, #127	; 0x7f
 80007f0:	d80b      	bhi.n	800080a <uartSendString+0x36>
		HAL_UART_Transmit(&uartHandle, (pstring+index), 1, 100); // enviar caracter x caracter
 80007f2:	89fb      	ldrh	r3, [r7, #14]
 80007f4:	687a      	ldr	r2, [r7, #4]
 80007f6:	18d1      	adds	r1, r2, r3
 80007f8:	2364      	movs	r3, #100	; 0x64
 80007fa:	2201      	movs	r2, #1
 80007fc:	4805      	ldr	r0, [pc, #20]	; (8000814 <uartSendString+0x40>)
 80007fe:	f001 f8c3 	bl	8001988 <HAL_UART_Transmit>
		index++;
 8000802:	89fb      	ldrh	r3, [r7, #14]
 8000804:	3301      	adds	r3, #1
 8000806:	81fb      	strh	r3, [r7, #14]
		if( (*(pstring+index) == '\0') || (index > SEND_BUFFER_MAX_SIZE) ) break; // al encontrarse el NULL salir de funcion
 8000808:	e7ea      	b.n	80007e0 <uartSendString+0xc>
	}
}
 800080a:	bf00      	nop
 800080c:	3710      	adds	r7, #16
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	200000a0 	.word	0x200000a0

08000818 <print_uart_config>:

/* > Descripcion: imprime a la terminal serie la configuracion de la UART
 * > Parametro: <uart> handler de la uart
 * > Retorno: ninguno
 */
void print_uart_config(UART_HandleTypeDef uart){
 8000818:	b084      	sub	sp, #16
 800081a:	b580      	push	{r7, lr}
 800081c:	b088      	sub	sp, #32
 800081e:	af00      	add	r7, sp, #0
 8000820:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8000824:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uartSendString("\r\n**************************** INICIO ****************************\r\n");
 8000828:	4859      	ldr	r0, [pc, #356]	; (8000990 <print_uart_config+0x178>)
 800082a:	f7ff ffd3 	bl	80007d4 <uartSendString>
	// Instance
	if (uart.Instance == USART1){
 800082e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000830:	4a58      	ldr	r2, [pc, #352]	; (8000994 <print_uart_config+0x17c>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d103      	bne.n	800083e <print_uart_config+0x26>
		uartSendString("* Instance:		USART1\r\n");
 8000836:	4858      	ldr	r0, [pc, #352]	; (8000998 <print_uart_config+0x180>)
 8000838:	f7ff ffcc 	bl	80007d4 <uartSendString>
 800083c:	e012      	b.n	8000864 <print_uart_config+0x4c>
	}
	else if (uart.Instance == USART2){
 800083e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000840:	4a56      	ldr	r2, [pc, #344]	; (800099c <print_uart_config+0x184>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d103      	bne.n	800084e <print_uart_config+0x36>
		uartSendString("* Instance:		USART2\r\n");
 8000846:	4856      	ldr	r0, [pc, #344]	; (80009a0 <print_uart_config+0x188>)
 8000848:	f7ff ffc4 	bl	80007d4 <uartSendString>
 800084c:	e00a      	b.n	8000864 <print_uart_config+0x4c>
	}
	else if (uart.Instance == USART3) {
 800084e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000850:	4a54      	ldr	r2, [pc, #336]	; (80009a4 <print_uart_config+0x18c>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d103      	bne.n	800085e <print_uart_config+0x46>
		uartSendString("* Instance:		USART3\r\n");
 8000856:	4854      	ldr	r0, [pc, #336]	; (80009a8 <print_uart_config+0x190>)
 8000858:	f7ff ffbc 	bl	80007d4 <uartSendString>
 800085c:	e002      	b.n	8000864 <print_uart_config+0x4c>
	}
	else {
		uartSendString("* Instance:		ERROR\r\n");
 800085e:	4853      	ldr	r0, [pc, #332]	; (80009ac <print_uart_config+0x194>)
 8000860:	f7ff ffb8 	bl	80007d4 <uartSendString>
	}

	// baudrate
	char br[32];
	sprintf(br,"* BaudRate:		%d\r\n", uart.Init.BaudRate);
 8000864:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000866:	463b      	mov	r3, r7
 8000868:	4951      	ldr	r1, [pc, #324]	; (80009b0 <print_uart_config+0x198>)
 800086a:	4618      	mov	r0, r3
 800086c:	f001 fa0c 	bl	8001c88 <siprintf>
	uartSendString(br);
 8000870:	463b      	mov	r3, r7
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff ffae 	bl	80007d4 <uartSendString>

	// WordLength
	if (uart.Init.WordLength == UART_WORDLENGTH_8B){
 8000878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800087a:	2b00      	cmp	r3, #0
 800087c:	d103      	bne.n	8000886 <print_uart_config+0x6e>
		uartSendString("* WordLength:		UART_WORDLENGTH_8B\r\n");
 800087e:	484d      	ldr	r0, [pc, #308]	; (80009b4 <print_uart_config+0x19c>)
 8000880:	f7ff ffa8 	bl	80007d4 <uartSendString>
 8000884:	e00a      	b.n	800089c <print_uart_config+0x84>
	}
	else if (uart.Init.WordLength == UART_WORDLENGTH_9B){
 8000886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000888:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800088c:	d103      	bne.n	8000896 <print_uart_config+0x7e>
		uartSendString("* WordLength:		UART_WORDLENGTH_9B\r\n");
 800088e:	484a      	ldr	r0, [pc, #296]	; (80009b8 <print_uart_config+0x1a0>)
 8000890:	f7ff ffa0 	bl	80007d4 <uartSendString>
 8000894:	e002      	b.n	800089c <print_uart_config+0x84>
	}
	else{
		uartSendString("* WordLength:		ERROR\r\n");
 8000896:	4849      	ldr	r0, [pc, #292]	; (80009bc <print_uart_config+0x1a4>)
 8000898:	f7ff ff9c 	bl	80007d4 <uartSendString>
	}

	// stopbits
	if ( uart.Init.StopBits == UART_STOPBITS_1){
 800089c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d103      	bne.n	80008aa <print_uart_config+0x92>
		uartSendString("* StopBits:		UART_STOPBITS_1\r\n");
 80008a2:	4847      	ldr	r0, [pc, #284]	; (80009c0 <print_uart_config+0x1a8>)
 80008a4:	f7ff ff96 	bl	80007d4 <uartSendString>
 80008a8:	e00a      	b.n	80008c0 <print_uart_config+0xa8>
	}
	else if (uart.Init.StopBits == UART_STOPBITS_2){
 80008aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008b0:	d103      	bne.n	80008ba <print_uart_config+0xa2>
		uartSendString("* StopBits:		UART_STOPBITS_2\r\n");
 80008b2:	4844      	ldr	r0, [pc, #272]	; (80009c4 <print_uart_config+0x1ac>)
 80008b4:	f7ff ff8e 	bl	80007d4 <uartSendString>
 80008b8:	e002      	b.n	80008c0 <print_uart_config+0xa8>
	}
	else{
		uartSendString("* StopBits:		ERROR\r\n");
 80008ba:	4843      	ldr	r0, [pc, #268]	; (80009c8 <print_uart_config+0x1b0>)
 80008bc:	f7ff ff8a 	bl	80007d4 <uartSendString>
	}

	// Parity
	if (uart.Init.Parity == UART_PARITY_NONE){
 80008c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d103      	bne.n	80008ce <print_uart_config+0xb6>
		uartSendString("* Parity:		UART_PARITY_NONE\r\n");
 80008c6:	4841      	ldr	r0, [pc, #260]	; (80009cc <print_uart_config+0x1b4>)
 80008c8:	f7ff ff84 	bl	80007d4 <uartSendString>
 80008cc:	e012      	b.n	80008f4 <print_uart_config+0xdc>
	}
	else if (uart.Init.Parity == UART_PARITY_EVEN){
 80008ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008d4:	d103      	bne.n	80008de <print_uart_config+0xc6>
		uartSendString("* Parity:		UART_PARITY_EVEN\r\n");
 80008d6:	483e      	ldr	r0, [pc, #248]	; (80009d0 <print_uart_config+0x1b8>)
 80008d8:	f7ff ff7c 	bl	80007d4 <uartSendString>
 80008dc:	e00a      	b.n	80008f4 <print_uart_config+0xdc>
	}
	else if (uart.Init.Parity == UART_PARITY_ODD){
 80008de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008e0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80008e4:	d103      	bne.n	80008ee <print_uart_config+0xd6>
		uartSendString("* Parity:		UART_PARITY_ODD\r\n");
 80008e6:	483b      	ldr	r0, [pc, #236]	; (80009d4 <print_uart_config+0x1bc>)
 80008e8:	f7ff ff74 	bl	80007d4 <uartSendString>
 80008ec:	e002      	b.n	80008f4 <print_uart_config+0xdc>
	}
	else{
		uartSendString("* Parity:		ERROR\r\n");
 80008ee:	483a      	ldr	r0, [pc, #232]	; (80009d8 <print_uart_config+0x1c0>)
 80008f0:	f7ff ff70 	bl	80007d4 <uartSendString>
	}

	// mode
	if (uart.Init.Mode == UART_MODE_TX_RX){
 80008f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008f6:	2b0c      	cmp	r3, #12
 80008f8:	d103      	bne.n	8000902 <print_uart_config+0xea>
		uartSendString("* Mode:			UART_MODE_TX_RX\r\n");
 80008fa:	4838      	ldr	r0, [pc, #224]	; (80009dc <print_uart_config+0x1c4>)
 80008fc:	f7ff ff6a 	bl	80007d4 <uartSendString>
 8000900:	e010      	b.n	8000924 <print_uart_config+0x10c>
	}
	else if (uart.Init.Mode == UART_MODE_RX){
 8000902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000904:	2b04      	cmp	r3, #4
 8000906:	d103      	bne.n	8000910 <print_uart_config+0xf8>
		uartSendString("* Mode:			UART_MODE_RX\r\n");
 8000908:	4835      	ldr	r0, [pc, #212]	; (80009e0 <print_uart_config+0x1c8>)
 800090a:	f7ff ff63 	bl	80007d4 <uartSendString>
 800090e:	e009      	b.n	8000924 <print_uart_config+0x10c>
	}
	else if (uart.Init.Mode == UART_MODE_TX){
 8000910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000912:	2b08      	cmp	r3, #8
 8000914:	d103      	bne.n	800091e <print_uart_config+0x106>
		uartSendString("* Mode:			UART_MODE_TX\r\n");
 8000916:	4833      	ldr	r0, [pc, #204]	; (80009e4 <print_uart_config+0x1cc>)
 8000918:	f7ff ff5c 	bl	80007d4 <uartSendString>
 800091c:	e002      	b.n	8000924 <print_uart_config+0x10c>
	}
	else{
		uartSendString("* Mode:			ERROR\r\n");
 800091e:	4832      	ldr	r0, [pc, #200]	; (80009e8 <print_uart_config+0x1d0>)
 8000920:	f7ff ff58 	bl	80007d4 <uartSendString>
	}

	// flow control
	if (uart.Init.HwFlowCtl == UART_HWCONTROL_NONE){
 8000924:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000926:	2b00      	cmp	r3, #0
 8000928:	d103      	bne.n	8000932 <print_uart_config+0x11a>
		uartSendString("* HwFlowCtl:		UART_HWCONTROL_NONE\r\n");
 800092a:	4830      	ldr	r0, [pc, #192]	; (80009ec <print_uart_config+0x1d4>)
 800092c:	f7ff ff52 	bl	80007d4 <uartSendString>
 8000930:	e01a      	b.n	8000968 <print_uart_config+0x150>
	}
	else if (uart.Init.HwFlowCtl == UART_HWCONTROL_RTS){
 8000932:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000934:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000938:	d103      	bne.n	8000942 <print_uart_config+0x12a>
		uartSendString("* HwFlowCtl:		UART_HWCONTROL_RTS\r\n");
 800093a:	482d      	ldr	r0, [pc, #180]	; (80009f0 <print_uart_config+0x1d8>)
 800093c:	f7ff ff4a 	bl	80007d4 <uartSendString>
 8000940:	e012      	b.n	8000968 <print_uart_config+0x150>
	}
	else if (uart.Init.HwFlowCtl == UART_HWCONTROL_CTS){
 8000942:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000944:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000948:	d103      	bne.n	8000952 <print_uart_config+0x13a>
		uartSendString("* HwFlowCtl:		UART_HWCONTROL_CTS\r\n");
 800094a:	482a      	ldr	r0, [pc, #168]	; (80009f4 <print_uart_config+0x1dc>)
 800094c:	f7ff ff42 	bl	80007d4 <uartSendString>
 8000950:	e00a      	b.n	8000968 <print_uart_config+0x150>
	}
	else if (uart.Init.HwFlowCtl == UART_HWCONTROL_RTS_CTS){
 8000952:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000954:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000958:	d103      	bne.n	8000962 <print_uart_config+0x14a>
		uartSendString("* HwFlowCtl:		UART_HWCONTROL_RTS_CTS\r\n");
 800095a:	4827      	ldr	r0, [pc, #156]	; (80009f8 <print_uart_config+0x1e0>)
 800095c:	f7ff ff3a 	bl	80007d4 <uartSendString>
 8000960:	e002      	b.n	8000968 <print_uart_config+0x150>
	}
	else{
		uartSendString("* HwFlowCtl:		ERROR\r\n");
 8000962:	4826      	ldr	r0, [pc, #152]	; (80009fc <print_uart_config+0x1e4>)
 8000964:	f7ff ff36 	bl	80007d4 <uartSendString>
	}

	// oversampling
	if (uart.Init.OverSampling == UART_OVERSAMPLING_16){
 8000968:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800096a:	2b00      	cmp	r3, #0
 800096c:	d103      	bne.n	8000976 <print_uart_config+0x15e>
		uartSendString("* OverSampling:		UART_OVERSAMPLING_16\r\n");
 800096e:	4824      	ldr	r0, [pc, #144]	; (8000a00 <print_uart_config+0x1e8>)
 8000970:	f7ff ff30 	bl	80007d4 <uartSendString>
 8000974:	e002      	b.n	800097c <print_uart_config+0x164>
	}
	else{
		uartSendString("* OverSampling:		ERROR\r\n");
 8000976:	4823      	ldr	r0, [pc, #140]	; (8000a04 <print_uart_config+0x1ec>)
 8000978:	f7ff ff2c 	bl	80007d4 <uartSendString>
	}

	uartSendString("****************************************************************\r\n\r\n");
 800097c:	4822      	ldr	r0, [pc, #136]	; (8000a08 <print_uart_config+0x1f0>)
 800097e:	f7ff ff29 	bl	80007d4 <uartSendString>
}
 8000982:	bf00      	nop
 8000984:	3720      	adds	r7, #32
 8000986:	46bd      	mov	sp, r7
 8000988:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800098c:	b004      	add	sp, #16
 800098e:	4770      	bx	lr
 8000990:	08002634 	.word	0x08002634
 8000994:	40013800 	.word	0x40013800
 8000998:	0800267c 	.word	0x0800267c
 800099c:	40004400 	.word	0x40004400
 80009a0:	08002694 	.word	0x08002694
 80009a4:	40004800 	.word	0x40004800
 80009a8:	080026ac 	.word	0x080026ac
 80009ac:	080026c4 	.word	0x080026c4
 80009b0:	080026dc 	.word	0x080026dc
 80009b4:	080026f0 	.word	0x080026f0
 80009b8:	08002714 	.word	0x08002714
 80009bc:	08002738 	.word	0x08002738
 80009c0:	08002750 	.word	0x08002750
 80009c4:	08002770 	.word	0x08002770
 80009c8:	08002790 	.word	0x08002790
 80009cc:	080027a8 	.word	0x080027a8
 80009d0:	080027c8 	.word	0x080027c8
 80009d4:	080027e8 	.word	0x080027e8
 80009d8:	08002808 	.word	0x08002808
 80009dc:	0800281c 	.word	0x0800281c
 80009e0:	08002838 	.word	0x08002838
 80009e4:	08002854 	.word	0x08002854
 80009e8:	08002870 	.word	0x08002870
 80009ec:	08002884 	.word	0x08002884
 80009f0:	080028a8 	.word	0x080028a8
 80009f4:	080028cc 	.word	0x080028cc
 80009f8:	080028f0 	.word	0x080028f0
 80009fc:	08002918 	.word	0x08002918
 8000a00:	08002930 	.word	0x08002930
 8000a04:	08002958 	.word	0x08002958
 8000a08:	08002974 	.word	0x08002974

08000a0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a10:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <HAL_Init+0x28>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a07      	ldr	r2, [pc, #28]	; (8000a34 <HAL_Init+0x28>)
 8000a16:	f043 0310 	orr.w	r3, r3, #16
 8000a1a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a1c:	2003      	movs	r0, #3
 8000a1e:	f000 f923 	bl	8000c68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a22:	2000      	movs	r0, #0
 8000a24:	f000 f808 	bl	8000a38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a28:	f7ff fc82 	bl	8000330 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a2c:	2300      	movs	r3, #0
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40022000 	.word	0x40022000

08000a38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a40:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <HAL_InitTick+0x54>)
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <HAL_InitTick+0x58>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	4619      	mov	r1, r3
 8000a4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a56:	4618      	mov	r0, r3
 8000a58:	f000 f93b 	bl	8000cd2 <HAL_SYSTICK_Config>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
 8000a64:	e00e      	b.n	8000a84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2b0f      	cmp	r3, #15
 8000a6a:	d80a      	bhi.n	8000a82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	6879      	ldr	r1, [r7, #4]
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295
 8000a74:	f000 f903 	bl	8000c7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a78:	4a06      	ldr	r2, [pc, #24]	; (8000a94 <HAL_InitTick+0x5c>)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	e000      	b.n	8000a84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a82:	2301      	movs	r3, #1
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20000008 	.word	0x20000008
 8000a90:	20000010 	.word	0x20000010
 8000a94:	2000000c 	.word	0x2000000c

08000a98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a9c:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <HAL_IncTick+0x1c>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <HAL_IncTick+0x20>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	4a03      	ldr	r2, [pc, #12]	; (8000ab8 <HAL_IncTick+0x20>)
 8000aaa:	6013      	str	r3, [r2, #0]
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr
 8000ab4:	20000010 	.word	0x20000010
 8000ab8:	200000e8 	.word	0x200000e8

08000abc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac0:	4b02      	ldr	r3, [pc, #8]	; (8000acc <HAL_GetTick+0x10>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr
 8000acc:	200000e8 	.word	0x200000e8

08000ad0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f003 0307 	and.w	r3, r3, #7
 8000ade:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ae0:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ae6:	68ba      	ldr	r2, [r7, #8]
 8000ae8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aec:	4013      	ands	r3, r2
 8000aee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000af8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b02:	4a04      	ldr	r2, [pc, #16]	; (8000b14 <__NVIC_SetPriorityGrouping+0x44>)
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	60d3      	str	r3, [r2, #12]
}
 8000b08:	bf00      	nop
 8000b0a:	3714      	adds	r7, #20
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bc80      	pop	{r7}
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b1c:	4b04      	ldr	r3, [pc, #16]	; (8000b30 <__NVIC_GetPriorityGrouping+0x18>)
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	0a1b      	lsrs	r3, r3, #8
 8000b22:	f003 0307 	and.w	r3, r3, #7
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bc80      	pop	{r7}
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	db0b      	blt.n	8000b5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	f003 021f 	and.w	r2, r3, #31
 8000b4c:	4906      	ldr	r1, [pc, #24]	; (8000b68 <__NVIC_EnableIRQ+0x34>)
 8000b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b52:	095b      	lsrs	r3, r3, #5
 8000b54:	2001      	movs	r0, #1
 8000b56:	fa00 f202 	lsl.w	r2, r0, r2
 8000b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b5e:	bf00      	nop
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bc80      	pop	{r7}
 8000b66:	4770      	bx	lr
 8000b68:	e000e100 	.word	0xe000e100

08000b6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	6039      	str	r1, [r7, #0]
 8000b76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	db0a      	blt.n	8000b96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	b2da      	uxtb	r2, r3
 8000b84:	490c      	ldr	r1, [pc, #48]	; (8000bb8 <__NVIC_SetPriority+0x4c>)
 8000b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8a:	0112      	lsls	r2, r2, #4
 8000b8c:	b2d2      	uxtb	r2, r2
 8000b8e:	440b      	add	r3, r1
 8000b90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b94:	e00a      	b.n	8000bac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	b2da      	uxtb	r2, r3
 8000b9a:	4908      	ldr	r1, [pc, #32]	; (8000bbc <__NVIC_SetPriority+0x50>)
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	f003 030f 	and.w	r3, r3, #15
 8000ba2:	3b04      	subs	r3, #4
 8000ba4:	0112      	lsls	r2, r2, #4
 8000ba6:	b2d2      	uxtb	r2, r2
 8000ba8:	440b      	add	r3, r1
 8000baa:	761a      	strb	r2, [r3, #24]
}
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bc80      	pop	{r7}
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	e000e100 	.word	0xe000e100
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b089      	sub	sp, #36	; 0x24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	f003 0307 	and.w	r3, r3, #7
 8000bd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bd4:	69fb      	ldr	r3, [r7, #28]
 8000bd6:	f1c3 0307 	rsb	r3, r3, #7
 8000bda:	2b04      	cmp	r3, #4
 8000bdc:	bf28      	it	cs
 8000bde:	2304      	movcs	r3, #4
 8000be0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	3304      	adds	r3, #4
 8000be6:	2b06      	cmp	r3, #6
 8000be8:	d902      	bls.n	8000bf0 <NVIC_EncodePriority+0x30>
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	3b03      	subs	r3, #3
 8000bee:	e000      	b.n	8000bf2 <NVIC_EncodePriority+0x32>
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bf8:	69bb      	ldr	r3, [r7, #24]
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	43da      	mvns	r2, r3
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	401a      	ands	r2, r3
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c08:	f04f 31ff 	mov.w	r1, #4294967295
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c12:	43d9      	mvns	r1, r3
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c18:	4313      	orrs	r3, r2
         );
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3724      	adds	r7, #36	; 0x24
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr

08000c24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c34:	d301      	bcc.n	8000c3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c36:	2301      	movs	r3, #1
 8000c38:	e00f      	b.n	8000c5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c3a:	4a0a      	ldr	r2, [pc, #40]	; (8000c64 <SysTick_Config+0x40>)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	3b01      	subs	r3, #1
 8000c40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c42:	210f      	movs	r1, #15
 8000c44:	f04f 30ff 	mov.w	r0, #4294967295
 8000c48:	f7ff ff90 	bl	8000b6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c4c:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <SysTick_Config+0x40>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c52:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <SysTick_Config+0x40>)
 8000c54:	2207      	movs	r2, #7
 8000c56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	e000e010 	.word	0xe000e010

08000c68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f7ff ff2d 	bl	8000ad0 <__NVIC_SetPriorityGrouping>
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b086      	sub	sp, #24
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	4603      	mov	r3, r0
 8000c86:	60b9      	str	r1, [r7, #8]
 8000c88:	607a      	str	r2, [r7, #4]
 8000c8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c90:	f7ff ff42 	bl	8000b18 <__NVIC_GetPriorityGrouping>
 8000c94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	68b9      	ldr	r1, [r7, #8]
 8000c9a:	6978      	ldr	r0, [r7, #20]
 8000c9c:	f7ff ff90 	bl	8000bc0 <NVIC_EncodePriority>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ca6:	4611      	mov	r1, r2
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff ff5f 	bl	8000b6c <__NVIC_SetPriority>
}
 8000cae:	bf00      	nop
 8000cb0:	3718      	adds	r7, #24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff ff35 	bl	8000b34 <__NVIC_EnableIRQ>
}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b082      	sub	sp, #8
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f7ff ffa2 	bl	8000c24 <SysTick_Config>
 8000ce0:	4603      	mov	r3, r0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
	...

08000cec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b08b      	sub	sp, #44	; 0x2c
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cfe:	e169      	b.n	8000fd4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d00:	2201      	movs	r2, #1
 8000d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	69fa      	ldr	r2, [r7, #28]
 8000d10:	4013      	ands	r3, r2
 8000d12:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d14:	69ba      	ldr	r2, [r7, #24]
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	f040 8158 	bne.w	8000fce <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	4a9a      	ldr	r2, [pc, #616]	; (8000f8c <HAL_GPIO_Init+0x2a0>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d05e      	beq.n	8000de6 <HAL_GPIO_Init+0xfa>
 8000d28:	4a98      	ldr	r2, [pc, #608]	; (8000f8c <HAL_GPIO_Init+0x2a0>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d875      	bhi.n	8000e1a <HAL_GPIO_Init+0x12e>
 8000d2e:	4a98      	ldr	r2, [pc, #608]	; (8000f90 <HAL_GPIO_Init+0x2a4>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d058      	beq.n	8000de6 <HAL_GPIO_Init+0xfa>
 8000d34:	4a96      	ldr	r2, [pc, #600]	; (8000f90 <HAL_GPIO_Init+0x2a4>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d86f      	bhi.n	8000e1a <HAL_GPIO_Init+0x12e>
 8000d3a:	4a96      	ldr	r2, [pc, #600]	; (8000f94 <HAL_GPIO_Init+0x2a8>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d052      	beq.n	8000de6 <HAL_GPIO_Init+0xfa>
 8000d40:	4a94      	ldr	r2, [pc, #592]	; (8000f94 <HAL_GPIO_Init+0x2a8>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d869      	bhi.n	8000e1a <HAL_GPIO_Init+0x12e>
 8000d46:	4a94      	ldr	r2, [pc, #592]	; (8000f98 <HAL_GPIO_Init+0x2ac>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d04c      	beq.n	8000de6 <HAL_GPIO_Init+0xfa>
 8000d4c:	4a92      	ldr	r2, [pc, #584]	; (8000f98 <HAL_GPIO_Init+0x2ac>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d863      	bhi.n	8000e1a <HAL_GPIO_Init+0x12e>
 8000d52:	4a92      	ldr	r2, [pc, #584]	; (8000f9c <HAL_GPIO_Init+0x2b0>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d046      	beq.n	8000de6 <HAL_GPIO_Init+0xfa>
 8000d58:	4a90      	ldr	r2, [pc, #576]	; (8000f9c <HAL_GPIO_Init+0x2b0>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d85d      	bhi.n	8000e1a <HAL_GPIO_Init+0x12e>
 8000d5e:	2b12      	cmp	r3, #18
 8000d60:	d82a      	bhi.n	8000db8 <HAL_GPIO_Init+0xcc>
 8000d62:	2b12      	cmp	r3, #18
 8000d64:	d859      	bhi.n	8000e1a <HAL_GPIO_Init+0x12e>
 8000d66:	a201      	add	r2, pc, #4	; (adr r2, 8000d6c <HAL_GPIO_Init+0x80>)
 8000d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d6c:	08000de7 	.word	0x08000de7
 8000d70:	08000dc1 	.word	0x08000dc1
 8000d74:	08000dd3 	.word	0x08000dd3
 8000d78:	08000e15 	.word	0x08000e15
 8000d7c:	08000e1b 	.word	0x08000e1b
 8000d80:	08000e1b 	.word	0x08000e1b
 8000d84:	08000e1b 	.word	0x08000e1b
 8000d88:	08000e1b 	.word	0x08000e1b
 8000d8c:	08000e1b 	.word	0x08000e1b
 8000d90:	08000e1b 	.word	0x08000e1b
 8000d94:	08000e1b 	.word	0x08000e1b
 8000d98:	08000e1b 	.word	0x08000e1b
 8000d9c:	08000e1b 	.word	0x08000e1b
 8000da0:	08000e1b 	.word	0x08000e1b
 8000da4:	08000e1b 	.word	0x08000e1b
 8000da8:	08000e1b 	.word	0x08000e1b
 8000dac:	08000e1b 	.word	0x08000e1b
 8000db0:	08000dc9 	.word	0x08000dc9
 8000db4:	08000ddd 	.word	0x08000ddd
 8000db8:	4a79      	ldr	r2, [pc, #484]	; (8000fa0 <HAL_GPIO_Init+0x2b4>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d013      	beq.n	8000de6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000dbe:	e02c      	b.n	8000e1a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	623b      	str	r3, [r7, #32]
          break;
 8000dc6:	e029      	b.n	8000e1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	3304      	adds	r3, #4
 8000dce:	623b      	str	r3, [r7, #32]
          break;
 8000dd0:	e024      	b.n	8000e1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	68db      	ldr	r3, [r3, #12]
 8000dd6:	3308      	adds	r3, #8
 8000dd8:	623b      	str	r3, [r7, #32]
          break;
 8000dda:	e01f      	b.n	8000e1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	330c      	adds	r3, #12
 8000de2:	623b      	str	r3, [r7, #32]
          break;
 8000de4:	e01a      	b.n	8000e1c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d102      	bne.n	8000df4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000dee:	2304      	movs	r3, #4
 8000df0:	623b      	str	r3, [r7, #32]
          break;
 8000df2:	e013      	b.n	8000e1c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d105      	bne.n	8000e08 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dfc:	2308      	movs	r3, #8
 8000dfe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	69fa      	ldr	r2, [r7, #28]
 8000e04:	611a      	str	r2, [r3, #16]
          break;
 8000e06:	e009      	b.n	8000e1c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e08:	2308      	movs	r3, #8
 8000e0a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	69fa      	ldr	r2, [r7, #28]
 8000e10:	615a      	str	r2, [r3, #20]
          break;
 8000e12:	e003      	b.n	8000e1c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e14:	2300      	movs	r3, #0
 8000e16:	623b      	str	r3, [r7, #32]
          break;
 8000e18:	e000      	b.n	8000e1c <HAL_GPIO_Init+0x130>
          break;
 8000e1a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	2bff      	cmp	r3, #255	; 0xff
 8000e20:	d801      	bhi.n	8000e26 <HAL_GPIO_Init+0x13a>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	e001      	b.n	8000e2a <HAL_GPIO_Init+0x13e>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	3304      	adds	r3, #4
 8000e2a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	2bff      	cmp	r3, #255	; 0xff
 8000e30:	d802      	bhi.n	8000e38 <HAL_GPIO_Init+0x14c>
 8000e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	e002      	b.n	8000e3e <HAL_GPIO_Init+0x152>
 8000e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3a:	3b08      	subs	r3, #8
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	210f      	movs	r1, #15
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	401a      	ands	r2, r3
 8000e50:	6a39      	ldr	r1, [r7, #32]
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	fa01 f303 	lsl.w	r3, r1, r3
 8000e58:	431a      	orrs	r2, r3
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	f000 80b1 	beq.w	8000fce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e6c:	4b4d      	ldr	r3, [pc, #308]	; (8000fa4 <HAL_GPIO_Init+0x2b8>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	4a4c      	ldr	r2, [pc, #304]	; (8000fa4 <HAL_GPIO_Init+0x2b8>)
 8000e72:	f043 0301 	orr.w	r3, r3, #1
 8000e76:	6193      	str	r3, [r2, #24]
 8000e78:	4b4a      	ldr	r3, [pc, #296]	; (8000fa4 <HAL_GPIO_Init+0x2b8>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	f003 0301 	and.w	r3, r3, #1
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e84:	4a48      	ldr	r2, [pc, #288]	; (8000fa8 <HAL_GPIO_Init+0x2bc>)
 8000e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e88:	089b      	lsrs	r3, r3, #2
 8000e8a:	3302      	adds	r3, #2
 8000e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e90:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e94:	f003 0303 	and.w	r3, r3, #3
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	220f      	movs	r2, #15
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	68fa      	ldr	r2, [r7, #12]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	4a40      	ldr	r2, [pc, #256]	; (8000fac <HAL_GPIO_Init+0x2c0>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d013      	beq.n	8000ed8 <HAL_GPIO_Init+0x1ec>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4a3f      	ldr	r2, [pc, #252]	; (8000fb0 <HAL_GPIO_Init+0x2c4>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d00d      	beq.n	8000ed4 <HAL_GPIO_Init+0x1e8>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	4a3e      	ldr	r2, [pc, #248]	; (8000fb4 <HAL_GPIO_Init+0x2c8>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d007      	beq.n	8000ed0 <HAL_GPIO_Init+0x1e4>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	4a3d      	ldr	r2, [pc, #244]	; (8000fb8 <HAL_GPIO_Init+0x2cc>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d101      	bne.n	8000ecc <HAL_GPIO_Init+0x1e0>
 8000ec8:	2303      	movs	r3, #3
 8000eca:	e006      	b.n	8000eda <HAL_GPIO_Init+0x1ee>
 8000ecc:	2304      	movs	r3, #4
 8000ece:	e004      	b.n	8000eda <HAL_GPIO_Init+0x1ee>
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	e002      	b.n	8000eda <HAL_GPIO_Init+0x1ee>
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	e000      	b.n	8000eda <HAL_GPIO_Init+0x1ee>
 8000ed8:	2300      	movs	r3, #0
 8000eda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000edc:	f002 0203 	and.w	r2, r2, #3
 8000ee0:	0092      	lsls	r2, r2, #2
 8000ee2:	4093      	lsls	r3, r2
 8000ee4:	68fa      	ldr	r2, [r7, #12]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000eea:	492f      	ldr	r1, [pc, #188]	; (8000fa8 <HAL_GPIO_Init+0x2bc>)
 8000eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eee:	089b      	lsrs	r3, r3, #2
 8000ef0:	3302      	adds	r3, #2
 8000ef2:	68fa      	ldr	r2, [r7, #12]
 8000ef4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d006      	beq.n	8000f12 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f04:	4b2d      	ldr	r3, [pc, #180]	; (8000fbc <HAL_GPIO_Init+0x2d0>)
 8000f06:	689a      	ldr	r2, [r3, #8]
 8000f08:	492c      	ldr	r1, [pc, #176]	; (8000fbc <HAL_GPIO_Init+0x2d0>)
 8000f0a:	69bb      	ldr	r3, [r7, #24]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	608b      	str	r3, [r1, #8]
 8000f10:	e006      	b.n	8000f20 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f12:	4b2a      	ldr	r3, [pc, #168]	; (8000fbc <HAL_GPIO_Init+0x2d0>)
 8000f14:	689a      	ldr	r2, [r3, #8]
 8000f16:	69bb      	ldr	r3, [r7, #24]
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	4928      	ldr	r1, [pc, #160]	; (8000fbc <HAL_GPIO_Init+0x2d0>)
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d006      	beq.n	8000f3a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f2c:	4b23      	ldr	r3, [pc, #140]	; (8000fbc <HAL_GPIO_Init+0x2d0>)
 8000f2e:	68da      	ldr	r2, [r3, #12]
 8000f30:	4922      	ldr	r1, [pc, #136]	; (8000fbc <HAL_GPIO_Init+0x2d0>)
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	60cb      	str	r3, [r1, #12]
 8000f38:	e006      	b.n	8000f48 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f3a:	4b20      	ldr	r3, [pc, #128]	; (8000fbc <HAL_GPIO_Init+0x2d0>)
 8000f3c:	68da      	ldr	r2, [r3, #12]
 8000f3e:	69bb      	ldr	r3, [r7, #24]
 8000f40:	43db      	mvns	r3, r3
 8000f42:	491e      	ldr	r1, [pc, #120]	; (8000fbc <HAL_GPIO_Init+0x2d0>)
 8000f44:	4013      	ands	r3, r2
 8000f46:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d006      	beq.n	8000f62 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f54:	4b19      	ldr	r3, [pc, #100]	; (8000fbc <HAL_GPIO_Init+0x2d0>)
 8000f56:	685a      	ldr	r2, [r3, #4]
 8000f58:	4918      	ldr	r1, [pc, #96]	; (8000fbc <HAL_GPIO_Init+0x2d0>)
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	604b      	str	r3, [r1, #4]
 8000f60:	e006      	b.n	8000f70 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f62:	4b16      	ldr	r3, [pc, #88]	; (8000fbc <HAL_GPIO_Init+0x2d0>)
 8000f64:	685a      	ldr	r2, [r3, #4]
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	4914      	ldr	r1, [pc, #80]	; (8000fbc <HAL_GPIO_Init+0x2d0>)
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d021      	beq.n	8000fc0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f7c:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <HAL_GPIO_Init+0x2d0>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	490e      	ldr	r1, [pc, #56]	; (8000fbc <HAL_GPIO_Init+0x2d0>)
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	600b      	str	r3, [r1, #0]
 8000f88:	e021      	b.n	8000fce <HAL_GPIO_Init+0x2e2>
 8000f8a:	bf00      	nop
 8000f8c:	10320000 	.word	0x10320000
 8000f90:	10310000 	.word	0x10310000
 8000f94:	10220000 	.word	0x10220000
 8000f98:	10210000 	.word	0x10210000
 8000f9c:	10120000 	.word	0x10120000
 8000fa0:	10110000 	.word	0x10110000
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	40010000 	.word	0x40010000
 8000fac:	40010800 	.word	0x40010800
 8000fb0:	40010c00 	.word	0x40010c00
 8000fb4:	40011000 	.word	0x40011000
 8000fb8:	40011400 	.word	0x40011400
 8000fbc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fc0:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <HAL_GPIO_Init+0x304>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	4909      	ldr	r1, [pc, #36]	; (8000ff0 <HAL_GPIO_Init+0x304>)
 8000fca:	4013      	ands	r3, r2
 8000fcc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fda:	fa22 f303 	lsr.w	r3, r2, r3
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	f47f ae8e 	bne.w	8000d00 <HAL_GPIO_Init+0x14>
  }
}
 8000fe4:	bf00      	nop
 8000fe6:	bf00      	nop
 8000fe8:	372c      	adds	r7, #44	; 0x2c
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr
 8000ff0:	40010400 	.word	0x40010400

08000ff4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	689a      	ldr	r2, [r3, #8]
 8001004:	887b      	ldrh	r3, [r7, #2]
 8001006:	4013      	ands	r3, r2
 8001008:	2b00      	cmp	r3, #0
 800100a:	d002      	beq.n	8001012 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800100c:	2301      	movs	r3, #1
 800100e:	73fb      	strb	r3, [r7, #15]
 8001010:	e001      	b.n	8001016 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001012:	2300      	movs	r3, #0
 8001014:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001016:	7bfb      	ldrb	r3, [r7, #15]
}
 8001018:	4618      	mov	r0, r3
 800101a:	3714      	adds	r7, #20
 800101c:	46bd      	mov	sp, r7
 800101e:	bc80      	pop	{r7}
 8001020:	4770      	bx	lr

08001022 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001022:	b480      	push	{r7}
 8001024:	b083      	sub	sp, #12
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
 800102a:	460b      	mov	r3, r1
 800102c:	807b      	strh	r3, [r7, #2]
 800102e:	4613      	mov	r3, r2
 8001030:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001032:	787b      	ldrb	r3, [r7, #1]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d003      	beq.n	8001040 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001038:	887a      	ldrh	r2, [r7, #2]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800103e:	e003      	b.n	8001048 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001040:	887b      	ldrh	r3, [r7, #2]
 8001042:	041a      	lsls	r2, r3, #16
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	611a      	str	r2, [r3, #16]
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr

08001052 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001052:	b480      	push	{r7}
 8001054:	b085      	sub	sp, #20
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
 800105a:	460b      	mov	r3, r1
 800105c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001064:	887a      	ldrh	r2, [r7, #2]
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	4013      	ands	r3, r2
 800106a:	041a      	lsls	r2, r3, #16
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	43d9      	mvns	r1, r3
 8001070:	887b      	ldrh	r3, [r7, #2]
 8001072:	400b      	ands	r3, r1
 8001074:	431a      	orrs	r2, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	611a      	str	r2, [r3, #16]
}
 800107a:	bf00      	nop
 800107c:	3714      	adds	r7, #20
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr

08001084 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800108e:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001090:	695a      	ldr	r2, [r3, #20]
 8001092:	88fb      	ldrh	r3, [r7, #6]
 8001094:	4013      	ands	r3, r2
 8001096:	2b00      	cmp	r3, #0
 8001098:	d006      	beq.n	80010a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800109a:	4a05      	ldr	r2, [pc, #20]	; (80010b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800109c:	88fb      	ldrh	r3, [r7, #6]
 800109e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80010a0:	88fb      	ldrh	r3, [r7, #6]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f000 f806 	bl	80010b4 <HAL_GPIO_EXTI_Callback>
  }
}
 80010a8:	bf00      	nop
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40010400 	.word	0x40010400

080010b4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc80      	pop	{r7}
 80010c6:	4770      	bx	lr

080010c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d101      	bne.n	80010da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e272      	b.n	80015c0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	f000 8087 	beq.w	80011f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010e8:	4b92      	ldr	r3, [pc, #584]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f003 030c 	and.w	r3, r3, #12
 80010f0:	2b04      	cmp	r3, #4
 80010f2:	d00c      	beq.n	800110e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010f4:	4b8f      	ldr	r3, [pc, #572]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f003 030c 	and.w	r3, r3, #12
 80010fc:	2b08      	cmp	r3, #8
 80010fe:	d112      	bne.n	8001126 <HAL_RCC_OscConfig+0x5e>
 8001100:	4b8c      	ldr	r3, [pc, #560]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001108:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800110c:	d10b      	bne.n	8001126 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800110e:	4b89      	ldr	r3, [pc, #548]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d06c      	beq.n	80011f4 <HAL_RCC_OscConfig+0x12c>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d168      	bne.n	80011f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e24c      	b.n	80015c0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800112e:	d106      	bne.n	800113e <HAL_RCC_OscConfig+0x76>
 8001130:	4b80      	ldr	r3, [pc, #512]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a7f      	ldr	r2, [pc, #508]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 8001136:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800113a:	6013      	str	r3, [r2, #0]
 800113c:	e02e      	b.n	800119c <HAL_RCC_OscConfig+0xd4>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d10c      	bne.n	8001160 <HAL_RCC_OscConfig+0x98>
 8001146:	4b7b      	ldr	r3, [pc, #492]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a7a      	ldr	r2, [pc, #488]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 800114c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001150:	6013      	str	r3, [r2, #0]
 8001152:	4b78      	ldr	r3, [pc, #480]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a77      	ldr	r2, [pc, #476]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 8001158:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800115c:	6013      	str	r3, [r2, #0]
 800115e:	e01d      	b.n	800119c <HAL_RCC_OscConfig+0xd4>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001168:	d10c      	bne.n	8001184 <HAL_RCC_OscConfig+0xbc>
 800116a:	4b72      	ldr	r3, [pc, #456]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a71      	ldr	r2, [pc, #452]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 8001170:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001174:	6013      	str	r3, [r2, #0]
 8001176:	4b6f      	ldr	r3, [pc, #444]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a6e      	ldr	r2, [pc, #440]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 800117c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001180:	6013      	str	r3, [r2, #0]
 8001182:	e00b      	b.n	800119c <HAL_RCC_OscConfig+0xd4>
 8001184:	4b6b      	ldr	r3, [pc, #428]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a6a      	ldr	r2, [pc, #424]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 800118a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800118e:	6013      	str	r3, [r2, #0]
 8001190:	4b68      	ldr	r3, [pc, #416]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a67      	ldr	r2, [pc, #412]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 8001196:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800119a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d013      	beq.n	80011cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a4:	f7ff fc8a 	bl	8000abc <HAL_GetTick>
 80011a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011aa:	e008      	b.n	80011be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011ac:	f7ff fc86 	bl	8000abc <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	2b64      	cmp	r3, #100	; 0x64
 80011b8:	d901      	bls.n	80011be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e200      	b.n	80015c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011be:	4b5d      	ldr	r3, [pc, #372]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d0f0      	beq.n	80011ac <HAL_RCC_OscConfig+0xe4>
 80011ca:	e014      	b.n	80011f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011cc:	f7ff fc76 	bl	8000abc <HAL_GetTick>
 80011d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011d2:	e008      	b.n	80011e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011d4:	f7ff fc72 	bl	8000abc <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	2b64      	cmp	r3, #100	; 0x64
 80011e0:	d901      	bls.n	80011e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e1ec      	b.n	80015c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011e6:	4b53      	ldr	r3, [pc, #332]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d1f0      	bne.n	80011d4 <HAL_RCC_OscConfig+0x10c>
 80011f2:	e000      	b.n	80011f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d063      	beq.n	80012ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001202:	4b4c      	ldr	r3, [pc, #304]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f003 030c 	and.w	r3, r3, #12
 800120a:	2b00      	cmp	r3, #0
 800120c:	d00b      	beq.n	8001226 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800120e:	4b49      	ldr	r3, [pc, #292]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f003 030c 	and.w	r3, r3, #12
 8001216:	2b08      	cmp	r3, #8
 8001218:	d11c      	bne.n	8001254 <HAL_RCC_OscConfig+0x18c>
 800121a:	4b46      	ldr	r3, [pc, #280]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d116      	bne.n	8001254 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001226:	4b43      	ldr	r3, [pc, #268]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	2b00      	cmp	r3, #0
 8001230:	d005      	beq.n	800123e <HAL_RCC_OscConfig+0x176>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	691b      	ldr	r3, [r3, #16]
 8001236:	2b01      	cmp	r3, #1
 8001238:	d001      	beq.n	800123e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e1c0      	b.n	80015c0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800123e:	4b3d      	ldr	r3, [pc, #244]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	00db      	lsls	r3, r3, #3
 800124c:	4939      	ldr	r1, [pc, #228]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 800124e:	4313      	orrs	r3, r2
 8001250:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001252:	e03a      	b.n	80012ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	691b      	ldr	r3, [r3, #16]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d020      	beq.n	800129e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800125c:	4b36      	ldr	r3, [pc, #216]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 800125e:	2201      	movs	r2, #1
 8001260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001262:	f7ff fc2b 	bl	8000abc <HAL_GetTick>
 8001266:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001268:	e008      	b.n	800127c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800126a:	f7ff fc27 	bl	8000abc <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	2b02      	cmp	r3, #2
 8001276:	d901      	bls.n	800127c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	e1a1      	b.n	80015c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800127c:	4b2d      	ldr	r3, [pc, #180]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	2b00      	cmp	r3, #0
 8001286:	d0f0      	beq.n	800126a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001288:	4b2a      	ldr	r3, [pc, #168]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	695b      	ldr	r3, [r3, #20]
 8001294:	00db      	lsls	r3, r3, #3
 8001296:	4927      	ldr	r1, [pc, #156]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 8001298:	4313      	orrs	r3, r2
 800129a:	600b      	str	r3, [r1, #0]
 800129c:	e015      	b.n	80012ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800129e:	4b26      	ldr	r3, [pc, #152]	; (8001338 <HAL_RCC_OscConfig+0x270>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a4:	f7ff fc0a 	bl	8000abc <HAL_GetTick>
 80012a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012aa:	e008      	b.n	80012be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012ac:	f7ff fc06 	bl	8000abc <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d901      	bls.n	80012be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e180      	b.n	80015c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012be:	4b1d      	ldr	r3, [pc, #116]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d1f0      	bne.n	80012ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0308 	and.w	r3, r3, #8
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d03a      	beq.n	800134c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	699b      	ldr	r3, [r3, #24]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d019      	beq.n	8001312 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012de:	4b17      	ldr	r3, [pc, #92]	; (800133c <HAL_RCC_OscConfig+0x274>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012e4:	f7ff fbea 	bl	8000abc <HAL_GetTick>
 80012e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ea:	e008      	b.n	80012fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012ec:	f7ff fbe6 	bl	8000abc <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e160      	b.n	80015c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012fe:	4b0d      	ldr	r3, [pc, #52]	; (8001334 <HAL_RCC_OscConfig+0x26c>)
 8001300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	2b00      	cmp	r3, #0
 8001308:	d0f0      	beq.n	80012ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800130a:	2001      	movs	r0, #1
 800130c:	f000 face 	bl	80018ac <RCC_Delay>
 8001310:	e01c      	b.n	800134c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001312:	4b0a      	ldr	r3, [pc, #40]	; (800133c <HAL_RCC_OscConfig+0x274>)
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001318:	f7ff fbd0 	bl	8000abc <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800131e:	e00f      	b.n	8001340 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001320:	f7ff fbcc 	bl	8000abc <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b02      	cmp	r3, #2
 800132c:	d908      	bls.n	8001340 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e146      	b.n	80015c0 <HAL_RCC_OscConfig+0x4f8>
 8001332:	bf00      	nop
 8001334:	40021000 	.word	0x40021000
 8001338:	42420000 	.word	0x42420000
 800133c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001340:	4b92      	ldr	r3, [pc, #584]	; (800158c <HAL_RCC_OscConfig+0x4c4>)
 8001342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001344:	f003 0302 	and.w	r3, r3, #2
 8001348:	2b00      	cmp	r3, #0
 800134a:	d1e9      	bne.n	8001320 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 0304 	and.w	r3, r3, #4
 8001354:	2b00      	cmp	r3, #0
 8001356:	f000 80a6 	beq.w	80014a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800135a:	2300      	movs	r3, #0
 800135c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800135e:	4b8b      	ldr	r3, [pc, #556]	; (800158c <HAL_RCC_OscConfig+0x4c4>)
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d10d      	bne.n	8001386 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800136a:	4b88      	ldr	r3, [pc, #544]	; (800158c <HAL_RCC_OscConfig+0x4c4>)
 800136c:	69db      	ldr	r3, [r3, #28]
 800136e:	4a87      	ldr	r2, [pc, #540]	; (800158c <HAL_RCC_OscConfig+0x4c4>)
 8001370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001374:	61d3      	str	r3, [r2, #28]
 8001376:	4b85      	ldr	r3, [pc, #532]	; (800158c <HAL_RCC_OscConfig+0x4c4>)
 8001378:	69db      	ldr	r3, [r3, #28]
 800137a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001382:	2301      	movs	r3, #1
 8001384:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001386:	4b82      	ldr	r3, [pc, #520]	; (8001590 <HAL_RCC_OscConfig+0x4c8>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800138e:	2b00      	cmp	r3, #0
 8001390:	d118      	bne.n	80013c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001392:	4b7f      	ldr	r3, [pc, #508]	; (8001590 <HAL_RCC_OscConfig+0x4c8>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a7e      	ldr	r2, [pc, #504]	; (8001590 <HAL_RCC_OscConfig+0x4c8>)
 8001398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800139c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800139e:	f7ff fb8d 	bl	8000abc <HAL_GetTick>
 80013a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a4:	e008      	b.n	80013b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013a6:	f7ff fb89 	bl	8000abc <HAL_GetTick>
 80013aa:	4602      	mov	r2, r0
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b64      	cmp	r3, #100	; 0x64
 80013b2:	d901      	bls.n	80013b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e103      	b.n	80015c0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b8:	4b75      	ldr	r3, [pc, #468]	; (8001590 <HAL_RCC_OscConfig+0x4c8>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d0f0      	beq.n	80013a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d106      	bne.n	80013da <HAL_RCC_OscConfig+0x312>
 80013cc:	4b6f      	ldr	r3, [pc, #444]	; (800158c <HAL_RCC_OscConfig+0x4c4>)
 80013ce:	6a1b      	ldr	r3, [r3, #32]
 80013d0:	4a6e      	ldr	r2, [pc, #440]	; (800158c <HAL_RCC_OscConfig+0x4c4>)
 80013d2:	f043 0301 	orr.w	r3, r3, #1
 80013d6:	6213      	str	r3, [r2, #32]
 80013d8:	e02d      	b.n	8001436 <HAL_RCC_OscConfig+0x36e>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	68db      	ldr	r3, [r3, #12]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d10c      	bne.n	80013fc <HAL_RCC_OscConfig+0x334>
 80013e2:	4b6a      	ldr	r3, [pc, #424]	; (800158c <HAL_RCC_OscConfig+0x4c4>)
 80013e4:	6a1b      	ldr	r3, [r3, #32]
 80013e6:	4a69      	ldr	r2, [pc, #420]	; (800158c <HAL_RCC_OscConfig+0x4c4>)
 80013e8:	f023 0301 	bic.w	r3, r3, #1
 80013ec:	6213      	str	r3, [r2, #32]
 80013ee:	4b67      	ldr	r3, [pc, #412]	; (800158c <HAL_RCC_OscConfig+0x4c4>)
 80013f0:	6a1b      	ldr	r3, [r3, #32]
 80013f2:	4a66      	ldr	r2, [pc, #408]	; (800158c <HAL_RCC_OscConfig+0x4c4>)
 80013f4:	f023 0304 	bic.w	r3, r3, #4
 80013f8:	6213      	str	r3, [r2, #32]
 80013fa:	e01c      	b.n	8001436 <HAL_RCC_OscConfig+0x36e>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	2b05      	cmp	r3, #5
 8001402:	d10c      	bne.n	800141e <HAL_RCC_OscConfig+0x356>
 8001404:	4b61      	ldr	r3, [pc, #388]	; (800158c <HAL_RCC_OscConfig+0x4c4>)
 8001406:	6a1b      	ldr	r3, [r3, #32]
 8001408:	4a60      	ldr	r2, [pc, #384]	; (800158c <HAL_RCC_OscConfig+0x4c4>)
 800140a:	f043 0304 	orr.w	r3, r3, #4
 800140e:	6213      	str	r3, [r2, #32]
 8001410:	4b5e      	ldr	r3, [pc, #376]	; (800158c <HAL_RCC_OscConfig+0x4c4>)
 8001412:	6a1b      	ldr	r3, [r3, #32]
 8001414:	4a5d      	ldr	r2, [pc, #372]	; (800158c <HAL_RCC_OscConfig+0x4c4>)
 8001416:	f043 0301 	orr.w	r3, r3, #1
 800141a:	6213      	str	r3, [r2, #32]
 800141c:	e00b      	b.n	8001436 <HAL_RCC_OscConfig+0x36e>
 800141e:	4b5b      	ldr	r3, [pc, #364]	; (800158c <HAL_RCC_OscConfig+0x4c4>)
 8001420:	6a1b      	ldr	r3, [r3, #32]
 8001422:	4a5a      	ldr	r2, [pc, #360]	; (800158c <HAL_RCC_OscConfig+0x4c4>)
 8001424:	f023 0301 	bic.w	r3, r3, #1
 8001428:	6213      	str	r3, [r2, #32]
 800142a:	4b58      	ldr	r3, [pc, #352]	; (800158c <HAL_RCC_OscConfig+0x4c4>)
 800142c:	6a1b      	ldr	r3, [r3, #32]
 800142e:	4a57      	ldr	r2, [pc, #348]	; (800158c <HAL_RCC_OscConfig+0x4c4>)
 8001430:	f023 0304 	bic.w	r3, r3, #4
 8001434:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d015      	beq.n	800146a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800143e:	f7ff fb3d 	bl	8000abc <HAL_GetTick>
 8001442:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001444:	e00a      	b.n	800145c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001446:	f7ff fb39 	bl	8000abc <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	f241 3288 	movw	r2, #5000	; 0x1388
 8001454:	4293      	cmp	r3, r2
 8001456:	d901      	bls.n	800145c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e0b1      	b.n	80015c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800145c:	4b4b      	ldr	r3, [pc, #300]	; (800158c <HAL_RCC_OscConfig+0x4c4>)
 800145e:	6a1b      	ldr	r3, [r3, #32]
 8001460:	f003 0302 	and.w	r3, r3, #2
 8001464:	2b00      	cmp	r3, #0
 8001466:	d0ee      	beq.n	8001446 <HAL_RCC_OscConfig+0x37e>
 8001468:	e014      	b.n	8001494 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800146a:	f7ff fb27 	bl	8000abc <HAL_GetTick>
 800146e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001470:	e00a      	b.n	8001488 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001472:	f7ff fb23 	bl	8000abc <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001480:	4293      	cmp	r3, r2
 8001482:	d901      	bls.n	8001488 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e09b      	b.n	80015c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001488:	4b40      	ldr	r3, [pc, #256]	; (800158c <HAL_RCC_OscConfig+0x4c4>)
 800148a:	6a1b      	ldr	r3, [r3, #32]
 800148c:	f003 0302 	and.w	r3, r3, #2
 8001490:	2b00      	cmp	r3, #0
 8001492:	d1ee      	bne.n	8001472 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001494:	7dfb      	ldrb	r3, [r7, #23]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d105      	bne.n	80014a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800149a:	4b3c      	ldr	r3, [pc, #240]	; (800158c <HAL_RCC_OscConfig+0x4c4>)
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	4a3b      	ldr	r2, [pc, #236]	; (800158c <HAL_RCC_OscConfig+0x4c4>)
 80014a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f000 8087 	beq.w	80015be <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014b0:	4b36      	ldr	r3, [pc, #216]	; (800158c <HAL_RCC_OscConfig+0x4c4>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f003 030c 	and.w	r3, r3, #12
 80014b8:	2b08      	cmp	r3, #8
 80014ba:	d061      	beq.n	8001580 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	69db      	ldr	r3, [r3, #28]
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d146      	bne.n	8001552 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014c4:	4b33      	ldr	r3, [pc, #204]	; (8001594 <HAL_RCC_OscConfig+0x4cc>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ca:	f7ff faf7 	bl	8000abc <HAL_GetTick>
 80014ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014d0:	e008      	b.n	80014e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014d2:	f7ff faf3 	bl	8000abc <HAL_GetTick>
 80014d6:	4602      	mov	r2, r0
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d901      	bls.n	80014e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e06d      	b.n	80015c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014e4:	4b29      	ldr	r3, [pc, #164]	; (800158c <HAL_RCC_OscConfig+0x4c4>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d1f0      	bne.n	80014d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a1b      	ldr	r3, [r3, #32]
 80014f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014f8:	d108      	bne.n	800150c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014fa:	4b24      	ldr	r3, [pc, #144]	; (800158c <HAL_RCC_OscConfig+0x4c4>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	4921      	ldr	r1, [pc, #132]	; (800158c <HAL_RCC_OscConfig+0x4c4>)
 8001508:	4313      	orrs	r3, r2
 800150a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800150c:	4b1f      	ldr	r3, [pc, #124]	; (800158c <HAL_RCC_OscConfig+0x4c4>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a19      	ldr	r1, [r3, #32]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151c:	430b      	orrs	r3, r1
 800151e:	491b      	ldr	r1, [pc, #108]	; (800158c <HAL_RCC_OscConfig+0x4c4>)
 8001520:	4313      	orrs	r3, r2
 8001522:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001524:	4b1b      	ldr	r3, [pc, #108]	; (8001594 <HAL_RCC_OscConfig+0x4cc>)
 8001526:	2201      	movs	r2, #1
 8001528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152a:	f7ff fac7 	bl	8000abc <HAL_GetTick>
 800152e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001530:	e008      	b.n	8001544 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001532:	f7ff fac3 	bl	8000abc <HAL_GetTick>
 8001536:	4602      	mov	r2, r0
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d901      	bls.n	8001544 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e03d      	b.n	80015c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001544:	4b11      	ldr	r3, [pc, #68]	; (800158c <HAL_RCC_OscConfig+0x4c4>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d0f0      	beq.n	8001532 <HAL_RCC_OscConfig+0x46a>
 8001550:	e035      	b.n	80015be <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001552:	4b10      	ldr	r3, [pc, #64]	; (8001594 <HAL_RCC_OscConfig+0x4cc>)
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001558:	f7ff fab0 	bl	8000abc <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001560:	f7ff faac 	bl	8000abc <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e026      	b.n	80015c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001572:	4b06      	ldr	r3, [pc, #24]	; (800158c <HAL_RCC_OscConfig+0x4c4>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1f0      	bne.n	8001560 <HAL_RCC_OscConfig+0x498>
 800157e:	e01e      	b.n	80015be <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	69db      	ldr	r3, [r3, #28]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d107      	bne.n	8001598 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e019      	b.n	80015c0 <HAL_RCC_OscConfig+0x4f8>
 800158c:	40021000 	.word	0x40021000
 8001590:	40007000 	.word	0x40007000
 8001594:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001598:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <HAL_RCC_OscConfig+0x500>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a1b      	ldr	r3, [r3, #32]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d106      	bne.n	80015ba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d001      	beq.n	80015be <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e000      	b.n	80015c0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3718      	adds	r7, #24
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40021000 	.word	0x40021000

080015cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d101      	bne.n	80015e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e0d0      	b.n	8001782 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015e0:	4b6a      	ldr	r3, [pc, #424]	; (800178c <HAL_RCC_ClockConfig+0x1c0>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0307 	and.w	r3, r3, #7
 80015e8:	683a      	ldr	r2, [r7, #0]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d910      	bls.n	8001610 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ee:	4b67      	ldr	r3, [pc, #412]	; (800178c <HAL_RCC_ClockConfig+0x1c0>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f023 0207 	bic.w	r2, r3, #7
 80015f6:	4965      	ldr	r1, [pc, #404]	; (800178c <HAL_RCC_ClockConfig+0x1c0>)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015fe:	4b63      	ldr	r3, [pc, #396]	; (800178c <HAL_RCC_ClockConfig+0x1c0>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	683a      	ldr	r2, [r7, #0]
 8001608:	429a      	cmp	r2, r3
 800160a:	d001      	beq.n	8001610 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e0b8      	b.n	8001782 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d020      	beq.n	800165e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0304 	and.w	r3, r3, #4
 8001624:	2b00      	cmp	r3, #0
 8001626:	d005      	beq.n	8001634 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001628:	4b59      	ldr	r3, [pc, #356]	; (8001790 <HAL_RCC_ClockConfig+0x1c4>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	4a58      	ldr	r2, [pc, #352]	; (8001790 <HAL_RCC_ClockConfig+0x1c4>)
 800162e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001632:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0308 	and.w	r3, r3, #8
 800163c:	2b00      	cmp	r3, #0
 800163e:	d005      	beq.n	800164c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001640:	4b53      	ldr	r3, [pc, #332]	; (8001790 <HAL_RCC_ClockConfig+0x1c4>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	4a52      	ldr	r2, [pc, #328]	; (8001790 <HAL_RCC_ClockConfig+0x1c4>)
 8001646:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800164a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800164c:	4b50      	ldr	r3, [pc, #320]	; (8001790 <HAL_RCC_ClockConfig+0x1c4>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	494d      	ldr	r1, [pc, #308]	; (8001790 <HAL_RCC_ClockConfig+0x1c4>)
 800165a:	4313      	orrs	r3, r2
 800165c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	2b00      	cmp	r3, #0
 8001668:	d040      	beq.n	80016ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d107      	bne.n	8001682 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001672:	4b47      	ldr	r3, [pc, #284]	; (8001790 <HAL_RCC_ClockConfig+0x1c4>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d115      	bne.n	80016aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e07f      	b.n	8001782 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	2b02      	cmp	r3, #2
 8001688:	d107      	bne.n	800169a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800168a:	4b41      	ldr	r3, [pc, #260]	; (8001790 <HAL_RCC_ClockConfig+0x1c4>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d109      	bne.n	80016aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e073      	b.n	8001782 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800169a:	4b3d      	ldr	r3, [pc, #244]	; (8001790 <HAL_RCC_ClockConfig+0x1c4>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d101      	bne.n	80016aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e06b      	b.n	8001782 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016aa:	4b39      	ldr	r3, [pc, #228]	; (8001790 <HAL_RCC_ClockConfig+0x1c4>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f023 0203 	bic.w	r2, r3, #3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	4936      	ldr	r1, [pc, #216]	; (8001790 <HAL_RCC_ClockConfig+0x1c4>)
 80016b8:	4313      	orrs	r3, r2
 80016ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016bc:	f7ff f9fe 	bl	8000abc <HAL_GetTick>
 80016c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016c2:	e00a      	b.n	80016da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016c4:	f7ff f9fa 	bl	8000abc <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d901      	bls.n	80016da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e053      	b.n	8001782 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016da:	4b2d      	ldr	r3, [pc, #180]	; (8001790 <HAL_RCC_ClockConfig+0x1c4>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f003 020c 	and.w	r2, r3, #12
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d1eb      	bne.n	80016c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016ec:	4b27      	ldr	r3, [pc, #156]	; (800178c <HAL_RCC_ClockConfig+0x1c0>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0307 	and.w	r3, r3, #7
 80016f4:	683a      	ldr	r2, [r7, #0]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d210      	bcs.n	800171c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016fa:	4b24      	ldr	r3, [pc, #144]	; (800178c <HAL_RCC_ClockConfig+0x1c0>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f023 0207 	bic.w	r2, r3, #7
 8001702:	4922      	ldr	r1, [pc, #136]	; (800178c <HAL_RCC_ClockConfig+0x1c0>)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	4313      	orrs	r3, r2
 8001708:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800170a:	4b20      	ldr	r3, [pc, #128]	; (800178c <HAL_RCC_ClockConfig+0x1c0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	683a      	ldr	r2, [r7, #0]
 8001714:	429a      	cmp	r2, r3
 8001716:	d001      	beq.n	800171c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e032      	b.n	8001782 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0304 	and.w	r3, r3, #4
 8001724:	2b00      	cmp	r3, #0
 8001726:	d008      	beq.n	800173a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001728:	4b19      	ldr	r3, [pc, #100]	; (8001790 <HAL_RCC_ClockConfig+0x1c4>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	4916      	ldr	r1, [pc, #88]	; (8001790 <HAL_RCC_ClockConfig+0x1c4>)
 8001736:	4313      	orrs	r3, r2
 8001738:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0308 	and.w	r3, r3, #8
 8001742:	2b00      	cmp	r3, #0
 8001744:	d009      	beq.n	800175a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001746:	4b12      	ldr	r3, [pc, #72]	; (8001790 <HAL_RCC_ClockConfig+0x1c4>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	490e      	ldr	r1, [pc, #56]	; (8001790 <HAL_RCC_ClockConfig+0x1c4>)
 8001756:	4313      	orrs	r3, r2
 8001758:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800175a:	f000 f821 	bl	80017a0 <HAL_RCC_GetSysClockFreq>
 800175e:	4602      	mov	r2, r0
 8001760:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <HAL_RCC_ClockConfig+0x1c4>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	091b      	lsrs	r3, r3, #4
 8001766:	f003 030f 	and.w	r3, r3, #15
 800176a:	490a      	ldr	r1, [pc, #40]	; (8001794 <HAL_RCC_ClockConfig+0x1c8>)
 800176c:	5ccb      	ldrb	r3, [r1, r3]
 800176e:	fa22 f303 	lsr.w	r3, r2, r3
 8001772:	4a09      	ldr	r2, [pc, #36]	; (8001798 <HAL_RCC_ClockConfig+0x1cc>)
 8001774:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001776:	4b09      	ldr	r3, [pc, #36]	; (800179c <HAL_RCC_ClockConfig+0x1d0>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff f95c 	bl	8000a38 <HAL_InitTick>

  return HAL_OK;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40022000 	.word	0x40022000
 8001790:	40021000 	.word	0x40021000
 8001794:	080029bc 	.word	0x080029bc
 8001798:	20000008 	.word	0x20000008
 800179c:	2000000c 	.word	0x2000000c

080017a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b087      	sub	sp, #28
 80017a4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80017a6:	2300      	movs	r3, #0
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	2300      	movs	r3, #0
 80017ac:	60bb      	str	r3, [r7, #8]
 80017ae:	2300      	movs	r3, #0
 80017b0:	617b      	str	r3, [r7, #20]
 80017b2:	2300      	movs	r3, #0
 80017b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80017b6:	2300      	movs	r3, #0
 80017b8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80017ba:	4b1e      	ldr	r3, [pc, #120]	; (8001834 <HAL_RCC_GetSysClockFreq+0x94>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f003 030c 	and.w	r3, r3, #12
 80017c6:	2b04      	cmp	r3, #4
 80017c8:	d002      	beq.n	80017d0 <HAL_RCC_GetSysClockFreq+0x30>
 80017ca:	2b08      	cmp	r3, #8
 80017cc:	d003      	beq.n	80017d6 <HAL_RCC_GetSysClockFreq+0x36>
 80017ce:	e027      	b.n	8001820 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017d0:	4b19      	ldr	r3, [pc, #100]	; (8001838 <HAL_RCC_GetSysClockFreq+0x98>)
 80017d2:	613b      	str	r3, [r7, #16]
      break;
 80017d4:	e027      	b.n	8001826 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	0c9b      	lsrs	r3, r3, #18
 80017da:	f003 030f 	and.w	r3, r3, #15
 80017de:	4a17      	ldr	r2, [pc, #92]	; (800183c <HAL_RCC_GetSysClockFreq+0x9c>)
 80017e0:	5cd3      	ldrb	r3, [r2, r3]
 80017e2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d010      	beq.n	8001810 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017ee:	4b11      	ldr	r3, [pc, #68]	; (8001834 <HAL_RCC_GetSysClockFreq+0x94>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	0c5b      	lsrs	r3, r3, #17
 80017f4:	f003 0301 	and.w	r3, r3, #1
 80017f8:	4a11      	ldr	r2, [pc, #68]	; (8001840 <HAL_RCC_GetSysClockFreq+0xa0>)
 80017fa:	5cd3      	ldrb	r3, [r2, r3]
 80017fc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a0d      	ldr	r2, [pc, #52]	; (8001838 <HAL_RCC_GetSysClockFreq+0x98>)
 8001802:	fb03 f202 	mul.w	r2, r3, r2
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	fbb2 f3f3 	udiv	r3, r2, r3
 800180c:	617b      	str	r3, [r7, #20]
 800180e:	e004      	b.n	800181a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4a0c      	ldr	r2, [pc, #48]	; (8001844 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001814:	fb02 f303 	mul.w	r3, r2, r3
 8001818:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	613b      	str	r3, [r7, #16]
      break;
 800181e:	e002      	b.n	8001826 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001820:	4b05      	ldr	r3, [pc, #20]	; (8001838 <HAL_RCC_GetSysClockFreq+0x98>)
 8001822:	613b      	str	r3, [r7, #16]
      break;
 8001824:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001826:	693b      	ldr	r3, [r7, #16]
}
 8001828:	4618      	mov	r0, r3
 800182a:	371c      	adds	r7, #28
 800182c:	46bd      	mov	sp, r7
 800182e:	bc80      	pop	{r7}
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	40021000 	.word	0x40021000
 8001838:	007a1200 	.word	0x007a1200
 800183c:	080029d4 	.word	0x080029d4
 8001840:	080029e4 	.word	0x080029e4
 8001844:	003d0900 	.word	0x003d0900

08001848 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800184c:	4b02      	ldr	r3, [pc, #8]	; (8001858 <HAL_RCC_GetHCLKFreq+0x10>)
 800184e:	681b      	ldr	r3, [r3, #0]
}
 8001850:	4618      	mov	r0, r3
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr
 8001858:	20000008 	.word	0x20000008

0800185c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001860:	f7ff fff2 	bl	8001848 <HAL_RCC_GetHCLKFreq>
 8001864:	4602      	mov	r2, r0
 8001866:	4b05      	ldr	r3, [pc, #20]	; (800187c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	0a1b      	lsrs	r3, r3, #8
 800186c:	f003 0307 	and.w	r3, r3, #7
 8001870:	4903      	ldr	r1, [pc, #12]	; (8001880 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001872:	5ccb      	ldrb	r3, [r1, r3]
 8001874:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001878:	4618      	mov	r0, r3
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40021000 	.word	0x40021000
 8001880:	080029cc 	.word	0x080029cc

08001884 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001888:	f7ff ffde 	bl	8001848 <HAL_RCC_GetHCLKFreq>
 800188c:	4602      	mov	r2, r0
 800188e:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	0adb      	lsrs	r3, r3, #11
 8001894:	f003 0307 	and.w	r3, r3, #7
 8001898:	4903      	ldr	r1, [pc, #12]	; (80018a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800189a:	5ccb      	ldrb	r3, [r1, r3]
 800189c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40021000 	.word	0x40021000
 80018a8:	080029cc 	.word	0x080029cc

080018ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80018b4:	4b0a      	ldr	r3, [pc, #40]	; (80018e0 <RCC_Delay+0x34>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a0a      	ldr	r2, [pc, #40]	; (80018e4 <RCC_Delay+0x38>)
 80018ba:	fba2 2303 	umull	r2, r3, r2, r3
 80018be:	0a5b      	lsrs	r3, r3, #9
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	fb02 f303 	mul.w	r3, r2, r3
 80018c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80018c8:	bf00      	nop
  }
  while (Delay --);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	1e5a      	subs	r2, r3, #1
 80018ce:	60fa      	str	r2, [r7, #12]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1f9      	bne.n	80018c8 <RCC_Delay+0x1c>
}
 80018d4:	bf00      	nop
 80018d6:	bf00      	nop
 80018d8:	3714      	adds	r7, #20
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc80      	pop	{r7}
 80018de:	4770      	bx	lr
 80018e0:	20000008 	.word	0x20000008
 80018e4:	10624dd3 	.word	0x10624dd3

080018e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d101      	bne.n	80018fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e042      	b.n	8001980 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001900:	b2db      	uxtb	r3, r3
 8001902:	2b00      	cmp	r3, #0
 8001904:	d106      	bne.n	8001914 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7fe fd40 	bl	8000394 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2224      	movs	r2, #36	; 0x24
 8001918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	68da      	ldr	r2, [r3, #12]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800192a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f000 f91d 	bl	8001b6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	691a      	ldr	r2, [r3, #16]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001940:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	695a      	ldr	r2, [r3, #20]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001950:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	68da      	ldr	r2, [r3, #12]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001960:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2220      	movs	r2, #32
 800196c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2220      	movs	r2, #32
 8001974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b08a      	sub	sp, #40	; 0x28
 800198c:	af02      	add	r7, sp, #8
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	603b      	str	r3, [r7, #0]
 8001994:	4613      	mov	r3, r2
 8001996:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	2b20      	cmp	r3, #32
 80019a6:	d16d      	bne.n	8001a84 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d002      	beq.n	80019b4 <HAL_UART_Transmit+0x2c>
 80019ae:	88fb      	ldrh	r3, [r7, #6]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d101      	bne.n	80019b8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e066      	b.n	8001a86 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2200      	movs	r2, #0
 80019bc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2221      	movs	r2, #33	; 0x21
 80019c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80019c6:	f7ff f879 	bl	8000abc <HAL_GetTick>
 80019ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	88fa      	ldrh	r2, [r7, #6]
 80019d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	88fa      	ldrh	r2, [r7, #6]
 80019d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019e0:	d108      	bne.n	80019f4 <HAL_UART_Transmit+0x6c>
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	691b      	ldr	r3, [r3, #16]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d104      	bne.n	80019f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	61bb      	str	r3, [r7, #24]
 80019f2:	e003      	b.n	80019fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80019fc:	e02a      	b.n	8001a54 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	2200      	movs	r2, #0
 8001a06:	2180      	movs	r1, #128	; 0x80
 8001a08:	68f8      	ldr	r0, [r7, #12]
 8001a0a:	f000 f840 	bl	8001a8e <UART_WaitOnFlagUntilTimeout>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e036      	b.n	8001a86 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d10b      	bne.n	8001a36 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	881b      	ldrh	r3, [r3, #0]
 8001a22:	461a      	mov	r2, r3
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001a2c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	3302      	adds	r3, #2
 8001a32:	61bb      	str	r3, [r7, #24]
 8001a34:	e007      	b.n	8001a46 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	781a      	ldrb	r2, [r3, #0]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	3301      	adds	r3, #1
 8001a44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1cf      	bne.n	80019fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	9300      	str	r3, [sp, #0]
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	2200      	movs	r2, #0
 8001a66:	2140      	movs	r1, #64	; 0x40
 8001a68:	68f8      	ldr	r0, [r7, #12]
 8001a6a:	f000 f810 	bl	8001a8e <UART_WaitOnFlagUntilTimeout>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e006      	b.n	8001a86 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2220      	movs	r2, #32
 8001a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001a80:	2300      	movs	r3, #0
 8001a82:	e000      	b.n	8001a86 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001a84:	2302      	movs	r3, #2
  }
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3720      	adds	r7, #32
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b090      	sub	sp, #64	; 0x40
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	60f8      	str	r0, [r7, #12]
 8001a96:	60b9      	str	r1, [r7, #8]
 8001a98:	603b      	str	r3, [r7, #0]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a9e:	e050      	b.n	8001b42 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001aa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aa6:	d04c      	beq.n	8001b42 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001aa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d007      	beq.n	8001abe <UART_WaitOnFlagUntilTimeout+0x30>
 8001aae:	f7ff f805 	bl	8000abc <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d241      	bcs.n	8001b42 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	330c      	adds	r3, #12
 8001ac4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ac8:	e853 3f00 	ldrex	r3, [r3]
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	330c      	adds	r3, #12
 8001adc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ade:	637a      	str	r2, [r7, #52]	; 0x34
 8001ae0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ae2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001ae4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ae6:	e841 2300 	strex	r3, r2, [r1]
 8001aea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1e5      	bne.n	8001abe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	3314      	adds	r3, #20
 8001af8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	e853 3f00 	ldrex	r3, [r3]
 8001b00:	613b      	str	r3, [r7, #16]
   return(result);
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	f023 0301 	bic.w	r3, r3, #1
 8001b08:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	3314      	adds	r3, #20
 8001b10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b12:	623a      	str	r2, [r7, #32]
 8001b14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b16:	69f9      	ldr	r1, [r7, #28]
 8001b18:	6a3a      	ldr	r2, [r7, #32]
 8001b1a:	e841 2300 	strex	r3, r2, [r1]
 8001b1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1e5      	bne.n	8001af2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2220      	movs	r2, #32
 8001b2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2220      	movs	r2, #32
 8001b32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e00f      	b.n	8001b62 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	68ba      	ldr	r2, [r7, #8]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	bf0c      	ite	eq
 8001b52:	2301      	moveq	r3, #1
 8001b54:	2300      	movne	r3, #0
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	461a      	mov	r2, r3
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d09f      	beq.n	8001aa0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3740      	adds	r7, #64	; 0x40
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
	...

08001b6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68da      	ldr	r2, [r3, #12]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	430a      	orrs	r2, r1
 8001b88:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	689a      	ldr	r2, [r3, #8]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	691b      	ldr	r3, [r3, #16]
 8001b92:	431a      	orrs	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001ba6:	f023 030c 	bic.w	r3, r3, #12
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	6812      	ldr	r2, [r2, #0]
 8001bae:	68b9      	ldr	r1, [r7, #8]
 8001bb0:	430b      	orrs	r3, r1
 8001bb2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	699a      	ldr	r2, [r3, #24]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a2c      	ldr	r2, [pc, #176]	; (8001c80 <UART_SetConfig+0x114>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d103      	bne.n	8001bdc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001bd4:	f7ff fe56 	bl	8001884 <HAL_RCC_GetPCLK2Freq>
 8001bd8:	60f8      	str	r0, [r7, #12]
 8001bda:	e002      	b.n	8001be2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001bdc:	f7ff fe3e 	bl	800185c <HAL_RCC_GetPCLK1Freq>
 8001be0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	4613      	mov	r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	4413      	add	r3, r2
 8001bea:	009a      	lsls	r2, r3, #2
 8001bec:	441a      	add	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf8:	4a22      	ldr	r2, [pc, #136]	; (8001c84 <UART_SetConfig+0x118>)
 8001bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001bfe:	095b      	lsrs	r3, r3, #5
 8001c00:	0119      	lsls	r1, r3, #4
 8001c02:	68fa      	ldr	r2, [r7, #12]
 8001c04:	4613      	mov	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	009a      	lsls	r2, r3, #2
 8001c0c:	441a      	add	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c18:	4b1a      	ldr	r3, [pc, #104]	; (8001c84 <UART_SetConfig+0x118>)
 8001c1a:	fba3 0302 	umull	r0, r3, r3, r2
 8001c1e:	095b      	lsrs	r3, r3, #5
 8001c20:	2064      	movs	r0, #100	; 0x64
 8001c22:	fb00 f303 	mul.w	r3, r0, r3
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	011b      	lsls	r3, r3, #4
 8001c2a:	3332      	adds	r3, #50	; 0x32
 8001c2c:	4a15      	ldr	r2, [pc, #84]	; (8001c84 <UART_SetConfig+0x118>)
 8001c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c32:	095b      	lsrs	r3, r3, #5
 8001c34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c38:	4419      	add	r1, r3
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	4413      	add	r3, r2
 8001c42:	009a      	lsls	r2, r3, #2
 8001c44:	441a      	add	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c50:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <UART_SetConfig+0x118>)
 8001c52:	fba3 0302 	umull	r0, r3, r3, r2
 8001c56:	095b      	lsrs	r3, r3, #5
 8001c58:	2064      	movs	r0, #100	; 0x64
 8001c5a:	fb00 f303 	mul.w	r3, r0, r3
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	011b      	lsls	r3, r3, #4
 8001c62:	3332      	adds	r3, #50	; 0x32
 8001c64:	4a07      	ldr	r2, [pc, #28]	; (8001c84 <UART_SetConfig+0x118>)
 8001c66:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6a:	095b      	lsrs	r3, r3, #5
 8001c6c:	f003 020f 	and.w	r2, r3, #15
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	440a      	add	r2, r1
 8001c76:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001c78:	bf00      	nop
 8001c7a:	3710      	adds	r7, #16
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40013800 	.word	0x40013800
 8001c84:	51eb851f 	.word	0x51eb851f

08001c88 <siprintf>:
 8001c88:	b40e      	push	{r1, r2, r3}
 8001c8a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001c8e:	b500      	push	{lr}
 8001c90:	b09c      	sub	sp, #112	; 0x70
 8001c92:	ab1d      	add	r3, sp, #116	; 0x74
 8001c94:	9002      	str	r0, [sp, #8]
 8001c96:	9006      	str	r0, [sp, #24]
 8001c98:	9107      	str	r1, [sp, #28]
 8001c9a:	9104      	str	r1, [sp, #16]
 8001c9c:	4808      	ldr	r0, [pc, #32]	; (8001cc0 <siprintf+0x38>)
 8001c9e:	4909      	ldr	r1, [pc, #36]	; (8001cc4 <siprintf+0x3c>)
 8001ca0:	f853 2b04 	ldr.w	r2, [r3], #4
 8001ca4:	9105      	str	r1, [sp, #20]
 8001ca6:	6800      	ldr	r0, [r0, #0]
 8001ca8:	a902      	add	r1, sp, #8
 8001caa:	9301      	str	r3, [sp, #4]
 8001cac:	f000 f98e 	bl	8001fcc <_svfiprintf_r>
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	9b02      	ldr	r3, [sp, #8]
 8001cb4:	701a      	strb	r2, [r3, #0]
 8001cb6:	b01c      	add	sp, #112	; 0x70
 8001cb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8001cbc:	b003      	add	sp, #12
 8001cbe:	4770      	bx	lr
 8001cc0:	20000060 	.word	0x20000060
 8001cc4:	ffff0208 	.word	0xffff0208

08001cc8 <memset>:
 8001cc8:	4603      	mov	r3, r0
 8001cca:	4402      	add	r2, r0
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d100      	bne.n	8001cd2 <memset+0xa>
 8001cd0:	4770      	bx	lr
 8001cd2:	f803 1b01 	strb.w	r1, [r3], #1
 8001cd6:	e7f9      	b.n	8001ccc <memset+0x4>

08001cd8 <__errno>:
 8001cd8:	4b01      	ldr	r3, [pc, #4]	; (8001ce0 <__errno+0x8>)
 8001cda:	6818      	ldr	r0, [r3, #0]
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	20000060 	.word	0x20000060

08001ce4 <__libc_init_array>:
 8001ce4:	b570      	push	{r4, r5, r6, lr}
 8001ce6:	2600      	movs	r6, #0
 8001ce8:	4d0c      	ldr	r5, [pc, #48]	; (8001d1c <__libc_init_array+0x38>)
 8001cea:	4c0d      	ldr	r4, [pc, #52]	; (8001d20 <__libc_init_array+0x3c>)
 8001cec:	1b64      	subs	r4, r4, r5
 8001cee:	10a4      	asrs	r4, r4, #2
 8001cf0:	42a6      	cmp	r6, r4
 8001cf2:	d109      	bne.n	8001d08 <__libc_init_array+0x24>
 8001cf4:	f000 fc7a 	bl	80025ec <_init>
 8001cf8:	2600      	movs	r6, #0
 8001cfa:	4d0a      	ldr	r5, [pc, #40]	; (8001d24 <__libc_init_array+0x40>)
 8001cfc:	4c0a      	ldr	r4, [pc, #40]	; (8001d28 <__libc_init_array+0x44>)
 8001cfe:	1b64      	subs	r4, r4, r5
 8001d00:	10a4      	asrs	r4, r4, #2
 8001d02:	42a6      	cmp	r6, r4
 8001d04:	d105      	bne.n	8001d12 <__libc_init_array+0x2e>
 8001d06:	bd70      	pop	{r4, r5, r6, pc}
 8001d08:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d0c:	4798      	blx	r3
 8001d0e:	3601      	adds	r6, #1
 8001d10:	e7ee      	b.n	8001cf0 <__libc_init_array+0xc>
 8001d12:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d16:	4798      	blx	r3
 8001d18:	3601      	adds	r6, #1
 8001d1a:	e7f2      	b.n	8001d02 <__libc_init_array+0x1e>
 8001d1c:	08002a1c 	.word	0x08002a1c
 8001d20:	08002a1c 	.word	0x08002a1c
 8001d24:	08002a1c 	.word	0x08002a1c
 8001d28:	08002a20 	.word	0x08002a20

08001d2c <__retarget_lock_acquire_recursive>:
 8001d2c:	4770      	bx	lr

08001d2e <__retarget_lock_release_recursive>:
 8001d2e:	4770      	bx	lr

08001d30 <_free_r>:
 8001d30:	b538      	push	{r3, r4, r5, lr}
 8001d32:	4605      	mov	r5, r0
 8001d34:	2900      	cmp	r1, #0
 8001d36:	d040      	beq.n	8001dba <_free_r+0x8a>
 8001d38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001d3c:	1f0c      	subs	r4, r1, #4
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	bfb8      	it	lt
 8001d42:	18e4      	addlt	r4, r4, r3
 8001d44:	f000 f8dc 	bl	8001f00 <__malloc_lock>
 8001d48:	4a1c      	ldr	r2, [pc, #112]	; (8001dbc <_free_r+0x8c>)
 8001d4a:	6813      	ldr	r3, [r2, #0]
 8001d4c:	b933      	cbnz	r3, 8001d5c <_free_r+0x2c>
 8001d4e:	6063      	str	r3, [r4, #4]
 8001d50:	6014      	str	r4, [r2, #0]
 8001d52:	4628      	mov	r0, r5
 8001d54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001d58:	f000 b8d8 	b.w	8001f0c <__malloc_unlock>
 8001d5c:	42a3      	cmp	r3, r4
 8001d5e:	d908      	bls.n	8001d72 <_free_r+0x42>
 8001d60:	6820      	ldr	r0, [r4, #0]
 8001d62:	1821      	adds	r1, r4, r0
 8001d64:	428b      	cmp	r3, r1
 8001d66:	bf01      	itttt	eq
 8001d68:	6819      	ldreq	r1, [r3, #0]
 8001d6a:	685b      	ldreq	r3, [r3, #4]
 8001d6c:	1809      	addeq	r1, r1, r0
 8001d6e:	6021      	streq	r1, [r4, #0]
 8001d70:	e7ed      	b.n	8001d4e <_free_r+0x1e>
 8001d72:	461a      	mov	r2, r3
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	b10b      	cbz	r3, 8001d7c <_free_r+0x4c>
 8001d78:	42a3      	cmp	r3, r4
 8001d7a:	d9fa      	bls.n	8001d72 <_free_r+0x42>
 8001d7c:	6811      	ldr	r1, [r2, #0]
 8001d7e:	1850      	adds	r0, r2, r1
 8001d80:	42a0      	cmp	r0, r4
 8001d82:	d10b      	bne.n	8001d9c <_free_r+0x6c>
 8001d84:	6820      	ldr	r0, [r4, #0]
 8001d86:	4401      	add	r1, r0
 8001d88:	1850      	adds	r0, r2, r1
 8001d8a:	4283      	cmp	r3, r0
 8001d8c:	6011      	str	r1, [r2, #0]
 8001d8e:	d1e0      	bne.n	8001d52 <_free_r+0x22>
 8001d90:	6818      	ldr	r0, [r3, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	4408      	add	r0, r1
 8001d96:	6010      	str	r0, [r2, #0]
 8001d98:	6053      	str	r3, [r2, #4]
 8001d9a:	e7da      	b.n	8001d52 <_free_r+0x22>
 8001d9c:	d902      	bls.n	8001da4 <_free_r+0x74>
 8001d9e:	230c      	movs	r3, #12
 8001da0:	602b      	str	r3, [r5, #0]
 8001da2:	e7d6      	b.n	8001d52 <_free_r+0x22>
 8001da4:	6820      	ldr	r0, [r4, #0]
 8001da6:	1821      	adds	r1, r4, r0
 8001da8:	428b      	cmp	r3, r1
 8001daa:	bf01      	itttt	eq
 8001dac:	6819      	ldreq	r1, [r3, #0]
 8001dae:	685b      	ldreq	r3, [r3, #4]
 8001db0:	1809      	addeq	r1, r1, r0
 8001db2:	6021      	streq	r1, [r4, #0]
 8001db4:	6063      	str	r3, [r4, #4]
 8001db6:	6054      	str	r4, [r2, #4]
 8001db8:	e7cb      	b.n	8001d52 <_free_r+0x22>
 8001dba:	bd38      	pop	{r3, r4, r5, pc}
 8001dbc:	2000022c 	.word	0x2000022c

08001dc0 <sbrk_aligned>:
 8001dc0:	b570      	push	{r4, r5, r6, lr}
 8001dc2:	4e0e      	ldr	r6, [pc, #56]	; (8001dfc <sbrk_aligned+0x3c>)
 8001dc4:	460c      	mov	r4, r1
 8001dc6:	6831      	ldr	r1, [r6, #0]
 8001dc8:	4605      	mov	r5, r0
 8001dca:	b911      	cbnz	r1, 8001dd2 <sbrk_aligned+0x12>
 8001dcc:	f000 fbaa 	bl	8002524 <_sbrk_r>
 8001dd0:	6030      	str	r0, [r6, #0]
 8001dd2:	4621      	mov	r1, r4
 8001dd4:	4628      	mov	r0, r5
 8001dd6:	f000 fba5 	bl	8002524 <_sbrk_r>
 8001dda:	1c43      	adds	r3, r0, #1
 8001ddc:	d00a      	beq.n	8001df4 <sbrk_aligned+0x34>
 8001dde:	1cc4      	adds	r4, r0, #3
 8001de0:	f024 0403 	bic.w	r4, r4, #3
 8001de4:	42a0      	cmp	r0, r4
 8001de6:	d007      	beq.n	8001df8 <sbrk_aligned+0x38>
 8001de8:	1a21      	subs	r1, r4, r0
 8001dea:	4628      	mov	r0, r5
 8001dec:	f000 fb9a 	bl	8002524 <_sbrk_r>
 8001df0:	3001      	adds	r0, #1
 8001df2:	d101      	bne.n	8001df8 <sbrk_aligned+0x38>
 8001df4:	f04f 34ff 	mov.w	r4, #4294967295
 8001df8:	4620      	mov	r0, r4
 8001dfa:	bd70      	pop	{r4, r5, r6, pc}
 8001dfc:	20000230 	.word	0x20000230

08001e00 <_malloc_r>:
 8001e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001e04:	1ccd      	adds	r5, r1, #3
 8001e06:	f025 0503 	bic.w	r5, r5, #3
 8001e0a:	3508      	adds	r5, #8
 8001e0c:	2d0c      	cmp	r5, #12
 8001e0e:	bf38      	it	cc
 8001e10:	250c      	movcc	r5, #12
 8001e12:	2d00      	cmp	r5, #0
 8001e14:	4607      	mov	r7, r0
 8001e16:	db01      	blt.n	8001e1c <_malloc_r+0x1c>
 8001e18:	42a9      	cmp	r1, r5
 8001e1a:	d905      	bls.n	8001e28 <_malloc_r+0x28>
 8001e1c:	230c      	movs	r3, #12
 8001e1e:	2600      	movs	r6, #0
 8001e20:	603b      	str	r3, [r7, #0]
 8001e22:	4630      	mov	r0, r6
 8001e24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001e28:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001efc <_malloc_r+0xfc>
 8001e2c:	f000 f868 	bl	8001f00 <__malloc_lock>
 8001e30:	f8d8 3000 	ldr.w	r3, [r8]
 8001e34:	461c      	mov	r4, r3
 8001e36:	bb5c      	cbnz	r4, 8001e90 <_malloc_r+0x90>
 8001e38:	4629      	mov	r1, r5
 8001e3a:	4638      	mov	r0, r7
 8001e3c:	f7ff ffc0 	bl	8001dc0 <sbrk_aligned>
 8001e40:	1c43      	adds	r3, r0, #1
 8001e42:	4604      	mov	r4, r0
 8001e44:	d155      	bne.n	8001ef2 <_malloc_r+0xf2>
 8001e46:	f8d8 4000 	ldr.w	r4, [r8]
 8001e4a:	4626      	mov	r6, r4
 8001e4c:	2e00      	cmp	r6, #0
 8001e4e:	d145      	bne.n	8001edc <_malloc_r+0xdc>
 8001e50:	2c00      	cmp	r4, #0
 8001e52:	d048      	beq.n	8001ee6 <_malloc_r+0xe6>
 8001e54:	6823      	ldr	r3, [r4, #0]
 8001e56:	4631      	mov	r1, r6
 8001e58:	4638      	mov	r0, r7
 8001e5a:	eb04 0903 	add.w	r9, r4, r3
 8001e5e:	f000 fb61 	bl	8002524 <_sbrk_r>
 8001e62:	4581      	cmp	r9, r0
 8001e64:	d13f      	bne.n	8001ee6 <_malloc_r+0xe6>
 8001e66:	6821      	ldr	r1, [r4, #0]
 8001e68:	4638      	mov	r0, r7
 8001e6a:	1a6d      	subs	r5, r5, r1
 8001e6c:	4629      	mov	r1, r5
 8001e6e:	f7ff ffa7 	bl	8001dc0 <sbrk_aligned>
 8001e72:	3001      	adds	r0, #1
 8001e74:	d037      	beq.n	8001ee6 <_malloc_r+0xe6>
 8001e76:	6823      	ldr	r3, [r4, #0]
 8001e78:	442b      	add	r3, r5
 8001e7a:	6023      	str	r3, [r4, #0]
 8001e7c:	f8d8 3000 	ldr.w	r3, [r8]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d038      	beq.n	8001ef6 <_malloc_r+0xf6>
 8001e84:	685a      	ldr	r2, [r3, #4]
 8001e86:	42a2      	cmp	r2, r4
 8001e88:	d12b      	bne.n	8001ee2 <_malloc_r+0xe2>
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	e00f      	b.n	8001eb0 <_malloc_r+0xb0>
 8001e90:	6822      	ldr	r2, [r4, #0]
 8001e92:	1b52      	subs	r2, r2, r5
 8001e94:	d41f      	bmi.n	8001ed6 <_malloc_r+0xd6>
 8001e96:	2a0b      	cmp	r2, #11
 8001e98:	d917      	bls.n	8001eca <_malloc_r+0xca>
 8001e9a:	1961      	adds	r1, r4, r5
 8001e9c:	42a3      	cmp	r3, r4
 8001e9e:	6025      	str	r5, [r4, #0]
 8001ea0:	bf18      	it	ne
 8001ea2:	6059      	strne	r1, [r3, #4]
 8001ea4:	6863      	ldr	r3, [r4, #4]
 8001ea6:	bf08      	it	eq
 8001ea8:	f8c8 1000 	streq.w	r1, [r8]
 8001eac:	5162      	str	r2, [r4, r5]
 8001eae:	604b      	str	r3, [r1, #4]
 8001eb0:	4638      	mov	r0, r7
 8001eb2:	f104 060b 	add.w	r6, r4, #11
 8001eb6:	f000 f829 	bl	8001f0c <__malloc_unlock>
 8001eba:	f026 0607 	bic.w	r6, r6, #7
 8001ebe:	1d23      	adds	r3, r4, #4
 8001ec0:	1af2      	subs	r2, r6, r3
 8001ec2:	d0ae      	beq.n	8001e22 <_malloc_r+0x22>
 8001ec4:	1b9b      	subs	r3, r3, r6
 8001ec6:	50a3      	str	r3, [r4, r2]
 8001ec8:	e7ab      	b.n	8001e22 <_malloc_r+0x22>
 8001eca:	42a3      	cmp	r3, r4
 8001ecc:	6862      	ldr	r2, [r4, #4]
 8001ece:	d1dd      	bne.n	8001e8c <_malloc_r+0x8c>
 8001ed0:	f8c8 2000 	str.w	r2, [r8]
 8001ed4:	e7ec      	b.n	8001eb0 <_malloc_r+0xb0>
 8001ed6:	4623      	mov	r3, r4
 8001ed8:	6864      	ldr	r4, [r4, #4]
 8001eda:	e7ac      	b.n	8001e36 <_malloc_r+0x36>
 8001edc:	4634      	mov	r4, r6
 8001ede:	6876      	ldr	r6, [r6, #4]
 8001ee0:	e7b4      	b.n	8001e4c <_malloc_r+0x4c>
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	e7cc      	b.n	8001e80 <_malloc_r+0x80>
 8001ee6:	230c      	movs	r3, #12
 8001ee8:	4638      	mov	r0, r7
 8001eea:	603b      	str	r3, [r7, #0]
 8001eec:	f000 f80e 	bl	8001f0c <__malloc_unlock>
 8001ef0:	e797      	b.n	8001e22 <_malloc_r+0x22>
 8001ef2:	6025      	str	r5, [r4, #0]
 8001ef4:	e7dc      	b.n	8001eb0 <_malloc_r+0xb0>
 8001ef6:	605b      	str	r3, [r3, #4]
 8001ef8:	deff      	udf	#255	; 0xff
 8001efa:	bf00      	nop
 8001efc:	2000022c 	.word	0x2000022c

08001f00 <__malloc_lock>:
 8001f00:	4801      	ldr	r0, [pc, #4]	; (8001f08 <__malloc_lock+0x8>)
 8001f02:	f7ff bf13 	b.w	8001d2c <__retarget_lock_acquire_recursive>
 8001f06:	bf00      	nop
 8001f08:	20000228 	.word	0x20000228

08001f0c <__malloc_unlock>:
 8001f0c:	4801      	ldr	r0, [pc, #4]	; (8001f14 <__malloc_unlock+0x8>)
 8001f0e:	f7ff bf0e 	b.w	8001d2e <__retarget_lock_release_recursive>
 8001f12:	bf00      	nop
 8001f14:	20000228 	.word	0x20000228

08001f18 <__ssputs_r>:
 8001f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f1c:	461f      	mov	r7, r3
 8001f1e:	688e      	ldr	r6, [r1, #8]
 8001f20:	4682      	mov	sl, r0
 8001f22:	42be      	cmp	r6, r7
 8001f24:	460c      	mov	r4, r1
 8001f26:	4690      	mov	r8, r2
 8001f28:	680b      	ldr	r3, [r1, #0]
 8001f2a:	d82c      	bhi.n	8001f86 <__ssputs_r+0x6e>
 8001f2c:	898a      	ldrh	r2, [r1, #12]
 8001f2e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001f32:	d026      	beq.n	8001f82 <__ssputs_r+0x6a>
 8001f34:	6965      	ldr	r5, [r4, #20]
 8001f36:	6909      	ldr	r1, [r1, #16]
 8001f38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001f3c:	eba3 0901 	sub.w	r9, r3, r1
 8001f40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001f44:	1c7b      	adds	r3, r7, #1
 8001f46:	444b      	add	r3, r9
 8001f48:	106d      	asrs	r5, r5, #1
 8001f4a:	429d      	cmp	r5, r3
 8001f4c:	bf38      	it	cc
 8001f4e:	461d      	movcc	r5, r3
 8001f50:	0553      	lsls	r3, r2, #21
 8001f52:	d527      	bpl.n	8001fa4 <__ssputs_r+0x8c>
 8001f54:	4629      	mov	r1, r5
 8001f56:	f7ff ff53 	bl	8001e00 <_malloc_r>
 8001f5a:	4606      	mov	r6, r0
 8001f5c:	b360      	cbz	r0, 8001fb8 <__ssputs_r+0xa0>
 8001f5e:	464a      	mov	r2, r9
 8001f60:	6921      	ldr	r1, [r4, #16]
 8001f62:	f000 fafd 	bl	8002560 <memcpy>
 8001f66:	89a3      	ldrh	r3, [r4, #12]
 8001f68:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f70:	81a3      	strh	r3, [r4, #12]
 8001f72:	6126      	str	r6, [r4, #16]
 8001f74:	444e      	add	r6, r9
 8001f76:	6026      	str	r6, [r4, #0]
 8001f78:	463e      	mov	r6, r7
 8001f7a:	6165      	str	r5, [r4, #20]
 8001f7c:	eba5 0509 	sub.w	r5, r5, r9
 8001f80:	60a5      	str	r5, [r4, #8]
 8001f82:	42be      	cmp	r6, r7
 8001f84:	d900      	bls.n	8001f88 <__ssputs_r+0x70>
 8001f86:	463e      	mov	r6, r7
 8001f88:	4632      	mov	r2, r6
 8001f8a:	4641      	mov	r1, r8
 8001f8c:	6820      	ldr	r0, [r4, #0]
 8001f8e:	f000 faaf 	bl	80024f0 <memmove>
 8001f92:	2000      	movs	r0, #0
 8001f94:	68a3      	ldr	r3, [r4, #8]
 8001f96:	1b9b      	subs	r3, r3, r6
 8001f98:	60a3      	str	r3, [r4, #8]
 8001f9a:	6823      	ldr	r3, [r4, #0]
 8001f9c:	4433      	add	r3, r6
 8001f9e:	6023      	str	r3, [r4, #0]
 8001fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fa4:	462a      	mov	r2, r5
 8001fa6:	f000 fae9 	bl	800257c <_realloc_r>
 8001faa:	4606      	mov	r6, r0
 8001fac:	2800      	cmp	r0, #0
 8001fae:	d1e0      	bne.n	8001f72 <__ssputs_r+0x5a>
 8001fb0:	4650      	mov	r0, sl
 8001fb2:	6921      	ldr	r1, [r4, #16]
 8001fb4:	f7ff febc 	bl	8001d30 <_free_r>
 8001fb8:	230c      	movs	r3, #12
 8001fba:	f8ca 3000 	str.w	r3, [sl]
 8001fbe:	89a3      	ldrh	r3, [r4, #12]
 8001fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fc8:	81a3      	strh	r3, [r4, #12]
 8001fca:	e7e9      	b.n	8001fa0 <__ssputs_r+0x88>

08001fcc <_svfiprintf_r>:
 8001fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fd0:	4698      	mov	r8, r3
 8001fd2:	898b      	ldrh	r3, [r1, #12]
 8001fd4:	4607      	mov	r7, r0
 8001fd6:	061b      	lsls	r3, r3, #24
 8001fd8:	460d      	mov	r5, r1
 8001fda:	4614      	mov	r4, r2
 8001fdc:	b09d      	sub	sp, #116	; 0x74
 8001fde:	d50e      	bpl.n	8001ffe <_svfiprintf_r+0x32>
 8001fe0:	690b      	ldr	r3, [r1, #16]
 8001fe2:	b963      	cbnz	r3, 8001ffe <_svfiprintf_r+0x32>
 8001fe4:	2140      	movs	r1, #64	; 0x40
 8001fe6:	f7ff ff0b 	bl	8001e00 <_malloc_r>
 8001fea:	6028      	str	r0, [r5, #0]
 8001fec:	6128      	str	r0, [r5, #16]
 8001fee:	b920      	cbnz	r0, 8001ffa <_svfiprintf_r+0x2e>
 8001ff0:	230c      	movs	r3, #12
 8001ff2:	603b      	str	r3, [r7, #0]
 8001ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff8:	e0d0      	b.n	800219c <_svfiprintf_r+0x1d0>
 8001ffa:	2340      	movs	r3, #64	; 0x40
 8001ffc:	616b      	str	r3, [r5, #20]
 8001ffe:	2300      	movs	r3, #0
 8002000:	9309      	str	r3, [sp, #36]	; 0x24
 8002002:	2320      	movs	r3, #32
 8002004:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002008:	2330      	movs	r3, #48	; 0x30
 800200a:	f04f 0901 	mov.w	r9, #1
 800200e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002012:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80021b4 <_svfiprintf_r+0x1e8>
 8002016:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800201a:	4623      	mov	r3, r4
 800201c:	469a      	mov	sl, r3
 800201e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002022:	b10a      	cbz	r2, 8002028 <_svfiprintf_r+0x5c>
 8002024:	2a25      	cmp	r2, #37	; 0x25
 8002026:	d1f9      	bne.n	800201c <_svfiprintf_r+0x50>
 8002028:	ebba 0b04 	subs.w	fp, sl, r4
 800202c:	d00b      	beq.n	8002046 <_svfiprintf_r+0x7a>
 800202e:	465b      	mov	r3, fp
 8002030:	4622      	mov	r2, r4
 8002032:	4629      	mov	r1, r5
 8002034:	4638      	mov	r0, r7
 8002036:	f7ff ff6f 	bl	8001f18 <__ssputs_r>
 800203a:	3001      	adds	r0, #1
 800203c:	f000 80a9 	beq.w	8002192 <_svfiprintf_r+0x1c6>
 8002040:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002042:	445a      	add	r2, fp
 8002044:	9209      	str	r2, [sp, #36]	; 0x24
 8002046:	f89a 3000 	ldrb.w	r3, [sl]
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 80a1 	beq.w	8002192 <_svfiprintf_r+0x1c6>
 8002050:	2300      	movs	r3, #0
 8002052:	f04f 32ff 	mov.w	r2, #4294967295
 8002056:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800205a:	f10a 0a01 	add.w	sl, sl, #1
 800205e:	9304      	str	r3, [sp, #16]
 8002060:	9307      	str	r3, [sp, #28]
 8002062:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002066:	931a      	str	r3, [sp, #104]	; 0x68
 8002068:	4654      	mov	r4, sl
 800206a:	2205      	movs	r2, #5
 800206c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002070:	4850      	ldr	r0, [pc, #320]	; (80021b4 <_svfiprintf_r+0x1e8>)
 8002072:	f000 fa67 	bl	8002544 <memchr>
 8002076:	9a04      	ldr	r2, [sp, #16]
 8002078:	b9d8      	cbnz	r0, 80020b2 <_svfiprintf_r+0xe6>
 800207a:	06d0      	lsls	r0, r2, #27
 800207c:	bf44      	itt	mi
 800207e:	2320      	movmi	r3, #32
 8002080:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002084:	0711      	lsls	r1, r2, #28
 8002086:	bf44      	itt	mi
 8002088:	232b      	movmi	r3, #43	; 0x2b
 800208a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800208e:	f89a 3000 	ldrb.w	r3, [sl]
 8002092:	2b2a      	cmp	r3, #42	; 0x2a
 8002094:	d015      	beq.n	80020c2 <_svfiprintf_r+0xf6>
 8002096:	4654      	mov	r4, sl
 8002098:	2000      	movs	r0, #0
 800209a:	f04f 0c0a 	mov.w	ip, #10
 800209e:	9a07      	ldr	r2, [sp, #28]
 80020a0:	4621      	mov	r1, r4
 80020a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80020a6:	3b30      	subs	r3, #48	; 0x30
 80020a8:	2b09      	cmp	r3, #9
 80020aa:	d94d      	bls.n	8002148 <_svfiprintf_r+0x17c>
 80020ac:	b1b0      	cbz	r0, 80020dc <_svfiprintf_r+0x110>
 80020ae:	9207      	str	r2, [sp, #28]
 80020b0:	e014      	b.n	80020dc <_svfiprintf_r+0x110>
 80020b2:	eba0 0308 	sub.w	r3, r0, r8
 80020b6:	fa09 f303 	lsl.w	r3, r9, r3
 80020ba:	4313      	orrs	r3, r2
 80020bc:	46a2      	mov	sl, r4
 80020be:	9304      	str	r3, [sp, #16]
 80020c0:	e7d2      	b.n	8002068 <_svfiprintf_r+0x9c>
 80020c2:	9b03      	ldr	r3, [sp, #12]
 80020c4:	1d19      	adds	r1, r3, #4
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	9103      	str	r1, [sp, #12]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	bfbb      	ittet	lt
 80020ce:	425b      	neglt	r3, r3
 80020d0:	f042 0202 	orrlt.w	r2, r2, #2
 80020d4:	9307      	strge	r3, [sp, #28]
 80020d6:	9307      	strlt	r3, [sp, #28]
 80020d8:	bfb8      	it	lt
 80020da:	9204      	strlt	r2, [sp, #16]
 80020dc:	7823      	ldrb	r3, [r4, #0]
 80020de:	2b2e      	cmp	r3, #46	; 0x2e
 80020e0:	d10c      	bne.n	80020fc <_svfiprintf_r+0x130>
 80020e2:	7863      	ldrb	r3, [r4, #1]
 80020e4:	2b2a      	cmp	r3, #42	; 0x2a
 80020e6:	d134      	bne.n	8002152 <_svfiprintf_r+0x186>
 80020e8:	9b03      	ldr	r3, [sp, #12]
 80020ea:	3402      	adds	r4, #2
 80020ec:	1d1a      	adds	r2, r3, #4
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	9203      	str	r2, [sp, #12]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	bfb8      	it	lt
 80020f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80020fa:	9305      	str	r3, [sp, #20]
 80020fc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80021b8 <_svfiprintf_r+0x1ec>
 8002100:	2203      	movs	r2, #3
 8002102:	4650      	mov	r0, sl
 8002104:	7821      	ldrb	r1, [r4, #0]
 8002106:	f000 fa1d 	bl	8002544 <memchr>
 800210a:	b138      	cbz	r0, 800211c <_svfiprintf_r+0x150>
 800210c:	2240      	movs	r2, #64	; 0x40
 800210e:	9b04      	ldr	r3, [sp, #16]
 8002110:	eba0 000a 	sub.w	r0, r0, sl
 8002114:	4082      	lsls	r2, r0
 8002116:	4313      	orrs	r3, r2
 8002118:	3401      	adds	r4, #1
 800211a:	9304      	str	r3, [sp, #16]
 800211c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002120:	2206      	movs	r2, #6
 8002122:	4826      	ldr	r0, [pc, #152]	; (80021bc <_svfiprintf_r+0x1f0>)
 8002124:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002128:	f000 fa0c 	bl	8002544 <memchr>
 800212c:	2800      	cmp	r0, #0
 800212e:	d038      	beq.n	80021a2 <_svfiprintf_r+0x1d6>
 8002130:	4b23      	ldr	r3, [pc, #140]	; (80021c0 <_svfiprintf_r+0x1f4>)
 8002132:	bb1b      	cbnz	r3, 800217c <_svfiprintf_r+0x1b0>
 8002134:	9b03      	ldr	r3, [sp, #12]
 8002136:	3307      	adds	r3, #7
 8002138:	f023 0307 	bic.w	r3, r3, #7
 800213c:	3308      	adds	r3, #8
 800213e:	9303      	str	r3, [sp, #12]
 8002140:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002142:	4433      	add	r3, r6
 8002144:	9309      	str	r3, [sp, #36]	; 0x24
 8002146:	e768      	b.n	800201a <_svfiprintf_r+0x4e>
 8002148:	460c      	mov	r4, r1
 800214a:	2001      	movs	r0, #1
 800214c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002150:	e7a6      	b.n	80020a0 <_svfiprintf_r+0xd4>
 8002152:	2300      	movs	r3, #0
 8002154:	f04f 0c0a 	mov.w	ip, #10
 8002158:	4619      	mov	r1, r3
 800215a:	3401      	adds	r4, #1
 800215c:	9305      	str	r3, [sp, #20]
 800215e:	4620      	mov	r0, r4
 8002160:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002164:	3a30      	subs	r2, #48	; 0x30
 8002166:	2a09      	cmp	r2, #9
 8002168:	d903      	bls.n	8002172 <_svfiprintf_r+0x1a6>
 800216a:	2b00      	cmp	r3, #0
 800216c:	d0c6      	beq.n	80020fc <_svfiprintf_r+0x130>
 800216e:	9105      	str	r1, [sp, #20]
 8002170:	e7c4      	b.n	80020fc <_svfiprintf_r+0x130>
 8002172:	4604      	mov	r4, r0
 8002174:	2301      	movs	r3, #1
 8002176:	fb0c 2101 	mla	r1, ip, r1, r2
 800217a:	e7f0      	b.n	800215e <_svfiprintf_r+0x192>
 800217c:	ab03      	add	r3, sp, #12
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	462a      	mov	r2, r5
 8002182:	4638      	mov	r0, r7
 8002184:	4b0f      	ldr	r3, [pc, #60]	; (80021c4 <_svfiprintf_r+0x1f8>)
 8002186:	a904      	add	r1, sp, #16
 8002188:	f3af 8000 	nop.w
 800218c:	1c42      	adds	r2, r0, #1
 800218e:	4606      	mov	r6, r0
 8002190:	d1d6      	bne.n	8002140 <_svfiprintf_r+0x174>
 8002192:	89ab      	ldrh	r3, [r5, #12]
 8002194:	065b      	lsls	r3, r3, #25
 8002196:	f53f af2d 	bmi.w	8001ff4 <_svfiprintf_r+0x28>
 800219a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800219c:	b01d      	add	sp, #116	; 0x74
 800219e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021a2:	ab03      	add	r3, sp, #12
 80021a4:	9300      	str	r3, [sp, #0]
 80021a6:	462a      	mov	r2, r5
 80021a8:	4638      	mov	r0, r7
 80021aa:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <_svfiprintf_r+0x1f8>)
 80021ac:	a904      	add	r1, sp, #16
 80021ae:	f000 f87d 	bl	80022ac <_printf_i>
 80021b2:	e7eb      	b.n	800218c <_svfiprintf_r+0x1c0>
 80021b4:	080029e6 	.word	0x080029e6
 80021b8:	080029ec 	.word	0x080029ec
 80021bc:	080029f0 	.word	0x080029f0
 80021c0:	00000000 	.word	0x00000000
 80021c4:	08001f19 	.word	0x08001f19

080021c8 <_printf_common>:
 80021c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80021cc:	4616      	mov	r6, r2
 80021ce:	4699      	mov	r9, r3
 80021d0:	688a      	ldr	r2, [r1, #8]
 80021d2:	690b      	ldr	r3, [r1, #16]
 80021d4:	4607      	mov	r7, r0
 80021d6:	4293      	cmp	r3, r2
 80021d8:	bfb8      	it	lt
 80021da:	4613      	movlt	r3, r2
 80021dc:	6033      	str	r3, [r6, #0]
 80021de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80021e2:	460c      	mov	r4, r1
 80021e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80021e8:	b10a      	cbz	r2, 80021ee <_printf_common+0x26>
 80021ea:	3301      	adds	r3, #1
 80021ec:	6033      	str	r3, [r6, #0]
 80021ee:	6823      	ldr	r3, [r4, #0]
 80021f0:	0699      	lsls	r1, r3, #26
 80021f2:	bf42      	ittt	mi
 80021f4:	6833      	ldrmi	r3, [r6, #0]
 80021f6:	3302      	addmi	r3, #2
 80021f8:	6033      	strmi	r3, [r6, #0]
 80021fa:	6825      	ldr	r5, [r4, #0]
 80021fc:	f015 0506 	ands.w	r5, r5, #6
 8002200:	d106      	bne.n	8002210 <_printf_common+0x48>
 8002202:	f104 0a19 	add.w	sl, r4, #25
 8002206:	68e3      	ldr	r3, [r4, #12]
 8002208:	6832      	ldr	r2, [r6, #0]
 800220a:	1a9b      	subs	r3, r3, r2
 800220c:	42ab      	cmp	r3, r5
 800220e:	dc2b      	bgt.n	8002268 <_printf_common+0xa0>
 8002210:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002214:	1e13      	subs	r3, r2, #0
 8002216:	6822      	ldr	r2, [r4, #0]
 8002218:	bf18      	it	ne
 800221a:	2301      	movne	r3, #1
 800221c:	0692      	lsls	r2, r2, #26
 800221e:	d430      	bmi.n	8002282 <_printf_common+0xba>
 8002220:	4649      	mov	r1, r9
 8002222:	4638      	mov	r0, r7
 8002224:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002228:	47c0      	blx	r8
 800222a:	3001      	adds	r0, #1
 800222c:	d023      	beq.n	8002276 <_printf_common+0xae>
 800222e:	6823      	ldr	r3, [r4, #0]
 8002230:	6922      	ldr	r2, [r4, #16]
 8002232:	f003 0306 	and.w	r3, r3, #6
 8002236:	2b04      	cmp	r3, #4
 8002238:	bf14      	ite	ne
 800223a:	2500      	movne	r5, #0
 800223c:	6833      	ldreq	r3, [r6, #0]
 800223e:	f04f 0600 	mov.w	r6, #0
 8002242:	bf08      	it	eq
 8002244:	68e5      	ldreq	r5, [r4, #12]
 8002246:	f104 041a 	add.w	r4, r4, #26
 800224a:	bf08      	it	eq
 800224c:	1aed      	subeq	r5, r5, r3
 800224e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002252:	bf08      	it	eq
 8002254:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002258:	4293      	cmp	r3, r2
 800225a:	bfc4      	itt	gt
 800225c:	1a9b      	subgt	r3, r3, r2
 800225e:	18ed      	addgt	r5, r5, r3
 8002260:	42b5      	cmp	r5, r6
 8002262:	d11a      	bne.n	800229a <_printf_common+0xd2>
 8002264:	2000      	movs	r0, #0
 8002266:	e008      	b.n	800227a <_printf_common+0xb2>
 8002268:	2301      	movs	r3, #1
 800226a:	4652      	mov	r2, sl
 800226c:	4649      	mov	r1, r9
 800226e:	4638      	mov	r0, r7
 8002270:	47c0      	blx	r8
 8002272:	3001      	adds	r0, #1
 8002274:	d103      	bne.n	800227e <_printf_common+0xb6>
 8002276:	f04f 30ff 	mov.w	r0, #4294967295
 800227a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800227e:	3501      	adds	r5, #1
 8002280:	e7c1      	b.n	8002206 <_printf_common+0x3e>
 8002282:	2030      	movs	r0, #48	; 0x30
 8002284:	18e1      	adds	r1, r4, r3
 8002286:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800228a:	1c5a      	adds	r2, r3, #1
 800228c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002290:	4422      	add	r2, r4
 8002292:	3302      	adds	r3, #2
 8002294:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002298:	e7c2      	b.n	8002220 <_printf_common+0x58>
 800229a:	2301      	movs	r3, #1
 800229c:	4622      	mov	r2, r4
 800229e:	4649      	mov	r1, r9
 80022a0:	4638      	mov	r0, r7
 80022a2:	47c0      	blx	r8
 80022a4:	3001      	adds	r0, #1
 80022a6:	d0e6      	beq.n	8002276 <_printf_common+0xae>
 80022a8:	3601      	adds	r6, #1
 80022aa:	e7d9      	b.n	8002260 <_printf_common+0x98>

080022ac <_printf_i>:
 80022ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80022b0:	7e0f      	ldrb	r7, [r1, #24]
 80022b2:	4691      	mov	r9, r2
 80022b4:	2f78      	cmp	r7, #120	; 0x78
 80022b6:	4680      	mov	r8, r0
 80022b8:	460c      	mov	r4, r1
 80022ba:	469a      	mov	sl, r3
 80022bc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80022be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80022c2:	d807      	bhi.n	80022d4 <_printf_i+0x28>
 80022c4:	2f62      	cmp	r7, #98	; 0x62
 80022c6:	d80a      	bhi.n	80022de <_printf_i+0x32>
 80022c8:	2f00      	cmp	r7, #0
 80022ca:	f000 80d5 	beq.w	8002478 <_printf_i+0x1cc>
 80022ce:	2f58      	cmp	r7, #88	; 0x58
 80022d0:	f000 80c1 	beq.w	8002456 <_printf_i+0x1aa>
 80022d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80022d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80022dc:	e03a      	b.n	8002354 <_printf_i+0xa8>
 80022de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80022e2:	2b15      	cmp	r3, #21
 80022e4:	d8f6      	bhi.n	80022d4 <_printf_i+0x28>
 80022e6:	a101      	add	r1, pc, #4	; (adr r1, 80022ec <_printf_i+0x40>)
 80022e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80022ec:	08002345 	.word	0x08002345
 80022f0:	08002359 	.word	0x08002359
 80022f4:	080022d5 	.word	0x080022d5
 80022f8:	080022d5 	.word	0x080022d5
 80022fc:	080022d5 	.word	0x080022d5
 8002300:	080022d5 	.word	0x080022d5
 8002304:	08002359 	.word	0x08002359
 8002308:	080022d5 	.word	0x080022d5
 800230c:	080022d5 	.word	0x080022d5
 8002310:	080022d5 	.word	0x080022d5
 8002314:	080022d5 	.word	0x080022d5
 8002318:	0800245f 	.word	0x0800245f
 800231c:	08002385 	.word	0x08002385
 8002320:	08002419 	.word	0x08002419
 8002324:	080022d5 	.word	0x080022d5
 8002328:	080022d5 	.word	0x080022d5
 800232c:	08002481 	.word	0x08002481
 8002330:	080022d5 	.word	0x080022d5
 8002334:	08002385 	.word	0x08002385
 8002338:	080022d5 	.word	0x080022d5
 800233c:	080022d5 	.word	0x080022d5
 8002340:	08002421 	.word	0x08002421
 8002344:	682b      	ldr	r3, [r5, #0]
 8002346:	1d1a      	adds	r2, r3, #4
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	602a      	str	r2, [r5, #0]
 800234c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002350:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002354:	2301      	movs	r3, #1
 8002356:	e0a0      	b.n	800249a <_printf_i+0x1ee>
 8002358:	6820      	ldr	r0, [r4, #0]
 800235a:	682b      	ldr	r3, [r5, #0]
 800235c:	0607      	lsls	r7, r0, #24
 800235e:	f103 0104 	add.w	r1, r3, #4
 8002362:	6029      	str	r1, [r5, #0]
 8002364:	d501      	bpl.n	800236a <_printf_i+0xbe>
 8002366:	681e      	ldr	r6, [r3, #0]
 8002368:	e003      	b.n	8002372 <_printf_i+0xc6>
 800236a:	0646      	lsls	r6, r0, #25
 800236c:	d5fb      	bpl.n	8002366 <_printf_i+0xba>
 800236e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002372:	2e00      	cmp	r6, #0
 8002374:	da03      	bge.n	800237e <_printf_i+0xd2>
 8002376:	232d      	movs	r3, #45	; 0x2d
 8002378:	4276      	negs	r6, r6
 800237a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800237e:	230a      	movs	r3, #10
 8002380:	4859      	ldr	r0, [pc, #356]	; (80024e8 <_printf_i+0x23c>)
 8002382:	e012      	b.n	80023aa <_printf_i+0xfe>
 8002384:	682b      	ldr	r3, [r5, #0]
 8002386:	6820      	ldr	r0, [r4, #0]
 8002388:	1d19      	adds	r1, r3, #4
 800238a:	6029      	str	r1, [r5, #0]
 800238c:	0605      	lsls	r5, r0, #24
 800238e:	d501      	bpl.n	8002394 <_printf_i+0xe8>
 8002390:	681e      	ldr	r6, [r3, #0]
 8002392:	e002      	b.n	800239a <_printf_i+0xee>
 8002394:	0641      	lsls	r1, r0, #25
 8002396:	d5fb      	bpl.n	8002390 <_printf_i+0xe4>
 8002398:	881e      	ldrh	r6, [r3, #0]
 800239a:	2f6f      	cmp	r7, #111	; 0x6f
 800239c:	bf0c      	ite	eq
 800239e:	2308      	moveq	r3, #8
 80023a0:	230a      	movne	r3, #10
 80023a2:	4851      	ldr	r0, [pc, #324]	; (80024e8 <_printf_i+0x23c>)
 80023a4:	2100      	movs	r1, #0
 80023a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80023aa:	6865      	ldr	r5, [r4, #4]
 80023ac:	2d00      	cmp	r5, #0
 80023ae:	bfa8      	it	ge
 80023b0:	6821      	ldrge	r1, [r4, #0]
 80023b2:	60a5      	str	r5, [r4, #8]
 80023b4:	bfa4      	itt	ge
 80023b6:	f021 0104 	bicge.w	r1, r1, #4
 80023ba:	6021      	strge	r1, [r4, #0]
 80023bc:	b90e      	cbnz	r6, 80023c2 <_printf_i+0x116>
 80023be:	2d00      	cmp	r5, #0
 80023c0:	d04b      	beq.n	800245a <_printf_i+0x1ae>
 80023c2:	4615      	mov	r5, r2
 80023c4:	fbb6 f1f3 	udiv	r1, r6, r3
 80023c8:	fb03 6711 	mls	r7, r3, r1, r6
 80023cc:	5dc7      	ldrb	r7, [r0, r7]
 80023ce:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80023d2:	4637      	mov	r7, r6
 80023d4:	42bb      	cmp	r3, r7
 80023d6:	460e      	mov	r6, r1
 80023d8:	d9f4      	bls.n	80023c4 <_printf_i+0x118>
 80023da:	2b08      	cmp	r3, #8
 80023dc:	d10b      	bne.n	80023f6 <_printf_i+0x14a>
 80023de:	6823      	ldr	r3, [r4, #0]
 80023e0:	07de      	lsls	r6, r3, #31
 80023e2:	d508      	bpl.n	80023f6 <_printf_i+0x14a>
 80023e4:	6923      	ldr	r3, [r4, #16]
 80023e6:	6861      	ldr	r1, [r4, #4]
 80023e8:	4299      	cmp	r1, r3
 80023ea:	bfde      	ittt	le
 80023ec:	2330      	movle	r3, #48	; 0x30
 80023ee:	f805 3c01 	strble.w	r3, [r5, #-1]
 80023f2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80023f6:	1b52      	subs	r2, r2, r5
 80023f8:	6122      	str	r2, [r4, #16]
 80023fa:	464b      	mov	r3, r9
 80023fc:	4621      	mov	r1, r4
 80023fe:	4640      	mov	r0, r8
 8002400:	f8cd a000 	str.w	sl, [sp]
 8002404:	aa03      	add	r2, sp, #12
 8002406:	f7ff fedf 	bl	80021c8 <_printf_common>
 800240a:	3001      	adds	r0, #1
 800240c:	d14a      	bne.n	80024a4 <_printf_i+0x1f8>
 800240e:	f04f 30ff 	mov.w	r0, #4294967295
 8002412:	b004      	add	sp, #16
 8002414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002418:	6823      	ldr	r3, [r4, #0]
 800241a:	f043 0320 	orr.w	r3, r3, #32
 800241e:	6023      	str	r3, [r4, #0]
 8002420:	2778      	movs	r7, #120	; 0x78
 8002422:	4832      	ldr	r0, [pc, #200]	; (80024ec <_printf_i+0x240>)
 8002424:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002428:	6823      	ldr	r3, [r4, #0]
 800242a:	6829      	ldr	r1, [r5, #0]
 800242c:	061f      	lsls	r7, r3, #24
 800242e:	f851 6b04 	ldr.w	r6, [r1], #4
 8002432:	d402      	bmi.n	800243a <_printf_i+0x18e>
 8002434:	065f      	lsls	r7, r3, #25
 8002436:	bf48      	it	mi
 8002438:	b2b6      	uxthmi	r6, r6
 800243a:	07df      	lsls	r7, r3, #31
 800243c:	bf48      	it	mi
 800243e:	f043 0320 	orrmi.w	r3, r3, #32
 8002442:	6029      	str	r1, [r5, #0]
 8002444:	bf48      	it	mi
 8002446:	6023      	strmi	r3, [r4, #0]
 8002448:	b91e      	cbnz	r6, 8002452 <_printf_i+0x1a6>
 800244a:	6823      	ldr	r3, [r4, #0]
 800244c:	f023 0320 	bic.w	r3, r3, #32
 8002450:	6023      	str	r3, [r4, #0]
 8002452:	2310      	movs	r3, #16
 8002454:	e7a6      	b.n	80023a4 <_printf_i+0xf8>
 8002456:	4824      	ldr	r0, [pc, #144]	; (80024e8 <_printf_i+0x23c>)
 8002458:	e7e4      	b.n	8002424 <_printf_i+0x178>
 800245a:	4615      	mov	r5, r2
 800245c:	e7bd      	b.n	80023da <_printf_i+0x12e>
 800245e:	682b      	ldr	r3, [r5, #0]
 8002460:	6826      	ldr	r6, [r4, #0]
 8002462:	1d18      	adds	r0, r3, #4
 8002464:	6961      	ldr	r1, [r4, #20]
 8002466:	6028      	str	r0, [r5, #0]
 8002468:	0635      	lsls	r5, r6, #24
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	d501      	bpl.n	8002472 <_printf_i+0x1c6>
 800246e:	6019      	str	r1, [r3, #0]
 8002470:	e002      	b.n	8002478 <_printf_i+0x1cc>
 8002472:	0670      	lsls	r0, r6, #25
 8002474:	d5fb      	bpl.n	800246e <_printf_i+0x1c2>
 8002476:	8019      	strh	r1, [r3, #0]
 8002478:	2300      	movs	r3, #0
 800247a:	4615      	mov	r5, r2
 800247c:	6123      	str	r3, [r4, #16]
 800247e:	e7bc      	b.n	80023fa <_printf_i+0x14e>
 8002480:	682b      	ldr	r3, [r5, #0]
 8002482:	2100      	movs	r1, #0
 8002484:	1d1a      	adds	r2, r3, #4
 8002486:	602a      	str	r2, [r5, #0]
 8002488:	681d      	ldr	r5, [r3, #0]
 800248a:	6862      	ldr	r2, [r4, #4]
 800248c:	4628      	mov	r0, r5
 800248e:	f000 f859 	bl	8002544 <memchr>
 8002492:	b108      	cbz	r0, 8002498 <_printf_i+0x1ec>
 8002494:	1b40      	subs	r0, r0, r5
 8002496:	6060      	str	r0, [r4, #4]
 8002498:	6863      	ldr	r3, [r4, #4]
 800249a:	6123      	str	r3, [r4, #16]
 800249c:	2300      	movs	r3, #0
 800249e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80024a2:	e7aa      	b.n	80023fa <_printf_i+0x14e>
 80024a4:	462a      	mov	r2, r5
 80024a6:	4649      	mov	r1, r9
 80024a8:	4640      	mov	r0, r8
 80024aa:	6923      	ldr	r3, [r4, #16]
 80024ac:	47d0      	blx	sl
 80024ae:	3001      	adds	r0, #1
 80024b0:	d0ad      	beq.n	800240e <_printf_i+0x162>
 80024b2:	6823      	ldr	r3, [r4, #0]
 80024b4:	079b      	lsls	r3, r3, #30
 80024b6:	d413      	bmi.n	80024e0 <_printf_i+0x234>
 80024b8:	68e0      	ldr	r0, [r4, #12]
 80024ba:	9b03      	ldr	r3, [sp, #12]
 80024bc:	4298      	cmp	r0, r3
 80024be:	bfb8      	it	lt
 80024c0:	4618      	movlt	r0, r3
 80024c2:	e7a6      	b.n	8002412 <_printf_i+0x166>
 80024c4:	2301      	movs	r3, #1
 80024c6:	4632      	mov	r2, r6
 80024c8:	4649      	mov	r1, r9
 80024ca:	4640      	mov	r0, r8
 80024cc:	47d0      	blx	sl
 80024ce:	3001      	adds	r0, #1
 80024d0:	d09d      	beq.n	800240e <_printf_i+0x162>
 80024d2:	3501      	adds	r5, #1
 80024d4:	68e3      	ldr	r3, [r4, #12]
 80024d6:	9903      	ldr	r1, [sp, #12]
 80024d8:	1a5b      	subs	r3, r3, r1
 80024da:	42ab      	cmp	r3, r5
 80024dc:	dcf2      	bgt.n	80024c4 <_printf_i+0x218>
 80024de:	e7eb      	b.n	80024b8 <_printf_i+0x20c>
 80024e0:	2500      	movs	r5, #0
 80024e2:	f104 0619 	add.w	r6, r4, #25
 80024e6:	e7f5      	b.n	80024d4 <_printf_i+0x228>
 80024e8:	080029f7 	.word	0x080029f7
 80024ec:	08002a08 	.word	0x08002a08

080024f0 <memmove>:
 80024f0:	4288      	cmp	r0, r1
 80024f2:	b510      	push	{r4, lr}
 80024f4:	eb01 0402 	add.w	r4, r1, r2
 80024f8:	d902      	bls.n	8002500 <memmove+0x10>
 80024fa:	4284      	cmp	r4, r0
 80024fc:	4623      	mov	r3, r4
 80024fe:	d807      	bhi.n	8002510 <memmove+0x20>
 8002500:	1e43      	subs	r3, r0, #1
 8002502:	42a1      	cmp	r1, r4
 8002504:	d008      	beq.n	8002518 <memmove+0x28>
 8002506:	f811 2b01 	ldrb.w	r2, [r1], #1
 800250a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800250e:	e7f8      	b.n	8002502 <memmove+0x12>
 8002510:	4601      	mov	r1, r0
 8002512:	4402      	add	r2, r0
 8002514:	428a      	cmp	r2, r1
 8002516:	d100      	bne.n	800251a <memmove+0x2a>
 8002518:	bd10      	pop	{r4, pc}
 800251a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800251e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002522:	e7f7      	b.n	8002514 <memmove+0x24>

08002524 <_sbrk_r>:
 8002524:	b538      	push	{r3, r4, r5, lr}
 8002526:	2300      	movs	r3, #0
 8002528:	4d05      	ldr	r5, [pc, #20]	; (8002540 <_sbrk_r+0x1c>)
 800252a:	4604      	mov	r4, r0
 800252c:	4608      	mov	r0, r1
 800252e:	602b      	str	r3, [r5, #0]
 8002530:	f7fd ff9e 	bl	8000470 <_sbrk>
 8002534:	1c43      	adds	r3, r0, #1
 8002536:	d102      	bne.n	800253e <_sbrk_r+0x1a>
 8002538:	682b      	ldr	r3, [r5, #0]
 800253a:	b103      	cbz	r3, 800253e <_sbrk_r+0x1a>
 800253c:	6023      	str	r3, [r4, #0]
 800253e:	bd38      	pop	{r3, r4, r5, pc}
 8002540:	20000224 	.word	0x20000224

08002544 <memchr>:
 8002544:	4603      	mov	r3, r0
 8002546:	b510      	push	{r4, lr}
 8002548:	b2c9      	uxtb	r1, r1
 800254a:	4402      	add	r2, r0
 800254c:	4293      	cmp	r3, r2
 800254e:	4618      	mov	r0, r3
 8002550:	d101      	bne.n	8002556 <memchr+0x12>
 8002552:	2000      	movs	r0, #0
 8002554:	e003      	b.n	800255e <memchr+0x1a>
 8002556:	7804      	ldrb	r4, [r0, #0]
 8002558:	3301      	adds	r3, #1
 800255a:	428c      	cmp	r4, r1
 800255c:	d1f6      	bne.n	800254c <memchr+0x8>
 800255e:	bd10      	pop	{r4, pc}

08002560 <memcpy>:
 8002560:	440a      	add	r2, r1
 8002562:	4291      	cmp	r1, r2
 8002564:	f100 33ff 	add.w	r3, r0, #4294967295
 8002568:	d100      	bne.n	800256c <memcpy+0xc>
 800256a:	4770      	bx	lr
 800256c:	b510      	push	{r4, lr}
 800256e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002572:	4291      	cmp	r1, r2
 8002574:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002578:	d1f9      	bne.n	800256e <memcpy+0xe>
 800257a:	bd10      	pop	{r4, pc}

0800257c <_realloc_r>:
 800257c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002580:	4680      	mov	r8, r0
 8002582:	4614      	mov	r4, r2
 8002584:	460e      	mov	r6, r1
 8002586:	b921      	cbnz	r1, 8002592 <_realloc_r+0x16>
 8002588:	4611      	mov	r1, r2
 800258a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800258e:	f7ff bc37 	b.w	8001e00 <_malloc_r>
 8002592:	b92a      	cbnz	r2, 80025a0 <_realloc_r+0x24>
 8002594:	f7ff fbcc 	bl	8001d30 <_free_r>
 8002598:	4625      	mov	r5, r4
 800259a:	4628      	mov	r0, r5
 800259c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80025a0:	f000 f81b 	bl	80025da <_malloc_usable_size_r>
 80025a4:	4284      	cmp	r4, r0
 80025a6:	4607      	mov	r7, r0
 80025a8:	d802      	bhi.n	80025b0 <_realloc_r+0x34>
 80025aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80025ae:	d812      	bhi.n	80025d6 <_realloc_r+0x5a>
 80025b0:	4621      	mov	r1, r4
 80025b2:	4640      	mov	r0, r8
 80025b4:	f7ff fc24 	bl	8001e00 <_malloc_r>
 80025b8:	4605      	mov	r5, r0
 80025ba:	2800      	cmp	r0, #0
 80025bc:	d0ed      	beq.n	800259a <_realloc_r+0x1e>
 80025be:	42bc      	cmp	r4, r7
 80025c0:	4622      	mov	r2, r4
 80025c2:	4631      	mov	r1, r6
 80025c4:	bf28      	it	cs
 80025c6:	463a      	movcs	r2, r7
 80025c8:	f7ff ffca 	bl	8002560 <memcpy>
 80025cc:	4631      	mov	r1, r6
 80025ce:	4640      	mov	r0, r8
 80025d0:	f7ff fbae 	bl	8001d30 <_free_r>
 80025d4:	e7e1      	b.n	800259a <_realloc_r+0x1e>
 80025d6:	4635      	mov	r5, r6
 80025d8:	e7df      	b.n	800259a <_realloc_r+0x1e>

080025da <_malloc_usable_size_r>:
 80025da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80025de:	1f18      	subs	r0, r3, #4
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	bfbc      	itt	lt
 80025e4:	580b      	ldrlt	r3, [r1, r0]
 80025e6:	18c0      	addlt	r0, r0, r3
 80025e8:	4770      	bx	lr
	...

080025ec <_init>:
 80025ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ee:	bf00      	nop
 80025f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025f2:	bc08      	pop	{r3}
 80025f4:	469e      	mov	lr, r3
 80025f6:	4770      	bx	lr

080025f8 <_fini>:
 80025f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025fa:	bf00      	nop
 80025fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025fe:	bc08      	pop	{r3}
 8002600:	469e      	mov	lr, r3
 8002602:	4770      	bx	lr
