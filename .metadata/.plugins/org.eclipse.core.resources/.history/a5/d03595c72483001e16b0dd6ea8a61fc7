/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdbool.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

// I2C address
#define LCD_ADDRESS 0b00100111 // 0x27 >> PCF8574 0 0 1 0 0 A2 A1 A0  & A2=A1=A0=1
#define SLAVE_ADDRESS_LCD 0x4E

// Control bit positions in sent byte
#define RS_POS	0 // P0
#define RW_POS	1 // P1
#define E_POS	2 // P2
#define BT_POS	3 // P3
#define DB4_POS	4 // P4
#define DB5_POS 5 // P5
#define DB6_POS 6 // P6
#define DB7_POS 7 // P7

#define DB3_POS 3
#define DB2_POS 2
#define DB1_POS 1
#define DB0_POS 0

// Control bit values
#define RS_DATA 1
#define RS_INSTRUCTION 0
#define RW_READ 1
#define RW_WRITE 0
#define E_HIGH 1
#define E_LOW 0
#define BT_ON 1
#define BT_OFF 0

// Configuration bit position ---
// Entry Mode
#define INC_DEC_POS 1
#define SHIFT_DISPLAY_ON_OFF_POS	0
// Display control
#define DISPLAY_ON_OFF_POS 2
#define CURSOR_ON_OFF_POS 1
#define BLINK_ON_OFF_POS 0
// Cursor & display shift
#define CURSOR_DISPLAY_SHIFT_POS 3
#define SHIFT_DIRECTION_POS 2
// Function set
#define DATA_LENGTH_POS	4
#define DISPLAY_LINES_POS 3
#define CHAR_FONT_POS 2
// Read & busy flag address
#define BUSY_FLAG_POS 7

// Configuration bit values ---
// Entry mode
#define INCREMENT 1 // I/D
#define DECREMENT 0 // I/D
#define SHIFT_DISPLAY_ON	1 // S
#define SHIFT_DISPLAY_OFF	0 // S
// Display control
#define DISPLAY_ON	1 // D
#define DISPLAY_OFF	0 // D
#define CURSOR_ON	1 // C
#define CURSOR_OFF	0 // C
#define CURSOR_BLINK_ON		1 // B
#define CURSOR_BLINK_OFF	0 // B
// Cursor & display shift
#define DISPLAY_SHIFT	1 // S/C
#define CURSOR_SHIFT	0 // S/C
#define SHIFT_RIGHT		1 // R/L
#define SHIFT_LEFT		0 // R/L
// Function set
#define DATA_LENGTH_8BIT	1 // DL
#define DATA_LENGTH_4BIT	0 // DL
#define DISPLAY_LINES_1		0 // N
#define DISPLAY_LINES_2		1 // N
#define CHAR_FONT_5X10	1 // F
#define CHAR_FONT_5X8	0 // F
// Read & busy flag address
#define BUSY		1 // BF
#define NOT_BUSY	0 // BF

// Byte operations
#define HIGH_NIBBLE 0xF0
#define LOW_NIBBLE	0x0F

// I2C RW bit
#define I2C_WRITE	0
#define I2C_READ	1


// COPY 2
#define I2C_ADDR 0x27 // I2C address of the PCF8574
#define RS_BIT 0 // Register select bit
#define EN_BIT 2 // Enable bit
#define BL_BIT 3 // Backlight bit
#define D4_BIT 4 // Data 4 bit
#define D5_BIT 5 // Data 5 bit
#define D6_BIT 6 // Data 6 bit
#define D7_BIT 7 // Data 7 bit

#define LCD_ROWS 2 // Number of rows on the LCD
#define LCD_COLS 16 // Number of columns on the LCD




/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
// Display position
const uint8_t ddram_address_16x2[2][16] = {
		{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F},
		{0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4A,0x4B,0x4C,0x4D,0x4E,0x4F}
};

uint8_t backlight_state = 1;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */

// LCD Instruction Codes
void lcd_send_byte(uint8_t byte, bool rs, bool rw);
void send_bytes_i2c(uint8_t slaveAddress, uint8_t byteSequence[], uint8_t sequenceSize, bool i2c_rw);
void lcd_init();

/*
uint8_t display_clear(void); // (1<<0) // 0x01
uint8_t return_home(void); // (1<<1) // 0x02
uint8_t entry_mode(bool incDec, bool shiftSwitch);
uint8_t display_control(bool displaySwitch, bool cursorSwitch, bool blinkSwitch);
uint8_t cursor_display_shift(bool displayCursorShift, bool shiftDirection);
uint8_t function_set(bool dataLength, bool displayLines, bool characterSize);
bool read_busy_flag(uint8_t addressCounter);

*/

// copy 1

void lcd_init_2();
void lcd_send_data (char data);
void lcd_send_cmd (char cmd);


// copy 2
/*
void lcd_init_2();
void lcd_send_data(uint8_t data);
void lcd_send_cmd(uint8_t cmd);
void lcd_write_nibble(uint8_t nibble, uint8_t rs);
void lcd_set_cursor(uint8_t row, uint8_t column);
void lcd_clear(void);
void lcd_backlight(uint8_t state);
void lcd_write_string(char *str);
*/
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_I2C1_Init();
  /* USER CODE BEGIN 2 */


  //lcd_init_2();
  lcd_init();


  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //uint8_t count = 65;
  while (1)
  {
	  lcd_send_byte('B', RS_DATA, RW_WRITE);
	  //lcd_send_data ('M');
	  HAL_Delay(2000);

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/**************************** LCD INSTRUCTIONS ***************************/
/*
uint8_t display_clear(void){
	return 0x01;
}

uint8_t return_home(void){
	return 0x02;
}

uint8_t entry_mode(bool incDec, bool shiftSwitch){
	return (1<<DB2_POS)|(incDec<<INC_DEC_POS)|(shiftSwitch<<SHIFT_DISPLAY_ON_OFF_POS);
}

uint8_t display_control(bool displaySwitch, bool cursorSwitch, bool blinkSwitch){
	return (1<<DB3_POS)|(displaySwitch<<DISPLAY_ON_OFF_POS)|(cursorSwitch<<CURSOR_ON_OFF_POS)|(blinkSwitch<<BLINK_ON_OFF_POS);
}

uint8_t cursor_display_shift(bool cursorDisplayShift, bool shiftDirection){
	return (1<<DB4_POS)|(cursorDisplayShift<<CURSOR_DISPLAY_SHIFT_POS)|(shiftDirection<<SHIFT_DIRECTION_POS);
}

uint8_t function_set(bool dataLength, bool displayLines, bool characterSize){
	return (1<<DB5_POS)|(dataLength<<DATA_LENGTH_POS)|(displayLines<<DISPLAY_LINES_POS);
}

bool read_busy_flag(uint8_t addressCounter){
	return (addressCounter & (1<<BUSY_FLAG_POS));
}
*/

/**************************** WRITE TO LCD FUNCTIONS ***************************/

/* Serial->Parallel: output Byte Px: D7 D6 D5 D4 BT E RW RS */


void lcd_send_byte(uint8_t byte, bool rs, bool rw){
	// byte contains 8 bits of information  / byteType can be INSTRUCTION or DATA
	uint8_t upperByte = (byte & HIGH_NIBBLE); // mask with 1111 0000
	uint8_t lowerByte = ((byte << 4)& HIGH_NIBBLE); // shift 4 to the left so lower nibble becomes high

	// add rs and rw bits
	upperByte |= ((rs<<RS_POS) | (rw<<RW_POS) | (BT_ON<<BT_POS));
	lowerByte |= ((rs<<RS_POS) | (rw<<RW_POS) | (BT_ON<<BT_POS));
	// E bit 1 0 1 0 to create pulses in LCD controller
	/*
	uint8_t byteSequence[4] = {
			(upperByte | (E_HIGH<<E_POS)),
			(upperByte | (E_LOW<<E_POS)),
			(lowerByte | (E_HIGH<<E_POS)),
			(lowerByte | (E_LOW<<E_POS))
	};
	*/

	uint8_t byteSequence[4];
	byteSequence[0] = (upperByte | (E_HIGH<<E_POS));
	byteSequence[1] = (upperByte | (E_LOW<<E_POS));
	byteSequence[2] = (lowerByte | (E_HIGH<<E_POS));
	byteSequence[3] = (lowerByte | (E_LOW<<E_POS));

	/*
	uint8_t byteSequence[4];
	if(rs == RS_DATA){
		byteSequence[0] = (upperByte | 0x0D);
		byteSequence[1] = (upperByte | 0x09);
		byteSequence[2] = (lowerByte | 0x0D);
		byteSequence[3] = (lowerByte | 0x09);
	}

	if(rs == RS_INSTRUCTION){
		byteSequence[0] = (upperByte | 0x0C);
		byteSequence[1] = (upperByte | 0x08);
		byteSequence[2] = (lowerByte | 0x0C);
		byteSequence[3] = (lowerByte | 0x08);
	}
	*/

	//send_bytes_i2c(LCD_ADDRESS, byteSequence, 4, I2C_WRITE);
	//uint8_t slaveAddress = ((LCD_ADDRESS<<1) | I2C_WRITE);
	HAL_I2C_Master_Transmit(&hi2c1, 0x4E, (uint8_t *) byteSequence, 4, 100);
}

void send_bytes_i2c(uint8_t slaveAddress, uint8_t byteSequence[], uint8_t sequenceSize, bool i2c_rw){
	slaveAddress = ((slaveAddress<<1) | i2c_rw); // i2c WRITE or READ
	HAL_I2C_Master_Transmit(&hi2c1, slaveAddress, byteSequence, sequenceSize, 100);
}

void lcd_init(){
	// initialization sequence p46 HD44780 datasheet
	HAL_Delay(50); // wait >40 ms
	lcd_send_byte(0x30, RS_INSTRUCTION, RW_WRITE); // 0 0 1 1 x x x x -> 0x30
	HAL_Delay(10); // wait > 4 ms
	lcd_send_byte(0x30, RS_INSTRUCTION, RW_WRITE);
	HAL_Delay(10); // wait > 0.1 ms
	lcd_send_byte(0x30, RS_INSTRUCTION, RW_WRITE);
	HAL_Delay(10);
	lcd_send_byte(0x20, RS_INSTRUCTION, RW_WRITE); // 0 0 1 DL=0 x x x x -> 0x20 / Function set: DL=4-bit mode
	// start in 4 bit mode
	lcd_send_byte(0x28, RS_INSTRUCTION, RW_WRITE); // 0 0 1 0 N=1 F=0 x x -> 0x28 / Function set: N=2-lines, F=5x8
	HAL_Delay(2);
	lcd_send_byte(0x08, RS_INSTRUCTION, RW_WRITE); // 0 0 0 0 1 D=0 C=0 B=0 -> 0x08 / Display control: D=display off, C=cursor off, B=blink off
	HAL_Delay(2);
	lcd_send_byte(0x01, RS_INSTRUCTION, RW_WRITE); // 0 0 0 0 0 0 0 1 -> 0x01 / Display clear
	HAL_Delay(2);
	lcd_send_byte(0x06, RS_INSTRUCTION, RW_WRITE); // 0 0 0 0 0 1 ID=1 S=0 -> 0x06/ Entry mode: ID=increment, S=no display shift
	HAL_Delay(2);
	lcd_send_byte(0x0C, RS_INSTRUCTION, RW_WRITE); // 0 0 0 0 1 D=1 C=0 B=0 -> 0x0C / Display control:D-display on, C=cursor off, B=blink off

}


/*
void switch_backlight(bool backlightState){
	uint8_t lightByte = (backlightState<<BT_POS);
	send_byte(lightByte, E_LOW);
}

void send_byte_4bit_mode(uint8_t byte, bool rs, bool rw){
	uint8_t highByte = (byte & 0xF0) | (rs<<RS_POS) | (rw<<RW_POS); // create high 8-bit w/rs and rw set E=0
	//uint8_t lowByte = ((byte & LOW_NIBBLE) << 4) | (rs<<RS_POS) | (rw<<RW_POS); // create low 8-bit w/rs and rw set E=0
	uint8_t lowByte = ((byte << 4)&0xF0) | (rs<<RS_POS) | (rw<<RW_POS); // create low 8-bit w/rs and rw set E=0

	send_byte(highByte, E_HIGH);
	HAL_Delay(1);
	send_byte(highByte, E_LOW);
	HAL_Delay(1);
	send_byte(lowByte, E_HIGH);
	HAL_Delay(1);
	send_byte(lowByte, E_LOW);
	HAL_Delay(1);
}

void send_byte_8bit_mode(uint8_t byte, bool rs, bool rw){
	uint8_t highByte = byte | (rs<<RS_POS) | (rw<<RW_POS);
	send_byte(highByte, E_HIGH);
	HAL_Delay(1);
	send_byte(highByte, E_LOW);
	HAL_Delay(1);
}

void send_byte(uint8_t byte, bool enableBit){
	uint8_t i2cByte[1] = {byte | (enableBit<<E_POS)}; // by default E=0
	send_i2c_byte(i2cByte, I2C_WRITE);

}

void send_i2c_byte(uint8_t i2cByte, bool i2c_rw){
	uint8_t lcdAddress = (LCD_ADDRESS<<1) | i2c_rw;
	HAL_I2C_Master_Transmit(&hi2c1, lcdAddress, (uint8_t *)i2cByte, 1, 50);
}

void lcd_init(){
	// initialization datasheet p46. HD44780
	HAL_Delay(50); // wait > 40 ms after startup
	// LCD starts in 8 bit mode
	// send 0011xxxx => 0x30
	send_byte_8bit_mode(0x30,RS_INSTRUCTION,RW_WRITE);
	HAL_Delay(5); // wait > 4.1 ms
	send_byte_8bit_mode(0x30,RS_INSTRUCTION,RW_WRITE);
	HAL_Delay(1); // wait > 0.1 ms
	send_byte_8bit_mode(0x30,RS_INSTRUCTION,RW_WRITE);
	HAL_Delay(1);
	// ready to change to 4 bit mode => send 0010xxxx => 0x20
	send_byte_8bit_mode(0x20,RS_INSTRUCTION,RW_WRITE);
	HAL_Delay(1);
	// Now in 4 bit mode. Next packages must be sent as High and then Low

	// send function set
	uint8_t functionSetByte = function_set(DATA_LENGTH_4BIT, DISPLAY_LINES_2, CHAR_FONT_5X8); // 0010 10xx => 0x28
	send_byte_4bit_mode(functionSetByte, RS_INSTRUCTION, RW_WRITE);
	HAL_Delay(1);
	// send display off
	uint8_t displayControlByte = display_control(DISPLAY_OFF, CURSOR_OFF, CURSOR_BLINK_OFF); // 0000 1000 => 0x08
	send_byte_4bit_mode(displayControlByte, RS_INSTRUCTION, RW_WRITE);
	HAL_Delay(5);
	// send entry mode
	uint8_t entryModeByte = entry_mode(INCREMENT, SHIFT_DISPLAY_OFF);
	send_byte_4bit_mode(entryModeByte, RS_INSTRUCTION, RW_WRITE);
	HAL_Delay(5);
	// send display clear
	send_byte_4bit_mode(display_clear(), RS_INSTRUCTION, RW_WRITE);
	HAL_Delay(1);
	// send return home
	send_byte_4bit_mode(return_home(), RS_INSTRUCTION, RW_WRITE);
	HAL_Delay(5);
	// display on
	displayControlByte = display_control(DISPLAY_ON, CURSOR_ON, CURSOR_BLINK_ON); // 0000 1000 => 0x08
	send_byte_4bit_mode(displayControlByte, RS_INSTRUCTION, RW_WRITE);
	HAL_Delay(5);
	// send display clear
	//send_byte_4bit_mode(display_clear(), RS_INSTRUCTION, RW_WRITE);
	//HAL_Delay(1);

}

void write_A(){
	// A >> 0100 0001 = 0x41 = 65
	send_byte_4bit_mode(0x41, RS_DATA, RW_WRITE);
}
*/


/********************* COPY 2 ************************/

/*void lcd_write_string(char *str) {
  while (*str) {
    lcd_send_data(*str++);
  }
}

void lcd_init_2() {
  HAL_Delay(50);
  lcd_write_nibble(0x03, 0);
  HAL_Delay(5);
  lcd_write_nibble(0x03, 0);
  HAL_Delay(1);
  lcd_write_nibble(0x03, 0);
  HAL_Delay(1);
  lcd_write_nibble(0x02, 0);
  lcd_send_cmd(0x28);
  lcd_send_cmd(0x0C);
  lcd_send_cmd(0x06);
  lcd_send_cmd(0x01);
  HAL_Delay(2);
}

void lcd_send_data(uint8_t data) {
  uint8_t upper_nibble = data >> 4;
  uint8_t lower_nibble = data & 0x0F;
  lcd_write_nibble(upper_nibble, 1);
  lcd_write_nibble(lower_nibble, 1);
}

void lcd_send_cmd(uint8_t cmd) {
  uint8_t upper_nibble = cmd >> 4;
  uint8_t lower_nibble = cmd & 0x0F;
  lcd_write_nibble(upper_nibble, 0);
  lcd_write_nibble(lower_nibble, 0);
  if (cmd == 0x01 || cmd == 0x02) {
    HAL_Delay(2);
  }
}

void lcd_write_nibble(uint8_t nibble, uint8_t rs) {
  uint8_t data = nibble << D4_BIT;
  data |= rs << RS_BIT;
  data |= backlight_state << BL_BIT; // Include backlight state in data
  data |= 1 << EN_BIT;
  HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
  HAL_Delay(1);
  data &= ~(1 << EN_BIT);
  HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
}

void lcd_set_cursor(uint8_t row, uint8_t column) {
    uint8_t address;
    switch (row) {
        case 0:
            address = 0x00;
            break;
        case 1:
            address = 0x40;
            break;
        default:
            address = 0x00;
    }
    address += column;
    lcd_send_cmd(0x80 | address);
}

void lcd_clear(void) {
	lcd_send_cmd(0x01);
    HAL_Delay(2);
}

void lcd_backlight(uint8_t state) {
  if (state) {
    backlight_state = 1;
  } else {
    backlight_state = 0;
  }
}
*/

/************ COPY 1 *************************** */

void lcd_send_cmd (char cmd)
{
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
	data_l = ((cmd<<4)&0xf0);
	data_t[0] = data_u|0x0C;  //en=1, rs=0
	data_t[1] = data_u|0x08;  //en=0, rs=0
	data_t[2] = data_l|0x0C;  //en=1, rs=0
	data_t[3] = data_l|0x08;  //en=0, rs=0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
}

void lcd_send_data (char data)
{
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
	data_l = ((data<<4)&0xf0);
	data_t[0] = data_u|0x0D;  //en=1, rs=1
	data_t[1] = data_u|0x09;  //en=0, rs=1
	data_t[2] = data_l|0x0D;  //en=1, rs=1
	data_t[3] = data_l|0x09;  //en=0, rs=1
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
}

void lcd_init_2 (void)
{
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
	lcd_send_cmd (0x30);
	HAL_Delay(5);  // wait for >4.1ms
	lcd_send_cmd (0x30);
	HAL_Delay(1);  // wait for >100us
	lcd_send_cmd (0x30);
	HAL_Delay(10);
	lcd_send_cmd (0x20);  // 4bit mode
	HAL_Delay(10);

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
	HAL_Delay(1);
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
	HAL_Delay(1);
	lcd_send_cmd (0x01);  // clear display
	HAL_Delay(1);
	HAL_Delay(1);
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
	HAL_Delay(1);
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
