/*
 * API_debounce.h
 *
 *  Created on: Nov 10, 2023
 *      Author: christian Saiz
 *
 *  Esta libreria contiene las funciones de anti rebote modelado como Maquina de Estados Finitos (MEF)
 */

// Seleccionar F4= NUCLEO-F401 , NUCLEO-F103 = F1. No esta probado en la F4
#define NUCLEO_BOARD F1
//#define NUCLEO_BOARD F4

#ifndef API_INC_API_DEBOUNCE_H_
#define API_INC_API_DEBOUNCE_H_

#endif /* API_INC_API_DEBOUNCE_H_ */

/* INCLUDES */

#include "API_delay.h" // incluir libreria delay para utilizar en API_debounce

#include "stm32f1xx.h" // contiene la definicion de SET/RESET pin
#include "stm32f1xx_hal_gpio.h" // contiene la definicion de puertos y pines de la f103
//#include "stm32f4xx.h" // contiene la definicion de SET/RESET pin
//#include "stm32f4xx_hal_gpio.h" // contiene la definicion de puertos y pines de la f103


/* DEFINES */
#define DEBOUNCE_DELAY 40 // delay del sistema antirebote en milisegundos

// definicion de pines y puertos (NUCLEO-F103RB) para utilizar con esta libreria
// Parecen estar definidos con los mismos nombres para la F401, pero verificar.
#ifndef LD2_Pin
#define LD2_Pin GPIO_PIN_5
#endif

#ifndef LD2_GPIO_Port
#define LD2_GPIO_Port GPIOA
#endif

#ifndef B1_Pin
#define B1_Pin GPIO_PIN_13
#endif

#ifndef B1_GPIO_Port
#define B1_GPIO_Port GPIOC
#endif


/* FUNCTION PROTOTYPES */

/* debounceFSM_init
 * >> Utilizar esta funcion para inicializar la MEF a su estado inicial (BUTTON_UP)
 * >> Inicializa el delay (definido en DEBOUNCE_DELAY) a utilizar por la funcion debounceFSM_update()
 *
 */
void debounceFSM_init();

/* debounceFSM_update
 * >> Lee el estado del pulsador actualizando el estado del mismo segun debounceState_t
 * >> Actualiza la variable que lee readKey()=true al detectarse un flanco descendente del pulsador
 * >> La deteccion del flanco se realiza con el temporizado definido en DEBOUNCE_DELAY
 * */
void debounceFSM_update(); // leer entradas, logica de transicion de estados, actualizar salidas
void buttonPressed(); // enceder led
void buttonReleased(); // apagar led
bool_t readKey(); // registrar flanco descendente y devolver true. Resetear a false variable privada


